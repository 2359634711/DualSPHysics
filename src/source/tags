!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALMOSTZERO	Types.h	43;"	d
APP_DEFLOG	JAppInfo.h	34;"	d
AbortBoundOut	JSph.cpp	/^void JSph::AbortBoundOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code){$/;"	f	class:JSph	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
AbortBoundOut	JSph.h	/^  void AbortBoundOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
AbortBoundOut	JSphCpuSingle.cpp	/^void JSphCpuSingle::AbortBoundOut(){$/;"	f	class:JSphCpuSingle	signature:()
AbortBoundOut	JSphCpuSingle.h	/^  void AbortBoundOut();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
AbortBoundOut	JSphGpuSingle.cpp	/^void JSphGpuSingle::AbortBoundOut(){$/;"	f	class:JSphGpuSingle	signature:()
AbortBoundOut	JSphGpuSingle.h	/^  void AbortBoundOut();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
AccAng	JSphAccInput.h	/^  tfloat3 *AccAng;           \/\/\/<Angular acceleration variable to store values as they are read from the input files.$/;"	m	class:JSphAccInputMk	access:protected
AccCoG	JSphAccInput.h	/^  tfloat3 AccCoG;            \/\/\/<The centre of gravity that will be used for angular acceleration calculations.$/;"	m	class:JSphAccInputMk	access:protected
AccCount	JSphAccInput.h	/^  unsigned AccCount;         \/\/\/<Number of acceleration values in each input file(s).$/;"	m	class:JSphAccInputMk	access:protected
AccIndex	JSphAccInput.h	/^  unsigned AccIndex;         \/\/\/<Current index for variable acceleration interpolation.$/;"	m	class:JSphAccInputMk	access:protected
AccInput	JSph.h	/^  JSphAccInput *AccInput;  \/\/\/<Object for variable acceleration functionality.$/;"	m	class:JSph	access:protected
AccLin	JSphAccInput.h	/^  tfloat3 *AccLin;           \/\/\/<Linear acceleration variable to store values as they are read from the input files.$/;"	m	class:JSphAccInputMk	access:protected
AccSize	JSphAccInput.h	/^  unsigned AccSize;          \/\/\/<Number of acceleration values that were allocated.$/;"	m	class:JSphAccInputMk	access:protected
AccTime	JSphAccInput.h	/^  float *AccTime;            \/\/\/<Variable acceleration time evolution as detailed in the input file.$/;"	m	class:JSphAccInputMk	access:protected
Accept	tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlVisitor* content ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlText	access:public	signature:( TiXmlVisitor* content ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( TiXmlVisitor* content ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const = 0;$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlComment	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( TiXmlVisitor* visitor ) const
Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlElement	access:public	signature:( TiXmlVisitor* visitor ) const
Ace	JMotionMov.h	/^  const tdouble3 Ace;$/;"	m	class:JMotionMovRectAce	access:public
Ace2_Move1dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move1dt(const tdouble3 &mvsimple){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple)
Ace2_Move1dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move1dt(const tmatrix4d &mvmatrix){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix)
Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(const tdouble3 &mvsimple);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple)
Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(const tmatrix4d &mvmatrix);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix)
Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(unsigned ref,const tdouble3  &mvsimple){  MotionData[ref].Ace2_Move1dt(mvsimple);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple)
Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(unsigned ref,const tmatrix4d &mvmatrix){  MotionData[ref].Ace2_Move1dt(mvmatrix);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix)
Ace2_Move2dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move2dt(const tdouble3 &mvsimple){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple)
Ace2_Move2dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move2dt(const tmatrix4d &mvmatrix){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix)
Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(const tdouble3 &mvsimple);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple)
Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(const tmatrix4d &mvmatrix);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix)
Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(unsigned ref,const tdouble3  &mvsimple){  MotionData[ref].Ace2_Move2dt(mvsimple);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple)
Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(unsigned ref,const tmatrix4d &mvmatrix){  MotionData[ref].Ace2_Move2dt(mvmatrix);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix)
Ace2_PosMotion	JMotionList.cpp	/^void JMotionListData::Ace2_PosMotion(double dt){$/;"	f	class:JMotionListData	signature:(double dt)
Ace2_PosMotion	JMotionList.h	/^  void Ace2_PosMotion(double dt);$/;"	p	class:JMotionListData	access:public	signature:(double dt)
Ace2_PosMotion	JMotionList.h	/^  void Ace2_PosMotion(double dt){ for(unsigned c=0;c<Nref;c++)MotionData[c].Ace2_PosMotion(dt); }$/;"	f	class:JMotionList	access:public	signature:(double dt)
AceAng	JMotionMov.h	/^  const double AceAng;  \/\/-Siempre en grados\/s^2.$/;"	m	class:JMotionMovCirAce	access:public
AceAng	JMotionMov.h	/^  const double AceAng;  \/\/-Siempre en grados\/s^2.$/;"	m	class:JMotionMovRotAce	access:public
AceMax	JSaveDt.h	/^  StValue AceMax[SizeValues];           \/\/\/<AceMax [SizeValues].$/;"	m	class:JSaveDt	access:private
AceMax	JSphCpu.h	/^  double AceMax;        \/\/\/<Maximum value of Ace[] sqrt(ace.x^2 + ace.y^2 + ace.z^2) computed in Interaction_Forces().$/;"	m	class:JSphCpu	access:protected
AceMax	JSphGpu.h	/^  double AceMax;      \/\/\/<Maximum value of Ace[] (ace.x^2 + ace.y^2 + ace.z^2) computed in Interaction_Forces().$/;"	m	class:JSphGpu	access:protected
AceSimple	JMotionList.h	/^  tdouble3 AceSimple;$/;"	m	class:JMotionListData	access:private
Acec	JSphCpu.h	/^  tfloat3 *Acec;         \/\/\/<Sum of interaction forces | Acumula fuerzas de interaccion$/;"	m	class:JSphCpu	access:protected
Aceg	JSphGpu.h	/^  float3 *Aceg;      \/\/\/<Accumulates acceleration of the particles. | Acumula fuerzas de interaccion.$/;"	m	class:JSphGpu	access:protected
Active	JMotionList.h	/^  bool Active;$/;"	m	class:JMotionListData	access:private
Active	JMotionObj.h	/^  bool Active;$/;"	m	class:JMotionObj	access:public
Active	JTimeControl.h	/^  bool Active;$/;"	m	class:JTimeControl	access:protected
ActiveMotion	JSphMotion.h	/^  bool ActiveMotion;    \/\/\/<Indicates active motions after executing ProcesTime().$/;"	m	class:JSphMotion	access:private
ActiveMovs	JMotionObj.h	/^  std::vector<JMotionMovActive*> ActiveMovs;  \/\/-Movimientos activos$/;"	m	class:JMotionObj	access:private
Add	JSpaceEParms.cpp	/^void JSpaceEParms::Add(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment)
Add	JSpaceEParms.h	/^  void Add(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment="");$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment=Ó)
Add	JSpaceParts.cpp	/^void JSpaceParts::Add(JSpacePartBlock* block){$/;"	f	class:JSpaceParts	signature:(JSpacePartBlock* block)
Add	JSpaceParts.h	/^  void Add(JSpacePartBlock* block);$/;"	p	class:JSpaceParts	access:private	signature:(JSpacePartBlock* block)
Add	tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
Add	tinyxml.h	/^    void Add( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
AddAccInput	JSphCpu.cpp	/^void JSphCpu::AddAccInput(){$/;"	f	class:JSphCpu	signature:()
AddAccInput	JSphCpu.h	/^  void AddAccInput();$/;"	p	class:JSphCpu	access:protected	signature:()
AddAccInput	JSphGpu.cpp	/^void JSphGpu::AddAccInput(){$/;"	f	class:JSphGpu	signature:()
AddAccInput	JSphGpu.h	/^  void AddAccInput();$/;"	p	class:JSphGpu	access:protected	signature:()
AddAccInput	JSphGpu_ker.cu	/^void AddAccInput(unsigned n,unsigned pini,typecode codesel$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel ,tdouble3 acclin,tdouble3 accang,tdouble3 centre,tdouble3 velang,tdouble3 vellin,bool setgravity ,tfloat3 gravity,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
AddAccInput	JSphGpu_ker.h	/^void AddAccInput(unsigned n,unsigned pini,typecode codesel$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel ,tdouble3 acclin,tdouble3 accang,tdouble3 centre,tdouble3 velang,tdouble3 vellin,bool setgravity ,tfloat3 gravity,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
AddArrayCount	JArraysCpu.h	/^  void AddArrayCount(TpArraySize tsize,unsigned count=1){ SetArrayCount(tsize,GetArrayCount(tsize)+count); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize,unsigned count=1)
AddArrayCount	JArraysGpu.h	/^  void AddArrayCount(TpArraySize tsize,unsigned count=1){ SetArrayCount(tsize,GetArrayCount(tsize)+count); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize,unsigned count=1)
AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,bool v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,bool v)
AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,const std::string &v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,const std::string &v)
AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt)
AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,int v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,int v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const char *attrib,const char *v){ AddAttribute(ele,std::string(attrib),std::string(v)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char *attrib,const char *v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,bool v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,bool v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,const std::string &v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,const std::string &v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt="%g");$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt=Ó)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,int v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,int v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,unsigned v){ AddAttribute(ele,attrib,int(v)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,unsigned v)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,tdouble3 v,const char* name1="x",const char* name2="y",const char* name3="z",const char* fmt="%g"){ AddAttribute(ele,name1,v.x,fmt); AddAttribute(ele,name2,v.y,fmt); AddAttribute(ele,name3,v.z,fmt); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,tdouble3 v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó,const char* fmt=Ó)
AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,tfloat3 v,const char* name1="x",const char* name2="y",const char* name3="z",const char* fmt="%g"){ AddAttribute(ele,TDouble3(v.x,v.y,v.z),name1,name2,name3,fmt); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,tfloat3 v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó,const char* fmt=Ó)
AddAxis	JMotionObj.cpp	/^void JMotionObj::AddAxis(JMotionAxis* axis){  Axis.push_back(axis);    }$/;"	f	class:JMotionObj	signature:(JMotionAxis* axis)
AddAxis	JMotionObj.h	/^  void AddAxis(JMotionAxis* axis);$/;"	p	class:JMotionObj	access:public	signature:(JMotionAxis* axis)
AddChild	JMotionObj.cpp	/^void JMotionObj::AddChild(JMotionObj* obj){   Children.push_back(obj); }$/;"	f	class:JMotionObj	signature:(JMotionObj* obj)
AddChild	JMotionObj.h	/^  void AddChild(JMotionObj* obj);$/;"	p	class:JMotionObj	access:public	signature:(JMotionObj* obj)
AddData	JBinaryData.cpp	/^void JBinaryDataArray::AddData(unsigned count,const void* data,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const void* data,bool resize)
AddData	JBinaryData.h	/^  void AddData(unsigned count,const void* data,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const void* data,bool resize)
AddDelta	JSphGpu_ker.cu	/^void AddDelta(unsigned n,const float *delta,float *ar){$/;"	f	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
AddDelta	JSphGpu_ker.h	/^void AddDelta(unsigned n,const float *delta,float *ar);$/;"	p	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
AddElement	JXml.h	/^  static TiXmlElement* AddElement(TiXmlNode* node,const std::string &name){ TiXmlElement item(name.c_str()); return(node->InsertEndChild(item)->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name)
AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,const std::string &v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,const std::string &v)
AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,double v,const char* fmt="%g"){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v,fmt))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,double v,const char* fmt=Ó)
AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,int v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,int v)
AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,unsigned v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,unsigned v)
AddElementDouble3	JXml.h	/^  static TiXmlElement* AddElementDouble3(TiXmlNode* node,const std::string &name,const tdouble3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(node->InsertEndChild(MakeElementDouble3(name,v,name1,name2,name3))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tdouble3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
AddElementFloat3	JXml.h	/^  static TiXmlElement* AddElementFloat3(TiXmlNode* node,const std::string &name,const tfloat3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(AddElementDouble3(node,name,TDouble3(v.x,v.y,v.z),name1,name2,name3)); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tfloat3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
AddElementInt3	JXml.h	/^  static TiXmlElement* AddElementInt3(TiXmlNode* node,const std::string &name,const tint3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(node->InsertEndChild(MakeElementInt3(name,v,name1,name2,name3))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tint3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
AddElementMatrix3d	JXml.h	/^  static TiXmlElement* AddElementMatrix3d(TiXmlNode* node,const std::string &name,const tmatrix3d &v){ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tmatrix3d &v)
AddElementMatrixDouble	JXml.h	/^  static TiXmlElement* AddElementMatrixDouble(TiXmlNode* node,const std::string &name$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name ,unsigned nrows,unsigned ncols,const double* values)
AddEndl	JSaveCsv2.cpp	/^void JSaveCsv2::AddEndl(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
AddEndl	JSaveCsv2.h	/^  void AddEndl();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
AddEvent	JMotionObj.cpp	/^void JMotionObj::AddEvent(JMotionEvent* evt){ Events.push_back(evt);   }$/;"	f	class:JMotionObj	signature:(JMotionEvent* evt)
AddEvent	JMotionObj.h	/^  void AddEvent(JMotionEvent* evt);$/;"	p	class:JMotionObj	access:public	signature:(JMotionEvent* evt)
AddExtension	Functions.cpp	/^std::string AddExtension(const std::string &file,const std::string &ext){$/;"	f	namespace:fun	signature:(const std::string &file,const std::string &ext)
AddExtension	Functions.h	/^std::string AddExtension(const std::string &file,const std::string &ext);$/;"	p	namespace:fun	signature:(const std::string &file,const std::string &ext)
AddFile	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::AddFile(const std::string &fname,const std::string &mks){$/;"	f	class:JSpaceVtkOut	signature:(const std::string &fname,const std::string &mks)
AddFile	JSpaceVtkOut.h	/^  void AddFile(const std::string &fname,const std::string &mks);$/;"	p	class:JSpaceVtkOut	access:public	signature:(const std::string &fname,const std::string &mks)
AddFileInfo	JLog2.cpp	/^void JLog2::AddFileInfo(std::string fname,const std::string &finfo){$/;"	f	class:JLog2	signature:(std::string fname,const std::string &finfo)
AddFileInfo	JLog2.h	/^  void AddFileInfo(std::string fname,const std::string &finfo);$/;"	p	class:JLog2	access:public	signature:(std::string fname,const std::string &finfo)
AddFixed	JSpaceParts.h	/^  void AddFixed(word mktype,unsigned count){ Add(new JSpacePartBlock_Fixed(Properties,mktype,GetBegin(),count)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count)
AddFloating	JSpaceParts.h	/^  void AddFloating(word mktype,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini){ Add(new JSpacePartBlock_Floating(Properties,mktype,GetBegin(),count,massbody,center,inertia,velini,omegaini)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini)
AddFluid	JSpaceParts.h	/^  void AddFluid(word mktype,unsigned count){ Add(new JSpacePartBlock_Fluid(Properties,mktype,GetBegin(),count)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count)
AddGaugeForce	JGaugeSystem.cpp	/^JGaugeForce* JGaugeSystem::AddGaugeForce(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,const JSphMk* mkinfo,word mkbound)
AddGaugeForce	JGaugeSystem.h	/^  JGaugeForce*    AddGaugeForce(std::string name,double computestart,double computeend,double computedt,const JSphMk* mkinfo,word mkbound);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,const JSphMk* mkinfo,word mkbound)
AddGaugeMaxZ	JGaugeSystem.cpp	/^JGaugeMaxZ* JGaugeSystem::AddGaugeMaxZ(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,tdouble3 point0,double height,float distlimit)
AddGaugeMaxZ	JGaugeSystem.h	/^  JGaugeMaxZ*     AddGaugeMaxZ (std::string name,double computestart,double computeend,double computedt,tdouble3 point0,double height,float distlimit);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,tdouble3 point0,double height,float distlimit)
AddGaugeSwl	JGaugeSystem.cpp	/^JGaugeSwl* JGaugeSystem::AddGaugeSwl(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit)
AddGaugeSwl	JGaugeSystem.h	/^  JGaugeSwl*      AddGaugeSwl  (std::string name,double computestart,double computeend,double computedt,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit=0);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit=0)
AddGaugeVel	JGaugeSystem.cpp	/^JGaugeVelocity* JGaugeSystem::AddGaugeVel(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,const tdouble3 &point)
AddGaugeVel	JGaugeSystem.h	/^  JGaugeVelocity* AddGaugeVel  (std::string name,double computestart,double computeend,double computedt,const tdouble3 &point);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,const tdouble3 &point)
AddHeadData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::AddHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius)
AddHeadData	JPartFloatBi4.h	/^  void AddHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius)
AddKernel	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::AddKernel(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault){ $/;"	f	class:JBlockSizeAuto	signature:(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault)
AddKernel	JBlockSizeAuto.h	/^  void AddKernel(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault);$/;"	p	class:JBlockSizeAuto	access:public	signature:(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault)
AddLastValues	JSaveDt.cpp	/^void JSaveDt::AddLastValues(){$/;"	f	class:JSaveDt	signature:()
AddLastValues	JSaveDt.h	/^  void AddLastValues();$/;"	p	class:JSaveDt	access:private	signature:()
AddLink	JSpaceProperties.cpp	/^void JSpacePropLinks::AddLink(JSpacePropLink::TpLink type,std::string mks,std::string props){$/;"	f	class:JSpacePropLinks	signature:(JSpacePropLink::TpLink type,std::string mks,std::string props)
AddLink	JSpaceProperties.cpp	/^void JSpaceProperties::AddLink(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
AddLink	JSpaceProperties.h	/^  void AddLink(JSpacePropLink::TpLink type,std::string mks,std::string props);$/;"	p	class:JSpacePropLinks	access:public	signature:(JSpacePropLink::TpLink type,std::string mks,std::string props)
AddLink	JSpaceProperties.h	/^  void AddLink(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
AddLinkBound	JSpaceProperties.cpp	/^void JSpaceProperties::AddLinkBound(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
AddLinkBound	JSpaceProperties.h	/^  void AddLinkBound(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
AddLinkFluid	JSpaceProperties.cpp	/^void JSpaceProperties::AddLinkFluid(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
AddLinkFluid	JSpaceProperties.h	/^  void AddLinkFluid(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
AddMov	JMotionObj.cpp	/^void JMotionObj::AddMov(JMotionMov* mov){     Movs.push_back(mov);     }$/;"	f	class:JMotionObj	signature:(JMotionMov* mov)
AddMov	JMotionObj.h	/^  void AddMov(JMotionMov* mov);$/;"	p	class:JMotionObj	access:public	signature:(JMotionMov* mov)
AddMoving	JSpaceParts.h	/^  void AddMoving(word mktype,unsigned count,unsigned refmotion){ Add(new JSpacePartBlock_Moving(Properties,mktype,GetBegin(),count,refmotion)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count,unsigned refmotion)
AddNameExtra	JAppInfo.cpp	/^void JAppInfo::AddNameExtra(std::string extra){$/;"	f	class:JAppInfo	signature:(std::string extra)
AddNameExtra	JAppInfo.h	/^  void AddNameExtra(std::string extra);$/;"	p	class:JAppInfo	access:public	signature:(std::string extra)
AddOutCount	JSph.h	/^  void AddOutCount(unsigned outpos,unsigned outrhop,unsigned outmove){ OutPosCount+=outpos; OutRhopCount+=outrhop; OutMoveCount+=outmove; }$/;"	f	class:JSph	access:private	signature:(unsigned outpos,unsigned outrhop,unsigned outmove)
AddPartData	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartData(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const byte     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUchar  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const byte *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const char     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatChar   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const char *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const double   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatDouble ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const double *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const float    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatFloat  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const float *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const int      *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatInt    ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const int *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const llong    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatLlong  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const llong *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const short    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatShort  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const short *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tdouble3 *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatDouble3,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tdouble3 *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tfloat3  *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatFloat3 ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tfloat3 *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tint3    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatInt3   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tint3 *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tuint3   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUint3  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tuint3 *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const ullong   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUllong ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const ullong *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const unsigned *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUint   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const unsigned *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const word     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUshort ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const word *v,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const ullong   *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,NULL,idpd,NULL,posd,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const ullong   *idpd,const tfloat3  *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,NULL,idpd,pos ,NULL,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const ullong *idpd,const tfloat3 *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp, const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,idp ,NULL,NULL,posd,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const unsigned *idp, const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp, const tfloat3  *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,idp ,NULL,pos ,NULL,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const unsigned *idp, const tfloat3 *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true)
AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:private	signature:(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
AddPartData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::AddPartData(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega)
AddPartData	JPartFloatBi4.h	/^  void AddPartData(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega)
AddPartDataSplitting	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartDataSplitting(unsigned npok,const float *mass,const float *hvar,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(unsigned npok,const float *mass,const float *hvar,bool externalpointer)
AddPartDataSplitting	JPartDataBi4.h	/^  void AddPartDataSplitting(unsigned npok,const float *mass,const float *hvar,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned npok,const float *mass,const float *hvar,bool externalpointer=true)
AddPartDataVar	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartDataVar(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer)
AddPartDataVar	JPartDataBi4.h	/^  void AddPartDataVar(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer=true)
AddPartFloat	JPartFloatBi4.cpp	/^JBinaryData* JPartFloatBi4Save::AddPartFloat(unsigned cpart,double timestep,double demdtforce){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cpart,double timestep,double demdtforce)
AddPartFloat	JPartFloatBi4.h	/^  JBinaryData* AddPartFloat(unsigned cpart,double timestep,double demdtforce);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cpart,double timestep,double demdtforce)
AddPartInfo	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::AddPartInfo(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal,ullong idmax){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal,ullong idmax)
AddPartInfo	JPartDataBi4.h	/^  JBinaryData* AddPartInfo(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal=0,ullong idmax=0);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal=0,ullong idmax=0)
AddPartOut	JPartOutBi4Save.cpp	/^JBinaryData* JPartOutBi4Save::AddPartOut(unsigned cpart,double timestep,unsigned nout$/;"	f	class:JPartOutBi4Save	signature:(unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd ,const tfloat3 *vel,const float *rhop,const byte *motive)
AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout$/;"	p	class:JPartOutBi4Save	access:private	signature:(unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd ,const tfloat3 *vel,const float *rhop,const byte *motive)
AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,NULL,idpd,NULL,posd,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,NULL,idpd,pos ,NULL,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,idp ,NULL,NULL,posd,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,idp ,NULL,pos ,NULL,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
AddParticles	JPartsOut.cpp	/^void JPartsOut::AddParticles(unsigned np,const unsigned* idp,const tdouble3* pos$/;"	f	class:JPartsOut	signature:(unsigned np,const unsigned* idp,const tdouble3* pos ,const tfloat3* vel,const float* rhop,const typecode* code)
AddParticles	JPartsOut.h	/^  void AddParticles(unsigned np,const unsigned* idp,const tdouble3* pos,const tfloat3* vel,const float* rhop,const typecode* code);$/;"	p	class:JPartsOut	access:public	signature:(unsigned np,const unsigned* idp,const tdouble3* pos,const tfloat3* vel,const float* rhop,const typecode* code)
AddParticlesOut	JSph.cpp	/^void JSph::AddParticlesOut(unsigned nout,const unsigned *idp,const tdouble3 *pos$/;"	f	class:JSph	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos ,const tfloat3 *vel,const float *rhop,const typecode *code)
AddParticlesOut	JSph.h	/^  void AddParticlesOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
AddProperty	JSpaceProperties.cpp	/^JSpacePropProperty* JSpaceProperties::AddProperty(std::string name){$/;"	f	class:JSpaceProperties	signature:(std::string name)
AddProperty	JSpaceProperties.h	/^  JSpacePropProperty* AddProperty(std::string name);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string name)
AddPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::AddPropertyFile(std::string file,std::string path){$/;"	f	class:JSpaceProperties	signature:(std::string file,std::string path)
AddPropertyFile	JSpaceProperties.h	/^  void AddPropertyFile(std::string file,std::string path);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string file,std::string path)
AddRange	JRangeFilter.cpp	/^void JRangeFilter::AddRange(unsigned v,unsigned v2){$/;"	f	class:JRangeFilter	signature:(unsigned v,unsigned v2)
AddRange	JRangeFilter.h	/^  void AddRange(unsigned v,unsigned v2);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v,unsigned v2)
AddRangeStep	JRangeFilter.cpp	/^void JRangeFilter::AddRangeStep(unsigned v,unsigned v2,unsigned step){ $/;"	f	class:JRangeFilter	signature:(unsigned v,unsigned v2,unsigned step)
AddRangeStep	JRangeFilter.h	/^  void AddRangeStep(unsigned v,unsigned v2,unsigned step);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v,unsigned v2,unsigned step)
AddSeparator	JSaveCsv2.cpp	/^void JSaveCsv2::AddSeparator(unsigned count){$/;"	f	class:jcsv::JSaveCsv2	signature:(unsigned count)
AddSeparator	JSaveCsv2.h	/^  void AddSeparator(unsigned count);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(unsigned count)
AddShape_Circle	JFormatFiles2.h	/^  static void AddShape_Circle(std::vector<StShapeData> &shapes,bool circle$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes,bool circle ,const tdouble3 &pt,double radius,const tdouble3 &vec,int nside,int value,float valuef)
AddShape_Circle	JFormatFiles2.h	/^  static void AddShape_Circle(std::vector<StShapeData> &shapes,bool circle$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes,bool circle ,const tfloat3 &pt,float radius,const tfloat3 &vec,int nside,int value,float valuef)
AddShape_Cross	JFormatFiles2.h	/^  static void AddShape_Cross(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,double radius,int value,float valuef)
AddShape_Cross	JFormatFiles2.h	/^  static void AddShape_Cross(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,float radius,int value,float valuef)
AddShape_Cylinder	JFormatFiles2.h	/^  static void AddShape_Cylinder(std::vector<JFormatFiles2::StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<JFormatFiles2::StShapeData> &shapes ,const tfloat3 &p1,const tfloat3 &p2,float radius,int nside,unsigned maskfaceshide,int value,float valuef)
AddShape_Cylinder	JFormatFiles2.h	/^  static void AddShape_Cylinder(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &p1,const tdouble3 &p2,double radius,int nside,unsigned maskfaceshide,int value,float valuef)
AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)
AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,const tdouble3 &pt3,const tdouble3 &pt4,int value,float valuef)
AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef)
AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &pt2,const tfloat3 &pt3,const tfloat3 &pt4,int value,float valuef)
AddShape_Sphere	JFormatFiles2.h	/^  static void AddShape_Sphere(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,double radius,int nside,int value,float valuef)
AddShape_Sphere	JFormatFiles2.h	/^  static void AddShape_Sphere(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,float radius,int nside,int value,float valuef)
AddShape_Spring	JFormatFiles2.h	/^  static void AddShape_Spring(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,double restlength,double scalesize ,StShapeSpring config,int value,float valuef)
AddShape_Spring	JFormatFiles2.h	/^  static void AddShape_Spring(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &p2,float restlength,float scalesize ,StShapeSpring config,int value,float valuef)
AddShape_TriangleLines	JFormatFiles2.h	/^  static void AddShape_TriangleLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,const tdouble3 &pt3,int value,float valuef)
AddShape_TriangleLines	JFormatFiles2.h	/^  static void AddShape_TriangleLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &pt2,const tfloat3 &pt3,int value,float valuef)
AddStr	JSaveCsv2.cpp	/^void JSaveCsv2::AddStr(std::string tx){$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string tx)
AddStr	JSaveCsv2.h	/^  void AddStr(std::string tx);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(std::string tx)
AddSubValue	JSpaceProperties.cpp	/^void JSpacePropProperty::AddSubValue(std::string name,std::string subname,std::string v){$/;"	f	class:JSpacePropProperty	signature:(std::string name,std::string subname,std::string v)
AddSubValue	JSpaceProperties.cpp	/^void JSpacePropValue::AddSubValue(std::string subname,std::string v){$/;"	f	class:JSpacePropValue	signature:(std::string subname,std::string v)
AddSubValue	JSpaceProperties.h	/^  void AddSubValue(std::string name,std::string subname,std::string v);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name,std::string subname,std::string v)
AddSubValue	JSpaceProperties.h	/^  void AddSubValue(std::string subname,std::string v);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname,std::string v)
AddText	JBinaryData.cpp	/^void JBinaryDataArray::AddText(const std::string &str,bool resize){$/;"	f	class:JBinaryDataArray	signature:(const std::string &str,bool resize)
AddText	JBinaryData.h	/^  void AddText(const std::string &str,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(const std::string &str,bool resize)
AddTexts	JBinaryData.cpp	/^void JBinaryDataArray::AddTexts(unsigned count,const std::string *strs,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const std::string *strs,bool resize)
AddTexts	JBinaryData.h	/^  void AddTexts(unsigned count,const std::string *strs,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const std::string *strs,bool resize)
AddTimeOut	JTimeOut.cpp	/^bool JTimeOut::AddTimeOut(double t,double tout){$/;"	f	class:JTimeOut	signature:(double t,double tout)
AddTimeOut	JTimeOut.h	/^  bool AddTimeOut(double t,double tout);$/;"	p	class:JTimeOut	access:protected	signature:(double t,double tout)
AddTimeValue	JLinearValue.cpp	/^unsigned JLinearValue::AddTimeValue(double time,double value){$/;"	f	class:JLinearValue	signature:(double time,double value)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value);$/;"	p	class:JLinearValue	access:public	signature:(double time,double value)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2){ const unsigned idx=AddTimeValue(time,value); SetValue(idx,1,value2); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3){ const unsigned idx=AddTimeValue(time,value,value2); SetValue(idx,2,value3); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4){ const unsigned idx=AddTimeValue(time,value,value2,value3); SetValue(idx,3,value4); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4,double value5){ const unsigned idx=AddTimeValue(time,value,value2,value3,value4); SetValue(idx,4,value5); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4,double value5)
AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4,double value5,double value6){ const unsigned idx=AddTimeValue(time,value,value2,value3,value4,value5); SetValue(idx,5,value6); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4,double value5,double value6)
AddValue	JMeanValues.cpp	/^void JMeanMoving::AddValue(double v){ $/;"	f	class:JMeanMoving	signature:(double v)
AddValue	JMeanValues.h	/^  void AddValue(double v);$/;"	p	class:JMeanMoving	access:public	signature:(double v)
AddValue	JMeanValues.h	/^  void AddValue(double v){ $/;"	f	class:JMeanValue	access:public	signature:(double v)
AddValue	JRangeFilter.cpp	/^void JRangeFilter::AddValue(unsigned v){$/;"	f	class:JRangeFilter	signature:(unsigned v)
AddValue	JRangeFilter.h	/^  void AddValue(unsigned v);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v)
AddValue	JSpaceProperties.cpp	/^void JSpacePropProperty::AddValue(std::string name,std::string v){$/;"	f	class:JSpacePropProperty	signature:(std::string name,std::string v)
AddValue	JSpaceProperties.h	/^  void AddValue(std::string name,std::string v);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name,std::string v)
AddValueData	JSaveDt.cpp	/^void JSaveDt::AddValueData(double timestep,double dt,StValue &value){$/;"	f	class:JSaveDt	signature:(double timestep,double dt,StValue &value)
AddValueData	JSaveDt.h	/^  void AddValueData(double timestep,double dt,StValue &value);$/;"	p	class:JSaveDt	access:private	signature:(double timestep,double dt,StValue &value)
AddValues	JSaveDt.cpp	/^void JSaveDt::AddValues(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax){$/;"	f	class:JSaveDt	signature:(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax)
AddValues	JSaveDt.h	/^  void AddValues(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax);$/;"	p	class:JSaveDt	access:public	signature:(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax)
AddWarning	JLog2.cpp	/^void JLog2::AddWarning(const std::string &tx){$/;"	f	class:JLog2	signature:(const std::string &tx)
AddWarning	JLog2.h	/^  void AddWarning(const std::string &tx);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx)
Agau	JSph.h	/^  float Agau;                 \/\/\/<Gaussian kernel constant to compute wab.                               | Constante para calcular wab con kernel Gaussian.$/;"	m	class:JSph	access:protected
AllDt	JSaveDt.h	/^  bool AllDt;$/;"	m	class:JSaveDt	access:private
AllDts	JSaveDt.h	/^  tdouble2 AllDts[SizeAllDts];           $/;"	m	class:JSaveDt	access:private
AllocCpuMemoryFixed	JSphCpu.cpp	/^void JSphCpu::AllocCpuMemoryFixed(){$/;"	f	class:JSphCpu	signature:()
AllocCpuMemoryFixed	JSphCpu.h	/^  void AllocCpuMemoryFixed();$/;"	p	class:JSphCpu	access:protected	signature:()
AllocCpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::AllocCpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
AllocCpuMemoryFixed	JSphGpu.h	/^  void AllocCpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
AllocCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::AllocCpuMemoryParticles(unsigned np,float over){$/;"	f	class:JSphCpu	signature:(unsigned np,float over)
AllocCpuMemoryParticles	JSphCpu.h	/^  void AllocCpuMemoryParticles(unsigned np,float over);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,float over)
AllocCpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::AllocCpuMemoryParticles(unsigned np){$/;"	f	class:JSphGpu	signature:(unsigned np)
AllocCpuMemoryParticles	JSphGpu.h	/^  void AllocCpuMemoryParticles(unsigned np);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np)
AllocFullNct	JCellDivCpu.h	/^  bool AllocFullNct;     \/\/\/<Resserve memory for max number of cells of domain (DomCells). | Reserva memoria para el numero maximo de celdas del dominio (DomCells).$/;"	m	class:JCellDivCpu	access:protected
AllocFullNct	JCellDivGpu.h	/^  bool AllocFullNct;     \/\/\/<Resserve memory for max number of cells of domain (DomCells). | Reserva memoria para el numero maximo de celdas del dominio (DomCells).$/;"	m	class:JCellDivGpu	access:protected
AllocGpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::AllocGpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
AllocGpuMemoryFixed	JSphGpu.h	/^  void AllocGpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
AllocGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::AllocGpuMemoryParticles(unsigned np,float over){$/;"	f	class:JSphGpu	signature:(unsigned np,float over)
AllocGpuMemoryParticles	JSphGpu.h	/^  void AllocGpuMemoryParticles(unsigned np,float over);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,float over)
AllocMemory	JBinaryData.cpp	/^void JBinaryDataArray::AllocMemory(unsigned size,bool savedata){$/;"	f	class:JBinaryDataArray	signature:(unsigned size,bool savedata)
AllocMemory	JBinaryData.h	/^  void AllocMemory(unsigned size,bool savedata=false);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,bool savedata=false)
AllocMemory	JPartsLoad4.cpp	/^void JPartsLoad4::AllocMemory(unsigned count){$/;"	f	class:JPartsLoad4	signature:(unsigned count)
AllocMemory	JPartsLoad4.h	/^  void AllocMemory(unsigned count);$/;"	p	class:JPartsLoad4	access:protected	signature:(unsigned count)
AllocMemory	JPartsOut.cpp	/^void JPartsOut::AllocMemory(unsigned size,bool reset){$/;"	f	class:JPartsOut	signature:(unsigned size,bool reset)
AllocMemory	JPartsOut.h	/^  void AllocMemory(unsigned size,bool reset);$/;"	p	class:JPartsOut	access:protected	signature:(unsigned size,bool reset)
AllocMemory	JRadixSort.cpp	/^void JRadixSort::AllocMemory(unsigned s){$/;"	f	class:JRadixSort	signature:(unsigned s)
AllocMemory	JRadixSort.h	/^  void AllocMemory(unsigned s);$/;"	p	class:JRadixSort	access:private	signature:(unsigned s)
AllocMemoryFloating	JSph.cpp	/^void JSph::AllocMemoryFloating(unsigned ftcount){$/;"	f	class:JSph	signature:(unsigned ftcount)
AllocMemoryFloating	JSph.h	/^  void AllocMemoryFloating(unsigned ftcount);$/;"	p	class:JSph	access:protected	signature:(unsigned ftcount)
AllocMemoryGpu	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::AllocMemoryGpu(unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(unsigned sizewavecoefs)
AllocMemoryGpu	JWaveSpectrumGpu.h	/^  void AllocMemoryGpu(unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(unsigned sizewavecoefs)
AllocMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::AllocMemoryNct(ullong nct){$/;"	f	class:JCellDivCpu	signature:(ullong nct)
AllocMemoryNct	JCellDivCpu.h	/^  void AllocMemoryNct(ullong nct);$/;"	p	class:JCellDivCpu	access:protected	signature:(ullong nct)
AllocMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::AllocMemoryNct(ullong nct){$/;"	f	class:JCellDivGpu	signature:(ullong nct)
AllocMemoryNct	JCellDivGpu.h	/^  void AllocMemoryNct(ullong nct);$/;"	p	class:JCellDivGpu	access:protected	signature:(ullong nct)
AllocMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::AllocMemoryNp(ullong np){$/;"	f	class:JCellDivCpu	signature:(ullong np)
AllocMemoryNp	JCellDivCpu.h	/^  void AllocMemoryNp(ullong np);$/;"	p	class:JCellDivCpu	access:protected	signature:(ullong np)
AllocMemoryNp	JCellDivGpu.cpp	/^void JCellDivGpu::AllocMemoryNp(ullong np){$/;"	f	class:JCellDivGpu	signature:(ullong np)
AllocMemoryNp	JCellDivGpu.h	/^  void AllocMemoryNp(ullong np);$/;"	p	class:JCellDivGpu	access:protected	signature:(ullong np)
AllocPointer	JArraysCpu.cpp	/^void* JArraysCpuSize::AllocPointer(unsigned size)const{$/;"	f	class:JArraysCpuSize	signature:(unsigned size) const
AllocPointer	JArraysCpu.h	/^  void* AllocPointer(unsigned size)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(unsigned size) const
AllocPointer	JBinaryData.cpp	/^void* JBinaryDataArray::AllocPointer(unsigned size)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned size) const
AllocPointer	JBinaryData.h	/^  void* AllocPointer(unsigned size)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned size) const
AllocateInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::AllocateInfoData(unsigned nlines){$/;"	f	class:JBlockSizeAutoKer	signature:(unsigned nlines)
AllocateInfoData	JBlockSizeAuto.h	/^  void AllocateInfoData(unsigned nlines);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned nlines)
AllocateMemory	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::AllocateMemory(unsigned size){$/;"	f	class:JBlockSizeAutoKer	signature:(unsigned size)
AllocateMemory	JBlockSizeAuto.h	/^  void AllocateMemory(unsigned size);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned size)
Ampl	JMotionMov.h	/^  const double Ampl;  \/\/-Amplitude, siempre en grados.$/;"	m	class:JMotionMovCirSinu	access:public
Ampl	JMotionMov.h	/^  const double Ampl;  \/\/-Amplitude, siempre en grados.$/;"	m	class:JMotionMovRotSinu	access:public
Ampl	JMotionMov.h	/^  const tdouble3 Ampl;  \/\/-Amplitude, siempre en metros.$/;"	m	class:JMotionMovRectSinu	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees; \/\/-Independientemente de AngDegrees, todos los valores se guardan en grados.$/;"	m	class:JMotionMovCirSinu	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovCir	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovCirAce	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRectSinu	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRot	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotAce	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotFile	access:public
AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotSinu	access:public
AnglePlanes	FunctionsMath.h	/^inline double AnglePlanes(tdouble4 v1,tdouble4 v2){$/;"	f	namespace:fmath	signature:(tdouble4 v1,tdouble4 v2)
AnglePlanes	FunctionsMath.h	/^inline float AnglePlanes(tfloat4 v1,tfloat4 v2){$/;"	f	namespace:fmath	signature:(tfloat4 v1,tfloat4 v2)
AngleVector	FunctionsMath.h	/^inline double AngleVector(const tdouble3 &v1,const tdouble3 &v2){$/;"	f	namespace:fmath	signature:(const tdouble3 &v1,const tdouble3 &v2)
AngleVector	FunctionsMath.h	/^inline float AngleVector(const tfloat3 &v1,const tfloat3 &v2){$/;"	f	namespace:fmath	signature:(const tfloat3 &v1,const tfloat3 &v2)
App	JSaveCsv2.h	/^  const bool App;          \/\/\/<Append mode enabled.$/;"	m	class:jcsv::JSaveCsv2	access:private
AppName	JPartDataHead.h	/^  std::string AppName;$/;"	m	class:JPartDataHead	access:private
AppName	JPartFloatBi4.h	/^  std::string AppName;   \/\/\/<Nombre de aplicacion. Application Name.$/;"	m	class:JPartFloatBi4Save	access:private
AppName	JSph.h	/^  std::string AppName;$/;"	m	class:JSph	access:protected
AppendMode	JSaveCsv2.h	/^  bool AppendMode;         \/\/\/<File already exists and was opened to append data.$/;"	m	class:jcsv::JSaveCsv2	access:private
Arc	JSphCpu.h	/^  float *Arc; $/;"	m	class:JSphCpu	access:protected
AreaTriangle	FunctionsMath.cpp	/^double AreaTriangle(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
AreaTriangle	FunctionsMath.cpp	/^float AreaTriangle(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
AreaTriangle	FunctionsMath.h	/^double AreaTriangle(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
AreaTriangle	FunctionsMath.h	/^float AreaTriangle(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
Arg	JSphGpu.h	/^  float *Arg; $/;"	m	class:JSphGpu	access:protected
ArrayExists	JPartDataBi4.cpp	/^bool JPartDataBi4::ArrayExists(std::string name)const{$/;"	f	class:JPartDataBi4	signature:(std::string name) const
ArrayExists	JPartDataBi4.h	/^  bool ArrayExists(std::string name)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name) const
ArrayName	JPartDataBi4.cpp	/^std::string JPartDataBi4::ArrayName(unsigned num)const{$/;"	f	class:JPartDataBi4	signature:(unsigned num) const
ArrayName	JPartDataBi4.h	/^  std::string ArrayName(unsigned num)const;$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned num) const
ArraySize	JArraysCpu.h	/^  unsigned ArraySize;$/;"	m	class:JArraysCpuSize	access:protected
ArraySize	JArraysGpu.h	/^  unsigned ArraySize;$/;"	m	class:JArraysGpuSize	access:protected
ArrayTriple	JPartDataBi4.cpp	/^bool JPartDataBi4::ArrayTriple(unsigned num)const{$/;"	f	class:JPartDataBi4	signature:(unsigned num) const
ArrayTriple	JPartDataBi4.h	/^  bool ArrayTriple(unsigned num)const;$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned num) const
Arrays	JBinaryData.h	/^  std::vector<JBinaryDataArray*> Arrays;$/;"	m	class:JBinaryData	access:private
Arrays12b	JArraysCpu.h	/^  JArraysCpuSize *Arrays12b;$/;"	m	class:JArraysCpu	access:protected
Arrays12b	JArraysGpu.h	/^  JArraysGpuSize *Arrays12b;$/;"	m	class:JArraysGpu	access:protected
Arrays16b	JArraysCpu.h	/^  JArraysCpuSize *Arrays16b;$/;"	m	class:JArraysCpu	access:protected
Arrays16b	JArraysGpu.h	/^  JArraysGpuSize *Arrays16b;$/;"	m	class:JArraysGpu	access:protected
Arrays1b	JArraysCpu.h	/^  JArraysCpuSize *Arrays1b;$/;"	m	class:JArraysCpu	access:protected
Arrays1b	JArraysGpu.h	/^  JArraysGpuSize *Arrays1b;$/;"	m	class:JArraysGpu	access:protected
Arrays24b	JArraysCpu.h	/^  JArraysCpuSize *Arrays24b;$/;"	m	class:JArraysCpu	access:protected
Arrays24b	JArraysGpu.h	/^  JArraysGpuSize *Arrays24b;$/;"	m	class:JArraysGpu	access:protected
Arrays2b	JArraysCpu.h	/^  JArraysCpuSize *Arrays2b;$/;"	m	class:JArraysCpu	access:protected
Arrays2b	JArraysGpu.h	/^  JArraysGpuSize *Arrays2b;$/;"	m	class:JArraysGpu	access:protected
Arrays32b	JArraysCpu.h	/^  JArraysCpuSize *Arrays32b;$/;"	m	class:JArraysCpu	access:protected
Arrays32b	JArraysGpu.h	/^  JArraysGpuSize *Arrays32b;$/;"	m	class:JArraysGpu	access:protected
Arrays4b	JArraysCpu.h	/^  JArraysCpuSize *Arrays4b;$/;"	m	class:JArraysCpu	access:protected
Arrays4b	JArraysGpu.h	/^  JArraysGpuSize *Arrays4b;$/;"	m	class:JArraysGpu	access:protected
Arrays8b	JArraysCpu.h	/^  JArraysCpuSize *Arrays8b;$/;"	m	class:JArraysCpu	access:protected
Arrays8b	JArraysGpu.h	/^  JArraysGpuSize *Arrays8b;$/;"	m	class:JArraysGpu	access:protected
ArraysCount	JPartDataBi4.cpp	/^unsigned JPartDataBi4::ArraysCount()const{$/;"	f	class:JPartDataBi4	signature:() const
ArraysCount	JPartDataBi4.h	/^  unsigned ArraysCount()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
ArraysCpu	JSphCpu.h	/^  JArraysCpu* ArraysCpu;$/;"	m	class:JSphCpu	access:protected
ArraysGpu	JSphGpu.h	/^  JArraysGpu* ArraysGpu;$/;"	m	class:JSphGpu	access:protected
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
Attribute	tinyxml.h	/^    const char* Attribute( const char* name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name ) const
Attribute	tinyxml.h	/^    const char* Attribute( const char* name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* d ) const
Attribute	tinyxml.h	/^    const char* Attribute( const char* name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* i ) const
Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name ) const
Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* d ) const
Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* i ) const
AutoSepEnable	JSaveCsv2.h	/^  bool AutoSepEnable; \/\/\/<Enable or disable auto separator change according configuration (def=true).$/;"	m	class:jcsv::JSaveCsv2	access:private
AutoSepOff	JSaveCsv2.h	/^  AutoSepOff(){};$/;"	f	class:jcsv::AutoSepOff	access:public	signature:()
AutoSepOff	JSaveCsv2.h	/^class AutoSepOff{$/;"	c	namespace:jcsv
AutoSepOn	JSaveCsv2.h	/^  AutoSepOn(){};$/;"	f	class:jcsv::AutoSepOn	access:public	signature:()
AutoSepOn	JSaveCsv2.h	/^class AutoSepOn{$/;"	c	namespace:jcsv
AuxMem	JCellDivGpu.h	/^  float *AuxMem;$/;"	m	class:JCellDivGpu	access:protected
AuxMemoryg	JGaugeSystem.h	/^  float3* AuxMemoryg;  \/\/\/<Auxiliary allocated memory on GPU [1].$/;"	m	class:JGaugeSystem	access:private
AuxPos	JSphGpu.h	/^  tdouble3 *AuxPos;$/;"	m	class:JSphGpu	access:protected
AuxRhop	JSphGpu.h	/^  float *AuxRhop;$/;"	m	class:JSphGpu	access:protected
AuxVel	JSphGpu.h	/^  tfloat3 *AuxVel; $/;"	m	class:JSphGpu	access:protected
Auxg	JGaugeItem.h	/^  float3 *Auxg;$/;"	m	class:JGaugeForce	access:protected
Awen	JGaugeItem.h	/^  float Awen;$/;"	m	class:JGaugeItem	access:protected
Awen	JSph.h	/^  float Awen;                 \/\/\/<Wendland kernel constant (awen) to compute wab.                        | Constante para calcular wab con kernel Wendland.$/;"	m	class:JSph	access:protected
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCir	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCirAce	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCirSinu	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRot	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotAce	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotFile	access:public
Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotSinu	access:public
Axis	JMotionObj.h	/^  std::vector<JMotionAxis*> Axis;     \/\/-Ejes asociados$/;"	m	class:JMotionObj	access:private
AxisAdd	JMotion.cpp	/^JMotionAxis* JMotion::AxisAdd(unsigned objid,const tdouble3 &p1,const tdouble3 &p2){$/;"	f	class:JMotion	signature:(unsigned objid,const tdouble3 &p1,const tdouble3 &p2)
AxisAdd	JMotion.h	/^  JMotionAxis* AxisAdd(unsigned objid,const tdouble3 &p1,const tdouble3 &p2);$/;"	p	class:JMotion	access:private	signature:(unsigned objid,const tdouble3 &p1,const tdouble3 &p2)
AxisGetPointer	JMotionObj.cpp	/^JMotionAxis* JMotionObj::AxisGetPointer(const tdouble3 &p1,const tdouble3 &p2)const{$/;"	f	class:JMotionObj	signature:(const tdouble3 &p1,const tdouble3 &p2) const
AxisGetPointer	JMotionObj.h	/^  JMotionAxis* AxisGetPointer(const tdouble3 &p1,const tdouble3 &p2)const;$/;"	p	class:JMotionObj	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2) const
B	JPartDataHead.h	/^  double B;$/;"	m	class:JPartDataHead	access:private
B	JSpaceCtes.h	/^  double B;               \/\/\/<Constant that sets a limit for the maximum change in density.$/;"	m	class:JSpaceCtes	access:private
BAuto	JSpaceCtes.h	/^  bool BAuto;             \/\/\/<Activates the automatic computation of B.$/;"	m	class:JSpaceCtes	access:private
BLOCKNOUTMAX	JPartOutBi4Save.h	/^  static const unsigned BLOCKNOUTMAX=2500000;  \/\/-Valor por defecto para BlockNoutMax. 2.5M (90-120 MB). Default value for BlockNoutMin.  2.5M (90-120 MB).$/;"	m	class:JPartOutBi4Save	access:private
BLOCKNOUTMIN	JPartOutBi4Save.h	/^  static const unsigned BLOCKNOUTMIN=500000;      \/\/-Valor por defecto para BlockNoutMin. 0.5M (18-24 MB). Default value for BlockNoutMin. 0.5 M (18-24 MB).$/;"	m	class:JPartOutBi4Save	access:private
BORDER_MAP	Types.h	41;"	d
BRandom	randomc.cpp	/^uint32_t CRandomMersenne::BRandom() {$/;"	f	class:CRandomMersenne	signature:()
BRandom	randomc.h	/^   uint32_t BRandom();                 \/\/ Output random bits$/;"	p	class:CRandomMersenne	access:public	signature:()
BRandom	randomc.h	/^   uint32_t BRandom();                 \/\/ Output random bits$/;"	p	class:CRandomMother	access:public	signature:()
BSIZEMODE_Empirical	Types.h	/^  ,BSIZEMODE_Empirical=2   \/\/\/<Calculated empirically.$/;"	e	enum:__anon56
BSIZEMODE_Fixed	Types.h	/^   BSIZEMODE_Fixed=0       \/\/\/<Uses fixed value (BSIZE_FIXED).$/;"	e	enum:__anon56
BSIZEMODE_Occupancy	Types.h	/^  ,BSIZEMODE_Occupancy=1   \/\/\/<Uses Occupancy calculator of CUDA.$/;"	e	enum:__anon56
BSIZE_FIXED	Types.h	248;"	d
Begin	JPartDataHead.h	/^  unsigned Begin;     \/\/\/<Id of the first particle of the block.$/;"	m	class:JPartDataHeadMkBlock	access:public
Begin	JSpaceParts.h	/^  unsigned Begin;                       \/\/\/<Id of the first particle of the block.$/;"	m	class:JSpacePartBlock	access:private
Begin	JSpaceParts.h	/^  unsigned Begin;$/;"	m	class:JSpaceParts	access:private
Begin	JSphMk.h	/^  const unsigned Begin;   \/\/\/<Id of the first particle of the block.$/;"	m	class:JSphMkBlock	access:public
BeginCell	JCellDivCpu.h	/^  unsigned *BeginCell;   \/\/\/<Get first value of each cell. | Contiene el principio de cada celda. $/;"	m	class:JCellDivCpu	access:protected
BeginEndCell	JCellDivGpu.h	/^  int2 *BeginEndCell;  \/\/\/<Contains the first and final particle of each cell. | Contiene el principio y final de cada celda. $/;"	m	class:JCellDivGpu	access:protected
BeginEvent	JMotionObj.cpp	/^void JMotionObj::BeginEvent(double start,double eventfinish,JMotionMov* mov){$/;"	f	class:JMotionObj	signature:(double start,double eventfinish,JMotionMov* mov)
BeginEvent	JMotionObj.h	/^  void BeginEvent(double start,double eventfinish,JMotionMov* mov);$/;"	p	class:JMotionObj	access:public	signature:(double start,double eventfinish,JMotionMov* mov)
BeginKeys	JRadixSort.h	/^  unsigned *BeginKeys;$/;"	m	class:JRadixSort	access:private
Bgau	JSph.h	/^  float Bgau;                 \/\/\/<Gaussian kernel constant to compute fac (kernel derivative).           | Constante para calcular fac (derivada del kernel) con kernel Gaussian.$/;"	m	class:JSph	access:protected
BigEndian	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	e	enum:fun::__anon1
BinarySearch	JMotionObj.cpp	/^unsigned JMotionMovActive::BinarySearch(unsigned size,const double *times,double t){$/;"	f	class:JMotionMovActive	signature:(unsigned size,const double *times,double t)
BinarySearch	JMotionObj.h	/^  static unsigned BinarySearch(unsigned size,const double *times,double t);$/;"	p	class:JMotionMovActive	access:public	signature:(unsigned size,const double *times,double t)
BitsSize	JRadixSort.cpp	/^unsigned JRadixSort::BitsSize(ullong v)const{ return(TBitsSize<ullong>(v,64)); };$/;"	f	class:JRadixSort	signature:(ullong v) const
BitsSize	JRadixSort.cpp	/^unsigned JRadixSort::BitsSize(unsigned v)const{ return(TBitsSize<unsigned>(v,32)); };$/;"	f	class:JRadixSort	signature:(unsigned v) const
BitsSize	JRadixSort.h	/^  unsigned BitsSize(ullong v)const;$/;"	p	class:JRadixSort	access:public	signature:(ullong v) const
BitsSize	JRadixSort.h	/^  unsigned BitsSize(unsigned v)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned v) const
Blank	tinyxml.h	/^    bool Blank() const; \/\/ returns true if all white space and new lines$/;"	p	class:TiXmlText	access:protected	signature:() const
Blank	tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
Block	JPartOutBi4Save.h	/^  unsigned Block;    \/\/\/<Numero de bloque. Block number.$/;"	m	class:JPartOutBi4Save	access:private
BlockNout	JPartOutBi4Save.h	/^  unsigned BlockNout;    \/\/\/<Numero de particulas exclidas ya grabadas en el bloque actual. Number of excluded particles already recorded in the current block.$/;"	m	class:JPartOutBi4Save	access:private
BlockNoutMax	JPartOutBi4Save.h	/^  unsigned BlockNoutMax; \/\/\/<Maximum number of particles that should geting in a block.$/;"	m	class:JPartOutBi4Save	access:private
BlockNoutMin	JPartOutBi4Save.h	/^  unsigned BlockNoutMin; \/\/\/<Numero minimo de particulas que se meten por bloque. Minimum number of particles that are are getting in a block.$/;"	m	class:JPartOutBi4Save	access:private
BlockSizeMode	JCfgRun.h	/^  TpBlockSizeMode BlockSizeMode;$/;"	m	class:JCfgRun	access:public
BlockSizeMode	JSphGpu.h	/^  TpBlockSizeMode BlockSizeMode;  \/\/\/<Modes for BlockSize selection.$/;"	m	class:JSphGpu	access:protected
BlockSizes	JSphGpu.h	/^  StBlockSizes BlockSizes;        \/\/\/<Stores configuration of BlockSizes. | Almacena configuracion de BlockSizes.$/;"	m	class:JSphGpu	access:protected
BlockSizesStr	JSphGpu.h	/^  std::string BlockSizesStr;      \/\/\/<Stores configuration of BlockSizes in text form. | Almacena configuracion de BlockSizes en texto.$/;"	m	class:JSphGpu	access:protected
Blocks	JSpaceParts.h	/^  std::vector<JSpacePartBlock*> Blocks;$/;"	m	class:JSpaceParts	access:private
Bound	JPartDataHead.h	/^  bool Bound;         \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JPartDataHeadMkBlock	access:public
Bound	JSpaceParts.h	/^  const bool Bound;          \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JSpacePartBlock	access:public
Bound	JSphMk.h	/^  const bool Bound;       \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JSphMkBlock	access:public
BoundChanged	JSphCpu.h	/^  bool BoundChanged;  \/\/\/<Indicates if selected boundary has changed since last call of divide. | Indica si el contorno seleccionado a cambiado desde el ultimo divide.$/;"	m	class:JSphCpu	access:protected
BoundChanged	JSphGpu.h	/^  bool BoundChanged;  \/\/\/<Indicates if a selected boundary particle has changed since the last time step. | Indica si el contorno seleccionado a cambiado desde el ultimo divide.$/;"	m	class:JSphGpu	access:protected
BoundDivideCellMax	JCellDivCpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivCpu	access:protected
BoundDivideCellMax	JCellDivGpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivGpu	access:protected
BoundDivideCellMin	JCellDivCpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivCpu	access:protected
BoundDivideCellMin	JCellDivGpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivGpu	access:protected
BoundDivideOk	JCellDivCpu.h	/^  bool BoundDivideOk;   \/\/\/<Indicate that the limits of boundaries used in  previous divide will go in BoundDivideCellMin & BoundDivideCellMax. | Indica que los limites del contorno utilizados en el divide previo fueron BoundDivideCellMin y BoundDivideCellMax.$/;"	m	class:JCellDivCpu	access:protected
BoundDivideOk	JCellDivGpu.h	/^  bool BoundDivideOk;   \/\/\/<Indicate that the limits of boundaries used in  previous divide will go in BoundDivideCellMin & BoundDivideCellMax. | Indica que los limites del contorno utilizados en el divide previo fueron BoundDivideCellMin y BoundDivideCellMax.$/;"	m	class:JCellDivGpu	access:protected
BoundLimitCellMax	JCellDivCpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivCpu	access:protected
BoundLimitCellMax	JCellDivGpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivGpu	access:protected
BoundLimitCellMin	JCellDivCpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivCpu	access:protected
BoundLimitCellMin	JCellDivGpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivGpu	access:protected
BoundLimitOk	JCellDivCpu.h	/^  bool BoundLimitOk;    \/\/\/<Indicate that the boundary limits are already calculated in BoundLimitCellMin & BoundLimitCellMax. | Indica que los limites del contorno ya estan calculados en BoundLimitCellMin y BoundLimitCellMax.$/;"	m	class:JCellDivCpu	access:protected
BoundLimitOk	JCellDivGpu.h	/^  bool BoundLimitOk;    \/\/\/<Indicate that the boundary limits are already calculated in BoundLimitCellMin & BoundLimitCellMax. | Indica que los limites del contorno ya estan calculados en BoundLimitCellMin y BoundLimitCellMax.$/;"	m	class:JCellDivGpu	access:protected
BoxBoundIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxBoundIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BoxBoundOut	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxBoundOut	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BoxBoundOutIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxBoundOutIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BoxFluid	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxFluid	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BoxFluidOut	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxFluidOut	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BoxFluidOutIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
BoxFluidOutIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
BsActive	JBlockSizeAuto.h	/^  bool *BsActive;      \/\/\/< Indicates if Blocksize is active [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
BsAuto	JSphGpu.h	/^  JBlockSizeAuto *BsAuto;         \/\/\/<Object to calculate the optimum BlockSize for particle interactions.$/;"	m	class:JSphGpu	access:protected
BsDef	JBlockSizeAuto.h	/^  const int BsDef;  \/\/\/< Default BlockSize.$/;"	m	class:JBlockSizeAutoKer	access:public
BsInc	JBlockSizeAuto.h	/^  const int BsInc;  \/\/\/< Jump between two blocksize values.$/;"	m	class:JBlockSizeAutoKer	access:public
BsMin	JBlockSizeAuto.h	/^  const int BsMin;  \/\/\/< Minimum BlockSize.$/;"	m	class:JBlockSizeAutoKer	access:public
BsNum	JBlockSizeAuto.h	/^  const int BsNum;  \/\/\/< Number of BlockSize to test.$/;"	m	class:JBlockSizeAutoKer	access:public
BsSel	JBlockSizeAuto.h	/^  unsigned BsSel;  \/\/\/< Indicates optimum Blocksize.$/;"	m	class:JBlockSizeAutoKer	access:protected
Bwen	JGaugeItem.h	/^  float Bwen;$/;"	m	class:JGaugeItem	access:protected
Bwen	JSph.h	/^  float Bwen;                 \/\/\/<Wendland kernel constant (bwen) to compute fac (kernel derivative).    | Constante para calcular fac (derivada del kernel) con kernel Wendland.$/;"	m	class:JSph	access:protected
CDATA	tinyxml.h	/^    bool CDATA() const              { return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
CELLDIV_OVERMEMORYCELLS	Types.h	37;"	d
CELLDIV_OVERMEMORYNP	Types.h	36;"	d
CELLMODE_2H	Types.h	/^  ,CELLMODE_2H=1      \/\/\/<Cells of size 2h.$/;"	e	enum:__anon55
CELLMODE_H	Types.h	/^  ,CELLMODE_H=2       \/\/\/<Cells of size h.$/;"	e	enum:__anon55
CELLMODE_None	Types.h	/^   CELLMODE_None=0$/;"	e	enum:__anon55
CFLnumber	JSpaceCtes.h	/^  double CFLnumber;       \/\/\/<CFL number (0.001-1).$/;"	m	class:JSpaceCtes	access:private
CFLnumber	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
CODE_GetSpecialValue	Types.h	99;"	d
CODE_GetType	Types.h	101;"	d
CODE_GetTypeAndValue	Types.h	103;"	d
CODE_GetTypeValue	Types.h	102;"	d
CODE_IsFixed	Types.h	110;"	d
CODE_IsFloating	Types.h	112;"	d
CODE_IsFluid	Types.h	113;"	d
CODE_IsMoving	Types.h	111;"	d
CODE_IsNormal	Types.h	105;"	d
CODE_IsNotFluid	Types.h	114;"	d
CODE_IsOutIgnore	Types.h	108;"	d
CODE_IsOutRhop	Types.h	107;"	d
CODE_IsPeriodic	Types.h	106;"	d
CODE_MASKSPECIAL	Types.h	51;"	d
CODE_MASKSPECIAL	Types.h	72;"	d
CODE_MASKTYPE	Types.h	60;"	d
CODE_MASKTYPE	Types.h	83;"	d
CODE_MASKTYPEVALUE	Types.h	59;"	d
CODE_MASKTYPEVALUE	Types.h	82;"	d
CODE_MASKVALUE	Types.h	65;"	d
CODE_MASKVALUE	Types.h	88;"	d
CODE_MKRANGEMAX	Types.h	48;"	d
CODE_MKRANGEMAX	Types.h	69;"	d
CODE_NORMAL	Types.h	52;"	d
CODE_NORMAL	Types.h	73;"	d
CODE_OUTIGNORE	Types.h	54;"	d
CODE_OUTIGNORE	Types.h	75;"	d
CODE_OUTMOVE	Types.h	55;"	d
CODE_OUTMOVE	Types.h	76;"	d
CODE_OUTPOS	Types.h	56;"	d
CODE_OUTPOS	Types.h	77;"	d
CODE_OUTRHOP	Types.h	57;"	d
CODE_OUTRHOP	Types.h	78;"	d
CODE_PERIODIC	Types.h	53;"	d
CODE_PERIODIC	Types.h	74;"	d
CODE_SetNormal	Types.h	93;"	d
CODE_SetOutIgnore	Types.h	95;"	d
CODE_SetOutMove	Types.h	97;"	d
CODE_SetOutPos	Types.h	96;"	d
CODE_SetOutRhop	Types.h	98;"	d
CODE_SetPeriodic	Types.h	94;"	d
CODE_TYPE_FIXED	Types.h	61;"	d
CODE_TYPE_FIXED	Types.h	84;"	d
CODE_TYPE_FLOATING	Types.h	63;"	d
CODE_TYPE_FLOATING	Types.h	86;"	d
CODE_TYPE_FLUID	Types.h	64;"	d
CODE_TYPE_FLUID	Types.h	87;"	d
CODE_TYPE_FLUID_LIMITFREE	Types.h	67;"	d
CODE_TYPE_FLUID_LIMITFREE	Types.h	90;"	d
CODE_TYPE_MOVING	Types.h	62;"	d
CODE_TYPE_MOVING	Types.h	85;"	d
COMMENT	tinyxml.h	/^        COMMENT,$/;"	e	enum:TiXmlNode::NodeType
CRandomMersenne	randomc.h	/^   CRandomMersenne(int seed) {         \/\/ Constructor$/;"	f	class:CRandomMersenne	access:public	signature:(int seed)
CRandomMersenne	randomc.h	/^class CRandomMersenne {                \/\/ Encapsulate random number generator$/;"	c
CRandomMersenne::BRandom	randomc.cpp	/^uint32_t CRandomMersenne::BRandom() {$/;"	f	class:CRandomMersenne	signature:()
CRandomMersenne::BRandom	randomc.h	/^   uint32_t BRandom();                 \/\/ Output random bits$/;"	p	class:CRandomMersenne	access:public	signature:()
CRandomMersenne::CRandomMersenne	randomc.h	/^   CRandomMersenne(int seed) {         \/\/ Constructor$/;"	f	class:CRandomMersenne	access:public	signature:(int seed)
CRandomMersenne::IRandom	randomc.cpp	/^int CRandomMersenne::IRandom(int min, int max) {$/;"	f	class:CRandomMersenne	signature:(int min, int max)
CRandomMersenne::IRandom	randomc.h	/^   int IRandom (int min, int max);     \/\/ Output random integer$/;"	p	class:CRandomMersenne	access:public	signature:(int min, int max)
CRandomMersenne::IRandomX	randomc.cpp	/^int CRandomMersenne::IRandomX(int min, int max) {$/;"	f	class:CRandomMersenne	signature:(int min, int max)
CRandomMersenne::IRandomX	randomc.h	/^   int IRandomX(int min, int max);     \/\/ Output random integer, exact$/;"	p	class:CRandomMersenne	access:public	signature:(int min, int max)
CRandomMersenne::Init0	randomc.cpp	/^void CRandomMersenne::Init0(int seed) {$/;"	f	class:CRandomMersenne	signature:(int seed)
CRandomMersenne::Init0	randomc.h	/^   void Init0(int seed);               \/\/ Basic initialization procedure$/;"	p	class:CRandomMersenne	access:private	signature:(int seed)
CRandomMersenne::LastInterval	randomc.h	/^   uint32_t LastInterval;              \/\/ Last interval length for IRandomX$/;"	m	class:CRandomMersenne	access:private
CRandomMersenne::RLimit	randomc.h	/^   uint32_t RLimit;                    \/\/ Rejection limit used by IRandomX$/;"	m	class:CRandomMersenne	access:private
CRandomMersenne::Random	randomc.cpp	/^double CRandomMersenne::Random() {$/;"	f	class:CRandomMersenne	signature:()
CRandomMersenne::Random	randomc.h	/^   double Random();                    \/\/ Output random float$/;"	p	class:CRandomMersenne	access:public	signature:()
CRandomMersenne::RandomInit	randomc.cpp	/^void CRandomMersenne::RandomInit(int seed) {$/;"	f	class:CRandomMersenne	signature:(int seed)
CRandomMersenne::RandomInit	randomc.h	/^   void RandomInit(int seed);          \/\/ Re-seed$/;"	p	class:CRandomMersenne	access:public	signature:(int seed)
CRandomMersenne::RandomInitByArray	randomc.cpp	/^void CRandomMersenne::RandomInitByArray(int const seeds[], int NumSeeds) {$/;"	f	class:CRandomMersenne	signature:(int const seeds[], int NumSeeds)
CRandomMersenne::RandomInitByArray	randomc.h	/^   void RandomInitByArray(int const seeds[], int NumSeeds); \/\/ Seed by more than 32 bits$/;"	p	class:CRandomMersenne	access:public	signature:(int const seeds[], int NumSeeds)
CRandomMersenne::mt	randomc.h	/^   uint32_t mt[MERS_N];                \/\/ State vector$/;"	m	class:CRandomMersenne	access:private
CRandomMersenne::mti	randomc.h	/^   int mti;                            \/\/ Index into mt$/;"	m	class:CRandomMersenne	access:private
CRandomMother	randomc.h	/^   CRandomMother(int seed) {           \/\/ Constructor$/;"	f	class:CRandomMother	access:public	signature:(int seed)
CRandomMother	randomc.h	/^class CRandomMother {                  \/\/ Encapsulate random number generator$/;"	c
CRandomMother::BRandom	randomc.h	/^   uint32_t BRandom();                 \/\/ Output random bits$/;"	p	class:CRandomMother	access:public	signature:()
CRandomMother::CRandomMother	randomc.h	/^   CRandomMother(int seed) {           \/\/ Constructor$/;"	f	class:CRandomMother	access:public	signature:(int seed)
CRandomMother::IRandom	randomc.h	/^   int IRandom(int min, int max);      \/\/ Get integer random number in desired interval$/;"	p	class:CRandomMother	access:public	signature:(int min, int max)
CRandomMother::Random	randomc.h	/^   double Random();                    \/\/ Get floating point random number$/;"	p	class:CRandomMother	access:public	signature:()
CRandomMother::RandomInit	randomc.h	/^   void RandomInit(int seed);          \/\/ Initialization$/;"	p	class:CRandomMother	access:public	signature:(int seed)
CRandomMother::x	randomc.h	/^   uint32_t x[5];                      \/\/ History buffer$/;"	m	class:CRandomMother	access:protected
CStr	tinyxml.h	/^    const char* CStr()                              { return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
CTE	JSphGpu_ker.cu	/^__constant__ StCteInteraction CTE;$/;"	v
CalcBeginEndCell	JCellDivGpu_ker.cu	/^void CalcBeginEndCell(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell){$/;"	f	namespace:cudiv	signature:(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell)
CalcBeginEndCell	JCellDivGpu_ker.h	/^void CalcBeginEndCell(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell);$/;"	p	namespace:cudiv	signature:(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell)
CalcCellCode	JSph.cpp	/^unsigned JSph::CalcCellCode(tuint3 ncells){$/;"	f	class:JSph	signature:(tuint3 ncells)
CalcCellCode	JSph.h	/^  static unsigned CalcCellCode(tuint3 ncells);$/;"	p	class:JSph	access:protected	signature:(tuint3 ncells)
CalcCellDomain	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::CalcCellDomain(const unsigned *dcellc,const typecode *codec){$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned *dcellc,const typecode *codec)
CalcCellDomain	JCellDivCpuSingle.h	/^  void CalcCellDomain(const unsigned *dcellc,const typecode *codec);$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned *dcellc,const typecode *codec)
CalcCellDomain	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::CalcCellDomain(const unsigned *dcellg,const typecode *codeg){$/;"	f	class:JCellDivGpuSingle	signature:(const unsigned *dcellg,const typecode *codeg)
CalcCellDomain	JCellDivGpuSingle.h	/^  void CalcCellDomain(const unsigned *dcellg,const typecode *codeg);$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const unsigned *dcellg,const typecode *codeg)
CalcCellDomainBound	JCellDivCpu.cpp	/^void JCellDivCpu::CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainBound	JCellDivCpu.h	/^  void CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainBound	JCellDivGpu.cpp	/^void JCellDivGpu::CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivGpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainBound	JCellDivGpu.h	/^  void CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainFluid	JCellDivCpu.cpp	/^void JCellDivCpu::CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainFluid	JCellDivCpu.h	/^  void CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainFluid	JCellDivGpu.cpp	/^void JCellDivGpu::CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivGpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
CalcCellDomainFluid	JCellDivGpu.h	/^  void CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
CalcConstans	JSpaceCtes.cpp	/^JSpaceCtes::StConstants JSpaceCtes::CalcConstans(StConstants cte){$/;"	f	class:JSpaceCtes	signature:(StConstants cte)
CalcConstans	JSpaceCtes.h	/^  static StConstants CalcConstans(StConstants cte);$/;"	p	class:JSpaceCtes	access:public	signature:(StConstants cte)
CalcElevation	JWaveOrder2_ker.cu	/^double CalcElevation(double time,double x,unsigned n,const double4 *coefe,double *aux)$/;"	f	namespace:cuwave2	signature:(double time,double x,unsigned n,const double4 *coefe,double *aux)
CalcElevation	JWaveOrder2_ker.h	/^double CalcElevation(double time,double x,unsigned n,const double4 *coefe,double *aux);$/;"	p	namespace:cuwave2	signature:(double time,double x,unsigned n,const double4 *coefe,double *aux)
CalcElevation	JWaveSpectrumGpu.cpp	/^double JWaveSpectrumGpu::CalcElevation(double time,double x,unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(double time,double x,unsigned sizewavecoefs)
CalcElevation	JWaveSpectrumGpu.h	/^  double CalcElevation(double time,double x,unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(double time,double x,unsigned sizewavecoefs)
CalcFloatingRadius	JSph.cpp	/^void JSph::CalcFloatingRadius(unsigned np,const tdouble3 *pos,const unsigned *idp){$/;"	f	class:JSph	signature:(unsigned np,const tdouble3 *pos,const unsigned *idp)
CalcFloatingRadius	JSph.h	/^  void CalcFloatingRadius(unsigned np,const tdouble3 *pos,const unsigned *idp);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const tdouble3 *pos,const unsigned *idp)
CalcMotion	JSphCpu.cpp	/^void JSphCpu::CalcMotion(double stepdt){$/;"	f	class:JSphCpu	signature:(double stepdt)
CalcMotion	JSphCpu.h	/^  void CalcMotion(double stepdt);$/;"	p	class:JSphCpu	access:protected	signature:(double stepdt)
CalcMotion	JSphGpu.cpp	/^void JSphGpu::CalcMotion(double stepdt){$/;"	f	class:JSphGpu	signature:(double stepdt)
CalcMotion	JSphGpu.h	/^  void CalcMotion(double stepdt);$/;"	p	class:JSphGpu	access:protected	signature:(double stepdt)
CalcNbits	JRadixSort.cpp	/^unsigned JRadixSort::CalcNbits(unsigned size,const ullong *data)const{ return(TCalcNbits<ullong>(size,data)); }$/;"	f	class:JRadixSort	signature:(unsigned size,const ullong *data) const
CalcNbits	JRadixSort.cpp	/^unsigned JRadixSort::CalcNbits(unsigned size,const unsigned *data)const{ return(TCalcNbits<unsigned>(size,data)); }$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data) const
CalcNbits	JRadixSort.h	/^  unsigned CalcNbits(unsigned size,const ullong *data)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data) const
CalcNbits	JRadixSort.h	/^  unsigned CalcNbits(unsigned size,const unsigned *data)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data) const
CalcNextTime	JTimeControl.cpp	/^double JTimeControl::CalcNextTime(){$/;"	f	class:JTimeControl	signature:()
CalcNextTime	JTimeControl.h	/^  double CalcNextTime();$/;"	p	class:JTimeControl	access:protected	signature:()
CalcPosition	JWaveOrder2_ker.cu	/^double CalcPosition(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)$/;"	f	namespace:cuwave2	signature:(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)
CalcPosition	JWaveOrder2_ker.h	/^double CalcPosition(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux);$/;"	p	namespace:cuwave2	signature:(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)
CalcPosition	JWaveSpectrumGpu.cpp	/^double JWaveSpectrumGpu::CalcPosition(double time,unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(double time,unsigned sizewavecoefs)
CalcPosition	JWaveSpectrumGpu.h	/^  double CalcPosition(double time,unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(double time,unsigned sizewavecoefs)
CalcRidp	JSphCpu.cpp	/^void JSphCpu::CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)const{$/;"	f	class:JSphCpu	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp) const
CalcRidp	JSphCpu.h	/^  void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)const;$/;"	p	class:JSphCpu	access:protected	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp) const
CalcRidp	JSphGpu_ker.cu	/^void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp){$/;"	f	namespace:cusph	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
CalcRidp	JSphGpu_ker.h	/^void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp);$/;"	p	namespace:cusph	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
CalcRunCode	JSph.cpp	/^std::string JSph::CalcRunCode()const{$/;"	f	class:JSph	signature:() const
CalcRunCode	JSph.h	/^  std::string CalcRunCode()const;$/;"	p	class:JSph	access:private	signature:() const
CalcVelMaxOmp	JSphCpu.cpp	/^float JSphCpu::CalcVelMaxOmp(unsigned np,const tfloat4* velrhop)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const tfloat4* velrhop) const
CalcVelMaxOmp	JSphCpu.h	/^  float CalcVelMaxOmp(unsigned np,const tfloat4* velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4* velrhop) const
CalcVelMaxSeq	JSphCpu.cpp	/^float JSphCpu::CalcVelMaxSeq(unsigned np,const tfloat4* velrhop)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const tfloat4* velrhop) const
CalcVelMaxSeq	JSphCpu.h	/^  float CalcVelMaxSeq(unsigned np,const tfloat4* velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4* velrhop) const
CalculateCasePos	JPartsLoad4.cpp	/^void JPartsLoad4::CalculateCasePos(){$/;"	f	class:JPartsLoad4	signature:()
CalculateCasePos	JPartsLoad4.h	/^  void CalculateCasePos();$/;"	p	class:JPartsLoad4	access:protected	signature:()
CalculateStats	JFormatFiles2.h	/^  static void CalculateStats(unsigned np,unsigned nfields,StStatistics* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned np,unsigned nfields,StStatistics* fields)
CalculeCpu	JGaugeItem.cpp	/^void JGaugeForce::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeForce	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.cpp	/^void JGaugeMaxZ::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeMaxZ	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.cpp	/^void JGaugeSwl::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeSwl	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.cpp	/^void JGaugeVelocity::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeVelocity	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.h	/^  virtual void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeItem	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeForce	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeMaxZ	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSwl	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeVelocity	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeSystem.cpp	/^void JGaugeSystem::CalculeCpu(double timestep,bool svpart,tuint3 ncells$/;"	f	class:JGaugeSystem	signature:(double timestep,bool svpart,tuint3 ncells ,tuint3 cellmin,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeCpu	JGaugeSystem.h	/^  void CalculeCpu(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSystem	access:public	signature:(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
CalculeGpu	JGaugeItem.cpp	/^void JGaugeForce::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeForce	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.cpp	/^void JGaugeMaxZ::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeMaxZ	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.cpp	/^void JGaugeSwl::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeSwl	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.cpp	/^void JGaugeVelocity::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeVelocity	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.h	/^  virtual void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeItem	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeForce	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeMaxZ	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSwl	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeVelocity	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
CalculeGpu	JGaugeSystem.cpp	/^void JGaugeSystem::CalculeGpu(double timestep,bool svpart,tuint3 ncells$/;"	f	class:JGaugeSystem	signature:(double timestep,bool svpart,tuint3 ncells ,tuint3 cellmin,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop)
CalculeGpu	JGaugeSystem.h	/^  void CalculeGpu(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSystem	access:public	signature:(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop)
CalculeLimits	JPartsLoad4.cpp	/^void JPartsLoad4::CalculeLimits(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax){$/;"	f	class:JPartsLoad4	signature:(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax)
CalculeLimits	JPartsLoad4.h	/^  void CalculeLimits(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax);$/;"	p	class:JPartsLoad4	access:public	signature:(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax)
CalculeMassCpu	JGaugeItem.cpp	/^float JGaugeSwl::CalculeMassCpu(const tdouble3 &ptpos,const tint4 &nc$/;"	f	class:JGaugeSwl	signature:(const tdouble3 &ptpos,const tint4 &nc ,const tint3 &cellzero,unsigned cellfluid,const unsigned *begincell ,const tdouble3 *pos,const typecode *code,const tfloat4 *velrhop) const
CalculeMassCpu	JGaugeItem.h	/^  float CalculeMassCpu(const tdouble3 &ptpos,const tint4 &nc$/;"	p	class:JGaugeSwl	access:protected	signature:(const tdouble3 &ptpos,const tint4 &nc ,const tint3 &cellzero,unsigned cellfluid,const unsigned *begincell ,const tdouble3 *pos,const typecode *code,const tfloat4 *velrhop) const
CaseName	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
CaseName	JPartDataHead.h	/^  std::string CaseName;$/;"	m	class:JPartDataHead	access:private
CaseName	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
CaseNbound	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
CaseNbound	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
CaseNbound	JSph.h	/^  unsigned CaseNbound;       \/\/\/<Number of boundary particles ( \\ref Nfixed + \\ref Nmoving + \\ref Nfloat ).$/;"	m	class:JSph	access:protected
CaseNfixed	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
CaseNfixed	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
CaseNfixed	JPartDataHead.h	/^  unsigned CaseNfixed;   \/\/\/<Number of fixed boundary particles. $/;"	m	class:JPartDataHead	access:private
CaseNfixed	JPartsLoad4.h	/^  ullong CaseNfixed;       \/\/\/<Number of fixed boundary particles. $/;"	m	class:JPartsLoad4	access:protected
CaseNfixed	JSph.h	/^  unsigned CaseNfixed;       \/\/\/<Number of fixed boundary particles. $/;"	m	class:JSph	access:protected
CaseNfloat	JPartDataHead.h	/^  unsigned CaseNfloat;   \/\/\/<Number of floating boundary particles. $/;"	m	class:JPartDataHead	access:private
CaseNfloat	JPartsLoad4.h	/^  ullong CaseNfloat;       \/\/\/<Number of floating boundary particles. $/;"	m	class:JPartsLoad4	access:protected
CaseNfloat	JSph.h	/^  unsigned CaseNfloat;       \/\/\/<Number of floating boundary particles. $/;"	m	class:JSph	access:protected
CaseNfluid	JPartDataHead.h	/^  unsigned CaseNfluid;   \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JPartDataHead	access:private
CaseNfluid	JPartsLoad4.h	/^  ullong CaseNfluid;       \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JPartsLoad4	access:protected
CaseNfluid	JSph.h	/^  unsigned CaseNfluid;       \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JSph	access:protected
CaseNmoving	JPartDataHead.h	/^  unsigned CaseNmoving;  \/\/\/<Number of moving boundary particles. $/;"	m	class:JPartDataHead	access:private
CaseNmoving	JPartsLoad4.h	/^  ullong CaseNmoving;      \/\/\/<Number of moving boundary particles. $/;"	m	class:JPartsLoad4	access:protected
CaseNmoving	JSph.h	/^  unsigned CaseNmoving;      \/\/\/<Number of moving boundary particles. $/;"	m	class:JSph	access:protected
CaseNp	JPartDataHead.h	/^  unsigned CaseNp;       \/\/\/<Number of total particles of initial PART.  $/;"	m	class:JPartDataHead	access:private
CaseNp	JPartsLoad4.h	/^  ullong CaseNp;           \/\/\/<Number of total particles.  $/;"	m	class:JPartsLoad4	access:protected
CaseNp	JSph.h	/^  unsigned CaseNp;           \/\/\/<Number of total particles of initial PART.  $/;"	m	class:JSph	access:protected
CaseNpb	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
CaseNpb	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
CaseNpb	JSph.h	/^  unsigned CaseNpb;          \/\/\/<Number of particles of the boundary block ( \\ref Nbound - \\ref Nfloat ) or ( \\ref Nfixed + \\ref Nmoving).$/;"	m	class:JSph	access:protected
CasePosMax	JPartDataHead.h	/^  tdouble3 CasePosMax;   \/\/\/<Upper particle limit of the case in the initial instant.$/;"	m	class:JPartDataHead	access:private
CasePosMax	JPartsLoad4.h	/^  tdouble3 CasePosMin,CasePosMax;$/;"	m	class:JPartsLoad4	access:protected
CasePosMax	JSph.h	/^  tdouble3 CasePosMax;       \/\/\/<Upper particle limit of the case in the initial instant. | Limite superior de particulas del caso en instante inicial.$/;"	m	class:JSph	access:protected
CasePosMin	JPartDataHead.h	/^  tdouble3 CasePosMin;   \/\/\/<Lower particle limit of the case in the initial instant.$/;"	m	class:JPartDataHead	access:private
CasePosMin	JPartsLoad4.h	/^  tdouble3 CasePosMin,CasePosMax;$/;"	m	class:JPartsLoad4	access:protected
CasePosMin	JSph.h	/^  tdouble3 CasePosMin;       \/\/\/<Lower particle limit of the case in the initial instant. | Limite inferior de particulas del caso en instante inicial.$/;"	m	class:JSph	access:protected
CellBeginEnd	JCellDivGpu.cpp	/^int2 JCellDivGpu::CellBeginEnd(unsigned cell)const{$/;"	f	class:JCellDivGpu	signature:(unsigned cell) const
CellBeginEnd	JCellDivGpu.cpp	/^void JCellDivGpu::CellBeginEnd(unsigned cell,unsigned ndata,unsigned* data)const{$/;"	f	class:JCellDivGpu	signature:(unsigned cell,unsigned ndata,unsigned* data) const
CellBeginEnd	JCellDivGpu.h	/^  int2 CellBeginEnd(unsigned cell)const;$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned cell) const
CellBeginEnd	JCellDivGpu.h	/^  void CellBeginEnd(unsigned cell,unsigned ndata,unsigned* data)const;$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned cell,unsigned ndata,unsigned* data) const
CellDiv	JSphCpu.h	/^  JCellDivCpu* CellDiv;$/;"	m	class:JSphCpu	access:private
CellDiv	JSphGpu.h	/^  JCellDivGpu* CellDiv;$/;"	m	class:JSphGpu	access:private
CellDivSingle	JSphCpuSingle.h	/^  JCellDivCpuSingle* CellDivSingle;$/;"	m	class:JSphCpuSingle	access:protected
CellDivSingle	JSphGpuSingle.h	/^  JCellDivGpuSingle* CellDivSingle;$/;"	m	class:JSphGpuSingle	access:protected
CellDomainMax	JCellDivCpu.h	/^  tuint3 CellDomainMax; \/\/\/<Upper domain limit in cells inside of DomCells. | Limite superior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivCpu	access:protected
CellDomainMax	JCellDivGpu.h	/^  tuint3 CellDomainMax; \/\/\/<Upper domain limit in cells inside of DomCells. | Limite superior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivGpu	access:protected
CellDomainMin	JCellDivCpu.h	/^  tuint3 CellDomainMin; \/\/\/<Lower domain limit in cells inside of DomCells. | Limite inferior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivCpu	access:protected
CellDomainMin	JCellDivGpu.h	/^  tuint3 CellDomainMin; \/\/\/<Lower domain limit in cells inside of DomCells. | Limite inferior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivGpu	access:protected
CellMode	JCellDivCpu.h	/^  const TpCellMode CellMode;    \/\/\/<Mode of cell division. | Modo de division en celdas.$/;"	m	class:JCellDivCpu	access:protected
CellMode	JCellDivGpu.h	/^  const TpCellMode CellMode;    \/\/\/<Mode of cell division. | Modo de division en celdas.$/;"	m	class:JCellDivGpu	access:protected
CellMode	JCfgRun.h	/^  TpCellMode  CellMode;$/;"	m	class:JCfgRun	access:public
CellMode	JSph.h	/^  TpCellMode CellMode;     \/\/\/<Cell division mode. | Modo de division en celdas.$/;"	m	class:JSph	access:protected
CellPart	JCellDivCpu.h	/^  unsigned *CellPart;$/;"	m	class:JCellDivCpu	access:protected
CellPart	JCellDivGpu.h	/^  unsigned *CellPart;$/;"	m	class:JCellDivGpu	access:protected
CellSize	JCellDivCpu.h	/^  unsigned CellSize(unsigned box)const{ return(BeginCell[box+1]-BeginCell[box]); }$/;"	f	class:JCellDivCpu	access:protected	signature:(unsigned box) const
CellSize	JCellDivGpu.h	/^  unsigned CellSize(unsigned cell)const{ int2 v=CellBeginEnd(cell); return(unsigned(v.y-v.x)); }$/;"	f	class:JCellDivGpu	access:protected	signature:(unsigned cell) const
Center	JSpaceParts.h	/^  tdouble3 Center;$/;"	m	class:JSpacePartBlock_Floating	access:private
CfgDefault	JGaugeSystem.h	/^  JGaugeItem::StDefault CfgDefault; \/\/\/<Default configuration.$/;"	m	class:JGaugeSystem	access:private
CfgDomainFixedMax	JSph.h	/^  tdouble3 CfgDomainFixedMin,CfgDomainFixedMax;$/;"	m	class:JSph	access:private
CfgDomainFixedMin	JSph.h	/^  tdouble3 CfgDomainFixedMin,CfgDomainFixedMax;$/;"	m	class:JSph	access:private
CfgDomainParticlesMax	JSph.h	/^  tdouble3 CfgDomainParticlesMin,CfgDomainParticlesMax;$/;"	m	class:JSph	access:private
CfgDomainParticlesMin	JSph.h	/^  tdouble3 CfgDomainParticlesMin,CfgDomainParticlesMax;$/;"	m	class:JSph	access:private
CfgDomainParticlesPrcMax	JSph.h	/^  tdouble3 CfgDomainParticlesPrcMin,CfgDomainParticlesPrcMax;$/;"	m	class:JSph	access:private
CfgDomainParticlesPrcMin	JSph.h	/^  tdouble3 CfgDomainParticlesPrcMin,CfgDomainParticlesPrcMax;$/;"	m	class:JSph	access:private
Char8	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
CheckArray	JPartFloatBi4.cpp	/^JBinaryDataArray* JPartFloatBi4Load::CheckArray(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JPartFloatBi4Load	signature:(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type)
CheckArray	JPartFloatBi4.h	/^  JBinaryDataArray* CheckArray(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JPartFloatBi4Load	access:private	signature:(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type)
CheckAttributes	JXml.cpp	/^int JXml::CheckAttributes(const TiXmlElement* ele,std::string names,bool checkmanyatt)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,std::string names,bool checkmanyatt) const
CheckAttributes	JXml.h	/^  int CheckAttributes(const TiXmlElement* ele,std::string names,bool checkmanyatt)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,std::string names,bool checkmanyatt) const
CheckConfig	JPartsLoad4.cpp	/^void JPartsLoad4::CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const$/;"	f	class:JPartsLoad4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
CheckConfig	JPartsLoad4.cpp	/^void JPartsLoad4::CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi)const$/;"	f	class:JPartsLoad4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi) const
CheckConfig	JPartsLoad4.h	/^  void CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const;$/;"	p	class:JPartsLoad4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
CheckConfig	JPartsLoad4.h	/^  void CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi)const;$/;"	p	class:JPartsLoad4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi) const
CheckCpuParticlesSize	JSphCpu.h	/^  bool CheckCpuParticlesSize(unsigned requirednp){ return(requirednp+PARTICLES_OVERMEMORY_MIN<=CpuParticlesSize); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned requirednp)
CheckCudaError	FunctionsCuda.cpp	/^void CheckCudaError(const std::string &msg,const char *const file,int const line){$/;"	f	namespace:fcuda	signature:(const std::string &msg,const char *const file,int const line)
CheckCudaError	FunctionsCuda.h	/^void CheckCudaError(const std::string &msg,const char *const file,int const line);$/;"	p	namespace:fcuda	signature:(const std::string &msg,const char *const file,int const line)
CheckCudaError	JGaugeItem.cpp	/^void JGaugeItem::CheckCudaError(const std::string &method,const std::string &msg){$/;"	f	class:JGaugeItem	signature:(const std::string &method,const std::string &msg)
CheckCudaError	JGaugeItem.h	/^  void CheckCudaError(const std::string &method,const std::string &msg);$/;"	p	class:JGaugeItem	access:protected	signature:(const std::string &method,const std::string &msg)
CheckCudaError	JObjectGpu.cpp	/^void JObjectGpu::CheckCudaError(const std::string &method,const std::string &msg)const{$/;"	f	class:JObjectGpu	signature:(const std::string &method,const std::string &msg) const
CheckCudaError	JObjectGpu.h	/^  void CheckCudaError(const std::string &method,const std::string &msg)const;$/;"	p	class:JObjectGpu	access:protected	signature:(const std::string &method,const std::string &msg) const
CheckCudaError	JSphGpu.cpp	/^void JSphGpu::CheckCudaError(const std::string &method,const std::string &msg){$/;"	f	class:JSphGpu	signature:(const std::string &method,const std::string &msg)
CheckCudaError	JSphGpu.h	/^  void CheckCudaError(const std::string &method,const std::string &msg);$/;"	p	class:JSphGpu	access:protected	signature:(const std::string &method,const std::string &msg)
CheckCudaErrors	FunctionsCuda.h	40;"	d
CheckElementAttributes	JXml.cpp	/^int JXml::CheckElementAttributes(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele) const
CheckElementAttributes	JXml.h	/^  int CheckElementAttributes(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele) const
CheckElementNames	JXml.cpp	/^void JXml::CheckElementNames(TiXmlElement* lis,bool checkrepeated,std::string names)const{$/;"	f	class:JXml	signature:(TiXmlElement* lis,bool checkrepeated,std::string names) const
CheckElementNames	JXml.h	/^  void CheckElementNames(TiXmlElement* lis,bool checkrepeated,std::string names)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* lis,bool checkrepeated,std::string names) const
CheckErrorCuda	JGauge_ker.cu	36;"	d	file:
CheckErrorCuda	JReduSum_ker.cu	39;"	d	file:
CheckErrorCuda	JSphGpu_ker.cu	44;"	d	file:
CheckErrorCuda	JWaveOrder2_ker.cu	34;"	d	file:
CheckFields	JFormatFiles2.h	/^  static void CheckFields(const std::vector<StScalarData> &fields);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::vector<StScalarData> &fields)
CheckFields	JFormatFiles2.h	/^  static void CheckFields(unsigned nfields,const StScalarData* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned nfields,const StScalarData* fields)
CheckFileHead	JBinaryData.cpp	/^unsigned JBinaryData::CheckFileHead(const std::string &file,std::ifstream *pf,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,std::ifstream *pf,const std::string &filecode) const
CheckFileHead	JBinaryData.h	/^  unsigned CheckFileHead(const std::string &file,std::ifstream *pf,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,std::ifstream *pf,const std::string &filecode) const
CheckFileListHead	JBinaryData.cpp	/^unsigned JBinaryData::CheckFileListHead(const std::string &file,std::fstream *pf,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,std::fstream *pf,const std::string &filecode) const
CheckFileListHead	JBinaryData.h	/^  unsigned CheckFileListHead(const std::string &file,std::fstream *pf,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,std::fstream *pf,const std::string &filecode) const
CheckFloating	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckFloating(unsigned cf)const{$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cf) const
CheckFloating	JPartFloatBi4.h	/^  void CheckFloating(unsigned cf)const;$/;"	p	class:JPartFloatBi4Load	access:private	signature:(unsigned cf) const
CheckGetValue	JBinaryData.cpp	/^int JBinaryData::CheckGetValue(const std::string &name,bool optional,JBinaryDataDef::TpData type)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,JBinaryDataDef::TpData type) const
CheckGetValue	JBinaryData.h	/^  int CheckGetValue(const std::string &name,bool optional,JBinaryDataDef::TpData type)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,bool optional,JBinaryDataDef::TpData type) const
CheckGpuParticlesSize	JSphGpu.h	/^  bool CheckGpuParticlesSize(unsigned requirednp){ return(requirednp+PARTICLES_OVERMEMORY_MIN<=GpuParticlesSize); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned requirednp)
CheckHead	JBinaryData.cpp	/^void JBinaryData::CheckHead(const std::string &file,const StHeadFmtBin &head,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,const StHeadFmtBin &head,const std::string &filecode) const
CheckHead	JBinaryData.h	/^  void CheckHead(const std::string &file,const StHeadFmtBin &head,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,const StHeadFmtBin &head,const std::string &filecode) const
CheckHeadData	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass)
CheckHeadData	JPartFloatBi4.h	/^  void CheckHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass)
CheckLinkMovs	JMotion.cpp	/^void JMotion::CheckLinkMovs()const{$/;"	f	class:JMotion	signature:() const
CheckLinkMovs	JMotion.h	/^  void CheckLinkMovs()const;$/;"	p	class:JMotion	access:public	signature:() const
CheckLinks	JSpaceProperties.cpp	/^void JSpaceProperties::CheckLinks(){$/;"	f	class:JSpaceProperties	signature:()
CheckLinks	JSpaceProperties.h	/^  void CheckLinks();$/;"	p	class:JSpaceProperties	access:private	signature:()
CheckMemory	JBinaryData.cpp	/^void JBinaryDataArray::CheckMemory(unsigned count,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,bool resize)
CheckMemory	JBinaryData.h	/^  void CheckMemory(unsigned count,bool resize);$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned count,bool resize)
CheckMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::CheckMemoryNct(unsigned nctmin){$/;"	f	class:JCellDivCpu	signature:(unsigned nctmin)
CheckMemoryNct	JCellDivCpu.h	/^  void CheckMemoryNct(unsigned nctmin);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned nctmin)
CheckMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::CheckMemoryNct(unsigned nctmin){$/;"	f	class:JCellDivGpu	signature:(unsigned nctmin)
CheckMemoryNct	JCellDivGpu.h	/^  void CheckMemoryNct(unsigned nctmin);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned nctmin)
CheckMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::CheckMemoryNp(unsigned npmin){$/;"	f	class:JCellDivCpu	signature:(unsigned npmin)
CheckMemoryNp	JCellDivCpu.h	/^  void CheckMemoryNp(unsigned npmin);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned npmin)
CheckMemoryNp	JCellDivGpu.cpp	/^void JCellDivGpu::CheckMemoryNp(unsigned npmin){$/;"	f	class:JCellDivGpu	signature:(unsigned npmin)
CheckMemoryNp	JCellDivGpu.h	/^  void CheckMemoryNp(unsigned npmin);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned npmin)
CheckNewValue	JRangeFilter.cpp	/^bool JRangeFilter::CheckNewValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
CheckNewValue	JRangeFilter.h	/^  bool CheckNewValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v) const
CheckNparticles	JSpaceParts.cpp	/^bool JSpaceParts::CheckNparticles(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const{$/;"	f	class:JSpaceParts	signature:(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
CheckNparticles	JSpaceParts.cpp	/^bool JSpaceParts::CheckNparticles(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid)const{$/;"	f	class:JSpaceParts	signature:(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid) const
CheckNparticles	JSpaceParts.h	/^  bool CheckNparticles(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const;$/;"	p	class:JSpaceParts	access:public	signature:(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
CheckNparticles	JSpaceParts.h	/^  bool CheckNparticles(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid)const;$/;"	p	class:JSpaceParts	access:public	signature:(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid) const
CheckPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckPart()const{$/;"	f	class:JPartFloatBi4Load	signature:() const
CheckPart	JPartFloatBi4.h	/^  void CheckPart()const;$/;"	p	class:JPartFloatBi4Load	access:private	signature:() const
CheckRealTime	JTimeControl.cpp	/^bool JTimeControl::CheckRealTime(){$/;"	f	class:JTimeControl	signature:()
CheckRealTime	JTimeControl.h	/^  bool CheckRealTime();$/;"	p	class:JTimeControl	access:protected	signature:()
CheckSetValue	JBinaryData.cpp	/^int JBinaryData::CheckSetValue(const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type)
CheckSetValue	JBinaryData.h	/^  int CheckSetValue(const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type)
CheckSortParticles	JPartsLoad4.cpp	/^void JPartsLoad4::CheckSortParticles(){$/;"	f	class:JPartsLoad4	signature:()
CheckSortParticles	JPartsLoad4.h	/^  void CheckSortParticles();$/;"	p	class:JPartsLoad4	access:protected	signature:()
CheckStats	JFormatFiles2.h	/^  static void CheckStats(unsigned nfields,const StStatistics* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned nfields,const StStatistics* fields)
CheckTime	JTimeControl.h	/^  bool CheckTime(){$/;"	f	class:JTimeControl	access:public	signature:()
CheckValue	JRangeFilter.cpp	/^bool JRangeFilter::CheckValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
CheckValue	JRangeFilter.h	/^  bool CheckValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:public	signature:(unsigned v) const
Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
Child	tinyxml.h	/^    TiXmlHandle Child( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
Child	tinyxml.h	/^    TiXmlHandle Child( const std::string& _value, int index ) const         { return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
Child	tinyxml.h	/^    TiXmlHandle Child( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( const std::string& _value, int index ) const  { return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
Children	JMotionObj.h	/^  std::vector<JMotionObj*> Children;  \/\/-Objetos hijos.$/;"	m	class:JMotionObj	access:private
ChildrenCount	JMotionObj.cpp	/^unsigned JMotionObj::ChildrenCount(){$/;"	f	class:JMotionObj	signature:()
ChildrenCount	JMotionObj.h	/^  unsigned ChildrenCount();$/;"	p	class:JMotionObj	access:public	signature:()
Circular	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
CircularAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
CircularSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
ClassName	JException.h	/^  std::string ClassName; \/\/\/<Name of the class that generated an exception. $/;"	m	class:JException	access:protected
ClassName	JObject.h	/^  std::string ClassName;   \/\/\/<Name of the class.$/;"	m	class:JObject	access:protected
Clear	JBinaryData.cpp	/^void JBinaryData::Clear(){$/;"	f	class:JBinaryData	signature:()
Clear	JBinaryData.h	/^  void Clear();$/;"	p	class:JBinaryData	access:public	signature:()
Clear	JPartsOut.h	/^  void Clear(){ Count=0; OutPosCount=OutRhopCount=OutMoveCount=0; };$/;"	f	class:JPartsOut	access:public	signature:()
Clear	JSpaceCtes.h	/^    void Clear(){ $/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:()
Clear	JSpaceProperties.cpp	/^void JSpacePropProperty::Clear(){$/;"	f	class:JSpacePropProperty	signature:()
Clear	JSpaceProperties.cpp	/^void JSpacePropValue::Clear(){$/;"	f	class:JSpacePropValue	signature:()
Clear	JSpaceProperties.h	/^  void Clear();$/;"	p	class:JSpacePropProperty	access:public	signature:()
Clear	JSpaceProperties.h	/^  void Clear();$/;"	p	class:JSpacePropValue	access:public	signature:()
Clear	tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
Clear	tinyxml.h	/^    void Clear()        { row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
Clear	tinyxml.h	/^    void Clear();$/;"	p	class:TiXmlNode	access:public	signature:()
ClearCfgDomain	JSph.cpp	/^void JSph::ClearCfgDomain(){$/;"	f	class:JSph	signature:()
ClearCfgDomain	JSph.h	/^  void ClearCfgDomain();$/;"	p	class:JSph	access:private	signature:()
ClearError	tinyxml.h	/^    void ClearError()                       {   error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
ClearFileData	JBinaryData.cpp	/^void JBinaryDataArray::ClearFileData(){$/;"	f	class:JBinaryDataArray	signature:()
ClearFileData	JBinaryData.h	/^  void ClearFileData();$/;"	p	class:JBinaryDataArray	access:public	signature:()
ClearNameExtra	JAppInfo.h	/^  void ClearNameExtra(){ MainNameExtra=""; };$/;"	f	class:JAppInfo	access:public	signature:()
ClearPartData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ClearPartData(){$/;"	f	class:JPartFloatBi4Save	signature:()
ClearPartData	JPartFloatBi4.h	/^  void ClearPartData();$/;"	p	class:JPartFloatBi4Save	access:private	signature:()
ClearPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::ClearPropertyFile(){$/;"	f	class:JSpaceProperties	signature:()
ClearPropertyFile	JSpaceProperties.h	/^  void ClearPropertyFile();$/;"	p	class:JSpaceProperties	access:public	signature:()
ClearResult	JGaugeItem.h	/^  virtual void ClearResult()=0;$/;"	p	class:JGaugeItem	access:protected	signature:()
ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeForce	access:protected	signature:()
ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeMaxZ	access:protected	signature:()
ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeSwl	access:protected	signature:()
ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeVelocity	access:protected	signature:()
ClearThis	tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
ClearThis	tinyxml.h	/^    void ClearThis();   \/\/ like clear, but initializes 'this' object as well$/;"	p	class:TiXmlElement	access:protected	signature:()
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
Clone	tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const = 0;$/;"	p	class:TiXmlNode	access:public	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlComment	access:public	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDeclaration	access:public	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDocument	access:protected	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlText	access:protected	signature:() const
Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlUnknown	access:public	signature:() const
CloseFileStructure	JBinaryData.cpp	/^void JBinaryData::CloseFileStructure(){$/;"	f	class:JBinaryData	signature:()
CloseFileStructure	JBinaryData.h	/^  void CloseFileStructure();$/;"	p	class:JBinaryData	access:public	signature:()
Code	JGaugeItem.h	/^  typecode Code;$/;"	m	class:JGaugeForce	access:protected
Code	JSphGpu.h	/^  typecode *Code;     \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphGpu	access:protected
Code	JSphMk.h	/^  const typecode Code;$/;"	m	class:JSphMkBlock	access:public
Code	JSphPartsInit.h	/^  typecode *Code;$/;"	m	class:JSphPartsInit	access:private
CodeArrayDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeArrayDef="\\nARRAY";$/;"	m	class:JBinaryData	file:
CodeArrayDef	JBinaryData.h	/^  static const std::string CodeArrayDef;$/;"	m	class:JBinaryData	access:private
CodeItemDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeItemDef="\\nITEM\\n";$/;"	m	class:JBinaryData	file:
CodeItemDef	JBinaryData.h	/^  static const std::string CodeItemDef;$/;"	m	class:JBinaryData	access:private
CodeNewFluid	JSphMk.h	/^  typecode CodeNewFluid;     \/\/\/<Code for new fluid particles created during the simulation.$/;"	m	class:JSphMk	access:private
CodeSetType	JSphMk.cpp	/^typecode JSphMk::CodeSetType(typecode code,TpParticles type,unsigned value)const{$/;"	f	class:JSphMk	signature:(typecode code,TpParticles type,unsigned value) const
CodeSetType	JSphMk.h	/^  typecode CodeSetType(typecode code,TpParticles type,unsigned value)const;$/;"	p	class:JSphMk	access:public	signature:(typecode code,TpParticles type,unsigned value) const
CodeValuesDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeValuesDef="\\nVALUES";$/;"	m	class:JBinaryData	file:
CodeValuesDef	JBinaryData.h	/^  static const std::string CodeValuesDef;$/;"	m	class:JBinaryData	access:private
Codec	JSphCpu.h	/^  typecode *Codec;   \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphCpu	access:protected
Codeg	JSphGpu.h	/^  typecode *Codeg;  \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphGpu	access:protected
CoefDtMin	JSph.h	/^  float CoefDtMin;           \/\/\/<Coefficient to calculate minimum time step. dtmin=coefdtmin*h\/speedsound (def=0.03).$/;"	m	class:JSph	access:protected
CoefH	JSpaceCtes.h	/^  double CoefH;           \/\/\/<Coefficient to calculate the smoothing length H (H=coefficient*sqrt(3*dp^2) in 3D).$/;"	m	class:JSpaceCtes	access:private
CoefHdp	JSpaceCtes.h	/^  double CoefHdp;         \/\/\/<Relationship between h and dp. (it is optional).$/;"	m	class:JSpaceCtes	access:private
CoefSound	JSpaceCtes.h	/^  double CoefSound;       \/\/\/<Coefficient to multiply speedsystem.$/;"	m	class:JSpaceCtes	access:private
Column	tinyxml.h	/^    int Column() const      { return location.col + 1; }    \/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
CompiledOMP	JRadixSort.cpp	/^bool JRadixSort::CompiledOMP(){$/;"	f	class:JRadixSort	signature:()
CompiledOMP	JRadixSort.h	/^  static bool CompiledOMP();$/;"	p	class:JRadixSort	access:public	signature:()
ComputeAceMax	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeAceMax(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMax	JSphCpuSingle.h	/^  double ComputeAceMax(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMax	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeAceMax(float *auxmem){$/;"	f	class:JSphGpuSingle	signature:(float *auxmem)
ComputeAceMax	JSphGpuSingle.h	/^  double ComputeAceMax(float *auxmem);$/;"	p	class:JSphGpuSingle	access:protected	signature:(float *auxmem)
ComputeAceMaxOmp	JSphCpuSingle.cpp	/^template<bool checkperiodic> double JSphCpuSingle::ComputeAceMaxOmp(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMaxOmp	JSphCpuSingle.h	/^  template<bool checkperiodic> double ComputeAceMaxOmp(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMaxSeq	JSphCpuSingle.cpp	/^template<bool checkperiodic> double JSphCpuSingle::ComputeAceMaxSeq(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMaxSeq	JSphCpuSingle.h	/^  template<bool checkperiodic> double ComputeAceMaxSeq(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
ComputeAceMod	JSphGpu_ker.cu	/^void ComputeAceMod(unsigned n,const float3 *ace,float *acemod){$/;"	f	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
ComputeAceMod	JSphGpu_ker.cu	/^void ComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod){$/;"	f	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
ComputeAceMod	JSphGpu_ker.h	/^void ComputeAceMod(unsigned n,const float3 *ace,float *acemod);$/;"	p	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
ComputeAceMod	JSphGpu_ker.h	/^void ComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod);$/;"	p	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
ComputeDamping	JDamping.cpp	/^void JDamping::ComputeDamping(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDamping	JDamping.cpp	/^void JDamping::ComputeDamping(double timestep,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(double timestep,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDamping	JDamping.h	/^  void ComputeDamping(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:private	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDamping	JDamping.h	/^  void ComputeDamping(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:public	signature:(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDamping	JDamping.h	/^  void ComputeDamping(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,tfloat4 *velrhop)const{ ComputeDamping(timestep,dt,n,pini,pos,NULL,velrhop); }$/;"	f	class:JDamping	access:public	signature:(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,tfloat4 *velrhop) const
ComputeDamping	JSphGpu_ker.cu	/^void ComputeDamping(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	f	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
ComputeDamping	JSphGpu_ker.h	/^void ComputeDamping(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	p	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
ComputeDampingPla	JDamping.cpp	/^void JDamping::ComputeDampingPla(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDampingPla	JDamping.h	/^  void ComputeDampingPla(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:private	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
ComputeDampingPla	JSphGpu_ker.cu	/^void ComputeDampingPla(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	f	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,double zmin,double zmax,tdouble4 pla0,tdouble4 pla1,tdouble4 pla2,tdouble4 pla3 ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
ComputeDampingPla	JSphGpu_ker.h	/^void ComputeDampingPla(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	p	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,double zmin,double zmax,tdouble4 pla0,tdouble4 pla1,tdouble4 pla2,tdouble4 pla3 ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
ComputeDt	JGaugeItem.h	/^  double ComputeDt;$/;"	m	class:JGaugeItem	access:protected
ComputeEnd	JGaugeItem.h	/^  double ComputeEnd;$/;"	m	class:JGaugeItem	access:protected
ComputeMkDomains	JSphMk.cpp	/^void JSphMk::ComputeMkDomains(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSphMk	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
ComputeMkDomains	JSphMk.h	/^  void ComputeMkDomains(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSphMk	access:public	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
ComputeNext	JGaugeItem.h	/^  double ComputeNext;$/;"	m	class:JGaugeItem	access:protected
ComputeSpsTau	JSphCpu.cpp	/^void JSphCpu::ComputeSpsTau(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau)const{$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau) const
ComputeSpsTau	JSphCpu.h	/^  void ComputeSpsTau(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau) const
ComputeSpsTau	JSphGpu_ker.cu	/^void ComputeSpsTau(unsigned np,unsigned npb,float smag,float blin$/;"	f	namespace:cusph	signature:(unsigned np,unsigned npb,float smag,float blin ,const float4 *velrhop,const tsymatrix3f *gradvelg,tsymatrix3f *tau)
ComputeSpsTau	JSphGpu_ker.h	/^void ComputeSpsTau(unsigned np,unsigned npb,float smag,float blin$/;"	p	namespace:cusph	signature:(unsigned np,unsigned npb,float smag,float blin ,const float4 *velrhop,const tsymatrix3f *gradvelg,tsymatrix3f *tau)
ComputeStart	JGaugeItem.h	/^  double ComputeStart;$/;"	m	class:JGaugeItem	access:protected
ComputeStep	JSphCpuSingle.h	/^  double ComputeStep(){ return(TStep==STEP_Verlet? ComputeStep_Ver(): ComputeStep_Sym()); }$/;"	f	class:JSphCpuSingle	access:protected	signature:()
ComputeStep	JSphGpuSingle.h	/^  double ComputeStep(){ return(TStep==STEP_Verlet? ComputeStep_Ver(): ComputeStep_Sym()); }$/;"	f	class:JSphGpuSingle	access:protected	signature:()
ComputeStepPos	JSphGpu_ker.cu	/^void ComputeStepPos(byte periactive,bool floatings,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb ,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
ComputeStepPos	JSphGpu_ker.h	/^void ComputeStepPos (byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
ComputeStepPos2	JSphGpu_ker.cu	/^void ComputeStepPos2(byte periactive,bool floatings,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb ,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
ComputeStepPos2	JSphGpu_ker.h	/^void ComputeStepPos2(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
ComputeStepSymplecticCor	JSphGpu_ker.cu	/^void ComputeStepSymplecticCor(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
ComputeStepSymplecticCor	JSphGpu_ker.h	/^void ComputeStepSymplecticCor(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
ComputeStepSymplecticPre	JSphGpu_ker.cu	/^void ComputeStepSymplecticPre(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
ComputeStepSymplecticPre	JSphGpu_ker.h	/^void ComputeStepSymplecticPre(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
ComputeStepVerlet	JSphGpu_ker.cu	/^void ComputeStepVerlet(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt2,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhopnew)
ComputeStepVerlet	JSphGpu_ker.h	/^void ComputeStepVerlet(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt2,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhopnew)
ComputeStep_Sym	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeStep_Sym(){$/;"	f	class:JSphCpuSingle	signature:()
ComputeStep_Sym	JSphCpuSingle.h	/^  double ComputeStep_Sym();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
ComputeStep_Sym	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeStep_Sym(){$/;"	f	class:JSphGpuSingle	signature:()
ComputeStep_Sym	JSphGpuSingle.h	/^  double ComputeStep_Sym();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
ComputeStep_Ver	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeStep_Ver(){$/;"	f	class:JSphCpuSingle	signature:()
ComputeStep_Ver	JSphCpuSingle.h	/^  double ComputeStep_Ver();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
ComputeStep_Ver	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeStep_Ver(){$/;"	f	class:JSphGpuSingle	signature:()
ComputeStep_Ver	JSphGpuSingle.h	/^  double ComputeStep_Ver();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
ComputeSymplecticCorr	JSphCpu.cpp	/^void JSphCpu::ComputeSymplecticCorr(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
ComputeSymplecticCorr	JSphCpu.h	/^  void ComputeSymplecticCorr(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
ComputeSymplecticCorr	JSphGpu.cpp	/^void JSphGpu::ComputeSymplecticCorr(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
ComputeSymplecticCorr	JSphGpu.h	/^  void ComputeSymplecticCorr(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
ComputeSymplecticCorrT	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeSymplecticCorrT(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
ComputeSymplecticCorrT	JSphCpu.h	/^  template<bool shift> void ComputeSymplecticCorrT(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
ComputeSymplecticPre	JSphCpu.cpp	/^void JSphCpu::ComputeSymplecticPre(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
ComputeSymplecticPre	JSphCpu.h	/^  void ComputeSymplecticPre(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
ComputeSymplecticPre	JSphGpu.cpp	/^void JSphGpu::ComputeSymplecticPre(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
ComputeSymplecticPre	JSphGpu.h	/^  void ComputeSymplecticPre(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
ComputeSymplecticPreT	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeSymplecticPreT(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
ComputeSymplecticPreT	JSphCpu.h	/^  template<bool shift> void ComputeSymplecticPreT(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
ComputeVelMod	JSphGpu_ker.cu	/^void ComputeVelMod(unsigned n,const float4 *vel,float *velmod){$/;"	f	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
ComputeVelMod	JSphGpu_ker.h	/^void ComputeVelMod(unsigned n,const float4 *vel,float *velmod);$/;"	p	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
ComputeVelrhopBound	JSphCpu.cpp	/^void JSphCpu::ComputeVelrhopBound(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew)const{$/;"	f	class:JSphCpu	signature:(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew) const
ComputeVelrhopBound	JSphCpu.h	/^  void ComputeVelrhopBound(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew)const;$/;"	p	class:JSphCpu	access:protected	signature:(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew) const
ComputeVerlet	JSphCpu.cpp	/^void JSphCpu::ComputeVerlet(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
ComputeVerlet	JSphCpu.h	/^  void ComputeVerlet(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
ComputeVerlet	JSphGpu.cpp	/^void JSphGpu::ComputeVerlet(double dt){  \/\/pdtedom$/;"	f	class:JSphGpu	signature:(double dt)
ComputeVerlet	JSphGpu.h	/^  void ComputeVerlet(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
ComputeVerletVarsFluid	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeVerletVarsFluid($/;"	f	class:JSphCpu	signature:( const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2 ,tdouble3 *pos,unsigned *dcell,typecode *code,tfloat4 *velrhopnew) const
ComputeVerletVarsFluid	JSphCpu.h	/^  template<bool shift> void ComputeVerletVarsFluid(const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2,tdouble3 *pos,unsigned *cell,typecode *code,tfloat4 *velrhopnew)const;$/;"	p	class:JSphCpu	access:protected	signature:(const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2,tdouble3 *pos,unsigned *cell,typecode *code,tfloat4 *velrhopnew) const
Config	JGaugeItem.cpp	/^void JGaugeItem::Config(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax$/;"	f	class:JGaugeItem	signature:(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax ,float scell,int hdiv,float h,float massfluid,float massbound ,float cteb,float gamma,float rhopzero)
Config	JGaugeItem.h	/^  void Config(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax$/;"	p	class:JGaugeItem	access:public	signature:(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax ,float scell,int hdiv,float h,float massfluid,float massbound ,float cteb,float gamma,float rhopzero)
Config	JGaugeSystem.cpp	/^void JGaugeSystem::Config(bool simulate2d,double simulate2dposy,double timemax,double timepart$/;"	f	class:JGaugeSystem	signature:(bool simulate2d,double simulate2dposy,double timemax,double timepart ,double dp,tdouble3 posmin,tdouble3 posmax,float scell,unsigned hdiv,float h ,float massfluid,float massbound,float cteb,float gamma,float rhopzero)
Config	JGaugeSystem.h	/^  void Config(bool simulate2d,double simulate2dposy,double timemax,double timepart$/;"	p	class:JGaugeSystem	access:public	signature:(bool simulate2d,double simulate2dposy,double timemax,double timepart ,double dp,tdouble3 posmin,tdouble3 posmax,float scell,unsigned hdiv,float h ,float massfluid,float massbound,float cteb,float gamma,float rhopzero)
Config	JPartDataBi4.cpp	/^void JPartDataBi4::Config(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* phead){$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* phead)
Config	JPartDataBi4.h	/^  void Config(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* parthead);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* parthead)
Config	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::Config(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount){$/;"	f	class:JPartFloatBi4Save	signature:(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount)
Config	JPartFloatBi4.h	/^  void Config(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount)
Config	JRangeFilter.cpp	/^void JRangeFilter::Config(std::string filter){$/;"	f	class:JRangeFilter	signature:(std::string filter)
Config	JRangeFilter.h	/^  void Config(std::string filter);$/;"	p	class:JRangeFilter	access:public	signature:(std::string filter)
Config	JSaveDt.cpp	/^void JSaveDt::Config(JXml *sxml,const std::string &place,double timemax,double timeout){$/;"	f	class:JSaveDt	signature:(JXml *sxml,const std::string &place,double timemax,double timeout)
Config	JSaveDt.h	/^  void Config(JXml *sxml,const std::string &place,double timemax,double timeout);$/;"	p	class:JSaveDt	access:public	signature:(JXml *sxml,const std::string &place,double timemax,double timeout)
Config	JSpaceParts.cpp	/^void JSpacePartsGetMk::Config(const JSpaceParts *sparts){$/;"	f	class:JSpacePartsGetMk	signature:(const JSpaceParts *sparts)
Config	JSpaceParts.h	/^  void Config(const JSpaceParts *sparts);$/;"	p	class:JSpacePartsGetMk	access:private	signature:(const JSpaceParts *sparts)
Config	JSphMk.cpp	/^void JSphMk::Config(const JSpaceParts *parts){$/;"	f	class:JSphMk	signature:(const JSpaceParts *parts)
Config	JSphMk.h	/^  void Config(const JSpaceParts *parts);$/;"	p	class:JSphMk	access:public	signature:(const JSpaceParts *parts)
Config	JTimeOut.cpp	/^void JTimeOut::Config(double timeoutdef){$/;"	f	class:JTimeOut	signature:(double timeoutdef)
Config	JTimeOut.cpp	/^void JTimeOut::Config(std::string filexml,const std::string &place,double timeoutdef){$/;"	f	class:JTimeOut	signature:(std::string filexml,const std::string &place,double timeoutdef)
Config	JTimeOut.h	/^  void Config(double timeoutdef);$/;"	p	class:JTimeOut	access:public	signature:(double timeoutdef)
Config	JTimeOut.h	/^  void Config(std::string filexml,const std::string &place,double timeoutdef);$/;"	p	class:JTimeOut	access:public	signature:(std::string filexml,const std::string &place,double timeoutdef)
ConfigBasic	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigBasic(unsigned piece,unsigned npiece,std::string runcode$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece,std::string runcode ,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir)
ConfigBasic	JPartDataBi4.h	/^  void ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir)
ConfigBasic	JPartDataHead.cpp	/^void JPartDataHead::ConfigBasic(std::string runcode,std::string appname$/;"	f	class:JPartDataHead	signature:(std::string runcode,std::string appname ,std::string casename,tdouble3 caseposmin,tdouble3 caseposmax ,bool data2d,double data2dposy,unsigned npieces,unsigned firstpart)
ConfigBasic	JPartDataHead.h	/^  void ConfigBasic(std::string runcode,std::string appname$/;"	p	class:JPartDataHead	access:public	signature:(std::string runcode,std::string appname ,std::string casename,tdouble3 caseposmin,tdouble3 caseposmax ,bool data2d,double data2dposy,unsigned npieces,unsigned firstpart)
ConfigBasic	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir){$/;"	f	class:JPartOutBi4Save	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir)
ConfigBasic	JPartOutBi4Save.h	/^  void ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir);$/;"	p	class:JPartOutBi4Save	access:public	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir)
ConfigBlockSizes	JSphGpu.cpp	/^void JSphGpu::ConfigBlockSizes(bool usezone,bool useperi){$/;"	f	class:JSphGpu	signature:(bool usezone,bool useperi)
ConfigBlockSizes	JSphGpu.h	/^  void ConfigBlockSizes(bool usezone,bool useperi);$/;"	p	class:JSphGpu	access:protected	signature:(bool usezone,bool useperi)
ConfigCellDiv	JSphCpu.h	/^  void ConfigCellDiv(JCellDivCpu* celldiv){ CellDiv=celldiv; }$/;"	f	class:JSphCpu	access:protected	signature:(JCellDivCpu* celldiv)
ConfigCellDiv	JSphGpu.h	/^  void ConfigCellDiv(JCellDivGpu* celldiv){ CellDiv=celldiv; }$/;"	f	class:JSphGpu	access:protected	signature:(JCellDivGpu* celldiv)
ConfigCellDivision	JSph.cpp	/^void JSph::ConfigCellDivision(){$/;"	f	class:JSph	signature:()
ConfigCellDivision	JSph.h	/^  void ConfigCellDivision();$/;"	p	class:JSph	access:protected	signature:()
ConfigComputeTiming	JGaugeItem.cpp	/^void JGaugeItem::ConfigComputeTiming(double start,double end,double dt){$/;"	f	class:JGaugeItem	signature:(double start,double end,double dt)
ConfigComputeTiming	JGaugeItem.h	/^  void ConfigComputeTiming(double start,double end,double dt);$/;"	p	class:JGaugeItem	access:public	signature:(double start,double end,double dt)
ConfigConstants	JSph.cpp	/^void JSph::ConfigConstants(bool simulate2d){$/;"	f	class:JSph	signature:(bool simulate2d)
ConfigConstants	JSph.h	/^  void ConfigConstants(bool simulate2d);$/;"	p	class:JSph	access:protected	signature:(bool simulate2d)
ConfigCtes	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigCtes(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid){$/;"	f	class:JPartDataBi4	signature:(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid)
ConfigCtes	JPartDataBi4.h	/^  void ConfigCtes(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid);$/;"	p	class:JPartDataBi4	access:public	signature:(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid)
ConfigCtes	JPartDataHead.cpp	/^void JPartDataHead::ConfigCtes(double dp,double h,double b,double rhop0,double gamma$/;"	f	class:JPartDataHead	signature:(double dp,double h,double b,double rhop0,double gamma ,double massbound,double massfluid,tfloat3 gravity)
ConfigCtes	JPartDataHead.h	/^  void ConfigCtes(double dp,double h,double b,double rhop0,double gamma$/;"	p	class:JPartDataHead	access:public	signature:(double dp,double h,double b,double rhop0,double gamma ,double massbound,double massfluid,tfloat3 gravity)
ConfigData	JMotionObj.cpp	/^void JMotionMovActive::ConfigData(){$/;"	f	class:JMotionMovActive	signature:()
ConfigData	JMotionObj.h	/^  void ConfigData();$/;"	p	class:JMotionMovActive	access:public	signature:()
ConfigDomain	JSphCpuSingle.cpp	/^void JSphCpuSingle::ConfigDomain(){$/;"	f	class:JSphCpuSingle	signature:()
ConfigDomain	JSphCpuSingle.h	/^  void ConfigDomain();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
ConfigDomain	JSphGpuSingle.cpp	/^void JSphGpuSingle::ConfigDomain(){$/;"	f	class:JSphGpuSingle	signature:()
ConfigDomain	JSphGpuSingle.h	/^  void ConfigDomain();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
ConfigDomainFixed	JSph.cpp	/^void JSph::ConfigDomainFixed(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainFixed	JSph.h	/^  void ConfigDomainFixed(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainFixedValue	JSph.cpp	/^void JSph::ConfigDomainFixedValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
ConfigDomainFixedValue	JSph.h	/^  void ConfigDomainFixedValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
ConfigDomainParticles	JSph.cpp	/^void JSph::ConfigDomainParticles(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainParticles	JSph.h	/^  void ConfigDomainParticles(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainParticlesPrc	JSph.cpp	/^void JSph::ConfigDomainParticlesPrc(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainParticlesPrc	JSph.h	/^  void ConfigDomainParticlesPrc(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
ConfigDomainParticlesPrcValue	JSph.cpp	/^void JSph::ConfigDomainParticlesPrcValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
ConfigDomainParticlesPrcValue	JSph.h	/^  void ConfigDomainParticlesPrcValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
ConfigDomainParticlesValue	JSph.cpp	/^void JSph::ConfigDomainParticlesValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
ConfigDomainParticlesValue	JSph.h	/^  void ConfigDomainParticlesValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
ConfigExternalMemory	JBinaryData.cpp	/^void JBinaryDataArray::ConfigExternalMemory(unsigned size,void* pointer){$/;"	f	class:JBinaryDataArray	signature:(unsigned size,void* pointer)
ConfigExternalMemory	JBinaryData.h	/^  void ConfigExternalMemory(unsigned size,void* pointer);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,void* pointer)
ConfigFileData	JBinaryData.cpp	/^void JBinaryDataArray::ConfigFileData(llong filepos,unsigned datacount,unsigned datasize){$/;"	f	class:JBinaryDataArray	signature:(llong filepos,unsigned datacount,unsigned datasize)
ConfigFileData	JBinaryData.h	/^  void ConfigFileData(llong filepos,unsigned datacount,unsigned datasize);$/;"	p	class:JBinaryDataArray	access:public	signature:(llong filepos,unsigned datacount,unsigned datasize)
ConfigLimits	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigLimits(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax){$/;"	f	class:JPartOutBi4Save	signature:(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax)
ConfigLimits	JPartOutBi4Save.h	/^  void ConfigLimits(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax);$/;"	p	class:JPartOutBi4Save	access:public	signature:(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax)
ConfigMk	JSpaceParts.h	/^  void ConfigMk(word mkfirst){ Mk=MkType+mkfirst; }$/;"	f	class:JSpacePartBlock	access:public	signature:(word mkfirst)
ConfigMkFirst	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::ConfigMkFirst(word mkboundfirst,word mkfluidfirst){$/;"	f	class:JSpaceVtkOut	signature:(word mkboundfirst,word mkfluidfirst)
ConfigMkFirst	JSpaceVtkOut.h	/^  void ConfigMkFirst(word mkboundfirst,word mkfluidfirst);$/;"	p	class:JSpaceVtkOut	access:public	signature:(word mkboundfirst,word mkfluidfirst)
ConfigObjects	JSphMotion.cpp	/^void JSphMotion::ConfigObjects(const JSpaceParts *parts){$/;"	f	class:JSphMotion	signature:(const JSpaceParts *parts)
ConfigObjects	JSphMotion.h	/^  void ConfigObjects(const JSpaceParts *parts);$/;"	p	class:JSphMotion	access:private	signature:(const JSpaceParts *parts)
ConfigOmp	JSphCpu.cpp	/^void JSphCpu::ConfigOmp(const JCfgRun *cfg){$/;"	f	class:JSphCpu	signature:(const JCfgRun *cfg)
ConfigOmp	JSphCpu.h	/^  void ConfigOmp(const JCfgRun *cfg);$/;"	p	class:JSphCpu	access:protected	signature:(const JCfgRun *cfg)
ConfigOutput	JAppInfo.cpp	/^void JAppInfo::ConfigOutput(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout){$/;"	f	class:JAppInfo	signature:(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout)
ConfigOutput	JAppInfo.h	/^  void ConfigOutput(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout="");$/;"	p	class:JAppInfo	access:public	signature:(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout=Ó)
ConfigOutputTiming	JGaugeItem.cpp	/^void JGaugeItem::ConfigOutputTiming(bool save,double start,double end,double dt){$/;"	f	class:JGaugeItem	signature:(bool save,double start,double end,double dt)
ConfigOutputTiming	JGaugeItem.h	/^  void ConfigOutputTiming(bool save,double start,double end,double dt);$/;"	p	class:JGaugeItem	access:public	signature:(bool save,double start,double end,double dt)
ConfigPaddle	JWaveGen.h	/^  bool ConfigPaddle(word mkbound,word paddleid,unsigned idbegin,unsigned np);$/;"	p	class:JWaveGen	access:public	signature:(word mkbound,word paddleid,unsigned idbegin,unsigned np)
ConfigPartDataHead	JSphMk.cpp	/^void JSphMk::ConfigPartDataHead(JPartDataHead *parthead)const{$/;"	f	class:JSphMk	signature:(JPartDataHead *parthead) const
ConfigPartDataHead	JSphMk.h	/^  void ConfigPartDataHead(JPartDataHead *parthead)const;$/;"	p	class:JSphMk	access:public	signature:(JPartDataHead *parthead) const
ConfigParticles	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic,bool reuseids){$/;"	f	class:JPartDataBi4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic,bool reuseids)
ConfigParticles	JPartDataBi4.h	/^  void ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic=false,bool reuseids=false);$/;"	p	class:JPartDataBi4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic=false,bool reuseids=false)
ConfigParticles	JPartDataHead.cpp	/^void JPartDataHead::ConfigParticles(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count){$/;"	f	class:JPartDataHead	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
ConfigParticles	JPartDataHead.h	/^  void ConfigParticles(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count);$/;"	p	class:JPartDataHead	access:public	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
ConfigParticles	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid){$/;"	f	class:JPartOutBi4Save	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)
ConfigParticles	JPartOutBi4Save.h	/^  void ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid);$/;"	p	class:JPartOutBi4Save	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)
ConfigPeriodic	JTimeControl.cpp	/^void JTimeControl::ConfigPeriodic(double tfirst,double tout){$/;"	f	class:JTimeControl	signature:(double tfirst,double tout)
ConfigPeriodic	JTimeControl.h	/^  void ConfigPeriodic(double tfirst,double tout);$/;"	p	class:JTimeControl	access:protected	signature:(double tfirst,double tout)
ConfigRunMode	JSphCpu.cpp	/^void JSphCpu::ConfigRunMode(const JCfgRun *cfg,std::string preinfo){$/;"	f	class:JSphCpu	signature:(const JCfgRun *cfg,std::string preinfo)
ConfigRunMode	JSphCpu.h	/^  void ConfigRunMode(const JCfgRun *cfg,std::string preinfo="");$/;"	p	class:JSphCpu	access:protected	signature:(const JCfgRun *cfg,std::string preinfo=Ó)
ConfigRunMode	JSphGpu.cpp	/^void JSphGpu::ConfigRunMode(std::string preinfo){$/;"	f	class:JSphGpu	signature:(std::string preinfo)
ConfigRunMode	JSphGpu.h	/^  void ConfigRunMode(std::string preinfo);$/;"	p	class:JSphGpu	access:protected	signature:(std::string preinfo)
ConfigRunPaths	JAppInfo.cpp	/^void JAppInfo::ConfigRunPaths(std::string runcommand){$/;"	f	class:JAppInfo	signature:(std::string runcommand)
ConfigRunPaths	JAppInfo.h	/^  void ConfigRunPaths(std::string runcommand);$/;"	p	class:JAppInfo	access:public	signature:(std::string runcommand)
ConfigSaveData	JSph.cpp	/^void JSph::ConfigSaveData(unsigned piece,unsigned pieces,std::string div){$/;"	f	class:JSph	signature:(unsigned piece,unsigned pieces,std::string div)
ConfigSaveData	JSph.h	/^  void ConfigSaveData(unsigned piece,unsigned pieces,std::string div);$/;"	p	class:JSph	access:protected	signature:(unsigned piece,unsigned pieces,std::string div)
ConfigSimDiv	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimDiv(TpAxisDiv axisdiv){$/;"	f	class:JPartDataBi4	signature:(TpAxisDiv axisdiv)
ConfigSimDiv	JPartDataBi4.h	/^  void ConfigSimDiv(TpAxisDiv axisdiv);$/;"	p	class:JPartDataBi4	access:public	signature:(TpAxisDiv axisdiv)
ConfigSimMap	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax){$/;"	f	class:JPartDataBi4	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
ConfigSimMap	JPartDataBi4.h	/^  void ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax);$/;"	p	class:JPartDataBi4	access:public	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
ConfigSimMap	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax){$/;"	f	class:JPartDataHead	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
ConfigSimMap	JPartDataHead.h	/^  void ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax);$/;"	p	class:JPartDataHead	access:public	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
ConfigSimNp	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimNp(bool npdynamic,bool reuseids){$/;"	f	class:JPartDataHead	signature:(bool npdynamic,bool reuseids)
ConfigSimNp	JPartDataHead.h	/^  void ConfigSimNp(bool npdynamic=false,bool reuseids=false);$/;"	p	class:JPartDataHead	access:public	signature:(bool npdynamic=false,bool reuseids=false)
ConfigSimPeri	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc){$/;"	f	class:JPartDataBi4	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
ConfigSimPeri	JPartDataBi4.h	/^  void ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc);$/;"	p	class:JPartDataBi4	access:public	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
ConfigSimPeri	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc){$/;"	f	class:JPartDataHead	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
ConfigSimPeri	JPartDataHead.h	/^  void ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc);$/;"	p	class:JPartDataHead	access:public	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
ConfigSplitting	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSplitting(bool splitting){$/;"	f	class:JPartDataBi4	signature:(bool splitting)
ConfigSplitting	JPartDataBi4.h	/^  void ConfigSplitting(bool splitting);$/;"	p	class:JPartDataBi4	access:public	signature:(bool splitting)
ConfigSplitting	JPartDataHead.cpp	/^void JPartDataHead::ConfigSplitting(bool splitting){$/;"	f	class:JPartDataHead	signature:(bool splitting)
ConfigSplitting	JPartDataHead.h	/^  void ConfigSplitting(bool splitting);$/;"	p	class:JPartDataHead	access:public	signature:(bool splitting)
ConfigTimes	JTimeControl.cpp	/^void JTimeControl::ConfigTimes(std::string times){$/;"	f	class:JTimeControl	signature:(std::string times)
ConfigTimes	JTimeControl.cpp	/^void JTimeControl::ConfigTimes(unsigned ntimes,const double *vtimes){$/;"	f	class:JTimeControl	signature:(unsigned ntimes,const double *vtimes)
ConfigTimes	JTimeControl.h	/^  void ConfigTimes(std::string times);$/;"	p	class:JTimeControl	access:protected	signature:(std::string times)
ConfigTimes	JTimeControl.h	/^  void ConfigTimes(unsigned ntimes,const double *vtimes);$/;"	p	class:JTimeControl	access:protected	signature:(unsigned ntimes,const double *vtimes)
ConfigVisco	JPartDataHead.cpp	/^void JPartDataHead::ConfigVisco(JPartDataHead::TpVisco type,float value,float boundfactor){$/;"	f	class:JPartDataHead	signature:(JPartDataHead::TpVisco type,float value,float boundfactor)
ConfigVisco	JPartDataHead.h	/^  void ConfigVisco(JPartDataHead::TpVisco type,float value,float boundfactor);$/;"	p	class:JPartDataHead	access:public	signature:(JPartDataHead::TpVisco type,float value,float boundfactor)
Configured	JGaugeSystem.h	/^  bool Configured;$/;"	m	class:JGaugeSystem	access:private
ConstantDataUp	JSphGpu.cpp	/^void JSphGpu::ConstantDataUp(){$/;"	f	class:JSphGpu	signature:()
ConstantDataUp	JSphGpu.h	/^  void ConstantDataUp();$/;"	p	class:JSphGpu	access:protected	signature:()
ConvertUTF32ToUTF8	tinyxml.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned long input, char* output, int* length )
ConvertUTF32ToUTF8	tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
CopyChangeRef	JMotion.cpp	/^void JMotion::CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const{$/;"	f	class:JMotion	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
CopyChangeRef	JMotion.h	/^  void CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const;$/;"	p	class:JMotion	access:public	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
CopyChangeRef	JMotionObj.cpp	/^void JMotionObj::CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
CopyChangeRef	JMotionObj.h	/^  void CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
CopyCoefs	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::CopyCoefs(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2){$/;"	f	class:JWaveSpectrumGpu	signature:(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2)
CopyCoefs	JWaveSpectrumGpu.h	/^  void CopyCoefs(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2)
CopyConfig	JMotion.cpp	/^void JMotion::CopyConfig(JMotion &mot)const{$/;"	f	class:JMotion	signature:(JMotion &mot) const
CopyConfig	JMotion.h	/^  void CopyConfig(JMotion &mot)const;$/;"	p	class:JMotion	access:public	signature:(JMotion &mot) const
CopyConfig	JMotionObj.cpp	/^void JMotionObj::CopyConfig(JMotion &mot)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot) const
CopyConfig	JMotionObj.h	/^  void CopyConfig(JMotion &mot)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot) const
CopyConfigMovs	JMotionObj.cpp	/^void JMotionObj::CopyConfigMovs(JMotion &mot)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot) const
CopyConfigMovs	JMotionObj.h	/^  void CopyConfigMovs(JMotion &mot)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot) const
CopyFrom	JSpaceProperties.cpp	/^void JSpacePropLinks::CopyFrom(const JSpacePropLinks* links){$/;"	f	class:JSpacePropLinks	signature:(const JSpacePropLinks* links)
CopyFrom	JSpaceProperties.cpp	/^void JSpacePropProperty::CopyFrom(const JSpacePropProperty* pro){$/;"	f	class:JSpacePropProperty	signature:(const JSpacePropProperty* pro)
CopyFrom	JSpaceProperties.cpp	/^void JSpaceProperties::CopyFrom(const JSpaceProperties* props){$/;"	f	class:JSpaceProperties	signature:(const JSpaceProperties* props)
CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpacePropLinks* links);$/;"	p	class:JSpacePropLinks	access:public	signature:(const JSpacePropLinks* links)
CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpacePropProperty* pro);$/;"	p	class:JSpacePropProperty	access:public	signature:(const JSpacePropProperty* pro)
CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpaceProperties* props);$/;"	p	class:JSpaceProperties	access:public	signature:(const JSpaceProperties* props)
CopyTo	tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
CopyTo	tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlComment* target ) const;$/;"	p	class:TiXmlComment	access:protected	signature:( TiXmlComment* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlDeclaration* target ) const;$/;"	p	class:TiXmlDeclaration	access:protected	signature:( TiXmlDeclaration* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlDocument* target ) const;$/;"	p	class:TiXmlDocument	access:private	signature:( TiXmlDocument* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlElement* target ) const;$/;"	p	class:TiXmlElement	access:protected	signature:( TiXmlElement* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlNode* target ) const;$/;"	p	class:TiXmlNode	access:protected	signature:( TiXmlNode* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlText* target ) const;$/;"	p	class:TiXmlText	access:protected	signature:( TiXmlText* target ) const
CopyTo	tinyxml.h	/^    void CopyTo( TiXmlUnknown* target ) const;$/;"	p	class:TiXmlUnknown	access:protected	signature:( TiXmlUnknown* target ) const
CorrectFile	JXml.cpp	/^void JXml::CorrectFile(const std::string &fname){$/;"	f	class:JXml	signature:(const std::string &fname)
CorrectFile	JXml.h	/^  void CorrectFile(const std::string &fname);$/;"	p	class:JXml	access:public	signature:(const std::string &fname)
CorrectNormal	FunctionsMath.h	/^inline tdouble3 CorrectNormal(tdouble3 n){$/;"	f	namespace:fmath	signature:(tdouble3 n)
CorrectNormal	FunctionsMath.h	/^inline tfloat3 CorrectNormal(tfloat3 n){$/;"	f	namespace:fmath	signature:(tfloat3 n)
Count	JArraysCpu.h	/^  unsigned Count;$/;"	m	class:JArraysCpuSize	access:protected
Count	JArraysGpu.h	/^  unsigned Count;$/;"	m	class:JArraysGpuSize	access:protected
Count	JBinaryData.h	/^  unsigned Count;         \/\/\/<Numero de elementos almacenados en pointer. Number of elements stored in pointer.$/;"	m	class:JBinaryDataArray	access:private
Count	JGaugeItem.h	/^  unsigned Count;$/;"	m	class:JGaugeForce	access:protected
Count	JLinearValue.h	/^  unsigned Count;$/;"	m	class:JLinearValue	access:protected
Count	JMotionMov.h	/^  unsigned Count;  \/\/-Numero de posiciones$/;"	m	class:JMotionDataFile	access:private
Count	JPartDataHead.h	/^  unsigned Count;     \/\/\/<Number of particles.$/;"	m	class:JPartDataHeadMkBlock	access:public
Count	JPartsLoad4.h	/^  unsigned Count;    \/\/-Number of particles.$/;"	m	class:JPartsLoad4	access:protected
Count	JPartsOut.h	/^  unsigned Count;$/;"	m	class:JPartsOut	access:protected
Count	JRangeFilter.h	/^  unsigned Count;            \/\/\/<Number of intervals stored in \\ref Ranges.$/;"	m	class:JRangeFilter	access:private
Count	JSaveCsv2.h	/^  const unsigned Count;$/;"	m	class:jcsv::Sep	access:public
Count	JSaveDt.h	/^  unsigned Count;                       \/\/\/<Number of stored intervals. | Numero de intervalos almacenados.$/;"	m	class:JSaveDt	access:private
Count	JSpaceEParms.h	/^  unsigned Count()const{ return(unsigned(List.size())); }$/;"	f	class:JSpaceEParms	access:public	signature:() const
Count	JSpaceParts.cpp	/^unsigned JSpaceParts::Count()const{$/;"	f	class:JSpaceParts	signature:() const
Count	JSpaceParts.cpp	/^unsigned JSpaceParts::Count(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
Count	JSpaceParts.h	/^  unsigned Count()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
Count	JSpaceParts.h	/^  unsigned Count(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
Count	JSpaceParts.h	/^  unsigned Count;                       \/\/\/<Number of particles.$/;"	m	class:JSpacePartBlock	access:private
Count	JSpaceVtkOut.h	/^  unsigned Count()const{ return(unsigned(Files.size())); }$/;"	f	class:JSpaceVtkOut	access:public	signature:() const
Count	JSphDtFixed.h	/^  unsigned Count;$/;"	m	class:JSphDtFixed	access:protected
Count	JSphInitialize.h	/^  unsigned Count()const{ return(unsigned(Opes.size())); }$/;"	f	class:JSphInitialize	access:public	signature:() const
Count	JSphMk.h	/^  const unsigned Count;   \/\/\/<Number of particles.$/;"	m	class:JSphMkBlock	access:public
Count	JSphVisco.h	/^  unsigned Count;$/;"	m	class:JSphVisco	access:protected
Count	JWaveGen.h	/^  unsigned Count;$/;"	m	class:JWaveGen	access:private
CountAllDts	JSaveDt.h	/^  unsigned CountAllDts;$/;"	m	class:JSaveDt	access:private
CountBlockType	JSphMk.cpp	/^unsigned JSphMk::CountBlockType(TpParticles type)const{$/;"	f	class:JSphMk	signature:(TpParticles type) const
CountBlockType	JSphMk.h	/^  unsigned CountBlockType(TpParticles type)const;$/;"	p	class:JSphMk	access:public	signature:(TpParticles type) const
CountBlocks	JSpaceParts.cpp	/^unsigned JSpaceParts::CountBlocks(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
CountBlocks	JSpaceParts.h	/^  unsigned CountBlocks()const{ return(unsigned(Blocks.size())); }$/;"	f	class:JSpaceParts	access:public	signature:() const
CountBlocks	JSpaceParts.h	/^  unsigned CountBlocks(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
CountElements	JXml.cpp	/^unsigned JXml::CountElements(const TiXmlNode* node,const std::string &name)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &name) const
CountElements	JXml.h	/^  unsigned CountElements(const TiXmlNode* node,const std::string &name)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &name) const
CountMax	JArraysCpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysCpuSize	access:protected
CountMax	JArraysGpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysGpuSize	access:protected
CountUsed	JArraysCpu.h	/^  unsigned CountUsed;$/;"	m	class:JArraysCpuSize	access:protected
CountUsed	JArraysGpu.h	/^  unsigned CountUsed;$/;"	m	class:JArraysGpuSize	access:protected
CountUsedMax	JArraysCpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysCpuSize	access:protected
CountUsedMax	JArraysGpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysGpuSize	access:protected
CounterEnd	JTimer.h	/^  LARGE_INTEGER CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
CounterEnd	JTimer.h	/^  timeval CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
CounterEnd	JTimerClock.h	/^  clock_t CounterIni,CounterEnd;$/;"	m	class:JTimerClock	access:private
CounterIni	JTimer.h	/^  LARGE_INTEGER CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
CounterIni	JTimer.h	/^  timeval CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
CounterIni	JTimerClock.h	/^  clock_t CounterIni,CounterEnd;$/;"	m	class:JTimerClock	access:private
Cpart	JPartDataBi4.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartDataBi4	access:private
Cpart	JPartFloatBi4.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartFloatBi4Save	access:private
Cpart	JPartOutBi4Save.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartOutBi4Save	access:private
Cpu	JCfgRun.h	/^  bool Cpu;$/;"	m	class:JCfgRun	access:public
Cpu	JGaugeItem.h	/^  const bool Cpu;$/;"	m	class:JGaugeItem	access:protected
Cpu	JGaugeSystem.h	/^  const bool Cpu;$/;"	m	class:JGaugeSystem	access:private
Cpu	JSph.h	/^  const bool Cpu;$/;"	m	class:JSph	access:protected
CpuParticlesSize	JSphCpu.h	/^  unsigned CpuParticlesSize;  \/\/\/<Number of particles with reserved memory on the CPU. | Numero de particulas para las cuales se reservo memoria en cpu.$/;"	m	class:JSphCpu	access:protected
CpuParticlesSize	JSphGpu.h	/^  unsigned CpuParticlesSize; \/\/\/<Number of particles for which CPU memory was allocated. | Numero de particulas para las cuales se reservo memoria en cpu. $/;"	m	class:JSphGpu	access:protected
CpyFile	Functions.cpp	/^int CpyFile(std::string src,const std::string dest){$/;"	f	namespace:fun	signature:(std::string src,const std::string dest)
CpyFile	Functions.h	/^int CpyFile(std::string src,const std::string dest);$/;"	p	namespace:fun	signature:(std::string src,const std::string dest)
CreateArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::CreateArray(const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type)
CreateArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::CreateArray(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer)
CreateArray	JBinaryData.h	/^  JBinaryDataArray* CreateArray(const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type)
CreateArray	JBinaryData.h	/^  JBinaryDataArray* CreateArray(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer)
CreateDirs	JAppInfo.h	/^  bool CreateDirs;   \/\/\/<Creates full path for output files (true by default).$/;"	m	class:JAppInfo	access:private
CreateDirs	JCfgRun.h	/^  bool CreateDirs;   \/\/\/<Creates full path for output files (true by default).$/;"	m	class:JCfgRun	access:public
CreateDirs	JDsphConfig.h	/^  int CreateDirs;   \/\/\/<Creates full path for output files (-1=undefined, 0=no, 1=yes).$/;"	m	class:JDsphConfig	access:protected
CreateItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::CreateItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
CreateItem	JBinaryData.h	/^  JBinaryData* CreateItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
CreateMotList	JMotion.cpp	/^void JMotion::CreateMotList(){$/;"	f	class:JMotion	signature:()
CreateMotList	JMotion.h	/^  void CreateMotList();$/;"	p	class:JMotion	access:private	signature:()
CreateOBJsByMk	JFormatFiles2.h	/^  static void CreateOBJsByMk(void* ptr_vtksimple,std::string filein,std::string filesout$/;"	p	class:JFormatFiles2	access:public	signature:(void* ptr_vtksimple,std::string filein,std::string filesout ,const std::vector<unsigned> &mkbounds,unsigned mkboundfirst,TpModeNormal normalmode)
CreatePartsInit	JSph.cpp	/^void JSph::CreatePartsInit(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSph	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
CreatePartsInit	JSph.h	/^  void CreatePartsInit(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
CreateShapesMk	JFormatFiles2.h	/^  static void* CreateShapesMk(const std::vector<std::string> &vtkfiles);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::vector<std::string> &vtkfiles)
Cs0	JSph.h	/^  double Cs0;$/;"	m	class:JSph	access:protected
CsTypeTimerCPU	JSphTimersCpu.h	/^}CsTypeTimerCPU;$/;"	t	typeref:enum:__anon38
CsTypeTimerGPU	JSphTimersGpu.h	/^}CsTypeTimerGPU;$/;"	t	typeref:enum:__anon40
CsvSepComa	JAppInfo.h	/^  bool CsvSepComa;   \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:JAppInfo	access:private
CsvSepComa	JCfgRun.h	/^  bool CsvSepComa;   \/\/\/<Separator character in CSV files (false=semicolon, true=coma).$/;"	m	class:JCfgRun	access:public
CsvSepComa	JSaveCsv2.h	/^  const bool CsvSepComa;   \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:jcsv::JSaveCsv2	access:private
CsvSepComa	JSph.h	/^  bool CsvSepComa;           \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:JSph	access:protected
CsvSeparator	JDsphConfig.h	/^  int CsvSeparator; \/\/\/<Separator character in CSV files (-1=undefined, 0=semicolon, 1=coma).$/;"	m	class:JDsphConfig	access:protected
CteB	JGaugeItem.h	/^  float CteB;$/;"	m	class:JGaugeItem	access:protected
CteB	JGaugeSystem.h	/^  float CteB;$/;"	m	class:JGaugeSystem	access:private
CteB	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
CteInteractionUp	JSphGpu_ker.cu	/^void CteInteractionUp(const StCteInteraction *cte){$/;"	f	namespace:cusph	signature:(const StCteInteraction *cte)
CteInteractionUp	JSphGpu_ker.h	/^void CteInteractionUp(const StCteInteraction *cte);$/;"	p	namespace:cusph	signature:(const StCteInteraction *cte)
CubicCte	JSph.h	/^  StCubicCte CubicCte;        \/\/\/<Constants for Cubic Spline Kernel.                                     | Constante para kernel cubic spline.$/;"	m	class:JSph	access:protected
CurrAccAng	JSphAccInput.h	/^  tdouble3 CurrAccAng;        \/\/\/<The current interpolated values for angular acceleration.$/;"	m	class:JSphAccInputMk	access:protected
CurrAccLin	JSphAccInput.h	/^  tdouble3 CurrAccLin;        \/\/\/<The current interpolated values for linear acceleration.$/;"	m	class:JSphAccInputMk	access:protected
CurrVelAng	JSphAccInput.h	/^  tdouble3 CurrVelAng;        \/\/\/<The current interpolated values for angular velocity. SL$/;"	m	class:JSphAccInputMk	access:protected
CurrVelLin	JSphAccInput.h	/^  tdouble3 CurrVelLin;        \/\/\/<The current interpolated values for linear velocity. SL$/;"	m	class:JSphAccInputMk	access:protected
Cursor	tinyxmlparser.cpp	/^    const TiXmlCursor& Cursor() { return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:()
DEBUG	tinyxml.h	43;"	d
DECLARATION	tinyxml.h	/^        DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
DELTA_Dynamic	Types.h	/^  DELTA_Dynamic=2,          \/\/\/<DeltaSPH approach applied only for fluid particles that are not interaction with boundaries (DBC). $/;"	e	enum:__anon52
DELTA_DynamicExt	Types.h	/^  DELTA_DynamicExt=3,       \/\/\/<DeltaSPH approach applied in case of Periodic Boundary Conditions or new multiGPU implementation. $/;"	e	enum:__anon52
DELTA_HEAVYFLOATING	Types.h	30;"	d
DELTA_None	Types.h	/^  DELTA_None=0              \/\/\/<DeltaSPH is not applied$/;"	e	enum:__anon52
DFSIZEMAX	JMotionObj.h	/^  static const unsigned DFSIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JMotionMovActive	access:public
DIVBSIZE	JCellDivGpu_ker.h	34;"	d
DIV_None	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
DIV_Unknown	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
DIV_X	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
DIV_Y	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
DIV_Z	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
DOCUMENT	tinyxml.h	/^        DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
Damping	JSph.h	/^  JDamping *Damping;            \/\/\/<Object for damping zones.$/;"	m	class:JSph	access:protected
DatBool	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
DatChar	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
DatDouble	JBinaryData.h	/^    ,DatFloat=11,DatDouble=12$/;"	e	enum:JBinaryDataDef::__anon5
DatDouble3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
DatFloat	JBinaryData.h	/^    ,DatFloat=11,DatDouble=12$/;"	e	enum:JBinaryDataDef::__anon5
DatFloat3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
DatInt	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
DatInt3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
DatLlong	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
DatNull	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
DatShort	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
DatText	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
DatUchar	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
DatUint	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
DatUint3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
DatUllong	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
DatUshort	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
Data	JPartDataBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartDataBi4	access:private
Data	JPartFloatBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartFloatBi4Load	access:private
Data	JPartFloatBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartFloatBi4Save	access:private
Data	JPartOutBi4Save.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartOutBi4Save	access:private
Data	JReadDatafile.h	/^  char *Data;            \/\/\/< Data from file.$/;"	m	class:JReadDatafile	access:private
Data	JSaveCsv2.h	/^  std::string Data;$/;"	m	class:jcsv::JSaveCsv2	access:private
Data2d	JPartDataHead.h	/^  bool Data2d;           \/\/\/<Toggles 2D simulation.$/;"	m	class:JPartDataHead	access:private
Data2dPosY	JPartDataHead.h	/^  double Data2dPosY;     \/\/\/<Y value in 2D simulations.$/;"	m	class:JPartDataHead	access:private
Data32	JRadixSort.h	/^  unsigned *Data32;$/;"	m	class:JRadixSort	access:private
Data64	JRadixSort.h	/^  ullong *Data64;$/;"	m	class:JRadixSort	access:private
DataBi4	JSph.h	/^  JPartDataBi4 *DataBi4;            \/\/\/<To store particles and info in bi4 format.      | Para grabar particulas e info en formato bi4.$/;"	m	class:JSph	access:private
DataFile	JMotionMov.h	/^  JMotionDataFile *DataFile;$/;"	m	class:JMotionMovRectFile	access:private
DataFile	JMotionMov.h	/^  JMotionDataFile *DataFile;$/;"	m	class:JMotionMovRotFile	access:private
DataFloatBi4	JSph.h	/^  JPartFloatBi4Save *DataFloatBi4;  \/\/\/<To store floating data in bi4 format.           | Para grabar datos de floatings en formato bi4.$/;"	m	class:JSph	access:private
DataInFile	JBinaryData.h	/^  bool DataInFile()const{ return(FileDataPos>=0); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
DataInPointer	JBinaryData.h	/^  bool DataInPointer()const{ return(Pointer&&Count); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
DataLineEmpty	JSaveCsv2.h	/^  bool DataLineEmpty;$/;"	m	class:jcsv::JSaveCsv2	access:private
DataOutBi4	JSph.h	/^  JPartOutBi4Save *DataOutBi4;      \/\/\/<To store excluded particles in bi4 format.      | Para grabar particulas excluidas en formato bi4.$/;"	m	class:JSph	access:private
DataSelected	JSaveCsv2.h	/^  bool DataSelected;$/;"	m	class:jcsv::JSaveCsv2	access:private
Date	JAppInfo.h	/^  std::string Date;$/;"	m	class:JAppInfo	access:private
Date	JPartDataHead.h	/^  std::string Date;$/;"	m	class:JPartDataHead	access:private
Dcell	JSphGpu.h	/^  unsigned *Dcell;    \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphGpu	access:protected
Dcellc	JSphCpu.h	/^  unsigned *Dcellc;  \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphCpu	access:protected
Dcellg	JSphGpu.h	/^  unsigned *Dcellg; \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphGpu	access:protected
DefPeriActive	JPeriodicDef.h	/^inline byte DefPeriActive(TpPeri tperi){ return(tperi==PERI_Unknown? 0: byte(tperi)); }$/;"	f	signature:(TpPeri tperi)
DefPeriActive	JPeriodicDef.h	/^inline byte DefPeriActive(bool perix,bool periy,bool periz){ return(byte((perix? 1: 0)+(periy? 2: 0)+(periz? 4: 0))); }$/;"	f	signature:(bool perix,bool periy,bool periz)
DefineDomain	JCellDivCpu.cpp	/^void JCellDivCpu::DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax){$/;"	f	class:JCellDivCpu	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
DefineDomain	JCellDivCpu.h	/^  void DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax);$/;"	p	class:JCellDivCpu	access:public	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
DefineDomain	JCellDivGpu.cpp	/^void JCellDivGpu::DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax){$/;"	f	class:JCellDivGpu	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
DefineDomain	JCellDivGpu.h	/^  void DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax);$/;"	p	class:JCellDivGpu	access:public	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
DefineField	JFormatFiles2.h	/^  static StScalarData DefineField(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL){$/;"	f	class:JFormatFiles2	access:public	signature:(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL)
DefineFieldDel	JFormatFiles2.h	/^  static StScalarData DefineFieldDel(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL){$/;"	f	class:JFormatFiles2	access:public	signature:(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL)
DefineFieldFormat	JFormatFiles2.h	/^  static void DefineFieldFormat(StScalarData &field);$/;"	p	class:JFormatFiles2	access:public	signature:(StScalarData &field)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,const tdouble3 &pt4,const tdouble3 &pt5,const tdouble3 &pt6 ,const tdouble3 &pt7,const tdouble3 &pt8,int value,float valuef)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &size$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &size ,int value,float valuef)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &vx$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &vx ,const tdouble3 &vy,const tdouble3 &vz,int value,float valuef)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,const tfloat3 &pt4,const tfloat3 &pt5,const tfloat3 &pt6 ,const tfloat3 &pt7,const tfloat3 &pt8,int value,float valuef)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &size$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &size ,int value,float valuef)
DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &vx$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &vx ,const tfloat3 &vy,const tfloat3 &vz,int value,float valuef)
DefineShape_Line	JFormatFiles2.h	/^  static StShapeData DefineShape_Line(const tdouble3 &pt1,const tdouble3 &pt2,int value,float valuef){$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2,int value,float valuef)
DefineShape_Line	JFormatFiles2.h	/^  static StShapeData DefineShape_Line(const tfloat3 &pt1,const tfloat3 &pt2,int value,float valuef){$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2,int value,float valuef)
DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)
DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,const tdouble3 &pt4,int value,float valuef)
DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef);$/;"	p	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef)
DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,const tfloat3 &pt4,int value,float valuef)
DefineShape_Triangle	JFormatFiles2.h	/^  static StShapeData DefineShape_Triangle(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,int value,float valuef)
DefineShape_Triangle	JFormatFiles2.h	/^  static StShapeData DefineShape_Triangle(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,int value,float valuef)
DefineStatsField	JFormatFiles2.h	/^  static StStatistics DefineStatsField(const std::string &name$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &name ,TpData type,unsigned comp,const void *pointer ,bool selmin=true,bool selmax=true,bool selmean=true,bool seltotal=true,bool selcomponent=true)
Del	JMotionObj.h	/^  bool Del;$/;"	m	class:JMotionMovActive	access:public
DeleteFields	JFormatFiles2.h	/^  static void DeleteFields(std::vector<StScalarData> &fields);$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StScalarData> &fields)
DeleteShapesMk	JFormatFiles2.h	/^  static void DeleteShapesMk(void* ptr_vtksimple);$/;"	p	class:JFormatFiles2	access:public	signature:(void* ptr_vtksimple)
Delta2H	JSph.h	/^  float Delta2H;             \/\/\/<Constant for DeltaSPH. Delta2H=DeltaSph*H*2$/;"	m	class:JSph	access:protected
DeltaSph	JCfgRun.h	/^  float DeltaSph;$/;"	m	class:JCfgRun	access:public
DeltaSph	JSph.h	/^  float DeltaSph;             \/\/\/<DeltaSPH constant. The default value is 0.1f, with 0 having no effect. | Constante para DeltaSPH. El valor por defecto es 0.1f, con 0 no tiene efecto.  $/;"	m	class:JSph	access:protected
Deltac	JSphCpu.h	/^  float *Deltac;         \/\/\/<Adjusted sum with Delta-SPH with DELTA_DynamicExt | Acumula ajuste de Delta-SPH con DELTA_DynamicExt$/;"	m	class:JSphCpu	access:protected
Deltag	JSphGpu.h	/^  float *Deltag;     \/\/\/<Accumulates adjustment of Delta-SPH with DELTA_DynamicExt. | Acumula ajuste de Delta-SPH con DELTA_DynamicExt.$/;"	m	class:JSphGpu	access:protected
DemData	JSph.h	/^  StDemData *DemData;  \/\/\/<Data of DEM objects. [DemDataSize]$/;"	m	class:JSph	access:protected
DemDataSize	JSph.h	/^  static const unsigned DemDataSize=CODE_TYPE_FLUID;$/;"	m	class:JSph	access:protected
DemDatag	JSphGpu.h	/^  float4 *DemDatag;       \/\/\/<Data of the object {mass, (1-poisson^2)\/young, kfric, restitu} in GPU [DemObjsSize].$/;"	m	class:JSphGpu	access:protected
DemDtForce	JPartFloatBi4.h	/^  double DemDtForce;$/;"	m	class:JPartFloatBi4Load	access:private
DemDtForce	JPartsLoad4.h	/^  double DemDtForce;             \/\/\/<Dt for tangencial acceleration in DEM calculations.$/;"	m	class:JPartsLoad4	access:protected
DemDtForce	JSph.h	/^  double DemDtForce;       \/\/\/<Dt for tangencial acceleration.$/;"	m	class:JSph	access:protected
DestructorActive	JObject.h	/^  bool DestructorActive;   \/\/\/<Destructor of object in execution.$/;"	m	class:JObject	access:protected
Determinant3x3	FunctionsMath.h	/^inline double Determinant3x3(const tmatrix3d &d){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d)
Determinant3x3	FunctionsMath.h	/^inline float Determinant3x3(const tmatrix3f &d){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d)
Determinant3x3	FunctionsMath_ker.cu	/^__device__ double Determinant3x3(const tmatrix3d &d){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d)
Determinant3x3	FunctionsMath_ker.cu	/^__device__ float Determinant3x3(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
Determinant3x3dbl	FunctionsMath_ker.cu	/^__device__ double Determinant3x3dbl(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
Determinant4x4	FunctionsMath.h	/^inline double Determinant4x4(const tmatrix4d &d){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d)
Determinant4x4	FunctionsMath.h	/^inline float Determinant4x4(const tmatrix4f &d){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d)
Determinant4x4	FunctionsMath_ker.cu	/^__device__ double Determinant4x4(const tmatrix4d &d){$/;"	f	namespace:cumath	signature:(const tmatrix4d &d)
Determinant4x4	FunctionsMath_ker.cu	/^__device__ float Determinant4x4(const tmatrix4f &d){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d)
Determinant4x4dbl	FunctionsMath_ker.cu	/^__device__ double Determinant4x4dbl(const tmatrix4f &d){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d)
DfAng	JMotionObj.h	/^  const double *DfAng;     \/\/-Angulos, siemgre en grados.$/;"	m	class:JMotionMovActive	access:public
DfConfig	JMotionObj.cpp	/^void JMotionMovActive::DfConfig(bool postype){$/;"	f	class:JMotionMovActive	signature:(bool postype)
DfConfig	JMotionObj.h	/^  void DfConfig(bool postype);$/;"	p	class:JMotionMovActive	access:public	signature:(bool postype)
DfCount	JMotionObj.h	/^  unsigned DfCount;  \/\/-Numero de posiciones$/;"	m	class:JMotionMovActive	access:public
DfGetNewAng	JMotionObj.cpp	/^double JMotionMovActive::DfGetNewAng(double t){$/;"	f	class:JMotionMovActive	signature:(double t)
DfGetNewAng	JMotionObj.h	/^  double DfGetNewAng(double t);$/;"	p	class:JMotionMovActive	access:public	signature:(double t)
DfGetNewPos	JMotionObj.cpp	/^tdouble3 JMotionMovActive::DfGetNewPos(double t){$/;"	f	class:JMotionMovActive	signature:(double t)
DfGetNewPos	JMotionObj.h	/^  tdouble3 DfGetNewPos(double t);$/;"	p	class:JMotionMovActive	access:public	signature:(double t)
DfIndex	JMotionObj.h	/^  unsigned DfIndex;  \/\/-Indice de posicionamiento temporal$/;"	m	class:JMotionMovActive	access:public
DfLastAng	JMotionObj.h	/^  double DfLastAng;$/;"	m	class:JMotionMovActive	access:public
DfLastPos	JMotionObj.h	/^  tdouble3 DfLastPos;$/;"	m	class:JMotionMovActive	access:public
DfPos	JMotionObj.h	/^  const tdouble3 *DfPos;   \/\/-Posiciones$/;"	m	class:JMotionMovActive	access:public
DfPosType	JMotionObj.h	/^  bool DfPosType;    \/\/-Indica que se almacenan posiciones.$/;"	m	class:JMotionMovActive	access:public
DfReset	JMotionObj.cpp	/^void JMotionMovActive::DfReset(){$/;"	f	class:JMotionMovActive	signature:()
DfReset	JMotionObj.h	/^  void DfReset();$/;"	p	class:JMotionMovActive	access:public	signature:()
DfTimes	JMotionObj.h	/^  const double *DfTimes;   \/\/-Tiempos$/;"	m	class:JMotionMovActive	access:public
DgCheckResult32	JRadixSort.cpp	/^void JRadixSort::DgCheckResult32()const{$/;"	f	class:JRadixSort	signature:() const
DgCheckResult32	JRadixSort.h	/^  void DgCheckResult32()const;$/;"	p	class:JRadixSort	access:public	signature:() const
DgCheckResult64	JRadixSort.cpp	/^void JRadixSort::DgCheckResult64()const{$/;"	f	class:JRadixSort	signature:() const
DgCheckResult64	JRadixSort.h	/^  void DgCheckResult64()const;$/;"	p	class:JRadixSort	access:public	signature:() const
DgNum	JSph.h	/^  unsigned DgNum;$/;"	m	class:JSph	access:public
DgReduSumDouble	JReduSum_ker.cu	/^double DgReduSumDouble(unsigned ndata,unsigned inidata,const double* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* datag)
DgReduSumDouble	JReduSum_ker.h	/^double DgReduSumDouble(unsigned ndata,unsigned inidata,const double* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data)
DgReduSumFloat	JReduSum_ker.cu	/^float DgReduSumFloat(unsigned ndata,unsigned inidata,const float* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* datag)
DgReduSumFloat	JReduSum_ker.h	/^float DgReduSumFloat(unsigned ndata,unsigned inidata,const float* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data)
DgReduSumFloat3	JReduSum_ker.cu	/^float3 DgReduSumFloat3(unsigned ndata,unsigned inidata,const float3* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* datag)
DgReduSumFloat3	JReduSum_ker.h	/^float3 DgReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data)
DgReduSumUint	JReduSum_ker.cu	/^unsigned DgReduSumUint(unsigned ndata,unsigned inidata,const unsigned* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* datag)
DgReduSumUint	JReduSum_ker.h	/^unsigned DgReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data)
DgSaveCsvParticles2	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticles2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const tfloat4 *pospres,const tfloat4 *velrhop){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const tfloat4 *pospres,const tfloat4 *velrhop)
DgSaveCsvParticles2	JSphGpu.h	/^  void DgSaveCsvParticles2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos=NULL,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const tfloat4 *pospres=NULL,const tfloat4 *velrhop=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos=NULL,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const tfloat4 *pospres=NULL,const tfloat4 *velrhop=NULL)
DgSaveCsvParticlesCpu	JSph.cpp	/^void JSph::DgSaveCsvParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const float *ar,const tfloat3 *ace,const tfloat3 *vcorr){$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const float *ar,const tfloat3 *ace,const tfloat3 *vcorr)
DgSaveCsvParticlesCpu	JSph.h	/^  void DgSaveCsvParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const float *ar=NULL,const tfloat3 *ace=NULL,const tfloat3 *vcorr=NULL);$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const float *ar=NULL,const tfloat3 *ace=NULL,const tfloat3 *vcorr=NULL)
DgSaveCsvParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float *arg,const float3 *aceg,const float3 *vcorrg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float *arg,const float3 *aceg,const float3 *vcorrg)
DgSaveCsvParticlesGpu	JSphGpu.h	/^  void DgSaveCsvParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float *arg=NULL,const float3 *aceg=NULL,const float3 *vcorrg=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float *arg=NULL,const float3 *aceg=NULL,const float3 *vcorrg=NULL)
DgSaveCsvParticlesGpu2	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticlesGpu2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float4 *pospresg,const float4 *velrhopg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float4 *pospresg,const float4 *velrhopg)
DgSaveCsvParticlesGpu2	JSphGpu.h	/^  void DgSaveCsvParticlesGpu2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float4 *pospres=NULL,const float4 *velrhop=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float4 *pospres=NULL,const float4 *velrhop=NULL)
DgSaveVtkParticlesCpu	JSph.cpp	/^void JSph::DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop ,const tfloat3 *ace) const
DgSaveVtkParticlesCpu	JSph.cpp	/^void JSph::DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop){$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop)
DgSaveVtkParticlesCpu	JSph.h	/^  void DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop,const tfloat3 *ace=NULL)const;$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop,const tfloat3 *ace=NULL) const
DgSaveVtkParticlesCpu	JSph.h	/^  void DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop);$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop)
DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin ,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg ,const float4 *velrhopg) const
DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)
DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg,const unsigned *idpg,const float3 *velg,const float *rhopg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg,const unsigned *idpg,const float3 *velg,const float *rhopg)
DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode ,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg ,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg)
DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)
DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg,const float4 *velrhopg)const;$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg,const float4 *velrhopg) const
DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL)
DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg)
DimOfType	TypesDef.h	/^inline int DimOfType(TpTypeData type){$/;"	f	signature:(TpTypeData type)
Dir	JPartDataBi4.h	/^  std::string Dir;   \/\/\/<Directorio de datos. Data Directory.$/;"	m	class:JPartDataBi4	access:private
Dir	JPartFloatBi4.h	/^  std::string Dir;       \/\/\/<Directorio de datos. Data Directory.$/;"	m	class:JPartFloatBi4Save	access:private
Dir	JPartOutBi4Save.h	/^  std::string Dir;   \/\/\/<Directorio de datos. Data directory.$/;"	m	class:JPartOutBi4Save	access:private
DirCase	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
DirData	JMotion.h	/^  std::string DirData; \/\/-Directory with data files.$/;"	m	class:JMotion	access:private
DirData	JMotionMov.h	/^  const std::string* DirData;$/;"	m	class:JMotionMovRectFile	access:public
DirData	JMotionMov.h	/^  const std::string* DirData;$/;"	m	class:JMotionMovRotFile	access:public
DirData	JPartDataHead.h	/^  std::string DirData;$/;"	m	class:JPartDataHead	access:private
DirData	JSphAccInput.h	/^  std::string DirData;$/;"	m	class:JSphAccInput	access:protected
DirDataOut	JAppInfo.h	/^  std::string DirDataOut;$/;"	m	class:JAppInfo	access:private
DirDataOut	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
DirDataOut	JSph.h	/^  std::string DirDataOut;     \/\/\/<Specifies the output subdirectory for binary data.$/;"	m	class:JSph	access:protected
DirExists	Functions.h	/^inline bool DirExists(const std::string &name){ return(FileType(name)==1); }$/;"	f	namespace:fun	signature:(const std::string &name)
DirOut	JAppInfo.h	/^  std::string DirOut;$/;"	m	class:JAppInfo	access:private
DirOut	JCellDivCpu.h	/^  std::string DirOut;$/;"	m	class:JCellDivCpu	access:protected
DirOut	JCellDivGpu.h	/^  std::string DirOut;$/;"	m	class:JCellDivGpu	access:protected
DirOut	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
DirOut	JLog2.h	/^  std::string DirOut;      \/\/\/<Specifies the general output directory.$/;"	m	class:JLog2	access:protected
DirOut	JSph.h	/^  std::string DirOut;         \/\/\/<Specifies the general output directory.$/;"	m	class:JSph	access:protected
Direction	JSphInitialize.h	/^  tfloat3 Direction;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
DirsDef	JCfgRun.h	/^  int DirsDef;$/;"	m	class:JCfgRun	access:protected
DistLimit	JGaugeItem.h	/^  float DistLimit;$/;"	m	class:JGaugeMaxZ	access:protected
DistLine	FunctionsMath.h	/^inline double DistLine(const tdouble3 &pt,const tdouble3 &pr1,const tdouble3 &pr2){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble3 &pr1,const tdouble3 &pr2)
DistLine	FunctionsMath.h	/^inline float DistLine(const tfloat3 &pt,const tfloat3 &pr1,const tfloat3 &pr2){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat3 &pr1,const tfloat3 &pr2)
DistPlane	FunctionsMath.h	/^inline double DistPlane(const tdouble4 &pla,const tdouble3 &pt){ $/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
DistPlane	FunctionsMath.h	/^inline float DistPlane(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
DistPlane	FunctionsMath_ker.cu	/^__device__ double DistPlane(const float4 &pla,const double3 &pt){ $/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
DistPlaneSign	FunctionsMath.h	/^inline double DistPlaneSign(const tdouble4 &pla,const tdouble3 &pt){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
DistPlaneSign	FunctionsMath.h	/^inline float DistPlaneSign(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
DistPlaneSign	FunctionsMath_ker.cu	/^__device__ double DistPlaneSign(const float4 &pla,const double3 &pt){$/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
DistPoint	FunctionsMath.h	/^inline double DistPoint(const tdouble3 &p1){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1)
DistPoint	FunctionsMath.h	/^inline float DistPoint(const tfloat3 &p1){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1)
DistPoints	FunctionsMath.h	/^inline double DistPoints(const tdouble3 &p1,const tdouble3 &p2){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2)
DistPoints	FunctionsMath.h	/^inline float DistPoints(const tfloat3 &p1,const tfloat3 &p2){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2)
Divide	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	f	class:JCellDivCpuSingle	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellc,const typecode* codec,const unsigned* idpc,const tdouble3* posc,TimersCpu timers)
Divide	JCellDivCpuSingle.h	/^  void Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	p	class:JCellDivCpuSingle	access:public	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellc,const typecode* codec,const unsigned* idpc,const tdouble3* posc,TimersCpu timers)
Divide	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	f	class:JCellDivGpuSingle	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp)
Divide	JCellDivGpuSingle.h	/^  void Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp);$/;"	p	class:JCellDivGpuSingle	access:public	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp)
DivideFull	JCellDivCpu.h	/^  bool DivideFull;      \/\/\/<Indicate that divie is applied to fluid & boundary (not only to fluid). | Indica que el divide se aplico a fluido y contorno (no solo al fluido).$/;"	m	class:JCellDivCpu	access:protected
DivideFull	JCellDivGpu.h	/^  bool DivideFull;      \/\/\/<Indicate that divie is applied to fluid & boundary (not only to fluid). | Indica que el divide se aplico a fluido y contorno (no solo al fluido).$/;"	m	class:JCellDivGpu	access:protected
DoIndent	tinyxml.h	/^    void DoIndent() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
DoLineBreak	tinyxml.h	/^    void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
Doc	JXml.h	/^  TiXmlDocument* Doc;       \/\/\/<Pointer at the xml document.$/;"	m	class:JXml	access:public
DomCelFin	JCellDivCpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivCpu	access:protected
DomCelFin	JCellDivGpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivGpu	access:protected
DomCelFin	JSph.h	/^  tuint3 DomCelFin;        \/\/\/<Last cell within the Map defining local simulation area. DomCelIni=Map_Cells for Single-CPU  | Celda final dentro de Map que define el area de simulacion local.$/;"	m	class:JSph	access:protected
DomCelIni	JCellDivCpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivCpu	access:protected
DomCelIni	JCellDivGpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivGpu	access:protected
DomCelIni	JSph.h	/^  tuint3 DomCelIni;        \/\/\/<First cell within the Map defining local simulation area. DomCelIni=TUint3(0) for Single-CPU | Celda inicial dentro de Map que define el area de simulacion local.$/;"	m	class:JSph	access:protected
DomCellCode	JCellDivCpu.h	/^  unsigned DomCellCode;  \/\/\/<Key for codifying cell of position. | Clave para la codificacion de la celda de posicion.$/;"	m	class:JCellDivCpu	access:protected
DomCellCode	JCellDivGpu.h	/^  unsigned DomCellCode;  \/\/\/<Key for codifying cell of position. | Clave para la codificacion de la celda de posicion.$/;"	m	class:JCellDivGpu	access:protected
DomCellCode	JSph.h	/^  unsigned DomCellCode;    \/\/\/<Key for encoding cell position within the Domain. | Clave para la codificacion de la celda de posicion dentro de Domain.$/;"	m	class:JSph	access:protected
DomCells	JCellDivCpu.h	/^  tuint3 DomCells;$/;"	m	class:JCellDivCpu	access:protected
DomCells	JCellDivGpu.h	/^  tuint3 DomCells;$/;"	m	class:JCellDivGpu	access:protected
DomCells	JSph.h	/^  tuint3 DomCells;         \/\/\/<Number of cells in each direction. DomCells=DomCelFin-DomCelIni                              | Numero de celdas en cada direccion.                                                                $/;"	m	class:JSph	access:protected
DomPosMax	JCellDivCpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivCpu	access:protected
DomPosMax	JCellDivGpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivGpu	access:protected
DomPosMax	JGaugeItem.h	/^  tdouble3 DomPosMax;  \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeItem	access:protected
DomPosMax	JGaugeSystem.h	/^  tdouble3 DomPosMax;     \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeSystem	access:private
DomPosMax	JSph.h	/^  tdouble3 DomPosMax;      \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JSph	access:protected
DomPosMin	JCellDivCpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivCpu	access:protected
DomPosMin	JCellDivGpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivGpu	access:protected
DomPosMin	JGaugeItem.h	/^  tdouble3 DomPosMin;  \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeItem	access:protected
DomPosMin	JGaugeSystem.h	/^  tdouble3 DomPosMin;     \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeSystem	access:private
DomPosMin	JSph.h	/^  tdouble3 DomPosMin;      \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JSph	access:protected
DomRealPosMax	JSph.h	/^  tdouble3 DomRealPosMax;  \/\/\/<Real upper limit of the simulation according to DomCelIni\/Fin (without periodic condition borders) DomRealPosMax=min(DomPosMax,MapRealPosMax) | Limite real superior de simulacion segun DomCelIni\/Fin (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
DomRealPosMin	JSph.h	/^  tdouble3 DomRealPosMin;  \/\/\/<Real lower limit of the simulation according to DomCelIni\/Fin (without periodic condition borders) DomRealPosMin=max(DomPosMin,MapRealPosMin) | Limite real inferior de simulacion segun DomCelIni\/Fin (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
DomSize	JSph.h	/^  tdouble3 DomSize;        \/\/\/<Result of DomSize = DomPosMax - DomPosMin$/;"	m	class:JSph	access:protected
DomainFixedMax	JCfgRun.h	/^  tdouble3 DomainFixedMin,DomainFixedMax;$/;"	m	class:JCfgRun	access:public
DomainFixedMin	JCfgRun.h	/^  tdouble3 DomainFixedMin,DomainFixedMax;$/;"	m	class:JCfgRun	access:public
DomainMode	JCfgRun.h	/^  byte DomainMode;  \/\/\/<Domain configuration 0:No configured, 1:Particles, 2:Fixed$/;"	m	class:JCfgRun	access:public
DomainParticlesMax	JCfgRun.h	/^  tdouble3 DomainParticlesMin,DomainParticlesMax;$/;"	m	class:JCfgRun	access:public
DomainParticlesMin	JCfgRun.h	/^  tdouble3 DomainParticlesMin,DomainParticlesMax;$/;"	m	class:JCfgRun	access:public
DomainParticlesPrcMax	JCfgRun.h	/^  tdouble3 DomainParticlesPrcMin,DomainParticlesPrcMax;$/;"	m	class:JCfgRun	access:public
DomainParticlesPrcMin	JCfgRun.h	/^  tdouble3 DomainParticlesPrcMin,DomainParticlesPrcMax;$/;"	m	class:JCfgRun	access:public
Dosh	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
Double3	JGauge_ker.h	/^inline double3 Double3(const tdouble3& v){ double3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cugauge	signature:(const tdouble3& v)
Double3	JSphGpu_ker.h	/^inline double3 Double3(const tdouble3& v){ double3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cusph	signature:(const tdouble3& v)
Double3Str	Functions.cpp	/^std::string Double3Str(const tdouble3 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tdouble3 &v,const char* fmt)
Double3Str	Functions.h	/^std::string Double3Str(const tdouble3 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tdouble3 &v,const char* fmt=Ó)
Double3gRangeStr	Functions.h	/^inline std::string Double3gRangeStr(const tdouble3 &v,const tdouble3 &v2){ return(std::string("(")+Double3gStr(v)+")-("+Double3gStr(v2)+")"); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const tdouble3 &v2)
Double3gStr	Functions.h	/^inline std::string Double3gStr(const tdouble3 &v){ return(Double3Str(v,"%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tdouble3 &v)
Double3xRangeStr	Functions.h	/^inline std::string Double3xRangeStr(const tdouble3 &v,const tdouble3 &v2,const char* fmt="%f"){ return(std::string("(")+Double3xStr(v,fmt)+")-("+Double3xStr(v2,fmt)+")"); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const tdouble3 &v2,const char* fmt=Ó)
Double3xStr	Functions.h	/^inline std::string Double3xStr(const tdouble3 &v,const char* fmt="%f"){ return(DoublexStr(v.x,fmt)+","+DoublexStr(v.y,fmt)+","+DoublexStr(v.z,fmt)); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const char* fmt=Ó)
Double4	JSphGpu_ker.h	/^inline double4 Double4(const tdouble4& v){ double4 p={v.x,v.y,v.z,v.w}; return(p); }$/;"	f	namespace:cusph	signature:(const tdouble4& v)
Double4Str	Functions.cpp	/^std::string Double4Str(const tdouble4 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tdouble4 &v,const char* fmt)
Double4Str	Functions.h	/^std::string Double4Str(const tdouble4 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tdouble4 &v,const char* fmt=Ó)
Double4gStr	Functions.h	/^inline std::string Double4gStr(const tdouble4 &v){ return(Double4Str(v,"%g,%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tdouble4 &v)
Double64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
DoubleStr	Functions.cpp	/^std::string DoubleStr(double v,const char* fmt){$/;"	f	namespace:fun	signature:(double v,const char* fmt)
DoubleStr	Functions.h	/^std::string DoubleStr(double v,const char* fmt="%g");$/;"	p	namespace:fun	signature:(double v,const char* fmt=Ó)
DoubleValue	tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
DoubleValue	tinyxml.h	/^    double          DoubleValue() const;                                \/\/\/< Return the value of this attribute, converted to a double.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
DoublexStr	Functions.cpp	/^std::string DoublexStr(double v,const char* fmt){$/;"	f	namespace:fun	signature:(double v,const char* fmt)
DoublexStr	Functions.h	/^std::string DoublexStr(double v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(double v,const char* fmt=Ó)
Dp	JDamping.h	/^  const double Dp;$/;"	m	class:JDamping	access:private
Dp	JGaugeSystem.h	/^  double Dp;              \/\/\/<Distance between particles.$/;"	m	class:JGaugeSystem	access:private
Dp	JPartDataHead.h	/^  double Dp;$/;"	m	class:JPartDataHead	access:private
Dp	JSpaceCtes.h	/^  double Dp;              \/\/\/<Inter-particle distance.$/;"	m	class:JSpaceCtes	access:private
Dp	JSph.h	/^  double Dp;$/;"	m	class:JSph	access:protected
Dp	JSphPartsInit.h	/^  const double Dp;               \/\/\/<Distance between particles.$/;"	m	class:JSphPartsInit	access:public
Dt1	JSaveDt.h	/^  StValue Dt1[SizeValues];              \/\/\/<Dt1 [SizeValues].$/;"	m	class:JSaveDt	access:private
Dt2	JSaveDt.h	/^  StValue Dt2[SizeValues];              \/\/\/<Dt2 [SizeValues].$/;"	m	class:JSaveDt	access:private
DtAllParticles	JSph.h	/^  bool DtAllParticles;       \/\/\/<Velocity of particles used to calculate DT. 1:All, 0:Only fluid\/floating (def=0).$/;"	m	class:JSph	access:protected
DtError	JSphDtFixed.h	/^  double DtError; \/\/- max(DtFixed-DtVariable)$/;"	m	class:JSphDtFixed	access:protected
DtFinal	JSaveDt.h	/^  StValue DtFinal[SizeValues];          \/\/\/<Resultant minimum Dt [SizeValues]. | Dt minimo resultante [SizeValues].$/;"	m	class:JSaveDt	access:private
DtFixed	JSph.h	/^  JSphDtFixed *DtFixed;$/;"	m	class:JSph	access:protected
DtIni	JSph.h	/^  double DtIni;              \/\/\/<Initial Dt$/;"	m	class:JSph	access:protected
DtMin	JSph.h	/^  double DtMin;              \/\/\/<Minimum allowed Dt (if the calculated value is lower is replaced by DTmin).$/;"	m	class:JSph	access:protected
DtModif	JSph.h	/^  unsigned DtModif;       \/\/\/<Number of modifications on  dt computed when it is too low. | Numero de modificaciones del dt calculado por ser demasiado bajo.         $/;"	m	class:JSph	access:protected
DtModifWrn	JSph.h	/^  unsigned DtModifWrn;    \/\/\/<Limit number for warning generation.$/;"	m	class:JSph	access:protected
DtVariable	JSphCpu.cpp	/^double JSphCpu::DtVariable(bool final){$/;"	f	class:JSphCpu	signature:(bool final)
DtVariable	JSphCpu.h	/^  double DtVariable(bool final);$/;"	p	class:JSphCpu	access:protected	signature:(bool final)
DtVariable	JSphGpu.cpp	/^double JSphGpu::DtVariable(bool final){$/;"	f	class:JSphGpu	signature:(bool final)
DtVariable	JSphGpu.h	/^  double DtVariable(bool final);$/;"	p	class:JSphGpu	access:protected	signature:(bool final)
ELEMENT	tinyxml.h	/^        ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
Element	tinyxml.h	/^    TiXmlElement* Element() const   { return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ElementSize	JArraysCpu.h	/^  const unsigned ElementSize;$/;"	m	class:JArraysCpuSize	access:protected
ElementSize	JArraysGpu.h	/^  const unsigned ElementSize;$/;"	m	class:JArraysGpuSize	access:protected
Empty	JRangeFilter.h	/^  bool Empty()const{ return(!Count); }$/;"	f	class:JRangeFilter	access:public	signature:() const
EncodeString	tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
EncodeString	tinyxml.h	/^    static void EncodeString( const TIXML_STRING& str, TIXML_STRING* out );$/;"	p	class:TiXmlBase	access:public	signature:( const TIXML_STRING& str, TIXML_STRING* out )
Encoding	tinyxml.h	/^    const char *Encoding() const        { return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
EndOfProgram	randomc.h	/^void EndOfProgram(void);               \/\/ System-specific exit code (userintf.cpp)$/;"	p	signature:(void)
Endl	JSaveCsv2.h	/^  Endl(){};$/;"	f	class:jcsv::Endl	access:public	signature:()
Endl	JSaveCsv2.h	/^class Endl{$/;"	c	namespace:jcsv
Entity	tinyxml.h	/^    struct Entity$/;"	s	class:TiXmlBase	access:private
Eps	JSpaceCtes.h	/^  double Eps;             \/\/\/<Epsilon constant for XSPH variant.$/;"	m	class:JSpaceCtes	access:private
EpsDefined	JSpaceCtes.h	/^  bool EpsDefined;        \/\/\/<Epsilon was defined in constantsdef.$/;"	m	class:JSpaceCtes	access:private
Equals	JMotionMov.h	/^  bool Equals(const tdouble3 &p1,const tdouble3 &p2)const{ return(P1.x==p1.x&&P1.y==p1.y&&P1.z==p1.z&&P2.x==p2.x&&P2.y==p2.y&&P2.z==p2.z); }$/;"	f	class:JMotionAxis	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2) const
ErrGetFileRow	JXml.cpp	/^std::string JXml::ErrGetFileRow(const TiXmlNode* node)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node) const
ErrGetFileRow	JXml.h	/^  std::string ErrGetFileRow(const TiXmlNode* node)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node) const
ErrReadAtrib	JXml.cpp	/^void JXml::ErrReadAtrib(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext) const
ErrReadAtrib	JXml.h	/^  void ErrReadAtrib(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext=Ó) const
ErrReadElement	JXml.cpp	/^void JXml::ErrReadElement(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext) const
ErrReadElement	JXml.h	/^  void ErrReadElement(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext=Ó) const
Error	tinyxml.h	/^    bool Error() const                      { return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorCol	tinyxml.h	/^    int ErrorCol() const    { return errorLocation.col+1; } \/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorDesc	tinyxml.h	/^    const char * ErrorDesc() const  { return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorId	tinyxml.h	/^    int ErrorId()   const               { return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorParm	JCfgRun.cpp	/^void JCfgRun::ErrorParm(const std::string &opt,int optc,int lv,const std::string &file)const{$/;"	f	class:JCfgRun	signature:(const std::string &opt,int optc,int lv,const std::string &file) const
ErrorParm	JCfgRun.h	/^  void ErrorParm(const std::string &opt,int optc,int lv,const std::string &file)const;$/;"	p	class:JCfgRun	access:public	signature:(const std::string &opt,int optc,int lv,const std::string &file) const
ErrorRow	tinyxml.h	/^    int ErrorRow() const    { return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Eta2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
EventAdd	JMotion.cpp	/^void JMotion::EventAdd(unsigned objid,unsigned movid,double timestart,double timefinish){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned movid,double timestart,double timefinish)
EventAdd	JMotion.h	/^  void EventAdd(unsigned objid,unsigned movid,double timestart,double timefinish=-1);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned movid,double timestart,double timefinish=-1)
EventEnd	JTimerCuda.h	/^  cudaEvent_t EventIni,EventEnd;$/;"	m	class:JTimerCuda	access:private
EventFinish	JMotionObj.h	/^  const double EventFinish;$/;"	m	class:JMotionMovActive	access:public
EventIni	JTimerCuda.h	/^  cudaEvent_t EventIni,EventEnd;$/;"	m	class:JTimerCuda	access:private
EventNext	JMotion.h	/^  int EventNext;$/;"	m	class:JMotion	access:private
Events	JMotion.h	/^  std::vector<JMotionEvent*> Events;$/;"	m	class:JMotion	access:private
Events	JMotionObj.h	/^  std::vector<JMotionEvent*> Events;  \/\/-Eventos asociados$/;"	m	class:JMotionObj	access:private
ExName	JException.h	/^  std::string ExName;    \/\/\/<Name of the exception. $/;"	m	class:JException	access:protected
ExceptionThrown	JSaveCsv2.h	/^  bool ExceptionThrown;    \/\/\/<An exception was thrown.$/;"	m	class:jcsv::JSaveCsv2	access:private
ExistMk	JSphAccInput.cpp	/^bool JSphAccInput::ExistMk(word mkfluid)const{$/;"	f	class:JSphAccInput	signature:(word mkfluid) const
ExistMk	JSphAccInput.h	/^  bool ExistMk(word mkfluid)const;$/;"	p	class:JSphAccInput	access:protected	signature:(word mkfluid) const
Exists	JSpaceEParms.h	/^  bool Exists(const std::string &key){ return(GetItemPointer(key)!=NULL); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key)
ExistsAttribute	JXml.cpp	/^bool JXml::ExistsAttribute(const TiXmlElement* ele,const std::string &name)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name) const
ExistsAttribute	JXml.h	/^  bool ExistsAttribute(const TiXmlElement* ele,const std::string &name)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name) const
ExistsElement	JXml.h	/^  bool ExistsElement(const TiXmlElement* ele,const std::string &name)const{ return(ele->FirstChildElement(name.c_str())!=NULL); }$/;"	f	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name) const
ExistsNameValue	JSpaceProperties.h	/^  bool ExistsNameValue(std::string name)const{ return(GetIndexValue(name)!=-1); }$/;"	f	class:JSpacePropProperty	access:public	signature:(std::string name) const
ExistsObj	JMotion.cpp	/^bool JMotion::ExistsObj(JMotionObj* obj)const{$/;"	f	class:JMotion	signature:(JMotionObj* obj) const
ExistsObj	JMotion.h	/^  bool ExistsObj(JMotionObj* obj)const;$/;"	p	class:JMotion	access:private	signature:(JMotionObj* obj) const
ExistsObj	JMotionObj.cpp	/^bool JMotionObj::ExistsObj(JMotionObj* obj)const{$/;"	f	class:JMotionObj	signature:(JMotionObj* obj) const
ExistsObj	JMotionObj.h	/^  bool ExistsObj(JMotionObj* obj)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotionObj* obj) const
ExistsRef	JMotion.h	/^  bool ExistsRef(int ref)const{ return(ObjGetPointerByRef(ref)!=NULL); }$/;"	f	class:JMotion	access:public	signature:(int ref) const
ExistsSubName	JSpaceProperties.h	/^  bool ExistsSubName(std::string subname)const{ return(GetIndexSubName(subname)!=-1); }$/;"	f	class:JSpacePropValue	access:public	signature:(std::string subname) const
ExistsSubValue	JSpaceParts.cpp	/^bool JSpacePartBlock::ExistsSubValue(std::string name,std::string subname)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname) const
ExistsSubValue	JSpaceParts.h	/^  bool ExistsSubValue(std::string name,std::string subname)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname) const
ExistsSubValue	JSpaceProperties.cpp	/^bool JSpaceProperties::ExistsSubValue(std::string props,std::string name,std::string subname)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name,std::string subname) const
ExistsSubValue	JSpaceProperties.h	/^  bool ExistsSubValue(std::string props,std::string name,std::string subname)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name,std::string subname) const
ExistsValue	JBinaryData.cpp	/^bool JBinaryData::ExistsValue(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
ExistsValue	JBinaryData.cpp	/^bool JBinaryData::ExistsValue(const std::string &name,JBinaryDataDef::TpData type)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type) const
ExistsValue	JBinaryData.h	/^  bool ExistsValue(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
ExistsValue	JBinaryData.h	/^  bool ExistsValue(const std::string &name,JBinaryDataDef::TpData type)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type) const
ExistsValue	JSpaceParts.cpp	/^bool JSpacePartBlock::ExistsValue(std::string name)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name) const
ExistsValue	JSpaceParts.h	/^  bool ExistsValue(std::string name)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name) const
ExistsValue	JSpaceProperties.cpp	/^bool JSpaceProperties::ExistsValue(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
ExistsValue	JSpaceProperties.h	/^  bool ExistsValue(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name) const
ExternalPointer	JBinaryData.h	/^  bool ExternalPointer;   \/\/\/<Indica que el puntero es externo y no debe liberarse. Indicates that the pointer is external, and should not be released.$/;"	m	class:JBinaryDataArray	access:private
FILESIZEMAX	JSphDtFixed.h	/^  static const unsigned FILESIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphDtFixed	access:protected
FILESIZEMAX	JSphVisco.h	/^  static const unsigned FILESIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphVisco	access:protected
FTMODE_Ext	Types.h	/^  FTMODE_Ext=2              \/\/\/<Interaction between floatings and boundaries in terms of DEM or CHRONO.$/;"	e	enum:__anon54
FTMODE_None	Types.h	/^  FTMODE_None=0,            \/\/\/<There are not floatings.$/;"	e	enum:__anon54
FTMODE_Sph	Types.h	/^  FTMODE_Sph=1,             \/\/\/<Interaction between floatings and boundaries in terms of SPH.$/;"	e	enum:__anon54
FastValue	JRangeFilter.h	/^  byte *FastValue;           \/\/\/<Array to optimise the values search.$/;"	m	class:JRangeFilter	access:private
FatalError	randomc.h	/^void FatalError(const char *ErrorText);\/\/ System-specific error reporting (userintf.cpp)$/;"	p	signature:(const char *ErrorText)
FieldTime	JMotionMov.h	/^  const int FieldTime;$/;"	m	class:JMotionMovRectFile	access:public
FieldX	JMotionMov.h	/^  const int FieldX;$/;"	m	class:JMotionMovRectFile	access:public
FieldY	JMotionMov.h	/^  const int FieldY;$/;"	m	class:JMotionMovRectFile	access:public
FieldZ	JMotionMov.h	/^  const int FieldZ;$/;"	m	class:JMotionMovRectFile	access:public
Fields	JMotionMov.h	/^  const int Fields;$/;"	m	class:JMotionMovRectFile	access:public
File	JException.h	/^  std::string File;      \/\/\/<File related to the exception.$/;"	m	class:JException	access:protected
File	JLinearValue.h	/^  std::string File;$/;"	m	class:JLinearValue	access:protected
File	JMotionMov.h	/^  const std::string File;$/;"	m	class:JMotionMovRectFile	access:public
File	JMotionMov.h	/^  const std::string File;$/;"	m	class:JMotionMovRotFile	access:public
File	JReadDatafile.h	/^  std::string File;      \/\/\/< Name of file.$/;"	m	class:JReadDatafile	access:private
File	JSpaceVtkOut.h	/^  const std::string File;$/;"	m	class:JSpaceVtkOutFile	access:public
File	JSphAccInput.h	/^  std::string File;          \/\/\/<File of data.$/;"	m	class:JSphAccInputMk	access:protected
File	JSphDtFixed.h	/^  std::string File;$/;"	m	class:JSphDtFixed	access:protected
File	JSphVisco.h	/^  std::string File;$/;"	m	class:JSphVisco	access:protected
FileCfg	JDsphConfig.h	/^  std::string FileCfg;$/;"	m	class:JDsphConfig	access:protected
FileDataCount	JBinaryData.h	/^  unsigned FileDataCount; \/\/\/<Numero de elemetos del array en fichero. Number of elements in the array in a file.$/;"	m	class:JBinaryDataArray	access:private
FileDataPos	JBinaryData.h	/^  llong FileDataPos;      \/\/\/<Valor mayor o igual a cero indica la posicion de lectura en el fichero abierto en el ItemHead. Value greater than or equal to zero indicates the position of reading in the file opened in the ItemHead.$/;"	m	class:JBinaryDataArray	access:private
FileDataSize	JBinaryData.h	/^  unsigned FileDataSize;  \/\/\/<Size de datos del array en fichero. Size of array data in file.$/;"	m	class:JBinaryDataArray	access:private
FileDtAllInfo	JSaveDt.h	/^  std::string FileDtAllInfo;$/;"	m	class:JSaveDt	access:private
FileDtInfo	JSaveDt.h	/^  std::string FileDtInfo;$/;"	m	class:JSaveDt	access:private
FileExists	Functions.h	/^inline bool FileExists(const std::string &name){ return(FileType(name)==2); }$/;"	f	namespace:fun	signature:(const std::string &name)
FileInfo	JGaugeItem.h	/^  std::string FileInfo;$/;"	m	class:JGaugeItem	access:protected
FileInfo	JLog2.h	/^  std::vector<StFileInfo> FileInfo; \/\/\/<List of file descriptions.$/;"	m	class:JLog2	access:protected
FileMask	Functions.cpp	/^bool FileMask(std::string text,std::string mask){$/;"	f	namespace:fun	signature:(std::string text,std::string mask)
FileMask	Functions.h	/^bool FileMask(std::string text,std::string mask);$/;"	p	namespace:fun	signature:(std::string text,std::string mask)
FileName	JLog2.h	/^  std::string FileName;$/;"	m	class:JLog2	access:protected
FileName	JSaveCsv2.h	/^  std::string FileName;    \/\/\/<Name of file to store data.$/;"	m	class:jcsv::JSaveCsv2	access:private
FileNameSec	Functions.cpp	/^std::string FileNameSec(std::string fname,unsigned fnumber){$/;"	f	namespace:fun	signature:(std::string fname,unsigned fnumber)
FileNameSec	Functions.h	/^std::string FileNameSec(std::string fname,unsigned fnumber);$/;"	p	namespace:fun	signature:(std::string fname,unsigned fnumber)
FileReading	JXml.h	/^  std::string FileReading;  \/\/\/<File to read the xml docuemnt.$/;"	m	class:JXml	access:public
FileStructure	JBinaryData.h	/^  std::ifstream *FileStructure;$/;"	m	class:JBinaryData	access:private
FileType	Functions.cpp	/^int FileType(const std::string &name){$/;"	f	namespace:fun	signature:(const std::string &name)
FileType	Functions.h	/^int FileType(const std::string &name);$/;"	p	namespace:fun	signature:(const std::string &name)
FileXml	JSph.h	/^  std::string FileXml;$/;"	m	class:JSph	access:protected
Files	JSpaceVtkOut.h	/^  std::vector<JSpaceVtkOutFile*> Files;$/;"	m	class:JSpaceVtkOut	access:private
FilesCount	JLog2.h	/^  unsigned FilesCount()const{ return(unsigned(FileInfo.size())); }$/;"	f	class:JLog2	access:public	signature:() const
FilterMk	JSpaceProperties.cpp	/^void JSpaceProperties::FilterMk(word mkboundfirst,word mkfluidfirst,std::string mkselect){$/;"	f	class:JSpaceProperties	signature:(word mkboundfirst,word mkfluidfirst,std::string mkselect)
FilterMk	JSpaceProperties.h	/^  void FilterMk(word mkboundfirst,word mkfluidfirst,std::string mkselect);$/;"	p	class:JSpaceProperties	access:public	signature:(word mkboundfirst,word mkfluidfirst,std::string mkselect)
Find	JReadDatafile.cpp	/^tint2 JReadDatafile::Find(std::string key,int firstline)const{$/;"	f	class:JReadDatafile	signature:(std::string key,int firstline) const
Find	JReadDatafile.h	/^  tint2 Find(std::string key,int firstline=0)const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,int firstline=0) const
Find	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
Find	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
Find	tinyxml.h	/^    TiXmlAttribute* Find( const char* _name ) {$/;"	f	class:TiXmlAttributeSet	access:public	signature:( const char* _name )
Find	tinyxml.h	/^    TiXmlAttribute* Find( const std::string& _name ) {$/;"	f	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name )
Find	tinyxml.h	/^    const TiXmlAttribute*   Find( const char* _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name ) const
Find	tinyxml.h	/^    const TiXmlAttribute*   Find( const std::string& _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name ) const
FindPointerUsed	JArraysCpu.cpp	/^unsigned JArraysCpuSize::FindPointerUsed(void *pointer)const{$/;"	f	class:JArraysCpuSize	signature:(void *pointer) const
FindPointerUsed	JArraysCpu.h	/^  unsigned FindPointerUsed(void *pointer)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(void *pointer) const
FindPointerUsed	JArraysGpu.cpp	/^unsigned JArraysGpuSize::FindPointerUsed(void *pointer)const{$/;"	f	class:JArraysGpuSize	signature:(void *pointer) const
FindPointerUsed	JArraysGpu.h	/^  unsigned FindPointerUsed(void *pointer)const;$/;"	p	class:JArraysGpuSize	access:protected	signature:(void *pointer) const
FindTime	JLinearValue.cpp	/^void JLinearValue::FindTime(double timestep){$/;"	f	class:JLinearValue	signature:(double timestep)
FindTime	JLinearValue.h	/^  void FindTime(double timestep);$/;"	p	class:JLinearValue	access:public	signature:(double timestep)
FindValueDbl	JReadDatafile.cpp	/^double JReadDatafile::FindValueDbl(std::string key,bool optional,double valdef)const{$/;"	f	class:JReadDatafile	signature:(std::string key,bool optional,double valdef) const
FindValueDbl	JReadDatafile.h	/^  double FindValueDbl(std::string key,bool optional=false,double valdef=0)const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,bool optional=false,double valdef=0) const
FindValueStr	JReadDatafile.cpp	/^std::string JReadDatafile::FindValueStr(std::string key,bool optional,std::string valdef)const{$/;"	f	class:JReadDatafile	signature:(std::string key,bool optional,std::string valdef) const
FindValueStr	JReadDatafile.h	/^  std::string FindValueStr(std::string key,bool optional=false,std::string valdef="")const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,bool optional=false,std::string valdef=Ó) const
Finish	JMotionObj.h	/^  double Start,Finish;$/;"	m	class:JMotionMovActive	access:public
FinishRun	JSphCpuSingle.cpp	/^void JSphCpuSingle::FinishRun(bool stop){$/;"	f	class:JSphCpuSingle	signature:(bool stop)
FinishRun	JSphCpuSingle.h	/^  void FinishRun(bool stop);$/;"	p	class:JSphCpuSingle	access:protected	signature:(bool stop)
FinishRun	JSphGpuSingle.cpp	/^void JSphGpuSingle::FinishRun(bool stop){$/;"	f	class:JSphGpuSingle	signature:(bool stop)
FinishRun	JSphGpuSingle.h	/^  void FinishRun(bool stop);$/;"	p	class:JSphGpuSingle	access:protected	signature:(bool stop)
First	tinyxml.h	/^    TiXmlAttribute* First()                 { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
First	tinyxml.h	/^    const TiXmlAttribute* First()   const   { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
FirstAttribute	tinyxml.h	/^    TiXmlAttribute* FirstAttribute()                { return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
FirstAttribute	tinyxml.h	/^    const TiXmlAttribute* FirstAttribute() const    { return attributeSet.First(); }        \/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild( const std::string& _value ) const               { return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild( const std::string& _value )              {   return FirstChild (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild()                     { return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild( const char * value ) const;            \/\/\/< The first child of this node with the matching 'value'. Will be null if none found.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild( const std::string& _value ) const  {   return FirstChild (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild()   const       { return firstChild; }  \/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement( const std::string& _value )                {   return FirstChildElement (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement( const std::string& _value ) const        { return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement( const char * _value ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * _value ) const
FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement( const std::string& _value ) const    {   return FirstChildElement (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
FirstPart	JPartDataHead.h	/^  unsigned FirstPart;    \/\/\/<First PART number.$/;"	m	class:JPartDataHead	access:private
FirstPart	JPartFloatBi4.h	/^  unsigned FirstPart;     \/\/\/<Primer PART almacenado. First number of stored PART.$/;"	m	class:JPartFloatBi4Load	access:private
FirstSaveData	JSaveCsv2.h	/^  bool FirstSaveData;$/;"	m	class:jcsv::JSaveCsv2	access:private
FirstTime	JTimeControl.h	/^  double FirstTime;     \/\/\/<First time to evaluate (when it is less than timeout and not zero). | Primer instante a evaluar (cuando es menor que timeout y no es cero).$/;"	m	class:JTimeControl	access:protected
Flash	JMotionObj.h	/^  bool Flash;$/;"	m	class:JMotionMovActive	access:public
Float3	JCellDivGpu_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cudiv	signature:(const tfloat3& v)
Float3	JCellDivGpu_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cudiv	signature:(float x,float y,float z)
Float3	JGauge_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cugauge	signature:(const tfloat3& v)
Float3	JGauge_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cugauge	signature:(float x,float y,float z)
Float3	JSphGpu_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cusph	signature:(const tfloat3& v)
Float3	JSphGpu_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cusph	signature:(float x,float y,float z)
Float32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
Float3Str	Functions.cpp	/^std::string Float3Str(const tfloat3 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tfloat3 &v,const char* fmt)
Float3Str	Functions.h	/^std::string Float3Str(const tfloat3 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tfloat3 &v,const char* fmt=Ó)
Float3gRangeStr	Functions.h	/^inline std::string Float3gRangeStr(const tfloat3 &v,const tfloat3 &v2){ return(std::string("(")+Float3gStr(v)+")-("+Float3gStr(v2)+")"); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const tfloat3 &v2)
Float3gStr	Functions.h	/^inline std::string Float3gStr(const tfloat3 &v){ return(Float3Str(v,"%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tfloat3 &v)
Float3xRangeStr	Functions.h	/^inline std::string Float3xRangeStr(const tfloat3 &v,const tfloat3 &v2,const char* fmt="%f"){ return(std::string("(")+Float3xStr(v,fmt)+")-("+Float3xStr(v2,fmt)+")"); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const tfloat3 &v2,const char* fmt=Ó)
Float3xStr	Functions.h	/^inline std::string Float3xStr(const tfloat3 &v,const char* fmt="%f"){ return(FloatxStr(v.x,fmt)+","+FloatxStr(v.y,fmt)+","+FloatxStr(v.z,fmt)); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const char* fmt=Ó)
FloatStr	Functions.cpp	/^std::string FloatStr(float v,const char* fmt){$/;"	f	namespace:fun	signature:(float v,const char* fmt)
FloatStr	Functions.h	/^std::string FloatStr(float v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(float v,const char* fmt=Ó)
Floating	JCellDivCpu.h	/^  const bool Floating;$/;"	m	class:JCellDivCpu	access:protected
Floating	JCellDivGpu.h	/^  const bool Floating;$/;"	m	class:JCellDivGpu	access:protected
FloatxStr	Functions.cpp	/^std::string FloatxStr(float v,const char* fmt){$/;"	f	namespace:fun	signature:(float v,const char* fmt)
FloatxStr	Functions.h	/^std::string FloatxStr(float v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(float v,const char* fmt=Ó)
Fmt	JSaveCsv2.h	/^  Fmt(TpFormat typefmt):TypeFmt(typefmt),Format(""){};$/;"	f	class:jcsv::Fmt	access:public	signature:(TpFormat typefmt)
Fmt	JSaveCsv2.h	/^  Fmt(TpFormat typefmt,const std::string &format):TypeFmt(typefmt),Format(format){};$/;"	f	class:jcsv::Fmt	access:public	signature:(TpFormat typefmt,const std::string &format)
Fmt	JSaveCsv2.h	/^class Fmt$/;"	c	namespace:jcsv
FmtCurrent	JSaveCsv2.h	/^  std::string FmtCurrent[SizeFmt];   \/\/\/<Current formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
FmtDefault	JSaveCsv2.h	/^  std::string FmtDefault[SizeFmt];   \/\/\/<Default formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
FmtDouble	JBinaryData.h	/^  std::string FmtDouble; \/\/\/<Formato para valores double, por defecto "%.15E" Format for double, by default " %.15E".$/;"	m	class:JBinaryData	access:private
FmtFloat	JBinaryData.h	/^  std::string FmtFloat;  \/\/\/<Formato para valores float, por defecto "%.7E". Format for float, by default " %.7E". $/;"	m	class:JBinaryData	access:private
FmtVersion	JPartDataHead.h	/^  unsigned FmtVersion;    \/\/\/<Version de formato. Version of format.$/;"	m	class:JPartDataHead	access:private
FmtVersion	JPartOutBi4Save.h	/^  static const unsigned FmtVersion=180320;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartOutBi4Save	access:private
FmtVersionDef	JPartDataHead.h	/^  static const unsigned FmtVersionDef=180324;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartDataHead	access:private
Format	JSaveCsv2.h	/^  const std::string Format;$/;"	m	class:jcsv::Fmt	access:public
FormatVer	JPartDataBi4.h	/^  unsigned FormatVer;        \/\/\/<Version de formato. Version of format.$/;"	m	class:JPartDataBi4	access:private
FormatVer	JPartFloatBi4.h	/^  unsigned FormatVer;    \/\/\/<Version de formato. Format version.$/;"	m	class:JPartFloatBi4Load	access:private
FormatVer	JPartFloatBi4.h	/^  unsigned FormatVer;    \/\/\/<Version de formato. Format version.$/;"	m	class:JPartFloatBi4Save	access:private
FormatVerDef	JPartDataBi4.h	/^  static const unsigned FormatVerDef=130825;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartDataBi4	access:private
FormatVerDef	JPartFloatBi4.h	/^  static const unsigned FormatVerDef=180423;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartFloatBi4Load	access:private
FormatVerDef	JPartFloatBi4.h	/^  static const unsigned FormatVerDef=180423;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartFloatBi4Save	access:private
Fourh2	JGaugeItem.h	/^  float Fourh2;$/;"	m	class:JGaugeItem	access:protected
Fourh2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
Free	JArraysCpu.cpp	/^void JArraysCpuSize::Free(void *pointer){$/;"	f	class:JArraysCpuSize	signature:(void *pointer)
Free	JArraysCpu.h	/^  void Free(byte        *pointer){ Arrays1b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(byte *pointer)
Free	JArraysCpu.h	/^  void Free(double      *pointer){ Arrays8b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(double *pointer)
Free	JArraysCpu.h	/^  void Free(float       *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(float *pointer)
Free	JArraysCpu.h	/^  void Free(int         *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(int *pointer)
Free	JArraysCpu.h	/^  void Free(tdouble2    *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tdouble2 *pointer)
Free	JArraysCpu.h	/^  void Free(tdouble3    *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tdouble3 *pointer)
Free	JArraysCpu.h	/^  void Free(tfloat3     *pointer){ Arrays12b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tfloat3 *pointer)
Free	JArraysCpu.h	/^  void Free(tfloat4     *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tfloat4 *pointer)
Free	JArraysCpu.h	/^  void Free(tsymatrix3f *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tsymatrix3f *pointer)
Free	JArraysCpu.h	/^  void Free(unsigned    *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(unsigned *pointer)
Free	JArraysCpu.h	/^  void Free(void *pointer);$/;"	p	class:JArraysCpuSize	access:public	signature:(void *pointer)
Free	JArraysCpu.h	/^  void Free(word        *pointer){ Arrays2b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(word *pointer)
Free	JArraysGpu.cpp	/^void JArraysGpuSize::Free(void *pointer){$/;"	f	class:JArraysGpuSize	signature:(void *pointer)
Free	JArraysGpu.h	/^  void Free(byte     *pointer){ Arrays1b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(byte *pointer)
Free	JArraysGpu.h	/^  void Free(double   *pointer){ Arrays8b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(double *pointer)
Free	JArraysGpu.h	/^  void Free(double2  *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double2 *pointer)
Free	JArraysGpu.h	/^  void Free(double3  *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double3 *pointer)
Free	JArraysGpu.h	/^  void Free(double4  *pointer){ Arrays32b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double4 *pointer)
Free	JArraysGpu.h	/^  void Free(float    *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(float *pointer)
Free	JArraysGpu.h	/^  void Free(float3   *pointer){ Arrays12b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(float3 *pointer)
Free	JArraysGpu.h	/^  void Free(float4   *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(float4 *pointer)
Free	JArraysGpu.h	/^  void Free(int      *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(int *pointer)
Free	JArraysGpu.h	/^  void Free(tsymatrix3f *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(tsymatrix3f *pointer)
Free	JArraysGpu.h	/^  void Free(unsigned *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(unsigned *pointer)
Free	JArraysGpu.h	/^  void Free(void *pointer);$/;"	p	class:JArraysGpuSize	access:public	signature:(void *pointer)
Free	JArraysGpu.h	/^  void Free(word     *pointer){ Arrays2b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(word *pointer)
FreeCpuMemoryFixed	JSphCpu.cpp	/^void JSphCpu::FreeCpuMemoryFixed(){$/;"	f	class:JSphCpu	signature:()
FreeCpuMemoryFixed	JSphCpu.h	/^  void FreeCpuMemoryFixed();$/;"	p	class:JSphCpu	access:protected	signature:()
FreeCpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::FreeCpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
FreeCpuMemoryFixed	JSphGpu.h	/^  void FreeCpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
FreeCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::FreeCpuMemoryParticles(){$/;"	f	class:JSphCpu	signature:()
FreeCpuMemoryParticles	JSphCpu.h	/^  void FreeCpuMemoryParticles();$/;"	p	class:JSphCpu	access:protected	signature:()
FreeCpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::FreeCpuMemoryParticles(){$/;"	f	class:JSphGpu	signature:()
FreeCpuMemoryParticles	JSphGpu.h	/^  void FreeCpuMemoryParticles();$/;"	p	class:JSphGpu	access:protected	signature:()
FreeGpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::FreeGpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
FreeGpuMemoryFixed	JSphGpu.h	/^  void FreeGpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
FreeGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::FreeGpuMemoryParticles(){$/;"	f	class:JSphGpu	signature:()
FreeGpuMemoryParticles	JSphGpu.h	/^  void FreeGpuMemoryParticles();$/;"	p	class:JSphGpu	access:protected	signature:()
FreeMemory	JArraysCpu.cpp	/^void JArraysCpuSize::FreeMemory(){$/;"	f	class:JArraysCpuSize	signature:()
FreeMemory	JArraysCpu.h	/^  void FreeMemory();$/;"	p	class:JArraysCpuSize	access:protected	signature:()
FreeMemory	JArraysGpu.cpp	/^void JArraysGpuSize::FreeMemory(){$/;"	f	class:JArraysGpuSize	signature:()
FreeMemory	JArraysGpu.h	/^  void FreeMemory();$/;"	p	class:JArraysGpuSize	access:protected	signature:()
FreeMemory	JBinaryData.cpp	/^void JBinaryDataArray::FreeMemory(){$/;"	f	class:JBinaryDataArray	signature:()
FreeMemory	JBinaryData.h	/^  void FreeMemory();$/;"	p	class:JBinaryDataArray	access:public	signature:()
FreeMemoryAll	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryAll(){$/;"	f	class:JCellDivCpu	signature:()
FreeMemoryAll	JCellDivCpu.h	/^  void FreeMemoryAll();$/;"	p	class:JCellDivCpu	access:protected	signature:()
FreeMemoryAll	JCellDivGpu.cpp	/^void JCellDivGpu::FreeMemoryAll(){$/;"	f	class:JCellDivGpu	signature:()
FreeMemoryAll	JCellDivGpu.h	/^  void FreeMemoryAll();$/;"	p	class:JCellDivGpu	access:protected	signature:()
FreeMemoryGpu	JCellDivGpu.h	/^  void FreeMemoryGpu(){ FreeMemoryAll(); }$/;"	f	class:JCellDivGpu	access:public	signature:()
FreeMemoryGpu	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::FreeMemoryGpu(){$/;"	f	class:JWaveSpectrumGpu	signature:()
FreeMemoryGpu	JWaveSpectrumGpu.h	/^  void FreeMemoryGpu();$/;"	p	class:JWaveSpectrumGpu	access:public	signature:()
FreeMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryNct(){$/;"	f	class:JCellDivCpu	signature:()
FreeMemoryNct	JCellDivCpu.h	/^  void FreeMemoryNct();$/;"	p	class:JCellDivCpu	access:protected	signature:()
FreeMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::FreeMemoryNct(){$/;"	f	class:JCellDivGpu	signature:()
FreeMemoryNct	JCellDivGpu.h	/^  void FreeMemoryNct();$/;"	p	class:JCellDivGpu	access:protected	signature:()
FreeMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryNp(){$/;"	f	class:JCellDivCpu	signature:()
FreeMemoryNp	JCellDivCpu.h	/^  void FreeMemoryNp();$/;"	p	class:JCellDivCpu	access:protected	signature:()
FreeParticleData	JSphPartsInit.cpp	/^void JSphPartsInit::FreeParticleData(){$/;"	f	class:JSphPartsInit	signature:()
FreeParticleData	JSphPartsInit.h	/^  void FreeParticleData();$/;"	p	class:JSphPartsInit	access:private	signature:()
FreePartsInit	JSph.cpp	/^void JSph::FreePartsInit(){$/;"	f	class:JSph	signature:()
FreePartsInit	JSph.h	/^  void FreePartsInit();$/;"	p	class:JSph	access:protected	signature:()
FreePointer	JArraysCpu.cpp	/^void JArraysCpuSize::FreePointer(void* pointer)const{$/;"	f	class:JArraysCpuSize	signature:(void* pointer) const
FreePointer	JArraysCpu.h	/^  void FreePointer(void* pointer)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(void* pointer) const
FreePointer	JBinaryData.cpp	/^void JBinaryDataArray::FreePointer(void* ptr)const{$/;"	f	class:JBinaryDataArray	signature:(void* ptr) const
FreePointer	JBinaryData.h	/^  void FreePointer(void* ptr)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(void* ptr) const
Freq	JMotionMov.h	/^  const double Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovCirSinu	access:public
Freq	JMotionMov.h	/^  const double Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovRotSinu	access:public
Freq	JMotionMov.h	/^  const tdouble3 Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovRectSinu	access:public
Freq	JTimer.h	/^  LARGE_INTEGER Freq;$/;"	m	class:JTimer	access:private
FtCalcForces	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForces(StFtoForces *ftoforces)const{$/;"	f	class:JSphCpuSingle	signature:(StFtoForces *ftoforces) const
FtCalcForces	JSphCpuSingle.h	/^  void FtCalcForces(StFtoForces *ftoforces)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(StFtoForces *ftoforces) const
FtCalcForces	JSphGpu_ker.cu	/^void FtCalcForces(unsigned ftcount,tfloat3 gravity,const float4 *ftodata$/;"	f	namespace:cusph	signature:(unsigned ftcount,tfloat3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
FtCalcForces	JSphGpu_ker.h	/^void FtCalcForces(unsigned ftcount,tfloat3 gravity,const float4 *ftodata$/;"	p	namespace:cusph	signature:(unsigned ftcount,tfloat3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
FtCalcForcesRes	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForcesRes(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres)const{$/;"	f	class:JSphCpuSingle	signature:(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres) const
FtCalcForcesRes	JSphCpuSingle.h	/^  void FtCalcForcesRes(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres) const
FtCalcForcesRes	JSphGpu_ker.cu	/^void FtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	f	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
FtCalcForcesRes	JSphGpu_ker.h	/^void FtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	p	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
FtCalcForcesSum	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForcesSum(unsigned cf,tfloat3 &face,tfloat3 &fomegaace)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned cf,tfloat3 &face,tfloat3 &fomegaace) const
FtCalcForcesSum	JSphCpuSingle.h	/^  void FtCalcForcesSum(unsigned cf,tfloat3 &face,tfloat3 &fomegaace)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned cf,tfloat3 &face,tfloat3 &fomegaace) const
FtCalcForcesSum	JSphGpu_ker.cu	/^void FtCalcForcesSum(bool periactive,unsigned ftcount$/;"	f	namespace:cusph	signature:(bool periactive,unsigned ftcount ,tfloat3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
FtCalcForcesSum	JSphGpu_ker.h	/^void FtCalcForcesSum(bool periactive,unsigned ftcount$/;"	p	namespace:cusph	signature:(bool periactive,unsigned ftcount ,tfloat3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
FtCount	JPartFloatBi4.h	/^  unsigned FtCount;       \/\/\/<Numero de floatings. Floating number$/;"	m	class:JPartFloatBi4Load	access:private
FtCount	JPartFloatBi4.h	/^  unsigned FtCount;      \/\/\/<Numero de floatings. Number of floats.$/;"	m	class:JPartFloatBi4Save	access:private
FtCount	JSph.h	/^  unsigned FtCount;          \/\/\/<Number of floating objects.$/;"	m	class:JSph	access:protected
FtMode	JSph.h	/^  TpFtMode FtMode;           \/\/\/<Defines interaction mode for floatings and boundaries.$/;"	m	class:JSph	access:protected
FtObjs	JSph.h	/^  StFloatingData *FtObjs;    \/\/\/<Data of floating objects. [ftcount]$/;"	m	class:JSph	access:protected
FtPause	JCfgRun.h	/^  float FtPause;$/;"	m	class:JCfgRun	access:public
FtPause	JSph.h	/^  float FtPause;             \/\/\/<Time to start floating bodies movement.$/;"	m	class:JSph	access:protected
FtPeriodicDist	JSphCpuSingle.cpp	/^tfloat3 JSphCpuSingle::FtPeriodicDist(const tdouble3 &pos,const tdouble3 &center,float radius)const{$/;"	f	class:JSphCpuSingle	signature:(const tdouble3 &pos,const tdouble3 &center,float radius) const
FtPeriodicDist	JSphCpuSingle.h	/^  inline tfloat3 FtPeriodicDist(const tdouble3 &pos,const tdouble3 &center,float radius)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(const tdouble3 &pos,const tdouble3 &center,float radius) const
FtRidp	JSphCpu.h	/^  unsigned *FtRidp;             \/\/\/<Identifier to access to the particles of the floating object [CaseNfloat].$/;"	m	class:JSphCpu	access:protected
FtRidpg	JSphGpu.h	/^  unsigned *FtRidpg;      \/\/\/<Identifier to access to the particles of the floating object [CaseNfloat].$/;"	m	class:JSphGpu	access:protected
FtUpdate	JSphGpu_ker.cu	/^void FtUpdate(bool periactive,bool predictor,unsigned ftcount,double dt$/;"	f	namespace:cusph	signature:(bool periactive,bool predictor,unsigned ftcount,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
FtUpdate	JSphGpu_ker.h	/^void FtUpdate(bool periactive,bool predictor,unsigned ftcount,double dt$/;"	p	namespace:cusph	signature:(bool periactive,bool predictor,unsigned ftcount,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
FtoAnglesg	JSphGpu.h	/^  float3  *FtoAnglesg;      \/\/\/<Maintains rotation angles from center (angle xz, angle yz, angle xy) (units:Rad) [FtCount].   $/;"	m	class:JSphGpu	access:protected
FtoAuxDouble6	JSphGpu.h	/^  tdouble3 *FtoAuxDouble6; \/\/\/<Memory to swap floating data with GPU. [2*FtCount]. | Memoria para intercambiar datos de floatings con GPU. [2*FtCount].$/;"	m	class:JSphGpu	access:protected
FtoAuxFloat9	JSphGpu.h	/^  tfloat3  *FtoAuxFloat9;  \/\/\/<Memory to swap floating data with GPU. [3*FtCount]. | Memoria para intercambiar datos de floatings con GPU. [3*FtCount].$/;"	m	class:JSphGpu	access:protected
FtoCenterResg	JSphGpu.h	/^  double3 *FtoCenterResg; \/\/\/<Stores centre to update floatings. [Ftcount]. | Almacena centro para actualizar floatings. [FtCount]. $/;"	m	class:JSphGpu	access:protected
FtoCenterg	JSphGpu.h	/^  double3 *FtoCenterg;      \/\/\/<Maintains centre of floating bodies [Ftcount].   | Mantiene centro de floating. [FtCount].   $/;"	m	class:JSphGpu	access:protected
FtoDatag	JSphGpu.h	/^  float4 *FtoDatag;       \/\/\/<Constant data of floatings {pini_u,np_u,radius_f,mass_f} [FtCount] \/\/__device__ int __float_as_int(float x) \/\/__device__ float __int_as_float(int x).$/;"	m	class:JSphGpu	access:protected
FtoForces	JSphCpu.h	/^  StFtoForces *FtoForces;       \/\/\/<Stores forces of floatings [FtCount].$/;"	m	class:JSphCpu	access:protected
FtoForcesRes	JSphCpu.h	/^  StFtoForcesRes *FtoForcesRes; \/\/\/<Stores data to update floatings [FtCount].$/;"	m	class:JSphCpu	access:protected
FtoForcesResg	JSphGpu.h	/^  float3 *FtoForcesResg;  \/\/\/<Stores data to update floatings {fomegares_f3,fvelres_f3} equivalent to JSphCpu::FtoForcesRes. [FtCount]. | Almacena datos para actualizar floatings {fomegares_f3,fvelres_f3} equivalente a JSphCpu::FtoForcesRes. [FtCount].$/;"	m	class:JSphGpu	access:protected
FtoForcesSumg	JSphGpu.h	/^  float3 *FtoForcesSumg;  \/\/\/<Stores forces summation for the floating bodies {sumface_f3,sumfomegaace_f3}[FtCount]. | Almacena sumatorio de fuerzas de floatings {sumface_f3,sumfomegaace_f3} [FtCount]. $/;"	m	class:JSphGpu	access:protected
FtoForcesg	JSphGpu.h	/^  float3 *FtoForcesg;     \/\/\/<Stores forces for the floating bodies {face_f3,fomegaace_f3} equivalent to JSphCpu::FtoForces [FtCount]. | Almacena fuerzas de floatings {face_f3,fomegaace_f3} equivalente a JSphCpu::FtoForces [FtCount]. $/;"	m	class:JSphGpu	access:protected
FtoInertiaini1g	JSphGpu.h	/^  float   *FtoInertiaini1g; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given) (a33) [Ftcount].$/;"	m	class:JSphGpu	access:protected
FtoInertiaini8g	JSphGpu.h	/^  float4  *FtoInertiaini8g; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given) (a11,...,a21,a22,...,a32) [Ftcount*2].$/;"	m	class:JSphGpu	access:protected
FtoMasspg	JSphGpu.h	/^  float *FtoMasspg;       \/\/\/<Mass of the particle for each floating body [FtCount] in GPU (used in interaction forces).$/;"	m	class:JSphGpu	access:protected
FtoOmegag	JSphGpu.h	/^  float3  *FtoOmegag;       \/\/\/<Maintains omega of floating bodies [FtCount].    | Mantiene omega de floating. [FtCount].$/;"	m	class:JSphGpu	access:protected
FtoVelg	JSphGpu.h	/^  float3  *FtoVelg;         \/\/\/<Maintains velocity of floating bodies [FtCount]. | Mantiene vel de floating. [FtCount].$/;"	m	class:JSphGpu	access:protected
FullInfo	JSaveDt.h	/^  bool FullInfo;       \/\/\/<Saves AceMax, ViscDtMax and VelMax.$/;"	m	class:JSaveDt	access:private
GAUGE_Force	JGaugeItem.h	/^    ,GAUGE_Force$/;"	e	enum:JGaugeItem::__anon15
GAUGE_MaxZ	JGaugeItem.h	/^    ,GAUGE_MaxZ$/;"	e	enum:JGaugeItem::__anon15
GAUGE_Swl	JGaugeItem.h	/^    ,GAUGE_Swl$/;"	e	enum:JGaugeItem::__anon15
GAUGE_Vel	JGaugeItem.h	/^     GAUGE_Vel$/;"	e	enum:JGaugeItem::__anon15
Gamma	JGaugeItem.h	/^  float Gamma;$/;"	m	class:JGaugeItem	access:protected
Gamma	JGaugeSystem.h	/^  float Gamma;$/;"	m	class:JGaugeSystem	access:private
Gamma	JPartDataHead.h	/^  double Gamma;$/;"	m	class:JPartDataHead	access:private
Gamma	JSpaceCtes.h	/^  double Gamma;           \/\/\/<Polytropic constant. (1-7).$/;"	m	class:JSpaceCtes	access:private
Gamma	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
GaugeSystem	JSph.h	/^  JGaugeSystem *GaugeSystem;    \/\/\/<Object for automatic gauge system.$/;"	m	class:JSph	access:protected
Gauges	JGaugeSystem.h	/^  std::vector<JGaugeItem*> Gauges;$/;"	m	class:JGaugeSystem	access:private
GetAccValues	JSphAccInput.cpp	/^void JSphAccInput::GetAccValues(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity){$/;"	f	class:JSphAccInput	signature:(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
GetAccValues	JSphAccInput.cpp	/^void JSphAccInputMk::GetAccValues(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity){$/;"	f	class:JSphAccInputMk	signature:(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
GetAccValues	JSphAccInput.h	/^  void GetAccValues(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity); \/\/SL: Added linear and angular velocity and set gravity flag$/;"	p	class:JSphAccInputMk	access:public	signature:(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
GetAccValues	JSphAccInput.h	/^  void GetAccValues(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity); \/\/SL: Added linear and angular velocity and set gravity flag$/;"	p	class:JSphAccInput	access:public	signature:(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
GetActiveMotion	JSphMotion.h	/^  bool GetActiveMotion()const{ return(ActiveMotion); }$/;"	f	class:JSphMotion	access:public	signature:() const
GetAllProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetAllProps()const{$/;"	f	class:JSpacePropLinks	signature:() const
GetAllProps	JSpaceProperties.h	/^  std::string GetAllProps()const;$/;"	p	class:JSpacePropLinks	access:public	signature:() const
GetAllocMemory	JBinaryData.cpp	/^llong JBinaryData::GetAllocMemory()const{$/;"	f	class:JBinaryData	signature:() const
GetAllocMemory	JBinaryData.cpp	/^llong JBinaryDataArray::GetAllocMemory()const{$/;"	f	class:JBinaryDataArray	signature:() const
GetAllocMemory	JBinaryData.h	/^  llong GetAllocMemory()const;$/;"	p	class:JBinaryData	access:public	signature:() const
GetAllocMemory	JBinaryData.h	/^  llong GetAllocMemory()const;$/;"	p	class:JBinaryDataArray	access:public	signature:() const
GetAllocMemory	JCellDivCpu.h	/^  ullong GetAllocMemory()const{ return(GetAllocMemoryNp()+GetAllocMemoryNct()); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
GetAllocMemory	JCellDivCpuSingle.h	/^  ullong GetAllocMemory()const{ return(JCellDivCpu::GetAllocMemory()); }$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
GetAllocMemory	JLinearValue.cpp	/^unsigned JLinearValue::GetAllocMemory()const{$/;"	f	class:JLinearValue	signature:() const
GetAllocMemory	JLinearValue.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JLinearValue	access:public	signature:() const
GetAllocMemory	JPartDataBi4.cpp	/^long long JPartDataBi4::GetAllocMemory()const{  $/;"	f	class:JPartDataBi4	signature:() const
GetAllocMemory	JPartDataBi4.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
GetAllocMemory	JPartFloatBi4.cpp	/^long long JPartFloatBi4Save::GetAllocMemory()const{  $/;"	f	class:JPartFloatBi4Save	signature:() const
GetAllocMemory	JPartFloatBi4.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartFloatBi4Save	access:public	signature:() const
GetAllocMemory	JPartOutBi4Save.cpp	/^long long JPartOutBi4Save::GetAllocMemory()const{  $/;"	f	class:JPartOutBi4Save	signature:() const
GetAllocMemory	JPartOutBi4Save.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartOutBi4Save	access:public	signature:() const
GetAllocMemory	JPartsLoad4.cpp	/^llong JPartsLoad4::GetAllocMemory()const{  $/;"	f	class:JPartsLoad4	signature:() const
GetAllocMemory	JPartsLoad4.h	/^  llong GetAllocMemory()const;$/;"	p	class:JPartsLoad4	access:public	signature:() const
GetAllocMemory	JPartsOut.cpp	/^llong JPartsOut::GetAllocMemory()const{  $/;"	f	class:JPartsOut	signature:() const
GetAllocMemory	JPartsOut.h	/^  llong GetAllocMemory()const;$/;"	p	class:JPartsOut	access:public	signature:() const
GetAllocMemory	JSphAccInput.cpp	/^long long JSphAccInputMk::GetAllocMemory()const{$/;"	f	class:JSphAccInputMk	signature:() const
GetAllocMemory	JSphAccInput.h	/^  long long GetAllocMemory()const;$/;"	p	class:JSphAccInputMk	access:public	signature:() const
GetAllocMemory	JSphAccInput.h	/^  long long GetAllocMemory()const{ return(MemSize); }$/;"	f	class:JSphAccInput	access:public	signature:() const
GetAllocMemory	JSphDtFixed.cpp	/^unsigned JSphDtFixed::GetAllocMemory()const{$/;"	f	class:JSphDtFixed	signature:() const
GetAllocMemory	JSphDtFixed.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JSphDtFixed	access:public	signature:() const
GetAllocMemory	JSphVisco.cpp	/^unsigned JSphVisco::GetAllocMemory()const{$/;"	f	class:JSphVisco	signature:() const
GetAllocMemory	JSphVisco.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JSphVisco	access:public	signature:() const
GetAllocMemoryCpu	JArraysCpu.cpp	/^llong JArraysCpu::GetAllocMemoryCpu()const{ $/;"	f	class:JArraysCpu	signature:() const
GetAllocMemoryCpu	JArraysCpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JArraysCpu	access:public	signature:() const
GetAllocMemoryCpu	JArraysCpu.h	/^  llong GetAllocMemoryCpu()const{ return((llong)(Count)*ElementSize*ArraySize); };$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetAllocMemoryCpu	JCellDivGpu.h	/^  ullong GetAllocMemoryCpu()const{ return(0); }$/;"	f	class:JCellDivGpu	access:protected	signature:() const
GetAllocMemoryCpu	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryCpu()const{ return(JCellDivGpu::GetAllocMemoryCpu()); }$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
GetAllocMemoryCpu	JSph.cpp	/^llong JSph::GetAllocMemoryCpu()const{  $/;"	f	class:JSph	signature:() const
GetAllocMemoryCpu	JSph.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSph	access:protected	signature:() const
GetAllocMemoryCpu	JSphCpu.cpp	/^llong JSphCpu::GetAllocMemoryCpu()const{  $/;"	f	class:JSphCpu	signature:() const
GetAllocMemoryCpu	JSphCpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphCpu	access:protected	signature:() const
GetAllocMemoryCpu	JSphCpuSingle.cpp	/^llong JSphCpuSingle::GetAllocMemoryCpu()const{  $/;"	f	class:JSphCpuSingle	signature:() const
GetAllocMemoryCpu	JSphCpuSingle.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphCpuSingle	access:protected	signature:() const
GetAllocMemoryCpu	JSphGpu.cpp	/^llong JSphGpu::GetAllocMemoryCpu()const{  $/;"	f	class:JSphGpu	signature:() const
GetAllocMemoryCpu	JSphGpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphGpu	access:protected	signature:() const
GetAllocMemoryCpu	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetAllocMemoryCpu()const{  $/;"	f	class:JSphGpuSingle	signature:() const
GetAllocMemoryCpu	JSphGpuSingle.h	/^  llong GetAllocMemoryCpu()const;  $/;"	p	class:JSphGpuSingle	access:protected	signature:() const
GetAllocMemoryGpu	JArraysGpu.cpp	/^llong JArraysGpu::GetAllocMemoryGpu()const{ $/;"	f	class:JArraysGpu	signature:() const
GetAllocMemoryGpu	JArraysGpu.h	/^  llong GetAllocMemoryGpu()const;$/;"	p	class:JArraysGpu	access:public	signature:() const
GetAllocMemoryGpu	JArraysGpu.h	/^  llong GetAllocMemoryGpu()const{ return((llong)(Count)*ElementSize*ArraySize); };$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetAllocMemoryGpu	JCellDivGpu.h	/^  ullong GetAllocMemoryGpu()const{ return(GetAllocMemoryGpuNp()+GetAllocMemoryGpuNct()); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
GetAllocMemoryGpu	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpu()const{ return(JCellDivGpu::GetAllocMemoryGpu()); }$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
GetAllocMemoryGpu	JSphGpu.cpp	/^llong JSphGpu::GetAllocMemoryGpu()const{  $/;"	f	class:JSphGpu	signature:() const
GetAllocMemoryGpu	JSphGpu.h	/^  llong GetAllocMemoryGpu()const;$/;"	p	class:JSphGpu	access:protected	signature:() const
GetAllocMemoryGpu	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetAllocMemoryGpu()const{  $/;"	f	class:JSphGpuSingle	signature:() const
GetAllocMemoryGpu	JSphGpuSingle.h	/^  llong GetAllocMemoryGpu()const;  $/;"	p	class:JSphGpuSingle	access:protected	signature:() const
GetAllocMemoryGpuNct	JCellDivGpu.h	/^  ullong GetAllocMemoryGpuNct()const{ return(MemAllocGpuNct); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
GetAllocMemoryGpuNct	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpuNct()const{ return(JCellDivGpu::GetAllocMemoryGpuNct()); };$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
GetAllocMemoryGpuNp	JCellDivGpu.h	/^  ullong GetAllocMemoryGpuNp()const{ return(MemAllocGpuNp); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
GetAllocMemoryGpuNp	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpuNp()const{ return(JCellDivGpu::GetAllocMemoryGpuNp()); };$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
GetAllocMemoryNct	JCellDivCpu.h	/^  ullong GetAllocMemoryNct()const{ return(MemAllocNct); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
GetAllocMemoryNct	JCellDivCpuSingle.h	/^  ullong GetAllocMemoryNct()const{ return(JCellDivCpu::GetAllocMemoryNct()); };$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
GetAllocMemoryNp	JCellDivCpu.h	/^  ullong GetAllocMemoryNp()const{ return(MemAllocNp); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
GetAllocMemoryNp	JCellDivCpuSingle.h	/^  ullong GetAllocMemoryNp()const{ return(JCellDivCpu::GetAllocMemoryNp()); };$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
GetAppName	JPartDataHead.h	/^  std::string GetAppName()   const{ return(AppName);    };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetAppendMode	JSaveCsv2.h	/^  bool GetAppendMode()const{ return(AppendMode); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:() const
GetArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::GetArray(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
GetArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::GetArray(unsigned index){$/;"	f	class:JBinaryData	signature:(unsigned index)
GetArray	JBinaryData.h	/^  JBinaryDataArray* GetArray(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
GetArray	JBinaryData.h	/^  JBinaryDataArray* GetArray(unsigned index);$/;"	p	class:JBinaryData	access:public	signature:(unsigned index)
GetArray	JPartDataBi4.cpp	/^JBinaryDataArray* JPartDataBi4::GetArray(std::string name)const{$/;"	f	class:JPartDataBi4	signature:(std::string name) const
GetArray	JPartDataBi4.cpp	/^JBinaryDataArray* JPartDataBi4::GetArray(std::string name,JBinaryDataDef::TpData type)const{$/;"	f	class:JPartDataBi4	signature:(std::string name,JBinaryDataDef::TpData type) const
GetArray	JPartDataBi4.h	/^  JBinaryDataArray* GetArray(std::string name)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name) const
GetArray	JPartDataBi4.h	/^  JBinaryDataArray* GetArray(std::string name,JBinaryDataDef::TpData type)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name,JBinaryDataDef::TpData type) const
GetArrayCount	JArraysCpu.h	/^  unsigned GetArrayCount()const{ return(Count); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetArrayCount	JArraysCpu.h	/^  unsigned GetArrayCount(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCount()); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize) const
GetArrayCount	JArraysGpu.h	/^  unsigned GetArrayCount()const{ return(Count); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetArrayCount	JArraysGpu.h	/^  unsigned GetArrayCount(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCount()); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize) const
GetArrayCountMax	JArraysCpu.h	/^  unsigned GetArrayCountMax()const{ return(CountMax); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetArrayCountMax	JArraysGpu.h	/^  unsigned GetArrayCountMax()const{ return(CountMax); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetArrayCountUsed	JArraysCpu.h	/^  unsigned GetArrayCountUsed()const{ return(CountUsed); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetArrayCountUsed	JArraysCpu.h	/^  unsigned GetArrayCountUsed(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCountUsed()); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize) const
GetArrayCountUsed	JArraysGpu.h	/^  unsigned GetArrayCountUsed()const{ return(CountUsed); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetArrayCountUsed	JArraysGpu.h	/^  unsigned GetArrayCountUsed(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCountUsed()); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize) const
GetArrayCountUsedMax	JArraysCpu.h	/^  unsigned GetArrayCountUsedMax()const{ return(CountUsedMax); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetArrayCountUsedMax	JArraysGpu.h	/^  unsigned GetArrayCountUsedMax()const{ return(CountUsedMax); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetArrayIndex	JBinaryData.cpp	/^int JBinaryData::GetArrayIndex(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
GetArrayIndex	JBinaryData.h	/^  int GetArrayIndex(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
GetArraySize	JArraysCpu.h	/^  unsigned GetArraySize()const{ return(ArraySize); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
GetArraySize	JArraysCpu.h	/^  unsigned GetArraySize()const{ return(Arrays1b->GetArraySize()); }$/;"	f	class:JArraysCpu	access:public	signature:() const
GetArraySize	JArraysGpu.h	/^  unsigned GetArraySize()const{ return(ArraySize); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
GetArraySize	JArraysGpu.h	/^  unsigned GetArraySize()const{ return(Arrays1b->GetArraySize()); }$/;"	f	class:JArraysGpu	access:public	signature:() const
GetArrays	JArraysCpu.h	/^  JArraysCpuSize* GetArrays(TpArraySize tsize)const{ return(tsize==SIZE_32B? Arrays32b: (tsize==SIZE_24B? Arrays24b: (tsize==SIZE_16B? Arrays16b: (tsize==SIZE_12B? Arrays12b: (tsize==SIZE_8B? Arrays8b: (tsize==SIZE_4B? Arrays4b: (tsize==SIZE_2B? Arrays2b: Arrays1b))))))); }$/;"	f	class:JArraysCpu	access:protected	signature:(TpArraySize tsize) const
GetArrays	JArraysGpu.h	/^  JArraysGpuSize* GetArrays(TpArraySize tsize)const{ return(tsize==SIZE_32B? Arrays32b: (tsize==SIZE_24B? Arrays24b: (tsize==SIZE_16B? Arrays16b: (tsize==SIZE_12B? Arrays12b: (tsize==SIZE_8B? Arrays8b: (tsize==SIZE_4B? Arrays4b: (tsize==SIZE_2B? Arrays2b: Arrays1b))))))); }$/;"	f	class:JArraysGpu	access:protected	signature:(TpArraySize tsize) const
GetArraysCount	JBinaryData.h	/^  unsigned GetArraysCount()const{ return(unsigned(Arrays.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
GetAttributeBool	JXml.cpp	/^bool JXml::GetAttributeBool(const TiXmlElement* ele,const std::string &name,bool optional,bool valdef)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,bool optional,bool valdef) const
GetAttributeBool	JXml.h	/^  bool GetAttributeBool(const TiXmlElement* ele,const std::string &name,bool optional=false,bool valdef=false)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,bool optional=false,bool valdef=false) const
GetAttributeByte	JXml.cpp	/^byte JXml::GetAttributeByte(TiXmlElement* ele,const std::string &name,bool optional,byte valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,byte valdef) const
GetAttributeByte	JXml.h	/^  byte GetAttributeByte(TiXmlElement* ele,const std::string &name,bool optional=false,byte valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,byte valdef=0) const
GetAttributeDouble	JXml.cpp	/^double JXml::GetAttributeDouble(TiXmlElement* ele,const std::string &name,bool optional,double valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,double valdef) const
GetAttributeDouble	JXml.h	/^  double GetAttributeDouble(TiXmlElement* ele,const std::string &name,bool optional=false,double valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,double valdef=0) const
GetAttributeDouble3	JXml.h	/^  tdouble3 GetAttributeDouble3(TiXmlElement* ele,const char* name1="x",const char* name2="y",const char* name3="z")const{ return(TDouble3(GetAttributeDouble(ele,name1),GetAttributeDouble(ele,name2),GetAttributeDouble(ele,name3))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó) const
GetAttributeFloat	JXml.h	/^  float GetAttributeFloat(TiXmlElement* ele,const std::string &name,bool optional=false,float valdef=0)const{ return(float(GetAttributeDouble(ele,name,optional,valdef))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,float valdef=0) const
GetAttributeFloat3	JXml.h	/^  tfloat3 GetAttributeFloat3(TiXmlElement* ele,const char* name1="x",const char* name2="y",const char* name3="z")const{ tdouble3 v=GetAttributeDouble3(ele,name1,name2,name3); return(TFloat3(float(v.x),float(v.y),float(v.z))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó) const
GetAttributeInt	JXml.cpp	/^int JXml::GetAttributeInt(TiXmlElement* ele,const std::string &name,bool optional,int valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,int valdef) const
GetAttributeInt	JXml.h	/^  int GetAttributeInt(TiXmlElement* ele,const std::string &name,bool optional=false,int valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,int valdef=0) const
GetAttributeInt3	JXml.h	/^  tint3 GetAttributeInt3(TiXmlElement* ele)const{ return(TInt3(GetAttributeInt(ele,"x"),GetAttributeInt(ele,"y"),GetAttributeInt(ele,"z"))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele) const
GetAttributeStr	JXml.cpp	/^std::string JXml::GetAttributeStr(const TiXmlElement* ele,const std::string &name,bool optional,const std::string &valdef)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,bool optional,const std::string &valdef) const
GetAttributeStr	JXml.h	/^  std::string GetAttributeStr(const TiXmlElement* ele,const std::string &name,bool optional=false,const std::string &valdef="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,bool optional=false,const std::string &valdef=Ó) const
GetAttributeUint	JXml.h	/^  unsigned GetAttributeUint(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0)const{ return(GetAttributeUnsigned(ele,name,optional,valdef)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0) const
GetAttributeUint3	JXml.h	/^  tuint3 GetAttributeUint3(TiXmlElement* ele)const{ return(TUint3(GetAttributeUint(ele,"x"),GetAttributeUint(ele,"y"),GetAttributeUint(ele,"z"))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele) const
GetAttributeUnsigned	JXml.cpp	/^unsigned JXml::GetAttributeUnsigned(TiXmlElement* ele,const std::string &name,bool optional,unsigned valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,unsigned valdef) const
GetAttributeUnsigned	JXml.h	/^  unsigned GetAttributeUnsigned(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0) const
GetAttributeWord	JXml.cpp	/^word JXml::GetAttributeWord(TiXmlElement* ele,const std::string &name,bool optional,word valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,word valdef) const
GetAttributeWord	JXml.h	/^  word GetAttributeWord(TiXmlElement* ele,const std::string &name,bool optional=false,word valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,word valdef=0) const
GetAuxMem	JCellDivGpu.cpp	/^float* JCellDivGpu::GetAuxMem(unsigned size){$/;"	f	class:JCellDivGpu	signature:(unsigned size)
GetAuxMem	JCellDivGpu.h	/^  float* GetAuxMem(unsigned size);$/;"	p	class:JCellDivGpu	access:public	signature:(unsigned size)
GetAuxSize_ReduSumDouble	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumDouble(unsigned ndata){$/;"	f	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumDouble	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumDouble(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumFloat	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumFloat(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumFloat	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumFloat(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumFloat3	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumFloat3(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumFloat3	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumFloat3(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumUint	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumUint(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
GetAuxSize_ReduSumUint	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumUint(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
GetB	JPartDataHead.h	/^  double GetB()        const{ return(B);         };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetB	JSpaceCtes.h	/^  double GetB()const{ return(B); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetBAuto	JSpaceCtes.h	/^  bool GetBAuto()const{ return(BAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetBegin	JSpaceParts.h	/^  unsigned GetBegin()const{ return(Begin); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
GetBegin	JSpaceParts.h	/^  unsigned GetBegin()const{ return(Begin); }$/;"	f	class:JSpaceParts	access:private	signature:() const
GetBeginCell	JCellDivCpu.h	/^  const unsigned* GetBeginCell(){ return(BeginCell); }$/;"	f	class:JCellDivCpu	access:public	signature:()
GetBeginCell	JCellDivGpu.h	/^  const int2* GetBeginCell(){ return(BeginEndCell); }$/;"	f	class:JCellDivGpu	access:public	signature:()
GetBlock	JSpaceParts.cpp	/^const JSpacePartBlock& JSpaceParts::GetBlock(unsigned pos)const{$/;"	f	class:JSpaceParts	signature:(unsigned pos) const
GetBlock	JSpaceParts.h	/^  const JSpacePartBlock& GetBlock(unsigned pos)const;$/;"	p	class:JSpaceParts	access:public	signature:(unsigned pos) const
GetBlockNoutMax	JPartOutBi4Save.h	/^  unsigned GetBlockNoutMax()const{ return(BlockNoutMin); }$/;"	f	class:JPartOutBi4Save	access:public	signature:() const
GetBlockNoutMin	JPartOutBi4Save.h	/^  unsigned GetBlockNoutMin()const{ return(BlockNoutMin); }$/;"	f	class:JPartOutBi4Save	access:public	signature:() const
GetBoxFluid	JCellDivCpu.h	/^  unsigned GetBoxFluid()const{ return(BoxFluid); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetBoxFluid	JCellDivGpu.h	/^  unsigned GetBoxFluid()const{ return(BoxFluid); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetBs	JBlockSizeAuto.h	/^  unsigned GetBs(unsigned ct)const{ return(unsigned(BsMin+BsInc*int(ct))); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct) const
GetByFileName	JSpaceVtkOut.cpp	/^unsigned JSpaceVtkOut::GetByFileName(std::string fname)const{$/;"	f	class:JSpaceVtkOut	signature:(std::string fname) const
GetByFileName	JSpaceVtkOut.h	/^  unsigned GetByFileName(std::string fname)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(std::string fname) const
GetByMkType	JSpaceParts.cpp	/^JSpacePartBlock* JSpaceParts::GetByMkType(bool bound,word mktype)const{$/;"	f	class:JSpaceParts	signature:(bool bound,word mktype) const
GetByMkType	JSpaceParts.h	/^  JSpacePartBlock* GetByMkType(bool bound,word mktype)const;$/;"	p	class:JSpaceParts	access:private	signature:(bool bound,word mktype) const
GetByteOrder	Functions.cpp	/^TpByteOrder GetByteOrder(){$/;"	f	namespace:fun	signature:()
GetByteOrder	Functions.h	/^TpByteOrder GetByteOrder();$/;"	p	namespace:fun	signature:()
GetCFLnumber	JSpaceCtes.h	/^  double GetCFLnumber()const{ return(CFLnumber); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetCanonicalPath	Functions.cpp	/^std::string GetCanonicalPath(std::string pathbase,std::string path){$/;"	f	namespace:fun	signature:(std::string pathbase,std::string path)
GetCanonicalPath	Functions.h	/^std::string GetCanonicalPath(std::string pathbase,std::string path);$/;"	p	namespace:fun	signature:(std::string pathbase,std::string path)
GetCaseName	JPartDataHead.h	/^  std::string GetCaseName()  const{ return(CaseName);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCaseNfixed	JPartDataHead.h	/^  unsigned GetCaseNfixed() const{ return(CaseNfixed);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCaseNfloat	JPartDataHead.h	/^  unsigned GetCaseNfloat() const{ return(CaseNfloat);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCaseNfluid	JPartDataHead.h	/^  unsigned GetCaseNfluid() const{ return(CaseNfluid);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCaseNmoving	JPartDataHead.h	/^  unsigned GetCaseNmoving()const{ return(CaseNmoving); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCaseNp	JPartDataHead.h	/^  unsigned GetCaseNp()     const{ return(CaseNp);      };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCasePosMax	JPartDataHead.h	/^  tdouble3 GetCasePosMax() const{ return(CasePosMax);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCasePosMax	JPartsLoad4.h	/^  tdouble3 GetCasePosMax()const{ return(CasePosMax); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetCasePosMin	JPartDataHead.h	/^  tdouble3 GetCasePosMin() const{ return(CasePosMin);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetCasePosMin	JPartsLoad4.h	/^  tdouble3 GetCasePosMin()const{ return(CasePosMin); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetCellDomainMax	JCellDivCpu.h	/^  tuint3 GetCellDomainMax()const{ return(CellDomainMax); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetCellDomainMax	JCellDivGpu.h	/^  tuint3 GetCellDomainMax()const{ return(CellDomainMax); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetCellDomainMin	JCellDivCpu.h	/^  tuint3 GetCellDomainMin()const{ return(CellDomainMin); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetCellDomainMin	JCellDivGpu.h	/^  tuint3 GetCellDomainMin()const{ return(CellDomainMin); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetCellMode	JCellDivCpu.h	/^  TpCellMode GetCellMode()const{ return(CellMode); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetCellMode	JCellDivGpu.h	/^  TpCellMode GetCellMode()const{ return(CellMode); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetCenter	JSpaceParts.h	/^  tdouble3 GetCenter()const{ return(Center); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
GetChar	tinyxml.h	/^    inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
GetCode	JGaugeItem.h	/^  typecode    GetCode()     const{ return(Code); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetCode	JSphPartsInit.h	/^  const typecode* GetCode()const{ return(Code); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
GetCodeById	JSphMk.cpp	/^typecode JSphMk::GetCodeById(unsigned id)const{$/;"	f	class:JSphMk	signature:(unsigned id) const
GetCodeById	JSphMk.h	/^  typecode GetCodeById(unsigned id)const;$/;"	p	class:JSphMk	access:public	signature:(unsigned id) const
GetCodeNewFluid	JSphMk.h	/^  typecode GetCodeNewFluid()const{ return(CodeNewFluid); }$/;"	f	class:JSphMk	access:public	signature:() const
GetCoefH	JSpaceCtes.h	/^  double GetCoefH()const{ return(CoefH); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetCoefHdp	JSpaceCtes.h	/^  double GetCoefHdp()const{ return(CoefHdp); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetCoefSound	JSpaceCtes.h	/^  double GetCoefSound()const{ return(CoefSound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetCoefficient	JSpaceCtes.h	/^  double GetCoefficient()const{ return(GetCoefH()); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetComputeDt	JGaugeItem.h	/^  double GetComputeDt()const{ return(ComputeDt); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetComputeEnd	JGaugeItem.h	/^  double GetComputeEnd()const{ return(ComputeEnd); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetComputeStart	JGaugeItem.h	/^  double GetComputeStart()const{ return(ComputeStart); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetConfig	JGaugeItem.cpp	/^void JGaugeItem::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JGaugeItem	signature:(std::vector<std::string> &lines) const
GetConfig	JGaugeItem.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JGaugeItem	access:public	signature:(std::vector<std::string> &lines) const
GetConfig	JSphAccInput.cpp	/^void JSphAccInputMk::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphAccInputMk	signature:(std::vector<std::string> &lines) const
GetConfig	JSphAccInput.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphAccInputMk	access:public	signature:(std::vector<std::string> &lines) const
GetConfig	JSphInitialize.cpp	/^void JSphInitialize::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphInitialize	signature:(std::vector<std::string> &lines) const
GetConfig	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphInitializeOp_FluidVel	signature:(std::vector<std::string> &lines) const
GetConfig	JSphInitialize.h	/^  virtual void GetConfig(std::vector<std::string> &lines)const=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(std::vector<std::string> &lines) const
GetConfig	JSphInitialize.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphInitialize	access:public	signature:(std::vector<std::string> &lines) const
GetConfig	JSphInitialize.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(std::vector<std::string> &lines) const
GetCount	JBinaryData.h	/^  unsigned GetCount()const{ return(Count); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetCount	JDamping.h	/^  unsigned GetCount()const{ return(unsigned(List.size())); }$/;"	f	class:JDamping	access:public	signature:() const
GetCount	JGaugeItem.h	/^  unsigned    GetCount()    const{ return(Count); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetCount	JGaugeSystem.h	/^  unsigned GetCount()const{ return(unsigned(Gauges.size())); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetCount	JLinearValue.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JLinearValue	access:public	signature:() const
GetCount	JMotionMov.h	/^  unsigned GetCount()const{  return(DataFile->GetCount());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
GetCount	JMotionMov.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
GetCount	JMotionMov.h	/^  unsigned GetCount()const{ return(DataFile->GetCount()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
GetCount	JPartFloatBi4.h	/^  unsigned GetCount()const{ return(PartCount); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetCount	JPartsLoad4.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetCount	JPartsOut.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JPartsOut	access:public	signature:() const
GetCount	JSpaceParts.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
GetCount	JSpaceProperties.h	/^  unsigned GetCount()const{ return(unsigned(Links.size())); }$/;"	f	class:JSpacePropLinks	access:public	signature:() const
GetCount	JSphAccInput.h	/^  unsigned GetCount()const{ return(unsigned(Inputs.size())); };$/;"	f	class:JSphAccInput	access:public	signature:() const
GetCount	JTimeOut.h	/^  unsigned GetCount()const{ return(unsigned(Times.size())); }$/;"	f	class:JTimeOut	access:protected	signature:() const
GetCount	JWaveGen.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JWaveGen	access:public	signature:() const
GetCreateDirs	JAppInfo.h	/^  bool GetCreateDirs()const{ return(CreateDirs); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetCreateDirs	JDsphConfig.h	/^  int GetCreateDirs()const{ return(CreateDirs); }$/;"	f	class:JDsphConfig	access:public	signature:() const
GetCsvSepComa	JAppInfo.h	/^  bool GetCsvSepComa()const{ return(CsvSepComa); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetCsvSeparator	JDsphConfig.h	/^  int GetCsvSeparator()const{ return(CsvSeparator); }$/;"	f	class:JDsphConfig	access:public	signature:() const
GetCudaDeviceInfo	FunctionsCuda.cpp	/^StGpuInfo GetCudaDeviceInfo(int gid){$/;"	f	namespace:fcuda	signature:(int gid)
GetCudaDeviceInfo	FunctionsCuda.h	/^StGpuInfo GetCudaDeviceInfo(int gid);$/;"	p	namespace:fcuda	signature:(int gid)
GetCudaDeviceName	FunctionsCuda.cpp	/^std::string GetCudaDeviceName(int gid){$/;"	f	namespace:fcuda	signature:(int gid)
GetCudaDeviceName	FunctionsCuda.h	/^std::string GetCudaDeviceName(int gid);$/;"	p	namespace:fcuda	signature:(int gid)
GetCudaDevicesInfo	FunctionsCuda.cpp	/^int GetCudaDevicesInfo(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops){$/;"	f	namespace:fcuda	signature:(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops)
GetCudaDevicesInfo	FunctionsCuda.h	/^int GetCudaDevicesInfo(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops);$/;"	p	namespace:fcuda	signature:(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops)
GetCurrentDir	Functions.cpp	/^std::string GetCurrentDir(){$/;"	f	namespace:fun	signature:()
GetCurrentDir	Functions.h	/^std::string GetCurrentDir();$/;"	p	namespace:fun	signature:()
GetDampingZone	JDamping.cpp	/^const JDamping::StDamping* JDamping::GetDampingZone(unsigned c)const{$/;"	f	class:JDamping	signature:(unsigned c) const
GetDampingZone	JDamping.h	/^  const JDamping::StDamping* GetDampingZone(unsigned c)const;$/;"	p	class:JDamping	access:public	signature:(unsigned c) const
GetData	JMotionList.cpp	/^bool JMotionList::GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JMotionList	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
GetData	JMotionList.cpp	/^bool JMotionList::GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotionList	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
GetData	JMotionList.cpp	/^bool JMotionListData::GetData(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel$/;"	f	class:JMotionListData	signature:(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel ,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
GetData	JMotionList.cpp	/^bool JMotionListData::GetData(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotionListData	signature:(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
GetData	JMotionList.h	/^  bool GetData(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel$/;"	p	class:JMotionListData	access:public	signature:(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel ,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
GetData	JMotionList.h	/^  bool GetData(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotionListData	access:public	signature:(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
GetData	JMotionList.h	/^  bool GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace$/;"	p	class:JMotionList	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace ,tmatrix4d &matmov,tmatrix4d &matmov2) const
GetData	JMotionList.h	/^  bool GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotionList	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
GetData	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::GetData()const{$/;"	f	class:JPartDataBi4	signature:() const
GetData	JPartDataBi4.h	/^  JBinaryData* GetData()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
GetData2d	JPartDataHead.h	/^  bool        GetData2d()    const{ return(Data2d);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetData2dPosY	JPartDataHead.h	/^  double      GetData2dPosY()const{ return(Data2dPosY); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetDataCopy	JBinaryData.cpp	/^unsigned JBinaryDataArray::GetDataCopy(unsigned size,void* pointer)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned size,void* pointer) const
GetDataCopy	JBinaryData.h	/^  unsigned GetDataCopy(unsigned size,void* pointer)const;$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,void* pointer) const
GetDataPointer	JBinaryData.cpp	/^const void* JBinaryDataArray::GetDataPointer()const{$/;"	f	class:JBinaryDataArray	signature:() const
GetDataPointer	JBinaryData.h	/^  const void* GetDataPointer()const;$/;"	p	class:JBinaryDataArray	access:public	signature:() const
GetDate	JPartDataHead.h	/^  std::string GetDate()      const{ return(Date);       };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetDateTime	Functions.h	/^inline std::string GetDateTime(){ return(GetDateTimeFormat("%d-%m-%Y %H:%M:%S",0)); }$/;"	f	namespace:fun	signature:()
GetDateTime	JXml.cpp	/^std::string JXml::GetDateTime(){$/;"	f	class:JXml	signature:()
GetDateTime	JXml.h	/^  static std::string GetDateTime();$/;"	p	class:JXml	access:public	signature:()
GetDateTimeAfter	Functions.h	/^inline std::string GetDateTimeAfter(int nseg){ return(GetDateTimeFormat("%d-%m-%Y %H:%M:%S",nseg)); }$/;"	f	namespace:fun	signature:(int nseg)
GetDateTimeFormat	Functions.cpp	/^std::string GetDateTimeFormat(const char* format,int nseg){$/;"	f	namespace:fun	signature:(const char* format,int nseg)
GetDateTimeFormat	Functions.h	/^std::string GetDateTimeFormat(const char* format,int nseg=0);$/;"	p	namespace:fun	signature:(const char* format,int nseg=0)
GetDateTimeFormat	tags	/^GetDateTimeFormat	Functions.cpp	\/^std::string GetDateTimeFormat(const char* format,int nseg){$\/;"	f	namespace:fun	signature:(const char* format,int nseg)$/;"	f	signature:(const char* format,int nseg)
GetDateTimeFormatUTC	Functions.cpp	/^std::string GetDateTimeFormatUTC(const char* format,int day,int month,int year,int hour,int min,int sec){$/;"	f	namespace:fun	signature:(const char* format,int day,int month,int year,int hour,int min,int sec)
GetDateTimeFormatUTC	Functions.h	/^std::string GetDateTimeFormatUTC(const char* format,int day,int month,int year,int hour=0,int min=0,int sec=0);$/;"	p	namespace:fun	signature:(const char* format,int day,int month,int year,int hour=0,int min=0,int sec=0)
GetDeltaSphName	JSph.cpp	/^std::string JSph::GetDeltaSphName(TpDeltaSph tdelta){$/;"	f	class:JSph	signature:(TpDeltaSph tdelta)
GetDeltaSphName	JSph.h	/^  static std::string GetDeltaSphName(TpDeltaSph tdelta);$/;"	p	class:JSph	access:public	signature:(TpDeltaSph tdelta)
GetDemDtForce	JPartsLoad4.h	/^  double GetDemDtForce()const{ return(DemDtForce); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetDirData	JMotion.h	/^  std::string GetDirData()const{ return(DirData); };$/;"	f	class:JMotion	access:public	signature:() const
GetDirDataOut	JAppInfo.h	/^  std::string GetDirDataOut()const{ return(DirDataOut); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetDirOut	JAppInfo.h	/^  std::string GetDirOut()const{ return(DirOut); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetDirParent	Functions.cpp	/^std::string GetDirParent(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
GetDirParent	Functions.h	/^std::string GetDirParent(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
GetDirWithSlash	Functions.cpp	/^std::string GetDirWithSlash(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
GetDirWithSlash	Functions.h	/^std::string GetDirWithSlash(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
GetDirWithoutSlash	Functions.cpp	/^std::string GetDirWithoutSlash(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
GetDirWithoutSlash	Functions.h	/^std::string GetDirWithoutSlash(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
GetDistLimit	JGaugeItem.h	/^  float GetDistLimit()const{ return(DistLimit); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
GetDocument	tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
GetDocument	tinyxml.h	/^    TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
GetDocument	tinyxml.h	/^    const TiXmlDocument* GetDocument() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
GetDomPosMax	JGaugeSystem.h	/^  tdouble3 GetDomPosMax()const{ return(DomPosMax); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetDomPosMin	JGaugeSystem.h	/^  tdouble3 GetDomPosMin()const{ return(DomPosMin); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetDomainLimits	JCellDivCpu.cpp	/^tdouble3 JCellDivCpu::GetDomainLimits(bool limitmin,unsigned slicecellmin)const{$/;"	f	class:JCellDivCpu	signature:(bool limitmin,unsigned slicecellmin) const
GetDomainLimits	JCellDivCpu.h	/^  tdouble3 GetDomainLimits(bool limitmin,unsigned slicecellmin=0)const;$/;"	p	class:JCellDivCpu	access:public	signature:(bool limitmin,unsigned slicecellmin=0) const
GetDomainLimits	JCellDivGpu.cpp	/^tdouble3 JCellDivGpu::GetDomainLimits(bool limitmin,unsigned slicecellmin)const{$/;"	f	class:JCellDivGpu	signature:(bool limitmin,unsigned slicecellmin) const
GetDomainLimits	JCellDivGpu.h	/^  tdouble3 GetDomainLimits(bool limitmin,unsigned slicecellmin=0)const;$/;"	p	class:JCellDivGpu	access:public	signature:(bool limitmin,unsigned slicecellmin=0) const
GetDp	JGaugeSystem.h	/^  double GetDp()const{ return(Dp); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetDp	JPartDataHead.h	/^  double GetDp()       const{ return(Dp);        };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetDp	JSpaceCtes.h	/^  double GetDp()const{ return(Dp); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetDt	JSphDtFixed.cpp	/^double JSphDtFixed::GetDt(double timestep,double dtvar){$/;"	f	class:JSphDtFixed	signature:(double timestep,double dtvar)
GetDt	JSphDtFixed.h	/^  double GetDt(double timestep,double dtvar);$/;"	p	class:JSphDtFixed	access:public	signature:(double timestep,double dtvar)
GetDtError	JSphDtFixed.cpp	/^double JSphDtFixed::GetDtError(bool reset){$/;"	f	class:JSphDtFixed	signature:(bool reset)
GetDtError	JSphDtFixed.h	/^  double GetDtError(bool reset);$/;"	p	class:JSphDtFixed	access:public	signature:(bool reset)
GetElapsed	JTimer.h	/^  LARGE_INTEGER GetElapsed(){ $/;"	f	class:JTimer	access:private	signature:()
GetElapsedTimeD	JTimer.h	/^  double GetElapsedTimeD(){ return((double(GetElapsed().QuadPart)*double(1000))\/double(Freq.QuadPart)); }$/;"	f	class:JTimer	access:public	signature:()
GetElapsedTimeD	JTimer.h	/^  double GetElapsedTimeD(){$/;"	f	class:JTimer	access:public	signature:()
GetElapsedTimeD	JTimerClock.h	/^  double GetElapsedTimeD(){ return((double(Stopped? CounterEnd-CounterIni: 0)*double(1000))\/double(CLOCKS_PER_SEC)); }$/;"	f	class:JTimerClock	access:public	signature:()
GetElapsedTimeD	JTimerCuda.h	/^  double GetElapsedTimeD(){ return(GetElapsedTimeF()); }$/;"	f	class:JTimerCuda	access:public	signature:()
GetElapsedTimeF	JTimer.h	/^  float GetElapsedTimeF(){ $/;"	f	class:JTimer	access:public	signature:()
GetElapsedTimeF	JTimer.h	/^  float GetElapsedTimeF(){ return((float(GetElapsed().QuadPart)*float(1000))\/float(Freq.QuadPart)); }$/;"	f	class:JTimer	access:public	signature:()
GetElapsedTimeF	JTimerClock.h	/^  float GetElapsedTimeF(){ return((float(Stopped? CounterEnd-CounterIni: 0)*float(1000))\/float(CLOCKS_PER_SEC)); }$/;"	f	class:JTimerClock	access:public	signature:()
GetElapsedTimeF	JTimerCuda.h	/^  float GetElapsedTimeF(){ $/;"	f	class:JTimerCuda	access:public	signature:()
GetEntity	tinyxml.h	/^    static const char* GetEntity( const char* in, char* value, int* length, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, char* value, int* length, TiXmlEncoding encoding )
GetEntity	tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
GetEps	JSpaceCtes.h	/^  double GetEps()const{ return(Eps); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetExceptionText	JObject.cpp	/^std::string JObject::GetExceptionText(const std::string &method,const std::string &msg)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg) const
GetExceptionText	JObject.cpp	/^std::string JObject::GetExceptionText(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
GetExceptionText	JObject.h	/^  std::string GetExceptionText(const std::string &method,const std::string &msg)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg) const
GetExceptionText	JObject.h	/^  std::string GetExceptionText(const std::string &method,const std::string &msg,const std::string &file)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file) const
GetExtension	Functions.cpp	/^std::string GetExtension(const std::string &file){$/;"	f	namespace:fun	signature:(const std::string &file)
GetExtension	Functions.h	/^std::string GetExtension(const std::string &file);$/;"	p	namespace:fun	signature:(const std::string &file)
GetFile	Functions.cpp	/^std::string GetFile(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
GetFile	Functions.h	/^std::string GetFile(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
GetFile	JLinearValue.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JLinearValue	access:public	signature:() const
GetFile	JSphDtFixed.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JSphDtFixed	access:public	signature:() const
GetFile	JSphVisco.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JSphVisco	access:public	signature:() const
GetFileCfg	JDsphConfig.h	/^  std::string GetFileCfg()const{ return(FileCfg); }$/;"	f	class:JDsphConfig	access:public	signature:() const
GetFileData	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileData(std::string casename,std::string dirname,unsigned cpart,byte &npiece){$/;"	f	class:JPartDataBi4	signature:(std::string casename,std::string dirname,unsigned cpart,byte &npiece)
GetFileData	JPartDataBi4.h	/^  static std::string GetFileData(std::string casename,std::string dirname,unsigned cpart,byte &npiece);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string casename,std::string dirname,unsigned cpart,byte &npiece)
GetFileDataCount	JBinaryData.h	/^  unsigned GetFileDataCount()const{ return(FileDataCount); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetFileDataSize	JBinaryData.h	/^  unsigned GetFileDataSize()const{ return(FileDataSize); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetFileHead	JBinaryData.cpp	/^unsigned JBinaryData::GetFileHead(std::ifstream *pf,JBinaryData::StHeadFmtBin &head)const{$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,JBinaryData::StHeadFmtBin &head) const
GetFileHead	JBinaryData.h	/^  unsigned GetFileHead(std::ifstream *pf,JBinaryData::StHeadFmtBin &head)const;$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,JBinaryData::StHeadFmtBin &head) const
GetFileName	JPartDataHead.cpp	/^std::string JPartDataHead::GetFileName(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
GetFileName	JPartDataHead.h	/^  static std::string GetFileName(std::string dir="");$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir=Ó)
GetFileName	JSaveCsv2.h	/^  std::string GetFileName()const{ return(FileName); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:() const
GetFileNameCase	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNameCase(const std::string &casename,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(const std::string &casename,unsigned piece,unsigned npiece)
GetFileNameCase	JPartDataBi4.h	/^  static std::string GetFileNameCase(const std::string &casename,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(const std::string &casename,unsigned piece=0,unsigned npiece=1)
GetFileNameInfo	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNameInfo(unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece)
GetFileNameInfo	JPartDataBi4.h	/^  static std::string GetFileNameInfo(unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece=0,unsigned npiece=1)
GetFileNamePart	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNamePart(unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart,unsigned piece,unsigned npiece)
GetFileNamePart	JPartDataBi4.h	/^  static std::string GetFileNamePart(unsigned cpart,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned cpart,unsigned piece=0,unsigned npiece=1)
GetFileNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Load::GetFileNamePart(){$/;"	f	class:JPartFloatBi4Load	signature:()
GetFileNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Save::GetFileNamePart(){$/;"	f	class:JPartFloatBi4Save	signature:()
GetFileNamePart	JPartFloatBi4.h	/^  static std::string GetFileNamePart();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
GetFileNamePart	JPartFloatBi4.h	/^  static std::string GetFileNamePart();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
GetFileNamePart	JPartOutBi4Save.cpp	/^std::string JPartOutBi4Save::GetFileNamePart(unsigned block,unsigned piece,unsigned npiece){$/;"	f	class:JPartOutBi4Save	signature:(unsigned block,unsigned piece,unsigned npiece)
GetFileNamePart	JPartOutBi4Save.h	/^  static std::string GetFileNamePart(unsigned block,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartOutBi4Save	access:public	signature:(unsigned block,unsigned piece=0,unsigned npiece=1)
GetFileNameSplit	Functions.cpp	/^void GetFileNameSplit(const std::string &file,std::string &dir,std::string &fname,std::string &fext){$/;"	f	namespace:fun	signature:(const std::string &file,std::string &dir,std::string &fname,std::string &fext)
GetFileNameSplit	Functions.h	/^void GetFileNameSplit(const std::string &file,std::string &dir,std::string &fname,std::string &fext);$/;"	p	namespace:fun	signature:(const std::string &file,std::string &dir,std::string &fname,std::string &fext)
GetFileStructure	JBinaryData.cpp	/^std::ifstream* JBinaryData::GetFileStructure()const{$/;"	f	class:JBinaryData	signature:() const
GetFileStructure	JBinaryData.h	/^  std::ifstream* GetFileStructure()const;$/;"	p	class:JBinaryData	access:public	signature:() const
GetFiles	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::GetFiles(std::string key,std::vector<std::string> &list)const{$/;"	f	class:JSpaceVtkOut	signature:(std::string key,std::vector<std::string> &list) const
GetFiles	JSpaceVtkOut.h	/^  void GetFiles(std::string key,std::vector<std::string> &list)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(std::string key,std::vector<std::string> &list) const
GetFirstBlockType	JSphMk.cpp	/^unsigned JSphMk::GetFirstBlockType(TpParticles type)const{$/;"	f	class:JSphMk	signature:(TpParticles type) const
GetFirstBlockType	JSphMk.h	/^  unsigned GetFirstBlockType(TpParticles type)const;$/;"	p	class:JSphMk	access:public	signature:(TpParticles type) const
GetFirstElement	JXml.cpp	/^TiXmlElement* JXml::GetFirstElement(const TiXmlNode* node,const std::string &name,bool optional)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &name,bool optional) const
GetFirstElement	JXml.h	/^  TiXmlElement* GetFirstElement(const TiXmlNode* node,const std::string &name,bool optional=false)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &name,bool optional=false) const
GetFirstPart	JPartDataHead.h	/^  unsigned    GetFirstPart() const{ return(FirstPart);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetFirstPart	JPartFloatBi4.h	/^  unsigned GetFirstPart()const{ return(FirstPart); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetFirstValue	JRangeFilter.cpp	/^unsigned JRangeFilter::GetFirstValue()const{$/;"	f	class:JRangeFilter	signature:() const
GetFirstValue	JRangeFilter.h	/^  unsigned GetFirstValue()const;$/;"	p	class:JRangeFilter	access:public	signature:() const
GetFirstValueDouble	Functions.cpp	/^double GetFirstValueDouble(std::string tex,std::string &endtex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
GetFirstValueDouble	Functions.cpp	/^double GetFirstValueDouble(std::string tex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string pretex)
GetFirstValueDouble	Functions.h	/^double GetFirstValueDouble(std::string tex,std::string &endtex,std::string pretex);$/;"	p	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
GetFirstValueDouble	Functions.h	/^double GetFirstValueDouble(std::string tex,std::string pretex="");$/;"	p	namespace:fun	signature:(std::string tex,std::string pretex=Ó)
GetFirstValueInt	Functions.cpp	/^int GetFirstValueInt(std::string tex,std::string &endtex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
GetFirstValueInt	Functions.cpp	/^int GetFirstValueInt(std::string tex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string pretex)
GetFirstValueInt	Functions.h	/^int GetFirstValueInt(std::string tex,std::string &endtex,std::string pretex);$/;"	p	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
GetFirstValueInt	Functions.h	/^int GetFirstValueInt(std::string tex,std::string pretex="");$/;"	p	namespace:fun	signature:(std::string tex,std::string pretex=Ó)
GetFmtCurrent	JSaveCsv2.h	/^  const std::string& GetFmtCurrent(TpFormat tfmt)const{ return(FmtCurrent[tfmt]); };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt) const
GetFmtDefault	JSaveCsv2.h	/^  const std::string& GetFmtDefault(TpFormat tfmt)const{ return(FmtDefault[tfmt]); };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt) const
GetFmtDouble	JBinaryData.h	/^  std::string GetFmtDouble()const{ return(FmtDouble); };$/;"	f	class:JBinaryData	access:public	signature:() const
GetFmtFloat	JBinaryData.h	/^  std::string GetFmtFloat()const{ return(FmtFloat); };$/;"	f	class:JBinaryData	access:public	signature:() const
GetFtCount	JPartFloatBi4.h	/^  unsigned GetFtCount()const{ return(FtCount); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetFullInfo	JSaveDt.h	/^  bool GetFullInfo()const{ return(FullInfo); }$/;"	f	class:JSaveDt	access:public	signature:() const
GetFullName	JAppInfo.cpp	/^std::string JAppInfo::GetFullName()const{$/;"	f	class:JAppInfo	signature:() const
GetFullName	JAppInfo.h	/^  std::string GetFullName()const;$/;"	p	class:JAppInfo	access:public	signature:() const
GetGamma	JPartDataHead.h	/^  double GetGamma()    const{ return(Gamma);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetGamma	JSpaceCtes.h	/^  double GetGamma()const{ return(Gamma); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetGauge	JGaugeSystem.cpp	/^JGaugeItem* JGaugeSystem::GetGauge(unsigned c)const{$/;"	f	class:JGaugeSystem	signature:(unsigned c) const
GetGauge	JGaugeSystem.h	/^  JGaugeItem* GetGauge(unsigned c)const;$/;"	p	class:JGaugeSystem	access:public	signature:(unsigned c) const
GetGaugeIdx	JGaugeSystem.cpp	/^unsigned JGaugeSystem::GetGaugeIdx(const std::string &name)const{$/;"	f	class:JGaugeSystem	signature:(const std::string &name) const
GetGaugeIdx	JGaugeSystem.h	/^  unsigned GetGaugeIdx(const std::string &name)const;$/;"	p	class:JGaugeSystem	access:public	signature:(const std::string &name) const
GetGravity	JPartDataHead.h	/^  tfloat3 GetGravity() const{ return(Gravity);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetGravity	JSpaceCtes.h	/^  tdouble3 GetGravity()const{ return(Gravity); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetGridSize	JCellDivGpu_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned blocksize)
GetGridSize	JCellDivGpu_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cudiv	signature:(unsigned n,unsigned blocksize)
GetGridSize	JGauge_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned blocksize)
GetGridSize	JGauge_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cugauge	signature:(unsigned n,unsigned blocksize)
GetGridSize	JReduSum_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned blocksize)
GetGridSize	JSphGpu_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned blocksize)
GetGridSize	JSphGpu_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned blocksize)
GetGridSize	JWaveOrder2_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cuwave2	signature:(unsigned n,unsigned blocksize)
GetGridSize	JWaveOrder2_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cuwave2	signature:(unsigned n,unsigned blocksize)
GetH	JGaugeSystem.h	/^  float GetH()const{ return(H); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetH	JPartDataHead.h	/^  double GetH()        const{ return(H);         };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetH	JSpaceCtes.h	/^  double GetH()const{ return(H); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetHAuto	JSpaceCtes.h	/^  bool GetHAuto()const{ return(HAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetHSwl	JSpaceCtes.h	/^  double GetHSwl()const{ return(HSwl); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetHSwlAuto	JSpaceCtes.h	/^  bool GetHSwlAuto()const{ return(HSwlAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetHdiv	JCellDivCpu.h	/^  unsigned GetHdiv()const{ return(Hdiv); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetHdiv	JCellDivGpu.h	/^  unsigned GetHdiv()const{ return(Hdiv); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetHeadBegin	JPartFloatBi4.h	/^  unsigned GetHeadBegin  (unsigned cf)const{ CheckFloating(cf); return(HeadBegin[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeadCount	JPartFloatBi4.h	/^  unsigned GetHeadCount  (unsigned cf)const{ CheckFloating(cf); return(HeadCount[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeadMass	JPartFloatBi4.h	/^  float    GetHeadMass   (unsigned cf)const{ CheckFloating(cf); return(HeadMass[cf]);    }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeadMk	JPartFloatBi4.h	/^  word     GetHeadMk     (unsigned cf)const{ return(MkBoundFirst+GetHeadMkbound(cf)); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeadMkbound	JPartFloatBi4.h	/^  word     GetHeadMkbound(unsigned cf)const{ CheckFloating(cf); return(HeadMkbound[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeadRadius	JPartFloatBi4.h	/^  float    GetHeadRadius (unsigned cf)const{ CheckFloating(cf); return(HeadRadius[cf]);  }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetHeight	JGaugeItem.h	/^  double GetHeight()const{ return(Height); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
GetHide	JBinaryData.h	/^  bool GetHide()const{ return(Hide); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetHide	JBinaryData.h	/^  bool GetHide()const{ return(HideAll); }$/;"	f	class:JBinaryData	access:public	signature:() const
GetHideValues	JBinaryData.h	/^  bool GetHideValues()const{ return(HideValues); }$/;"	f	class:JBinaryData	access:public	signature:() const
GetHoursOfSeconds	Functions.cpp	/^std::string GetHoursOfSeconds(double s){$/;"	f	namespace:fun	signature:(double s)
GetHoursOfSeconds	Functions.h	/^std::string GetHoursOfSeconds(double s);$/;"	p	namespace:fun	signature:(double s)
GetIdBegin	JGaugeItem.h	/^  unsigned    GetIdBegin()  const{ return(IdBegin); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetIdp	JPartsLoad4.h	/^  const unsigned* GetIdp(){ return(Idp); }$/;"	f	class:JPartsLoad4	access:public	signature:()
GetIdpOut	JPartsOut.h	/^  const unsigned* GetIdpOut(){ return(Idp); }$/;"	f	class:JPartsOut	access:public	signature:()
GetIndexProperty	JSpaceProperties.cpp	/^int JSpaceProperties::GetIndexProperty(std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string name) const
GetIndexProperty	JSpaceProperties.h	/^  int GetIndexProperty(std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string name) const
GetIndexSubName	JSpaceProperties.cpp	/^int JSpacePropValue::GetIndexSubName(std::string subname)const{$/;"	f	class:JSpacePropValue	signature:(std::string subname) const
GetIndexSubName	JSpaceProperties.h	/^  int GetIndexSubName(std::string subname)const;$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname) const
GetIndexValue	JSpaceProperties.cpp	/^int JSpacePropProperty::GetIndexValue(std::string name)const{$/;"	f	class:JSpacePropProperty	signature:(std::string name) const
GetIndexValue	JSpaceProperties.h	/^  int GetIndexValue(std::string name)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name) const
GetInertia	JSpaceParts.h	/^  tmatrix3d GetInertia()const{ return(Inertia); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
GetInfoFinish	JTimeControl.cpp	/^std::string JTimeControl::GetInfoFinish(double done){$/;"	f	class:JTimeControl	signature:(double done)
GetInfoFinish	JTimeControl.h	/^  std::string GetInfoFinish(double done);$/;"	p	class:JTimeControl	access:public	signature:(double done)
GetInitialCenter	JGaugeItem.h	/^  tfloat3     GetInitialCenter()const{ return(InitialCenter); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetInteractionCells	JGaugeItem.cpp	/^void JGaugeItem::GetInteractionCells(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	f	class:JGaugeItem	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCells	JGaugeItem.h	/^  inline void GetInteractionCells(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	p	class:JGaugeItem	access:protected	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCells	JSphCpu.cpp	/^void JSphCpu::GetInteractionCells(unsigned rcell$/;"	f	class:JSphCpu	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCells	JSphCpu.h	/^  inline void GetInteractionCells(unsigned rcell$/;"	p	class:JSphCpu	access:protected	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCells	JSphCpuSingle.cpp	/^void JSphCpuSingle::GetInteractionCells(unsigned rcell$/;"	f	class:JSphCpuSingle	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCells	JSphCpuSingle.h	/^  inline void GetInteractionCells(unsigned rcell$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCellsMaxZ	JGaugeItem.cpp	/^void JGaugeMaxZ::GetInteractionCellsMaxZ(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	f	class:JGaugeMaxZ	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetInteractionCellsMaxZ	JGaugeItem.h	/^  void GetInteractionCellsMaxZ(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	p	class:JGaugeMaxZ	access:protected	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
GetItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
GetItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItem(unsigned index){$/;"	f	class:JBinaryData	signature:(unsigned index)
GetItem	JBinaryData.h	/^  JBinaryData* GetItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
GetItem	JBinaryData.h	/^  JBinaryData* GetItem(unsigned index);$/;"	p	class:JBinaryData	access:public	signature:(unsigned index)
GetItemIndex	JBinaryData.cpp	/^int JBinaryData::GetItemIndex(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
GetItemIndex	JBinaryData.h	/^  int GetItemIndex(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
GetItemPointer	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParmsItem* JSpaceEParms::GetItemPointer(const std::string &key){$/;"	f	class:JSpaceEParms	signature:(const std::string &key)
GetItemPointer	JSpaceEParms.h	/^  JSpaceEParmsItem* GetItemPointer(const std::string &key);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key)
GetItemRoot	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItemRoot(){$/;"	f	class:JBinaryData	signature:()
GetItemRoot	JBinaryData.h	/^  JBinaryData* GetItemRoot();$/;"	p	class:JBinaryData	access:public	signature:()
GetItemsCount	JBinaryData.h	/^  unsigned GetItemsCount()const{ return(unsigned(Items.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
GetKernel	JBlockSizeAuto.h	/^  JBlockSizeAutoKer* GetKernel(unsigned c){ return(c<GetKernelsCount()? Kernels[c]: NULL); }$/;"	f	class:JBlockSizeAuto	access:public	signature:(unsigned c)
GetKernelByName	JBlockSizeAuto.cpp	/^unsigned JBlockSizeAuto::GetKernelByName(std::string name)const{ $/;"	f	class:JBlockSizeAuto	signature:(std::string name) const
GetKernelByName	JBlockSizeAuto.h	/^  unsigned GetKernelByName(std::string name)const;$/;"	p	class:JBlockSizeAuto	access:protected	signature:(std::string name) const
GetKernelCubic	JSphCpu.cpp	/^void JSphCpu::GetKernelCubic(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
GetKernelCubic	JSphCpu.h	/^  inline void GetKernelCubic(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
GetKernelCubicTensil	JSphCpu.cpp	/^float JSphCpu::GetKernelCubicTensil(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2)const{$/;"	f	class:JSphCpu	signature:(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2) const
GetKernelCubicTensil	JSphCpu.h	/^  inline float GetKernelCubicTensil(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2) const
GetKernelGaussian	JSphCpu.cpp	/^void JSphCpu::GetKernelGaussian(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
GetKernelGaussian	JSphCpu.h	/^  inline void GetKernelGaussian(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
GetKernelName	JSph.cpp	/^std::string JSph::GetKernelName(TpKernel tkernel){$/;"	f	class:JSph	signature:(TpKernel tkernel)
GetKernelName	JSph.h	/^  static std::string GetKernelName(TpKernel tkernel);$/;"	p	class:JSph	access:public	signature:(TpKernel tkernel)
GetKernelWendland	JSphCpu.cpp	/^void JSphCpu::GetKernelWendland(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
GetKernelWendland	JSphCpu.h	/^  inline void GetKernelWendland(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
GetKernelsCount	JBlockSizeAuto.h	/^  unsigned GetKernelsCount()const{ return(unsigned(Kernels.size())); }$/;"	f	class:JBlockSizeAuto	access:public	signature:() const
GetLastTime	JTimeControl.h	/^  double GetLastTime()const{ return(LastTime); }$/;"	f	class:JTimeControl	access:public	signature:() const
GetLatticeBound	JSpaceCtes.h	/^  int GetLatticeBound()const{ return(LatticeBound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetLatticeFluid	JSpaceCtes.h	/^  int GetLatticeFluid()const{ return(LatticeFluid); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetLine	JReadDatafile.cpp	/^std::string JReadDatafile::GetLine(int line)const{$/;"	f	class:JReadDatafile	signature:(int line) const
GetLine	JReadDatafile.h	/^  std::string GetLine(int line)const;$/;"	p	class:JReadDatafile	access:public	signature:(int line) const
GetLinksCount	JSpaceProperties.h	/^  unsigned GetLinksCount()const{ return(Links->GetCount()); }$/;"	f	class:JSpaceProperties	access:public	signature:() const
GetListMkType	JSpaceVtkOut.cpp	/^std::string JSpaceVtkOut::GetListMkType(bool bound,const std::string &mks)const{$/;"	f	class:JSpaceVtkOut	signature:(bool bound,const std::string &mks) const
GetListMkType	JSpaceVtkOut.h	/^  std::string GetListMkType(bool bound,const std::string &mks)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(bool bound,const std::string &mks) const
GetMapPosMax	JPartDataHead.h	/^  tdouble3 GetMapPosMax()const{ return(MapPosMax); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMapPosMin	JPartDataHead.h	/^  tdouble3 GetMapPosMin()const{ return(MapPosMin); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMapSize	JPartsLoad4.cpp	/^void JPartsLoad4::GetMapSize(tdouble3 &mapmin,tdouble3 &mapmax)const{$/;"	f	class:JPartsLoad4	signature:(tdouble3 &mapmin,tdouble3 &mapmax) const
GetMapSize	JPartsLoad4.h	/^  void GetMapSize(tdouble3 &mapmin,tdouble3 &mapmax)const;$/;"	p	class:JPartsLoad4	access:public	signature:(tdouble3 &mapmin,tdouble3 &mapmax) const
GetMassBound	JGaugeSystem.h	/^  float GetMassBound()const{ return(MassBound); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetMassBound	JPartDataHead.h	/^  double GetMassBound()const{ return(MassBound); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMassBound	JSpaceCtes.h	/^  double GetMassBound()const{ return(MassBound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetMassBoundAuto	JSpaceCtes.h	/^  bool GetMassBoundAuto()const{ return(MassBoundAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetMassFluid	JGaugeSystem.h	/^  float GetMassFluid()const{ return(MassFluid); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetMassFluid	JPartDataHead.h	/^  double GetMassFluid()const{ return(MassFluid); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMassFluid	JSpaceCtes.h	/^  double GetMassFluid()const{ return(MassFluid); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetMassFluidAuto	JSpaceCtes.h	/^  bool GetMassFluidAuto()const{ return(MassFluidAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetMassLimit	JGaugeItem.h	/^  float GetMassLimit()const{ return(MassLimit); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
GetMassbody	JSpaceParts.h	/^  double GetMassbody()const{ return(Massbody); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
GetMatrix	JMatrix4.h	/^  TMAT GetMatrix()const{$/;"	f	class:JMatrix4	access:public	signature:() const
GetMatrix	JMotionPos.h	/^  JMatrix4d GetMatrix()const{ return(PosMatrix); }$/;"	f	class:JMotionPos	access:public	signature:() const
GetMatrix4d	JMatrix4.h	/^  tmatrix4d GetMatrix4d()const{ return(TMatrix4d(double(a11),double(a12),double(a13),double(a14),double(a21),double(a22),double(a23),double(a24),double(a31),double(a32),double(a33),double(a34),double(a41),double(a42),double(a43),double(a44))); }$/;"	f	class:JMatrix4	access:public	signature:() const
GetMatrix4f	JMatrix4.h	/^  tmatrix4f GetMatrix4f()const{ return(TMatrix4f(float(a11),float(a12),float(a13),float(a14),float(a21),float(a22),float(a23),float(a24),float(a31),float(a32),float(a33),float(a34),float(a41),float(a42),float(a43),float(a44))); }$/;"	f	class:JMatrix4	access:public	signature:() const
GetMax	JMeanValues.h	/^  double GetMax()const{ return(Max); }$/;"	f	class:JMeanValue	access:public	signature:() const
GetMaxRef	JMotion.cpp	/^int JMotion::GetMaxRef()const{$/;"	f	class:JMotion	signature:() const
GetMaxRef	JMotion.h	/^  int GetMaxRef()const;$/;"	p	class:JMotion	access:public	signature:() const
GetMaxRef	JMotionObj.cpp	/^int JMotionObj::GetMaxRef()const{$/;"	f	class:JMotionObj	signature:() const
GetMaxRef	JMotionObj.h	/^  int GetMaxRef()const;$/;"	p	class:JMotionObj	access:public	signature:() const
GetMean	JMeanValues.h	/^  double GetMean()const{ return(Mean); }$/;"	f	class:JMeanValue	access:public	signature:() const
GetMemGpuFixed	JWaveSpectrumGpu.h	/^  llong GetMemGpuFixed()const{ return(MemGpuFixed); }$/;"	f	class:JWaveSpectrumGpu	access:public	signature:() const
GetMemoryGpuNct	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetMemoryGpuNct()const{$/;"	f	class:JSphGpuSingle	signature:() const
GetMemoryGpuNct	JSphGpuSingle.h	/^  llong GetMemoryGpuNct()const;$/;"	p	class:JSphGpuSingle	access:protected	signature:() const
GetMemoryGpuNp	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetMemoryGpuNp()const{$/;"	f	class:JSphGpuSingle	signature:() const
GetMemoryGpuNp	JSphGpuSingle.h	/^  llong GetMemoryGpuNp()const;$/;"	p	class:JSphGpuSingle	access:protected	signature:() const
GetMin	JMeanValues.h	/^  double GetMin()const{ return(Min); }$/;"	f	class:JMeanValue	access:public	signature:() const
GetMk	JSpaceParts.h	/^  word GetMk()const{ return(Mk); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
GetMkBlockByCode	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByCode(typecode code)const{$/;"	f	class:JSphMk	signature:(typecode code) const
GetMkBlockByCode	JSphMk.h	/^  unsigned GetMkBlockByCode(typecode code)const;$/;"	p	class:JSphMk	access:public	signature:(typecode code) const
GetMkBlockById	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockById(unsigned id)const{$/;"	f	class:JPartDataHead	signature:(unsigned id) const
GetMkBlockById	JPartDataHead.h	/^  inline unsigned GetMkBlockById(unsigned id)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned id) const
GetMkBlockById	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockById(unsigned id)const{$/;"	f	class:JSphMk	signature:(unsigned id) const
GetMkBlockById	JSphMk.h	/^  unsigned GetMkBlockById(unsigned id)const;$/;"	p	class:JSphMk	access:public	signature:(unsigned id) const
GetMkBlockByMk	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMk(unsigned mk)const{$/;"	f	class:JPartDataHead	signature:(unsigned mk) const
GetMkBlockByMk	JPartDataHead.h	/^  unsigned GetMkBlockByMk(unsigned mk)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mk) const
GetMkBlockByMk	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMk(word mk)const{$/;"	f	class:JSphMk	signature:(word mk) const
GetMkBlockByMk	JSphMk.h	/^  unsigned GetMkBlockByMk(word mk)const;$/;"	p	class:JSphMk	access:public	signature:(word mk) const
GetMkBlockByMkBound	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMkBound(unsigned mkbound)const{$/;"	f	class:JPartDataHead	signature:(unsigned mkbound) const
GetMkBlockByMkBound	JPartDataHead.h	/^  unsigned GetMkBlockByMkBound(unsigned mkbound)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mkbound) const
GetMkBlockByMkBound	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMkBound(word mkbound)const{$/;"	f	class:JSphMk	signature:(word mkbound) const
GetMkBlockByMkBound	JSphMk.h	/^  unsigned GetMkBlockByMkBound(word mkbound)const;$/;"	p	class:JSphMk	access:public	signature:(word mkbound) const
GetMkBlockByMkFluid	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMkFluid(unsigned mkfluid)const{$/;"	f	class:JPartDataHead	signature:(unsigned mkfluid) const
GetMkBlockByMkFluid	JPartDataHead.h	/^  unsigned GetMkBlockByMkFluid(unsigned mkfluid)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mkfluid) const
GetMkBlockByMkFluid	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMkFluid(word mkfluid)const{$/;"	f	class:JSphMk	signature:(word mkfluid) const
GetMkBlockByMkFluid	JSphMk.h	/^  unsigned GetMkBlockByMkFluid(word mkfluid)const;$/;"	p	class:JSphMk	access:public	signature:(word mkfluid) const
GetMkBound	JGaugeItem.h	/^  word        GetMkBound()  const{ return(MkBound); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetMkBoundFirst	JPartDataHead.h	/^  unsigned GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMkBoundFirst	JPartFloatBi4.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetMkBoundFirst	JSpaceParts.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JSpaceParts	access:public	signature:() const
GetMkBoundFirst	JSphMk.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JSphMk	access:public	signature:() const
GetMkCount	JSpaceParts.h	/^  unsigned GetMkCount()const{ return(MkCount); }$/;"	f	class:JSpacePartsGetMk	access:public	signature:() const
GetMkFluid	JSphAccInput.h	/^  word GetMkFluid()const{ return(MkFluid); }$/;"	f	class:JSphAccInputMk	access:public	signature:() const
GetMkFluidFirst	JPartDataHead.h	/^  unsigned GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JPartDataHead	access:public	signature:() const
GetMkFluidFirst	JSpaceParts.h	/^  word GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JSpaceParts	access:public	signature:() const
GetMkFluidFirst	JSphMk.h	/^  word GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JSphMk	access:public	signature:() const
GetMkInfo	JSphPartsInit.h	/^  const JSphMk* GetMkInfo()const{ return(MkInfo); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
GetMkList	JSpaceParts.cpp	/^std::string JSpaceParts::GetMkList(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
GetMkList	JSpaceParts.h	/^  std::string GetMkList(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
GetMkType	JSpaceParts.h	/^  word GetMkType()const{ return(MkType); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
GetMks	JSpaceProperties.h	/^  std::string GetMks()const{ return(Mks); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
GetMks	JSpaceVtkOut.h	/^  std::string GetMks()const{ return(ListMk); }$/;"	f	class:JSpaceVtkOutFile	access:public	signature:() const
GetMotion	JMatrix4.h	/^  void GetMotion(T3 &rot,T3 &mov)const{$/;"	f	class:JMatrix4	access:public	signature:(T3 &rot,T3 &mov) const
GetMotion	JWaveGen.h	/^  bool GetMotion(bool svdata,unsigned cp,double timestep,double dt$/;"	p	class:JWaveGen	access:public	signature:(bool svdata,unsigned cp,double timestep,double dt ,tdouble3 &simplemov,tdouble3 &simplevel,tmatrix4d &matmov ,unsigned &np,unsigned &idbegin)
GetMotionAce	JWaveGen.h	/^  bool GetMotionAce(bool svdata,unsigned cp,double timestep,double dt$/;"	p	class:JWaveGen	access:public	signature:(bool svdata,unsigned cp,double timestep,double dt ,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace ,tmatrix4d &matmov,tmatrix4d &matmov2,unsigned &np,unsigned &idbegin)
GetMotiveOut	JPartsOut.h	/^  const byte* GetMotiveOut(){ return(Motive); }$/;"	f	class:JPartsOut	access:public	signature:()
GetMov	JMotion.cpp	/^bool JMotion::GetMov(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const{$/;"	f	class:JMotion	signature:(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
GetMov	JMotion.h	/^  bool GetMov(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const;$/;"	p	class:JMotion	access:public	signature:(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
GetMov	JMotionObj.cpp	/^bool JMotionObj::GetMov(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const{$/;"	f	class:JMotionObj	signature:(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
GetMov	JMotionObj.h	/^  bool GetMov(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const;$/;"	p	class:JMotionObj	access:public	signature:(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
GetMovCount	JMotion.h	/^  unsigned GetMovCount()const{ return(LisMovCount); }$/;"	f	class:JMotion	access:public	signature:() const
GetMpiRank	JLog2.h	/^  int GetMpiRank()const{ return(MpiRun? MpiRank: -1); }$/;"	f	class:JLog2	access:public	signature:() const
GetName	JBinaryData.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JBinaryData	access:public	signature:() const
GetName	JBinaryData.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetName	JSpaceProperties.h	/^  std::string GetName()const{ return(Name); }$/;"	f	class:JSpacePropProperty	access:public	signature:() const
GetName	JSpaceProperties.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JSpacePropValue	access:public	signature:() const
GetNameBlockSizeMode	Types.h	/^inline const char* GetNameBlockSizeMode(TpBlockSizeMode bsizemode){$/;"	f	signature:(TpBlockSizeMode bsizemode)
GetNameCellMode	Types.h	/^inline const char* GetNameCellMode(TpCellMode cellmode){$/;"	f	signature:(TpCellMode cellmode)
GetNamePart	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetNamePart(unsigned cpart){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart)
GetNamePart	JPartDataBi4.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartDataBi4	access:private	signature:(unsigned cpart)
GetNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Save::GetNamePart(unsigned cpart){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cpart)
GetNamePart	JPartFloatBi4.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartFloatBi4Save	access:private	signature:(unsigned cpart)
GetNamePart	JPartOutBi4Save.cpp	/^std::string JPartOutBi4Save::GetNamePart(unsigned cpart){$/;"	f	class:JPartOutBi4Save	signature:(unsigned cpart)
GetNamePart	JPartOutBi4Save.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartOutBi4Save	access:private	signature:(unsigned cpart)
GetNameType	JGaugeItem.cpp	/^std::string JGaugeItem::GetNameType(TpGauge type){$/;"	f	class:JGaugeItem	signature:(TpGauge type)
GetNameType	JGaugeItem.h	/^  static std::string GetNameType(TpGauge type);$/;"	p	class:JGaugeItem	access:protected	signature:(TpGauge type)
GetNameXml	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetNameXml()const{$/;"	f	class:JSpacePartBlock	signature:() const
GetNameXml	JSpaceParts.h	/^  std::string GetNameXml()const;$/;"	p	class:JSpacePartBlock	access:public	signature:() const
GetNcells	JCellDivCpu.h	/^  tuint3 GetNcells()const{ return(TUint3(Ncx,Ncy,Ncz)); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNcells	JCellDivGpu.h	/^  tuint3 GetNcells()const{ return(TUint3(Ncx,Ncy,Ncz)); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNct	JCellDivCpu.h	/^  unsigned GetNct()const{ return(Nct); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNct	JCellDivGpu.h	/^  unsigned GetNct()const{ return(Nct); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNcx	JCellDivCpu.h	/^  unsigned GetNcx()const{ return(Ncx); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNcx	JCellDivGpu.h	/^  unsigned GetNcx()const{ return(Ncx); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNcy	JCellDivCpu.h	/^  unsigned GetNcy()const{ return(Ncy); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNcy	JCellDivGpu.h	/^  unsigned GetNcy()const{ return(Ncy); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNcz	JCellDivCpu.h	/^  unsigned GetNcz()const{ return(Ncz); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNcz	JCellDivGpu.h	/^  unsigned GetNcz()const{ return(Ncz); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNewInterval	JLinearValue.h	/^  bool GetNewInterval()const{ return(NewInterval); }$/;"	f	class:JLinearValue	access:public	signature:() const
GetNextElement	JXml.cpp	/^TiXmlElement* JXml::GetNextElement(TiXmlNode* node,const std::string &name,bool optional)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,bool optional) const
GetNextElement	JXml.h	/^  TiXmlElement* GetNextElement(TiXmlNode* node,const std::string &name,bool optional=false)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,bool optional=false) const
GetNextTime	JTimeOut.cpp	/^double JTimeOut::GetNextTime(double t){$/;"	f	class:JTimeOut	signature:(double t)
GetNextTime	JTimeOut.h	/^  double GetNextTime(double t);$/;"	p	class:JTimeOut	access:public	signature:(double t)
GetNextValue	JRangeFilter.cpp	/^unsigned JRangeFilter::GetNextValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
GetNextValue	JRangeFilter.h	/^  unsigned GetNextValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:public	signature:(unsigned v) const
GetNode	JXml.cpp	/^TiXmlNode* JXml::GetNode(const std::string &path,bool createpath){$/;"	f	class:JXml	signature:(const std::string &path,bool createpath)
GetNode	JXml.h	/^  TiXmlNode* GetNode(const std::string &path,bool createpath=false);$/;"	p	class:JXml	access:public	signature:(const std::string &path,bool createpath=false)
GetNodeError	JXml.cpp	/^TiXmlNode* JXml::GetNodeError(const std::string &path){$/;"	f	class:JXml	signature:(const std::string &path)
GetNodeError	JXml.h	/^  TiXmlNode* GetNodeError(const std::string &path);$/;"	p	class:JXml	access:public	signature:(const std::string &path)
GetNodeRoot	JXml.h	/^  TiXmlNode* GetNodeRoot(){ return(Doc); }$/;"	f	class:JXml	access:public	signature:()
GetNodeSimple	JXml.cpp	/^TiXmlNode* JXml::GetNodeSimple(const std::string &path)const{$/;"	f	class:JXml	signature:(const std::string &path) const
GetNodeSimple	JXml.h	/^  TiXmlNode* GetNodeSimple(const std::string &path)const;$/;"	p	class:JXml	access:public	signature:(const std::string &path) const
GetNp	JSphPartsInit.h	/^  unsigned GetNp()const{ return(Np); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
GetNpDynamic	JPartDataHead.h	/^  bool GetNpDynamic()const{ return(NpDynamic); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetNpFinal	JCellDivCpu.h	/^  unsigned GetNpFinal()const{ return(NpFinal); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpFinal	JCellDivGpu.h	/^  unsigned GetNpFinal()const{ return(NpFinal); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpbFinal	JCellDivCpu.h	/^  unsigned GetNpbFinal()const{ return(NpbFinal); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpbFinal	JCellDivGpu.h	/^  unsigned GetNpbFinal()const{ return(NpbFinal); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpbIgnore	JCellDivCpu.h	/^  unsigned GetNpbIgnore()const{ return(NpbIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpbIgnore	JCellDivGpu.h	/^  unsigned GetNpbIgnore()const{ return(NpbIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpbOut	JCellDivCpu.h	/^  unsigned GetNpbOut()const{ return(NpbOut); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpbOut	JCellDivGpu.h	/^  unsigned GetNpbOut()const{ return(NpbOut); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpbOutIgnore	JCellDivCpu.h	/^  unsigned GetNpbOutIgnore()const{ return(NpbOutIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpbOutIgnore	JCellDivGpu.h	/^  unsigned GetNpbOutIgnore()const{ return(NpbOutIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpfOut	JCellDivCpu.h	/^  unsigned GetNpfOut()const{ return(NpfOut); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpfOut	JCellDivGpu.h	/^  unsigned GetNpfOut()const{ return(NpfOut); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpfOutIgnore	JCellDivCpu.h	/^  unsigned GetNpfOutIgnore()const{ return(NpfOutIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetNpfOutIgnore	JCellDivGpu.h	/^  unsigned GetNpfOutIgnore()const{ return(NpfOutIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetNpiece	JPartDataBi4.h	/^  unsigned GetNpiece()const{ return(Npiece); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
GetNpiece	JPartDataHead.h	/^  unsigned    GetNpiece()    const{ return(Npiece);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetNumObjects	JSphMotion.h	/^  unsigned GetNumObjects()const{ return(ObjCount); };$/;"	f	class:JSphMotion	access:public	signature:() const
GetObjBegin	JSphMotion.cpp	/^unsigned JSphMotion::GetObjBegin(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
GetObjBegin	JSphMotion.h	/^  unsigned GetObjBegin(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
GetObjIdxByMkBound	JSphMotion.cpp	/^unsigned JSphMotion::GetObjIdxByMkBound(word mkbound)const{$/;"	f	class:JSphMotion	signature:(word mkbound) const
GetObjIdxByMkBound	JSphMotion.h	/^  unsigned GetObjIdxByMkBound(word mkbound)const;$/;"	p	class:JSphMotion	access:public	signature:(word mkbound) const
GetObjMkBound	JSphMotion.cpp	/^word JSphMotion::GetObjMkBound(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
GetObjMkBound	JSphMotion.h	/^  word GetObjMkBound(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
GetObjSize	JSphMotion.cpp	/^unsigned JSphMotion::GetObjSize(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
GetObjSize	JSphMotion.h	/^  unsigned GetObjSize(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
GetOmegaini	JSpaceParts.h	/^  tdouble3 GetOmegaini()const{ return(Omegaini); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
GetOptimumBs	JBlockSizeAuto.h	/^  unsigned GetOptimumBs()const{ return(BsSel); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:() const
GetOutMoveCount	JPartsOut.h	/^  unsigned GetOutMoveCount()const{ return(OutMoveCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
GetOutMoveCount	JSph.h	/^  unsigned GetOutMoveCount()const{ return(OutMoveCount); }$/;"	f	class:JSph	access:protected	signature:() const
GetOutPosCount	JPartsOut.h	/^  unsigned GetOutPosCount()const{ return(OutPosCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
GetOutPosCount	JSph.h	/^  unsigned GetOutPosCount()const{ return(OutPosCount); }$/;"	f	class:JSph	access:protected	signature:() const
GetOutRhopCount	JPartsOut.h	/^  unsigned GetOutRhopCount()const{ return(OutRhopCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
GetOutRhopCount	JSph.h	/^  unsigned GetOutRhopCount()const{ return(OutRhopCount); }$/;"	f	class:JSph	access:protected	signature:() const
GetOutputDt	JGaugeItem.h	/^  double GetOutputDt()const{ return(OutputDt); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetOutputEnd	JGaugeItem.h	/^  double GetOutputEnd()const{ return(OutputEnd); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetOutputStart	JGaugeItem.h	/^  double GetOutputStart()const{ return(OutputStart); }$/;"	f	class:JGaugeItem	access:public	signature:() const
GetPaddleMkbound	JWaveGen.h	/^  word GetPaddleMkbound(unsigned cp)const;$/;"	p	class:JWaveGen	access:public	signature:(unsigned cp) const
GetParent	JBinaryData.h	/^  JBinaryData* GetParent(){ return(Parent); };$/;"	f	class:JBinaryData	access:public	signature:()
GetParm	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParmsItem JSpaceEParms::GetParm(unsigned pos)const{$/;"	f	class:JSpaceEParms	signature:(unsigned pos) const
GetParm	JSpaceEParms.h	/^  JSpaceEParmsItem GetParm(unsigned pos)const;$/;"	p	class:JSpaceEParms	access:public	signature:(unsigned pos) const
GetPart	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::GetPart()const{$/;"	f	class:JPartDataBi4	signature:() const
GetPart	JPartDataBi4.h	/^  JBinaryData* GetPart()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
GetPartBeginTimeStep	JPartsLoad4.h	/^  double GetPartBeginTimeStep()const{ return(PartBeginTimeStep); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetPartBeginTotalNp	JPartsLoad4.h	/^  ullong GetPartBeginTotalNp()const{ return(PartBeginTotalNp); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetPartCenter	JPartFloatBi4.h	/^  tdouble3 GetPartCenter(unsigned cf)const{ CheckFloating(cf); return(PartCenter[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetPartDemDtForce	JPartFloatBi4.h	/^  double GetPartDemDtForce()const{ CheckPart(); return(DemDtForce); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetPartFomega	JPartFloatBi4.h	/^  tfloat3 GetPartFomega (unsigned cf)const{ CheckFloating(cf); return(PartFomega[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetPartFvel	JPartFloatBi4.h	/^  tfloat3 GetPartFvel   (unsigned cf)const{ CheckFloating(cf); return(PartFvel[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
GetPartTimeStep	JPartFloatBi4.h	/^  double GetPartTimeStep()const{ CheckPart(); return(TimeStep); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
GetParticleSummary	JSpaceParts.cpp	/^void JSpaceParts::GetParticleSummary(std::vector<std::string> &out)const{$/;"	f	class:JSpaceParts	signature:(std::vector<std::string> &out) const
GetParticleSummary	JSpaceParts.h	/^  void GetParticleSummary(std::vector<std::string> &out)const;$/;"	p	class:JSpaceParts	access:public	signature:(std::vector<std::string> &out) const
GetParticlesData	JSphCpu.cpp	/^unsigned JSphCpu::GetParticlesData(unsigned n,unsigned pini,bool onlynormal$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pini,bool onlynormal ,unsigned *idp,tdouble3 *pos,tfloat3 *vel,float *rhop,typecode *code)
GetParticlesData	JSphCpu.h	/^  unsigned GetParticlesData(unsigned n,unsigned pini,bool onlynormal$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,bool onlynormal ,unsigned *idp,tdouble3 *pos,tfloat3 *vel,float *rhop,typecode *code)
GetParticlesInfo	JPartDataHead.cpp	/^void JPartDataHead::GetParticlesInfo(std::vector<std::string> &out)const{$/;"	f	class:JPartDataHead	signature:(std::vector<std::string> &out) const
GetParticlesInfo	JPartDataHead.h	/^  void GetParticlesInfo(std::vector<std::string> &out)const;$/;"	p	class:JPartDataHead	access:public	signature:(std::vector<std::string> &out) const
GetParticlesInfo	JSpaceParts.cpp	/^void JSpaceParts::GetParticlesInfo(std::vector<std::string> &out)const{$/;"	f	class:JSpaceParts	signature:(std::vector<std::string> &out) const
GetParticlesInfo	JSpaceParts.h	/^  void GetParticlesInfo(std::vector<std::string> &out)const;$/;"	p	class:JSpaceParts	access:public	signature:(std::vector<std::string> &out) const
GetPathLevels	Functions.cpp	/^std::string GetPathLevels(std::string path,unsigned levels){$/;"	f	namespace:fun	signature:(std::string path,unsigned levels)
GetPathLevels	Functions.h	/^std::string GetPathLevels(std::string path,unsigned levels);$/;"	p	namespace:fun	signature:(std::string path,unsigned levels)
GetPeriMode	JPartDataHead.h	/^  TpPeri GetPeriMode()const{ return(PeriMode); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetPeriXinc	JPartDataHead.h	/^  tdouble3 GetPeriXinc()const{ return(PeriXinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetPeriYinc	JPartDataHead.h	/^  tdouble3 GetPeriYinc()const{ return(PeriYinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetPeriZinc	JPartDataHead.h	/^  tdouble3 GetPeriZinc()const{ return(PeriZinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetPiece	JPartDataBi4.h	/^  unsigned GetPiece()const{ return(Piece); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
GetPiecesFile	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFile(std::string file)const{$/;"	f	class:JPartDataBi4	signature:(std::string file) const
GetPiecesFile	JPartDataBi4.h	/^  unsigned GetPiecesFile(std::string file)const;$/;"	p	class:JPartDataBi4	access:private	signature:(std::string file) const
GetPiecesFileCase	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFileCase(std::string dir,std::string casename)const{$/;"	f	class:JPartDataBi4	signature:(std::string dir,std::string casename) const
GetPiecesFileCase	JPartDataBi4.h	/^  unsigned GetPiecesFileCase(std::string dir,std::string casename)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,std::string casename) const
GetPiecesFilePart	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFilePart(std::string dir,unsigned cpart)const{$/;"	f	class:JPartDataBi4	signature:(std::string dir,unsigned cpart) const
GetPiecesFilePart	JPartDataBi4.h	/^  unsigned GetPiecesFilePart(std::string dir,unsigned cpart)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,unsigned cpart) const
GetPoint	JGaugeItem.h	/^  tdouble3 GetPoint()const{ return(Point); }$/;"	f	class:JGaugeVelocity	access:public	signature:() const
GetPoint0	JGaugeItem.h	/^  tdouble3 GetPoint0()const{ return(Point0); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
GetPoint0	JGaugeItem.h	/^  tdouble3 GetPoint0()const{ return(Point0); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
GetPoint2	JGaugeItem.h	/^  tdouble3 GetPoint2()const{ return(Point2); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeForce::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeForce	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeMaxZ::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeMaxZ	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeSwl::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeSwl	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeVelocity::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeVelocity	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeForce	access:public	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeMaxZ	access:public	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeSwl	access:public	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeVelocity	access:public	signature:(std::vector<tfloat3> &points) const
GetPointDef	JGaugeItem.h	/^  virtual unsigned GetPointDef(std::vector<tfloat3> &points)const=0;$/;"	p	class:JGaugeItem	access:public	signature:(std::vector<tfloat3> &points) const
GetPointDp	JGaugeItem.h	/^  double GetPointDp()const{ return(PointDp); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
GetPointer	JBinaryData.h	/^  const void* GetPointer()const{ return(Pointer); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetPointerDataFloat3	JSph.cpp	/^tfloat3* JSph::GetPointerDataFloat3(unsigned n,const tdouble3* v)const{$/;"	f	class:JSph	signature:(unsigned n,const tdouble3* v) const
GetPointerDataFloat3	JSph.h	/^  tfloat3* GetPointerDataFloat3(unsigned n,const tdouble3* v)const;$/;"	p	class:JSph	access:protected	signature:(unsigned n,const tdouble3* v) const
GetPos	JLinearValue.h	/^  unsigned GetPos()const{ return(Position); };$/;"	f	class:JLinearValue	access:public	signature:() const
GetPos	JPartsLoad4.h	/^  const tdouble3* GetPos(){ return(Pos); }$/;"	f	class:JPartsLoad4	access:public	signature:()
GetPos	JSphPartsInit.h	/^  const tdouble3* GetPos()const{ return(Pos); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
GetPosDefined	JSphMk.h	/^  bool GetPosDefined()const{ return(PosDefined); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
GetPosDoubleName	JSph.cpp	/^std::string JSph::GetPosDoubleName(bool psingle,bool svdouble){$/;"	f	class:JSph	signature:(bool psingle,bool svdouble)
GetPosDoubleName	JSph.h	/^  static std::string GetPosDoubleName(bool psingle,bool svdouble);$/;"	p	class:JSph	access:public	signature:(bool psingle,bool svdouble)
GetPosMax	JSphMk.h	/^  tdouble3 GetPosMax()const{ return(PosMax); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
GetPosMin	JSphMk.h	/^  tdouble3 GetPosMin()const{ return(PosMin); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
GetPosMov	JMotionObj.cpp	/^int JMotionObj::GetPosMov(JMotionMov* mv)const{$/;"	f	class:JMotionObj	signature:(JMotionMov* mv) const
GetPosMov	JMotionObj.h	/^  int GetPosMov(JMotionMov* mv)const;$/;"	p	class:JMotionObj	access:private	signature:(JMotionMov* mv) const
GetPosNext	JLinearValue.h	/^  unsigned GetPosNext()const{ return(PositionNext); };$/;"	f	class:JLinearValue	access:public	signature:() const
GetPosOut	JPartsOut.h	/^  const tdouble3* GetPosOut(){ return(Pos); }$/;"	f	class:JPartsOut	access:public	signature:()
GetProgramPath	JAppInfo.h	/^  std::string GetProgramPath()const{ return(ProgramPath); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetProperty	JSpaceParts.h	/^  std::string GetProperty()const{ return(Props); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
GetProperty	JSpaceProperties.cpp	/^const JSpacePropProperty* JSpaceProperties::GetProperty(std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string name) const
GetProperty	JSpaceProperties.h	/^  const JSpacePropProperty* GetProperty(std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string name) const
GetPropertyCount	JSpaceProperties.h	/^  unsigned GetPropertyCount()const{ return(unsigned(Props.size())); }$/;"	f	class:JSpaceProperties	access:public	signature:() const
GetPropertyMk	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetPropertyMk(word mk)const{$/;"	f	class:JSpaceProperties	signature:(word mk) const
GetPropertyMk	JSpaceProperties.h	/^  std::string GetPropertyMk(word mk)const;$/;"	p	class:JSpaceProperties	access:public	signature:(word mk) const
GetProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetProps(word mk)const{$/;"	f	class:JSpacePropLinks	signature:(word mk) const
GetProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetProps(word mk,word mkboundfirst,word mkfluidfirst)const{$/;"	f	class:JSpacePropLinks	signature:(word mk,word mkboundfirst,word mkfluidfirst) const
GetProps	JSpaceProperties.h	/^  std::string GetProps()const{ return(Props); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
GetProps	JSpaceProperties.h	/^  std::string GetProps(word mk)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk) const
GetProps	JSpaceProperties.h	/^  std::string GetProps(word mk,word mkboundfirst,word mkfluidfirst)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk,word mkboundfirst,word mkfluidfirst) const
GetPropsFast	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetPropsFast(word mk,word mkboundfirst,word mkfluidfirst$/;"	f	class:JSpacePropLinks	signature:(word mk,word mkboundfirst,word mkfluidfirst ,std::vector<std::string> &vprops_mk ,std::vector<std::string> &vprops_mkb ,std::vector<std::string> &vprops_mkf) const
GetPropsFast	JSpaceProperties.h	/^  std::string GetPropsFast(word mk,word mkboundfirst,word mkfluidfirst$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk,word mkboundfirst,word mkfluidfirst ,std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf) const
GetPropsList	JSpaceProperties.cpp	/^void JSpacePropLinks::GetPropsList(std::vector<std::string> &vprops_mk$/;"	f	class:JSpacePropLinks	signature:(std::vector<std::string> &vprops_mk ,std::vector<std::string> &vprops_mkb ,std::vector<std::string> &vprops_mkf) const
GetPropsList	JSpaceProperties.h	/^  void GetPropsList(std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf) const
GetPropsSort	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetPropsSort(std::string props){$/;"	f	class:JSpacePropLinks	signature:(std::string props)
GetPropsSort	JSpaceProperties.h	/^  static std::string GetPropsSort(std::string props);$/;"	p	class:JSpacePropLinks	access:private	signature:(std::string props)
GetReadLin	JReadDatafile.h	/^  int GetReadLin()const{           return(ReadLin);      }$/;"	f	class:JReadDatafile	access:public	signature:() const
GetReadLinValue	JReadDatafile.h	/^  int GetReadLinValue()const{      return(ReadLinValue); }$/;"	f	class:JReadDatafile	access:public	signature:() const
GetReadValue	JReadDatafile.h	/^  std::string GetReadValue()const{ return(ReadValue);    }$/;"	f	class:JReadDatafile	access:public	signature:() const
GetRefMotion	JSpaceParts.h	/^  unsigned GetRefMotion()const{ return(RefMotion); }$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:() const
GetRefs	JMotionObj.cpp	/^void JMotionObj::GetRefs(std::vector<int> &refs)const{$/;"	f	class:JMotionObj	signature:(std::vector<int> &refs) const
GetRefs	JMotionObj.h	/^  void GetRefs(std::vector<int> &refs)const;$/;"	p	class:JMotionObj	access:public	signature:(std::vector<int> &refs) const
GetResInfo	JSph.cpp	/^void JSph::GetResInfo(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo){$/;"	f	class:JSph	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo)
GetResInfo	JSph.h	/^  void GetResInfo(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo);$/;"	p	class:JSph	access:protected	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo)
GetResult	JGaugeItem.h	/^  const StGaugeForceRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetResult	JGaugeItem.h	/^  const StGaugeMaxzRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
GetResult	JGaugeItem.h	/^  const StGaugeSwlRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
GetResult	JGaugeItem.h	/^  const StGaugeVelRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeVelocity	access:public	signature:() const
GetResultsFileCsv	JGaugeItem.cpp	/^std::string JGaugeItem::GetResultsFileCsv()const{$/;"	f	class:JGaugeItem	signature:() const
GetResultsFileCsv	JGaugeItem.h	/^  std::string GetResultsFileCsv()const;$/;"	p	class:JGaugeItem	access:public	signature:() const
GetResultsFileVtk	JGaugeItem.cpp	/^std::string JGaugeItem::GetResultsFileVtk()const{$/;"	f	class:JGaugeItem	signature:() const
GetResultsFileVtk	JGaugeItem.h	/^  std::string GetResultsFileVtk()const;$/;"	p	class:JGaugeItem	access:public	signature:() const
GetReuseIds	JPartDataHead.h	/^  bool GetReuseIds() const{ return(ReuseIds);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetRhop0	JSpaceCtes.h	/^  double GetRhop0()const{ return(Rhop0); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetRhopOut	JPartsOut.h	/^  const float* GetRhopOut(){ return(Rhop); }$/;"	f	class:JPartsOut	access:public	signature:()
GetRhopZero	JPartDataHead.h	/^  double GetRhopZero() const{ return(RhopZero);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetRunCode	JPartDataHead.h	/^  std::string GetRunCode()   const{ return(RunCode);    };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetRunCommand	JAppInfo.h	/^  std::string GetRunCommand()const{ return(RunCommand); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetRunPath	JAppInfo.h	/^  std::string GetRunPath()const{ return(RunPath); };$/;"	f	class:JAppInfo	access:public	signature:() const
GetScell	JCellDivCpu.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
GetScell	JCellDivGpu.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
GetScell	JGaugeSystem.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetShiftingName	JSph.cpp	/^std::string JSph::GetShiftingName(TpShifting tshift){$/;"	f	class:JSph	signature:(TpShifting tshift)
GetShiftingName	JSph.h	/^  static std::string GetShiftingName(TpShifting tshift);$/;"	p	class:JSph	access:public	signature:(TpShifting tshift)
GetShortName	JAppInfo.cpp	/^std::string JAppInfo::GetShortName()const{$/;"	f	class:JAppInfo	signature:() const
GetShortName	JAppInfo.h	/^  std::string GetShortName()const;$/;"	p	class:JAppInfo	access:public	signature:() const
GetSimple	JMotionPos.h	/^  tdouble3 GetSimple()const{ return(PosSimple); }$/;"	f	class:JMotionPos	access:public	signature:() const
GetSimple	JSpaceProperties.h	/^  bool GetSimple()const{ return(Simple); };$/;"	f	class:JSpacePropValue	access:public	signature:() const
GetSimpleMean	JMeanValues.cpp	/^double JMeanMoving::GetSimpleMean()const{$/;"	f	class:JMeanMoving	signature:() const
GetSimpleMean	JMeanValues.h	/^  double GetSimpleMean()const;$/;"	p	class:JMeanMoving	access:public	signature:() const
GetSimulate2D	JGaugeSystem.h	/^  bool GetSimulate2D()const{ return(Simulate2D); };$/;"	f	class:JGaugeSystem	access:public	signature:() const
GetSimulate2D	JPartsLoad4.h	/^  bool GetSimulate2D()const{ return(Simulate2D); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetSimulate2DPosY	JPartsLoad4.h	/^  double GetSimulate2DPosY()const{ return(Simulate2DPosY); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetSize	JBinaryData.h	/^  unsigned GetSize()const{ return(Size); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetSize	JLinearValue.h	/^  unsigned GetSize()const{ return(Size); }$/;"	f	class:JLinearValue	access:public	signature:() const
GetSize	JPartsOut.h	/^  unsigned GetSize()const{ return(Size); }$/;"	f	class:JPartsOut	access:public	signature:() const
GetSizeAux	JWaveOrder2_ker.cu	/^unsigned GetSizeAux(unsigned n){$/;"	f	namespace:cuwave2	signature:(unsigned n)
GetSizeAux	JWaveOrder2_ker.h	/^unsigned GetSizeAux(unsigned n);$/;"	p	namespace:cuwave2	signature:(unsigned n)
GetSizeData	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeData(bool all){$/;"	f	class:JBinaryData	signature:(bool all)
GetSizeData	JBinaryData.h	/^  unsigned GetSizeData(bool all);$/;"	p	class:JBinaryData	access:public	signature:(bool all)
GetSizeDataConst	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeDataConst(bool all)const{$/;"	f	class:JBinaryData	signature:(bool all) const
GetSizeDataConst	JBinaryData.h	/^  unsigned GetSizeDataConst(bool all)const;$/;"	p	class:JBinaryData	access:public	signature:(bool all) const
GetSizeValues	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeValues()const{$/;"	f	class:JBinaryData	signature:() const
GetSizeValues	JBinaryData.h	/^  unsigned GetSizeValues()const;$/;"	p	class:JBinaryData	access:private	signature:() const
GetSizeValues	JSaveDt.h	/^  unsigned GetSizeValues()const{ return(SizeValues); }$/;"	f	class:JSaveDt	access:private	signature:() const
GetSpeedSound	JSpaceCtes.h	/^  double GetSpeedSound()const{ return(SpeedSound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetSpeedSoundAuto	JSpaceCtes.h	/^  bool GetSpeedSoundAuto()const{ return(SpeedSoundAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetSpeedSystem	JSpaceCtes.h	/^  double GetSpeedSystem()const{ return(SpeedSystem); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetSpeedSystemAuto	JSpaceCtes.h	/^  bool GetSpeedSystemAuto()const{ return(SpeedSystemAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
GetSplitting	JPartDataHead.h	/^  bool GetSplitting()const{ return(Splitting); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetStepName	JSph.cpp	/^std::string JSph::GetStepName(TpStep tstep){$/;"	f	class:JSph	signature:(TpStep tstep)
GetStepName	JSph.h	/^  static std::string GetStepName(TpStep tstep);$/;"	p	class:JSph	access:public	signature:(TpStep tstep)
GetStepsInterval	JBlockSizeAuto.h	/^  unsigned GetStepsInterval()const{ return(StepsInterval); }$/;"	f	class:JBlockSizeAuto	access:public	signature:() const
GetStopCount	JMotion.h	/^  unsigned GetStopCount()const{ return(LisStopCount); }$/;"	f	class:JMotion	access:public	signature:() const
GetStopRef	JMotion.cpp	/^unsigned JMotion::GetStopRef(unsigned pos)const{$/;"	f	class:JMotion	signature:(unsigned pos) const
GetStopRef	JMotion.h	/^  unsigned GetStopRef(unsigned pos)const;$/;"	p	class:JMotion	access:public	signature:(unsigned pos) const
GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetSubValue(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx,unsigned subidx) const
GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValue(std::string subname)const{$/;"	f	class:JSpacePropValue	signature:(std::string subname) const
GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValue(unsigned idx)const{$/;"	f	class:JSpacePropValue	signature:(unsigned idx) const
GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(std::string subname)const;$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname) const
GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(unsigned idx)const;$/;"	p	class:JSpacePropValue	access:public	signature:(unsigned idx) const
GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueDouble	JSpaceParts.cpp	/^double JSpacePartBlock::GetSubValueDouble(std::string name,std::string subname,bool optional,double valdef)const{   $/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,double valdef) const
GetSubValueDouble	JSpaceParts.h	/^  double GetSubValueDouble(std::string name,std::string subname,bool optional=false,double valdef=0)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,double valdef=0) const
GetSubValueDouble	JSpaceParts.h	/^  double GetSubValueDouble(unsigned idx,unsigned subidx)const{  return(atof(GetSubValueStr(idx,subidx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueDouble3	JSpaceParts.h	/^  tdouble3 GetSubValueDouble3(std::string name)const{ return(TDouble3(GetSubValueDouble(name,"x"),GetSubValueDouble(name,"y"),GetSubValueDouble(name,"z"))); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetSubValueFloat	JSpaceParts.h	/^  float GetSubValueFloat(std::string name,std::string subname,bool optional=false,float valdef=0)const{  return(float(GetSubValueDouble(name,subname,optional,valdef)));  }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,float valdef=0) const
GetSubValueFloat	JSpaceParts.h	/^  float GetSubValueFloat(unsigned idx,unsigned subidx)const{    return(float(GetSubValueDouble(idx,subidx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueFloat3	JSpaceParts.h	/^  tfloat3 GetSubValueFloat3(std::string name)const{ return(ToTFloat3(GetSubValueDouble3(name))); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetSubValueInt	JSpaceParts.cpp	/^int JSpacePartBlock::GetSubValueInt(std::string name,std::string subname,bool optional,int valdef)const{   $/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,int valdef) const
GetSubValueInt	JSpaceParts.h	/^  int GetSubValueInt(std::string name,std::string subname,bool optional=false,int valdef=0)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,int valdef=0) const
GetSubValueInt	JSpaceParts.h	/^  int GetSubValueInt(unsigned idx,unsigned subidx)const{        return(atoi(GetSubValueStr(idx,subidx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueName(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceParts.h	/^  std::string GetSubValueName(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetSubValueName(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValueName(unsigned idx)const{$/;"	f	class:JSpacePropValue	signature:(unsigned idx) const
GetSubValueName	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueName(std::string props,unsigned idx,unsigned subidx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(std::string props,unsigned idx,unsigned subidx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx,unsigned subidx) const
GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(unsigned idx)const;$/;"	p	class:JSpacePropValue	access:public	signature:(unsigned idx) const
GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueStr(std::string name,std::string subname,bool optional,std::string valdef)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,std::string valdef) const
GetSubValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueStr(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx,unsigned subidx) const
GetSubValueStr	JSpaceParts.h	/^  std::string GetSubValueStr(std::string name,std::string subname,bool optional=false,std::string valdef="")const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,std::string valdef=Ó) const
GetSubValueStr	JSpaceParts.h	/^  std::string GetSubValueStr(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueStr(std::string props,std::string name,std::string subname)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name,std::string subname) const
GetSubValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueStr(std::string props,unsigned idx,unsigned subidx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx,unsigned subidx) const
GetSubValueStr	JSpaceProperties.h	/^  std::string GetSubValueStr(std::string props,std::string name,std::string subname)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name,std::string subname) const
GetSubValueStr	JSpaceProperties.h	/^  std::string GetSubValueStr(std::string props,unsigned idx,unsigned subidx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx,unsigned subidx) const
GetSubValueUint	JSpaceParts.h	/^  unsigned GetSubValueUint(std::string name,std::string subname,bool optional=false,unsigned valdef=0)const{  return(unsigned(GetSubValueInt(name,subname,optional,int(valdef))));  }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,unsigned valdef=0) const
GetSubValueUint	JSpaceParts.h	/^  unsigned GetSubValueUint(unsigned idx,unsigned subidx)const{  return(unsigned(GetSubValueInt(idx,subidx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
GetSubValuesCount	JSpaceParts.cpp	/^unsigned JSpacePartBlock::GetSubValuesCount(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
GetSubValuesCount	JSpaceParts.h	/^  unsigned GetSubValuesCount(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetSubValuesCount	JSpaceProperties.cpp	/^unsigned JSpacePropProperty::GetSubValuesCount(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
GetSubValuesCount	JSpaceProperties.cpp	/^unsigned JSpaceProperties::GetSubValuesCount(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount()const{ return(Simple? 0: unsigned(SubValues.size())); }$/;"	f	class:JSpacePropValue	access:public	signature:() const
GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
GetSummaryData	JSpaceParts.cpp	/^JSpaceParts::StSummaryData JSpaceParts::GetSummaryData()const{$/;"	f	class:JSpaceParts	signature:() const
GetSummaryData	JSpaceParts.h	/^  JSpaceParts::StSummaryData GetSummaryData()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
GetSymplecticDtPre	JPartsLoad4.h	/^  double GetSymplecticDtPre()const{ return(SymplecticDtPre); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
GetText	tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
GetText	tinyxml.h	/^    const char* GetText() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
GetTextRandomCode	Functions.cpp	/^std::string GetTextRandomCode(unsigned length){$/;"	f	namespace:fun	signature:(unsigned length)
GetTextRandomCode	Functions.h	/^std::string GetTextRandomCode(unsigned length);$/;"	p	namespace:fun	signature:(unsigned length)
GetTimeByIdx	JLinearValue.cpp	/^double JLinearValue::GetTimeByIdx(unsigned idx)const{$/;"	f	class:JLinearValue	signature:(unsigned idx) const
GetTimeByIdx	JLinearValue.h	/^  double GetTimeByIdx(unsigned idx)const;$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx) const
GetTimersInfo	JSphCpu.cpp	/^void JSphCpu::GetTimersInfo(std::string &hinfo,std::string &dinfo)const{$/;"	f	class:JSphCpu	signature:(std::string &hinfo,std::string &dinfo) const
GetTimersInfo	JSphCpu.h	/^  void GetTimersInfo(std::string &hinfo,std::string &dinfo)const;$/;"	p	class:JSphCpu	access:protected	signature:(std::string &hinfo,std::string &dinfo) const
GetTimersInfo	JSphGpu.cpp	/^void JSphGpu::GetTimersInfo(std::string &hinfo,std::string &dinfo)const{$/;"	f	class:JSphGpu	signature:(std::string &hinfo,std::string &dinfo) const
GetTimersInfo	JSphGpu.h	/^  void GetTimersInfo(std::string &hinfo,std::string &dinfo)const;$/;"	p	class:JSphGpu	access:protected	signature:(std::string &hinfo,std::string &dinfo) const
GetTimes	JMotionMov.h	/^  const double*   GetTimes()const{  return(DataFile->GetTimes());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
GetTimes	JMotionMov.h	/^  const double*   GetTimes()const{ return(Times); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
GetTimes	JMotionMov.h	/^  const double* GetTimes()const{ return(DataFile->GetTimes()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
GetType	JBinaryData.h	/^  JBinaryDataDef::TpData GetType()const{ return(Type); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
GetType	JSpaceProperties.h	/^  TpLink GetType()const{ return(Type); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
GetTypeParts	JGaugeItem.h	/^  TpParticles GetTypeParts()const{ return(TypeParts); }$/;"	f	class:JGaugeForce	access:public	signature:() const
GetUnits	JFormatFiles2.h	/^  static std::string GetUnits(const std::string &varname);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &varname)
GetUserData	tinyxml.h	/^    const void* GetUserData() const         { return userData; }    \/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
GetUserData	tinyxml.h	/^    void* GetUserData()                     { return userData; }    \/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
GetValue	JLinearValue.cpp	/^double JLinearValue::GetValue(double timestep,unsigned cvalue){$/;"	f	class:JLinearValue	signature:(double timestep,unsigned cvalue)
GetValue	JLinearValue.h	/^  double GetValue(double timestep,unsigned cvalue=0);$/;"	p	class:JLinearValue	access:public	signature:(double timestep,unsigned cvalue=0)
GetValue	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValue(const std::string &key){$/;"	f	class:JSpaceEParms	signature:(const std::string &key)
GetValue	JSpaceEParms.h	/^  std::string GetValue(const std::string &key);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key)
GetValue	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValue(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
GetValue	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValue(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
GetValue	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetValue(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
GetValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetValue()const{$/;"	f	class:JSpacePropValue	signature:() const
GetValue	JSpaceProperties.h	/^  const JSpacePropValue* GetValue(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,std::string name) const
GetValue	JSpaceProperties.h	/^  const JSpacePropValue* GetValue(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,unsigned idx) const
GetValue	JSpaceProperties.h	/^  std::string GetValue()const;$/;"	p	class:JSpacePropValue	access:public	signature:() const
GetValue	JSpaceProperties.h	/^  std::string GetValue(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
GetValueByIdx	JLinearValue.cpp	/^double JLinearValue::GetValueByIdx(unsigned idx,unsigned cvalue)const{$/;"	f	class:JLinearValue	signature:(unsigned idx,unsigned cvalue) const
GetValueByIdx	JLinearValue.h	/^  double GetValueByIdx(unsigned idx,unsigned cvalue=0)const;$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx,unsigned cvalue=0) const
GetValueDouble	JSpaceEParms.h	/^  double GetValueDouble(const std::string &key,bool optional=false,double valdef=0){ return(GetValueNumDouble(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,double valdef=0)
GetValueDouble	JSpaceParts.h	/^  double GetValueDouble(std::string name)const{  return(atof(GetValueStr(name).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetValueDouble	JSpaceParts.h	/^  double GetValueDouble(unsigned idx)const{  return(atof(GetValueStr(idx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValueDouble3	JSpaceEParms.h	/^  tdouble3 GetValueDouble3(const std::string &key,bool optional=false,tdouble3 valdef=TDouble3(0)){ return(TDouble3(GetValueNumDouble(key,0,optional,valdef.x),GetValueNumDouble(key,1,optional,valdef.y),GetValueNumDouble(key,2,optional,valdef.z))); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,tdouble3 valdef=TDouble3(0))
GetValueFloat	JSpaceEParms.h	/^  float GetValueFloat(const std::string &key,bool optional=false,float valdef=0){ return(GetValueNumFloat(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,float valdef=0)
GetValueFloat	JSpaceParts.h	/^  float GetValueFloat(std::string name)const{    return(float(GetValueDouble(name)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetValueFloat	JSpaceParts.h	/^  float GetValueFloat(unsigned idx)const{    return(float(GetValueDouble(idx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValueIndex	JBinaryData.cpp	/^int JBinaryData::GetValueIndex(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
GetValueIndex	JBinaryData.h	/^  int GetValueIndex(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
GetValueInt	JSpaceEParms.h	/^  int GetValueInt(const std::string &key,bool optional=false,int valdef=0){ return(GetValueNumInt(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,int valdef=0)
GetValueInt	JSpaceParts.h	/^  int GetValueInt(std::string name)const{        return(atoi(GetValueStr(name).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetValueInt	JSpaceParts.h	/^  int GetValueInt(unsigned idx)const{        return(atoi(GetValueStr(idx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValueName	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueName(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
GetValueName	JSpaceParts.h	/^  std::string GetValueName(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValueName	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetValueName(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
GetValueName	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueName(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
GetValueName	JSpaceProperties.h	/^  std::string GetValueName(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
GetValueName	JSpaceProperties.h	/^  std::string GetValueName(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
GetValueNum	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValueNum(const std::string &key,int num){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num)
GetValueNum	JSpaceEParms.h	/^  std::string GetValueNum(const std::string &key,int num);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key,int num)
GetValueNumDouble	JSpaceEParms.cpp	/^double JSpaceEParms::GetValueNumDouble(const std::string &key,int num,bool optional,double valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,double valdef)
GetValueNumDouble	JSpaceEParms.h	/^  double GetValueNumDouble(const std::string &key,int num,bool optional=false,double valdef=0);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,double valdef=0)
GetValueNumFloat	JSpaceEParms.h	/^  float GetValueNumFloat(const std::string &key,int num,bool optional=false,float valdef=0){ return(float(GetValueNumDouble(key,num,optional,valdef))); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,float valdef=0)
GetValueNumInt	JSpaceEParms.cpp	/^int JSpaceEParms::GetValueNumInt(const std::string &key,int num,bool optional,int valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,int valdef)
GetValueNumInt	JSpaceEParms.h	/^  int GetValueNumInt(const std::string &key,int num,bool optional=false,int valdef=0);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,int valdef=0)
GetValueNumStr	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValueNumStr(const std::string &key,int num,bool optional,std::string valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,std::string valdef)
GetValueNumStr	JSpaceEParms.h	/^  std::string GetValueNumStr(const std::string &key,int num,bool optional=false,std::string valdef="");$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,std::string valdef=Ó)
GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpacePropProperty::GetValuePtr(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValuePtr(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValuePtr(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,std::string name) const
GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,unsigned idx) const
GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
GetValueSimple	JSpaceProperties.cpp	/^bool JSpacePropProperty::GetValueSimple(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
GetValueSimple	JSpaceProperties.h	/^  bool GetValueSimple(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
GetValueStr	JSpaceEParms.h	/^  std::string GetValueStr(const std::string &key,bool optional=false,std::string valdef=""){ return(GetValueNumStr(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,std::string valdef=Ó)
GetValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueStr(std::string name)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name) const
GetValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueStr(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
GetValueStr	JSpaceParts.h	/^  std::string GetValueStr(std::string name)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetValueStr	JSpaceParts.h	/^  std::string GetValueStr(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueStr(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
GetValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueStr(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
GetValueStr	JSpaceProperties.h	/^  std::string GetValueStr(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name) const
GetValueStr	JSpaceProperties.h	/^  std::string GetValueStr(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
GetValueUint	JSpaceParts.h	/^  unsigned GetValueUint(std::string name)const{  return(unsigned(GetValueInt(name)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
GetValueUint	JSpaceParts.h	/^  unsigned GetValueUint(unsigned idx)const{  return(unsigned(GetValueInt(idx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
GetValues	JMeanValues.h	/^  ullong GetValues()const{ return(Values); }$/;"	f	class:JMeanValue	access:public	signature:() const
GetValues	JRangeFilter.cpp	/^void JRangeFilter::GetValues(std::vector<unsigned> &values)const{$/;"	f	class:JRangeFilter	signature:(std::vector<unsigned> &values) const
GetValues	JRangeFilter.h	/^  void GetValues(std::vector<unsigned> &values)const;$/;"	p	class:JRangeFilter	access:public	signature:(std::vector<unsigned> &values) const
GetValuesAng	JMotionMov.h	/^  const double*   GetValuesAng()const{ return(ValuesAng); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
GetValuesAng	JMotionMov.h	/^  const double* GetValuesAng()const{ return(DataFile->GetValuesAng()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
GetValuesCount	JBinaryData.h	/^  unsigned GetValuesCount()const{ return(unsigned(Values.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
GetValuesCount	JSpaceParts.cpp	/^unsigned JSpacePartBlock::GetValuesCount()const{$/;"	f	class:JSpacePartBlock	signature:() const
GetValuesCount	JSpaceParts.h	/^  unsigned GetValuesCount()const;$/;"	p	class:JSpacePartBlock	access:public	signature:() const
GetValuesCount	JSpaceProperties.cpp	/^unsigned JSpaceProperties::GetValuesCount(std::string props)const{$/;"	f	class:JSpaceProperties	signature:(std::string props) const
GetValuesCount	JSpaceProperties.h	/^  unsigned GetValuesCount()const{ return(unsigned(Values.size())); }$/;"	f	class:JSpacePropProperty	access:public	signature:() const
GetValuesCount	JSpaceProperties.h	/^  unsigned GetValuesCount(std::string props)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props) const
GetValuesPos	JMotionMov.h	/^  const tdouble3* GetValuesPos()const{  return(DataFile->GetValuesPos());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
GetValuesPos	JMotionMov.h	/^  const tdouble3* GetValuesPos()const{ return(ValuesPos); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
GetVelOut	JPartsOut.h	/^  const tfloat3* GetVelOut(){ return(Vel); }$/;"	f	class:JPartsOut	access:public	signature:()
GetVelRhop	JPartsLoad4.h	/^  const tfloat4* GetVelRhop(){ return(VelRhop); }$/;"	f	class:JPartsLoad4	access:public	signature:()
GetVelini	JSpaceParts.h	/^  tdouble3 GetVelini()const{ return(Velini); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
GetVisco	JSphVisco.cpp	/^float JSphVisco::GetVisco(float timestep){$/;"	f	class:JSphVisco	signature:(float timestep)
GetVisco	JSphVisco.h	/^  float GetVisco(float timestep);$/;"	p	class:JSphVisco	access:public	signature:(float timestep)
GetViscoBoundFactor	JPartDataHead.h	/^  float   GetViscoBoundFactor()const{ return(ViscoBoundFactor); };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetViscoName	JSph.cpp	/^std::string JSph::GetViscoName(TpVisco tvisco){$/;"	f	class:JSph	signature:(TpVisco tvisco)
GetViscoName	JSph.h	/^  static std::string GetViscoName(TpVisco tvisco);$/;"	p	class:JSph	access:public	signature:(TpVisco tvisco)
GetViscoType	JPartDataHead.h	/^  TpVisco GetViscoType()       const{ return(ViscoType);        };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetViscoValue	JPartDataHead.h	/^  float   GetViscoValue()      const{ return(ViscoValue);       };$/;"	f	class:JPartDataHead	access:public	signature:() const
GetVisibleArraysCount	JBinaryData.cpp	/^unsigned JBinaryData::GetVisibleArraysCount()const{$/;"	f	class:JBinaryData	signature:() const
GetVisibleArraysCount	JBinaryData.h	/^  unsigned GetVisibleArraysCount()const;$/;"	p	class:JBinaryData	access:public	signature:() const
GetVisibleItemsCount	JBinaryData.cpp	/^unsigned JBinaryData::GetVisibleItemsCount()const{$/;"	f	class:JBinaryData	signature:() const
GetVisibleItemsCount	JBinaryData.h	/^  unsigned GetVisibleItemsCount()const;$/;"	p	class:JBinaryData	access:public	signature:() const
GetWeekDay	Functions.cpp	/^int GetWeekDay(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
GetWeekDay	Functions.h	/^int GetWeekDay(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
GetWeekNumber	Functions.cpp	/^int GetWeekNumber(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
GetWeekNumber	Functions.h	/^int GetWeekNumber(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
GetWeightedMean	JMeanValues.cpp	/^double JMeanMoving::GetWeightedMean()const{$/;"	f	class:JMeanMoving	signature:() const
GetWeightedMean	JMeanValues.h	/^  double GetWeightedMean()const;$/;"	p	class:JMeanMoving	access:public	signature:() const
GetWithoutExtension	Functions.cpp	/^std::string GetWithoutExtension(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
GetWithoutExtension	Functions.h	/^std::string GetWithoutExtension(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
GetYearDay	Functions.cpp	/^int GetYearDay(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
GetYearDay	Functions.h	/^int GetYearDay(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
Get_AppName	JPartDataBi4.h	/^  std::string Get_AppName()const{ return(GetData()->GetvText("AppName")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_ArrayCount	JPartDataBi4.h	/^  unsigned Get_ArrayCount(std::string name)const{ return(GetArray(name)->GetCount()); }$/;"	f	class:JPartDataBi4	access:public	signature:(std::string name) const
Get_AxisDiv	JPartDataBi4.h	/^  TpAxisDiv Get_AxisDiv()const{   return((TpAxisDiv)GetData()->GetvInt("AxisDiv")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_B	JPartDataBi4.h	/^  double Get_B()const{            return(GetData()->GetvDouble("B"));          }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseName	JPartDataBi4.h	/^  std::string Get_CaseName()const{return(GetData()->GetvText("CaseName",true,"")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseNfixed	JPartDataBi4.h	/^  ullong Get_CaseNfixed()const{   return(GetData()->GetvUllong("CaseNfixed"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseNfloat	JPartDataBi4.h	/^  ullong Get_CaseNfloat()const{   return(GetData()->GetvUllong("CaseNfloat"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseNfluid	JPartDataBi4.h	/^  ullong Get_CaseNfluid()const{   return(GetData()->GetvUllong("CaseNfluid"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseNmoving	JPartDataBi4.h	/^  ullong Get_CaseNmoving()const{  return(GetData()->GetvUllong("CaseNmoving")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CaseNp	JPartDataBi4.h	/^  ullong Get_CaseNp()const{       return(GetData()->GetvUllong("CaseNp"));      } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CasePosMax	JPartDataBi4.h	/^  tdouble3 Get_CasePosMax()const{ return(GetData()->GetvDouble3("CasePosMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_CasePosMin	JPartDataBi4.h	/^  tdouble3 Get_CasePosMin()const{ return(GetData()->GetvDouble3("CasePosMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Data2d	JPartDataBi4.h	/^  bool Get_Data2d()const{         return(GetData()->GetvBool("Data2d"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Data2dPosY	JPartDataBi4.h	/^  double Get_Data2dPosY()const{   return(GetData()->GetvDouble("Data2dPosY",true,DBL_MAX));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Date	JPartDataBi4.h	/^  std::string Get_Date()const{    return(GetData()->GetvText("Date"));    } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_DomainMax	JPartDataBi4.h	/^  tdouble3 Get_DomainMax()const{  return(GetPart()->GetvDouble3("DomainMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_DomainMin	JPartDataBi4.h	/^  tdouble3 Get_DomainMin()const{  return(GetPart()->GetvDouble3("DomainMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Dp	JPartDataBi4.h	/^  double Get_Dp()const{           return(GetData()->GetvDouble("Dp"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Gamma	JPartDataBi4.h	/^  double Get_Gamma()const{        return(GetData()->GetvDouble("Gamma"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_H	JPartDataBi4.h	/^  double Get_H()const{            return(GetData()->GetvDouble("H"));          }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Hvar	JPartDataBi4.h	/^  unsigned Get_Hvar (unsigned size,float    *data)const{ return(GetArray("Hvar",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
Get_IdMax	JPartDataBi4.h	/^  ullong Get_IdMax()const{        return(GetPart()->GetvUllong("IdMax"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Idp	JPartDataBi4.h	/^  unsigned Get_Idp  (unsigned size,unsigned *data)const{ return(GetArray("Idp" ,JBinaryDataDef::DatUint   )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,unsigned *data) const
Get_IdpSimple	JPartDataBi4.h	/^  bool Get_IdpSimple()const{ return(ArrayExists("Idp")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Idpd	JPartDataBi4.h	/^  unsigned Get_Idpd (unsigned size,ullong   *data)const{ return(GetArray("Idpd",JBinaryDataDef::DatUllong )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,ullong *data) const
Get_MapPosMax	JPartDataBi4.h	/^  tdouble3 Get_MapPosMax()const{  return(GetData()->GetvDouble3("MapPosMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_MapPosMin	JPartDataBi4.h	/^  tdouble3 Get_MapPosMin()const{  return(GetData()->GetvDouble3("MapPosMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Mass	JPartDataBi4.h	/^  unsigned Get_Mass (unsigned size,float    *data)const{ return(GetArray("Mass",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
Get_MassBound	JPartDataBi4.h	/^  double Get_MassBound()const{    return(GetData()->GetvDouble("MassBound"));  }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_MassFluid	JPartDataBi4.h	/^  double Get_MassFluid()const{    return(GetData()->GetvDouble("MassFluid"));  }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Nout	JPartDataBi4.h	/^  unsigned Get_Nout()const{       return(GetPart()->GetvUint("Nout"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_NpDynamic	JPartDataBi4.h	/^  bool Get_NpDynamic()const{      return(GetData()->GetvBool("NpDynamic",true,false));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_NpTotal	JPartDataBi4.h	/^  ullong Get_NpTotal()const{      return(GetPart()->GetvUllong("NpTotal"));    }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Npok	JPartDataBi4.h	/^  unsigned Get_Npok()const{       return(GetPart()->GetvUint("Npok"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Particles2dPosY	JPartDataBi4.cpp	/^double JPartDataBi4::Get_Particles2dPosY()const{$/;"	f	class:JPartDataBi4	signature:() const
Get_Particles2dPosY	JPartDataBi4.h	/^  double Get_Particles2dPosY()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
Get_PeriMode	JPartDataBi4.cpp	/^TpPeri JPartDataBi4::Get_PeriMode()const{$/;"	f	class:JPartDataBi4	signature:() const
Get_PeriMode	JPartDataBi4.h	/^  TpPeri Get_PeriMode()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
Get_PeriXinc	JPartDataBi4.h	/^  tdouble3 Get_PeriXinc()const{   return(GetData()->GetvDouble3("PeriXinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_PeriYinc	JPartDataBi4.h	/^  tdouble3 Get_PeriYinc()const{   return(GetData()->GetvDouble3("PeriYinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_PeriZinc	JPartDataBi4.h	/^  tdouble3 Get_PeriZinc()const{   return(GetData()->GetvDouble3("PeriZinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Pos	JPartDataBi4.h	/^  unsigned Get_Pos  (unsigned size,tfloat3  *data)const{ return(GetArray("Pos" ,JBinaryDataDef::DatFloat3 )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tfloat3 *data) const
Get_PosSimple	JPartDataBi4.h	/^  bool Get_PosSimple()const{ return(ArrayExists("Pos")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Posd	JPartDataBi4.h	/^  unsigned Get_Posd (unsigned size,tdouble3 *data)const{ return(GetArray("Posd",JBinaryDataDef::DatDouble3)->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tdouble3 *data) const
Get_ReuseIds	JPartDataBi4.h	/^  bool Get_ReuseIds()const{       return(GetData()->GetvBool("ReuseIds",true,false));   } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Rhop	JPartDataBi4.h	/^  unsigned Get_Rhop (unsigned size,float    *data)const{ return(GetArray("Rhop",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
Get_Rhop0	JPartDataBi4.h	/^  double Get_Rhop0()const{        return(GetData()->GetvDouble("Rhop0"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_RunCode	JPartDataBi4.h	/^  std::string Get_RunCode()const{ return(GetData()->GetvText("RunCode")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_RunTime	JPartDataBi4.h	/^  double Get_RunTime()const{      return(GetPart()->GetvDouble("RunTime"));    }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Splitting	JPartDataBi4.h	/^  bool Get_Splitting()const{      return(GetData()->GetvBool("Splitting",true,false));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Step	JPartDataBi4.h	/^  unsigned Get_Step()const{       return(GetPart()->GetvUint("Step"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_TimeStep	JPartDataBi4.h	/^  double Get_TimeStep()const{     return(GetPart()->GetvDouble("TimeStep"));   }$/;"	f	class:JPartDataBi4	access:public	signature:() const
Get_Vel	JPartDataBi4.h	/^  unsigned Get_Vel  (unsigned size,tfloat3  *data)const{ return(GetArray("Vel" ,JBinaryDataDef::DatFloat3 )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tfloat3 *data) const
GetvBool	JBinaryData.cpp	/^bool JBinaryData::GetvBool(const std::string &name,bool optional,bool valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,bool valdef) const
GetvBool	JBinaryData.h	/^  bool           GetvBool   (const std::string &name,bool optional=false,bool valdef=false)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,bool valdef=false) const
GetvChar	JBinaryData.cpp	/^char JBinaryData::GetvChar(const std::string &name,bool optional,char valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,char valdef) const
GetvChar	JBinaryData.h	/^  char           GetvChar   (const std::string &name,bool optional=false,char valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,char valdef=0) const
GetvDouble	JBinaryData.cpp	/^double JBinaryData::GetvDouble(const std::string &name,bool optional,double valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,double valdef) const
GetvDouble	JBinaryData.h	/^  double         GetvDouble (const std::string &name,bool optional=false,double valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,double valdef=0) const
GetvDouble3	JBinaryData.cpp	/^tdouble3 JBinaryData::GetvDouble3(const std::string &name,bool optional,tdouble3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tdouble3 valdef) const
GetvDouble3	JBinaryData.h	/^  tdouble3       GetvDouble3(const std::string &name,bool optional=false,tdouble3 valdef=TDouble3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tdouble3 valdef=TDouble3(0)) const
GetvFloat	JBinaryData.cpp	/^float JBinaryData::GetvFloat(const std::string &name,bool optional,float valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,float valdef) const
GetvFloat	JBinaryData.h	/^  float          GetvFloat  (const std::string &name,bool optional=false,float valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,float valdef=0) const
GetvFloat3	JBinaryData.cpp	/^tfloat3 JBinaryData::GetvFloat3(const std::string &name,bool optional,tfloat3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tfloat3 valdef) const
GetvFloat3	JBinaryData.h	/^  tfloat3        GetvFloat3 (const std::string &name,bool optional=false,tfloat3 valdef=TFloat3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tfloat3 valdef=TFloat3(0)) const
GetvInt	JBinaryData.cpp	/^int JBinaryData::GetvInt(const std::string &name,bool optional,int valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,int valdef) const
GetvInt	JBinaryData.h	/^  int            GetvInt    (const std::string &name,bool optional=false,int valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,int valdef=0) const
GetvInt3	JBinaryData.cpp	/^tint3 JBinaryData::GetvInt3(const std::string &name,bool optional,tint3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tint3 valdef) const
GetvInt3	JBinaryData.h	/^  tint3          GetvInt3   (const std::string &name,bool optional=false,tint3 valdef=TInt3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tint3 valdef=TInt3(0)) const
GetvLlong	JBinaryData.cpp	/^llong JBinaryData::GetvLlong(const std::string &name,bool optional,llong valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,llong valdef) const
GetvLlong	JBinaryData.h	/^  llong          GetvLlong  (const std::string &name,bool optional=false,llong valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,llong valdef=0) const
GetvShort	JBinaryData.cpp	/^short JBinaryData::GetvShort(const std::string &name,bool optional,short valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,short valdef) const
GetvShort	JBinaryData.h	/^  short          GetvShort  (const std::string &name,bool optional=false,short valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,short valdef=0) const
GetvText	JBinaryData.cpp	/^std::string JBinaryData::GetvText(const std::string &name,bool optional,std::string valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,std::string valdef) const
GetvText	JBinaryData.h	/^  std::string    GetvText   (const std::string &name,bool optional=false,std::string valdef="")const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,std::string valdef=Ó) const
GetvUchar	JBinaryData.cpp	/^unsigned char JBinaryData::GetvUchar(const std::string &name,bool optional,unsigned char valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned char valdef) const
GetvUchar	JBinaryData.h	/^  unsigned char  GetvUchar  (const std::string &name,bool optional=false,unsigned char valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned char valdef=0) const
GetvUint	JBinaryData.cpp	/^unsigned JBinaryData::GetvUint(const std::string &name,bool optional,unsigned valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned valdef) const
GetvUint	JBinaryData.h	/^  unsigned       GetvUint   (const std::string &name,bool optional=false,unsigned valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned valdef=0) const
GetvUint3	JBinaryData.cpp	/^tuint3 JBinaryData::GetvUint3(const std::string &name,bool optional,tuint3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tuint3 valdef) const
GetvUint3	JBinaryData.h	/^  tuint3         GetvUint3  (const std::string &name,bool optional=false,tuint3 valdef=TUint3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tuint3 valdef=TUint3(0)) const
GetvUllong	JBinaryData.cpp	/^ullong JBinaryData::GetvUllong(const std::string &name,bool optional,ullong valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,ullong valdef) const
GetvUllong	JBinaryData.h	/^  ullong         GetvUllong (const std::string &name,bool optional=false,ullong valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,ullong valdef=0) const
GetvUshort	JBinaryData.cpp	/^unsigned short JBinaryData::GetvUshort(const std::string &name,bool optional,unsigned short valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned short valdef) const
GetvUshort	JBinaryData.h	/^  unsigned short GetvUshort (const std::string &name,bool optional=false,unsigned short valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned short valdef=0) const
Gpu	JCfgRun.h	/^  bool Gpu;$/;"	m	class:JCfgRun	access:public
GpuCompute	JSphGpu.h	/^  unsigned GpuCompute;    \/\/\/<Compute capability: 10,11,12,20... $/;"	m	class:JSphGpu	access:protected
GpuFree	JCfgRun.h	/^  bool GpuFree;$/;"	m	class:JCfgRun	access:public
GpuGlobalMem	JSphGpu.h	/^  size_t GpuGlobalMem;    \/\/\/<Size of global memory in bytes.$/;"	m	class:JSphGpu	access:protected
GpuId	JCfgRun.h	/^  int GpuId;$/;"	m	class:JCfgRun	access:public
GpuName	JSphGpu.h	/^  std::string GpuName;    \/\/\/<Name of the selected GPU.$/;"	m	class:JSphGpu	access:protected
GpuParticlesSize	JSphGpu.h	/^  unsigned GpuParticlesSize;  \/\/\/<Number of particles for which GPU memory was allocated. | Numero de particulas para las cuales se reservo memoria en gpu.$/;"	m	class:JSphGpu	access:protected
GpuSelect	JSphGpu.h	/^  int GpuSelect;          \/\/\/<GPU Selection (-1:no selection). | Gpu seleccionada (-1:sin seleccion).$/;"	m	class:JSphGpu	access:protected
GpuSharedMem	JSphGpu.h	/^  unsigned GpuSharedMem;  \/\/\/<Size of shared memory for each block in bytes.$/;"	m	class:JSphGpu	access:protected
Gravity	JPartDataHead.h	/^  tfloat3 Gravity;$/;"	m	class:JPartDataHead	access:private
Gravity	JSpaceCtes.h	/^  tdouble3 Gravity;       \/\/\/<Gravity acceleration.$/;"	m	class:JSpaceCtes	access:private
Gravity	JSph.h	/^  tfloat3 Gravity;$/;"	m	class:JSph	access:protected
GravityEnabled	JSphAccInput.h	/^  bool GravityEnabled;       \/\/\/<Determines whether global gravity is enabled or disabled for this particle set SL$/;"	m	class:JSphAccInputMk	access:protected
H	JGaugeItem.h	/^  float H;$/;"	m	class:JGaugeItem	access:protected
H	JGaugeSystem.h	/^  float H;$/;"	m	class:JGaugeSystem	access:private
H	JPartDataHead.h	/^  double H;$/;"	m	class:JPartDataHead	access:private
H	JSpaceCtes.h	/^  double H;               \/\/\/<Smoothing length.$/;"	m	class:JSpaceCtes	access:private
H	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
H2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
HAuto	JSpaceCtes.h	/^  bool HAuto;             \/\/\/<Activates the automatic computation of H.$/;"	m	class:JSpaceCtes	access:private
HSwl	JSpaceCtes.h	/^  double HSwl;            \/\/\/<Maximum height of the volume of fluid.$/;"	m	class:JSpaceCtes	access:private
HSwlAuto	JSpaceCtes.h	/^  bool HSwlAuto;          \/\/\/<Activates the automatic computation of H_Swl.$/;"	m	class:JSpaceCtes	access:private
Hardware	JSph.h	/^  std::string Hardware;$/;"	m	class:JSph	access:protected
Hdiv	JCellDivCpu.h	/^  const unsigned Hdiv;          \/\/\/<Value for those divided in DosH. | Valor por el que se divide a DosH.$/;"	m	class:JCellDivCpu	access:protected
Hdiv	JCellDivGpu.h	/^  const unsigned Hdiv;          \/\/\/<Value for those divided in DosH. | Valor por el que se divide a DosH.$/;"	m	class:JCellDivGpu	access:protected
Hdiv	JGaugeItem.h	/^  int Hdiv;            \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JGaugeItem	access:protected
Hdiv	JGaugeSystem.h	/^  int Hdiv;               \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JGaugeSystem	access:private
Hdiv	JSph.h	/^  unsigned Hdiv;           \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JSph	access:protected
Head	JSaveCsv2.h	/^  std::string Head;$/;"	m	class:jcsv::JSaveCsv2	access:private
HeadBegin	JPartFloatBi4.h	/^  unsigned *HeadBegin;$/;"	m	class:JPartFloatBi4Load	access:private
HeadBegin	JPartFloatBi4.h	/^  unsigned *HeadBegin;$/;"	m	class:JPartFloatBi4Save	access:private
HeadCount	JPartFloatBi4.h	/^  unsigned *HeadCount;$/;"	m	class:JPartFloatBi4Load	access:private
HeadCount	JPartFloatBi4.h	/^  unsigned *HeadCount;$/;"	m	class:JPartFloatBi4Save	access:private
HeadLineEmpty	JSaveCsv2.h	/^  bool HeadLineEmpty;$/;"	m	class:jcsv::JSaveCsv2	access:private
HeadMass	JPartFloatBi4.h	/^  float *HeadMass;$/;"	m	class:JPartFloatBi4Load	access:private
HeadMass	JPartFloatBi4.h	/^  float *HeadMass;$/;"	m	class:JPartFloatBi4Save	access:private
HeadMkbound	JPartFloatBi4.h	/^  word *HeadMkbound;$/;"	m	class:JPartFloatBi4Load	access:private
HeadMkbound	JPartFloatBi4.h	/^  word *HeadMkbound;$/;"	m	class:JPartFloatBi4Save	access:private
HeadRadius	JPartFloatBi4.h	/^  float *HeadRadius;$/;"	m	class:JPartFloatBi4Load	access:private
HeadRadius	JPartFloatBi4.h	/^  float *HeadRadius;$/;"	m	class:JPartFloatBi4Save	access:private
Height	JGaugeItem.h	/^  double Height;$/;"	m	class:JGaugeMaxZ	access:protected
Hide	JBinaryData.h	/^  bool Hide;$/;"	m	class:JBinaryDataArray	access:private
HideAll	JBinaryData.h	/^  bool HideAll;          \/\/\/<Ignora el item en determinados metodos como SaveData(). It ignores the item in certain functions as SaveData().$/;"	m	class:JBinaryData	access:private
HideValues	JBinaryData.h	/^  bool HideValues;       \/\/\/<Ignora los Values en determinados metodos como SaveData(). It ignores the values in certain functions as SaveData().$/;"	m	class:JBinaryData	access:private
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(double **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(float **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(int **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(int2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int2 **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(tdouble2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(tdouble2 **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(tfloat4 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(tfloat4 **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(unsigned **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(unsigned **ptr,unsigned count)
HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(word **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(word **ptr,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(double   **,unsigned count);$/;"	p	namespace:fcuda	signature:(double **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(float    **,unsigned count);$/;"	p	namespace:fcuda	signature:(float **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(int      **,unsigned count);$/;"	p	namespace:fcuda	signature:(int **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(int2     **,unsigned count);$/;"	p	namespace:fcuda	signature:(int2 **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(tdouble2 **,unsigned count);$/;"	p	namespace:fcuda	signature:(tdouble2 **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(tfloat4  **,unsigned count);$/;"	p	namespace:fcuda	signature:(tfloat4 **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(unsigned **,unsigned count);$/;"	p	namespace:fcuda	signature:(unsigned **,unsigned count)
HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(word     **,unsigned count);$/;"	p	namespace:fcuda	signature:(word **,unsigned count)
INT64_SUPPORTED	randomc.h	104;"	d
INT64_SUPPORTED	randomc.h	115;"	d
INT64_SUPPORTED	randomc.h	122;"	d
INTERSTEP_None	Types.h	/^  INTERSTEP_None=0,         $/;"	e	enum:__anon51
INTERSTEP_SymCorrector	Types.h	/^  INTERSTEP_SymCorrector=3  \/\/\/<Interaction to compute forces using the Symplectic algorithm (corrector step). $/;"	e	enum:__anon51
INTERSTEP_SymPredictor	Types.h	/^  INTERSTEP_SymPredictor=2, \/\/\/<Interaction to compute forces using the Symplectic algorithm (predictor step). $/;"	e	enum:__anon51
INTERSTEP_Verlet	Types.h	/^  INTERSTEP_Verlet=1,       \/\/\/<Interaction to compute forces using the Verlet algorithm.$/;"	e	enum:__anon51
IRandom	randomc.cpp	/^int CRandomMersenne::IRandom(int min, int max) {$/;"	f	class:CRandomMersenne	signature:(int min, int max)
IRandom	randomc.h	/^   int IRandom (int min, int max);     \/\/ Output random integer$/;"	p	class:CRandomMersenne	access:public	signature:(int min, int max)
IRandom	randomc.h	/^   int IRandom(int min, int max);      \/\/ Get integer random number in desired interval$/;"	p	class:CRandomMother	access:public	signature:(int min, int max)
IRandomX	randomc.cpp	/^int CRandomMersenne::IRandomX(int min, int max) {$/;"	f	class:CRandomMersenne	signature:(int min, int max)
IRandomX	randomc.h	/^   int IRandomX(int min, int max);     \/\/ Output random integer, exact$/;"	p	class:CRandomMersenne	access:public	signature:(int min, int max)
IT_FluidVel	JSphInitialize.h	/^  typedef enum{ IT_FluidVel=1 }TpInitialize; $/;"	e	enum:JSphInitializeOp::__anon34
Id	JMotionMov.h	/^  const unsigned Id;$/;"	m	class:JMotionMov	access:public
Id	JMotionObj.h	/^  const unsigned Id; \/\/-Identificador de objeto$/;"	m	class:JMotionObj	access:public
IdBegin	JGaugeItem.h	/^  unsigned IdBegin;$/;"	m	class:JGaugeForce	access:protected
IdMax	JSph.h	/^  unsigned IdMax;          \/\/\/<It is the maximum Id used.$/;"	m	class:JSph	access:protected
IdToMk	JSpaceParts.h	/^  inline word IdToMk(unsigned id)const{$/;"	f	class:JSpacePartsGetMk	access:public	signature:(unsigned id) const
Identify	tinyxml.h	/^    TiXmlNode* Identify( const char* start, TiXmlEncoding encoding );$/;"	p	class:TiXmlNode	access:protected	signature:( const char* start, TiXmlEncoding encoding )
Identify	tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
Idp	JPartsLoad4.h	/^  unsigned *Idp;$/;"	m	class:JPartsLoad4	access:protected
Idp	JPartsOut.h	/^  unsigned *Idp;$/;"	m	class:JPartsOut	access:protected
Idp	JSphGpu.h	/^  unsigned *Idp;      \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphGpu	access:protected
Idpc	JSphCpu.h	/^  unsigned *Idpc;    \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphCpu	access:protected
Idpg	JSphGpu.h	/^  unsigned *Idpg;   \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphGpu	access:protected
Idx	JGaugeItem.h	/^  const unsigned Idx;$/;"	m	class:JGaugeItem	access:public
InArray	JBinaryData.cpp	/^void JBinaryData::InArray(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InArray	JBinaryData.h	/^  void InArray(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InArrayBase	JBinaryData.cpp	/^void JBinaryData::InArrayBase(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InArrayBase	JBinaryData.h	/^  void InArrayBase(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InArrayData	JBinaryData.cpp	/^void JBinaryData::InArrayData(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InArrayData	JBinaryData.h	/^  void InArrayData(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
InBool	JBinaryData.h	/^  void InBool   (unsigned &count,unsigned size,byte *ptr,bool v)const{            int vv=(v? 1: 0); InInt(count,size,ptr,vv);               }  \/\/\/<Introduce bool en ptr. Introduces bool in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool v) const
InChar	JBinaryData.h	/^  void InChar   (unsigned &count,unsigned size,byte *ptr,char v)const{            InData(count,size,ptr,(byte*)&v,sizeof(char));            }  \/\/\/<Introduce char en ptr. Introduces char in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,char v) const
InData	JBinaryData.cpp	/^void JBinaryData::InData(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat) const
InData	JBinaryData.h	/^  void InData   (unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat) const
InDouble	JBinaryData.h	/^  void InDouble (unsigned &count,unsigned size,byte *ptr,double v)const{          InData(count,size,ptr,(byte*)&v,sizeof(double));          }  \/\/\/<Introduce double en ptr. Introduces double in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,double v) const
InDouble3	JBinaryData.h	/^  void InDouble3(unsigned &count,unsigned size,byte *ptr,tdouble3 v)const{        InData(count,size,ptr,(byte*)&v,sizeof(tdouble3));        }  \/\/\/<Introduce tdouble3 en ptr. Introduces tdouble3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tdouble3 v) const
InFloat	JBinaryData.h	/^  void InFloat  (unsigned &count,unsigned size,byte *ptr,float v)const{           InData(count,size,ptr,(byte*)&v,sizeof(float));           }  \/\/\/<Introduce float en ptr. Introduces float in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,float v) const
InFloat3	JBinaryData.h	/^  void InFloat3 (unsigned &count,unsigned size,byte *ptr,tfloat3 v)const{         InData(count,size,ptr,(byte*)&v,sizeof(tfloat3));         }  \/\/\/<Introduce tfloat3 en ptr. Introduces tfloat3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tfloat3 v) const
InInt	JBinaryData.h	/^  void InInt    (unsigned &count,unsigned size,byte *ptr,int v)const{             InData(count,size,ptr,(byte*)&v,sizeof(int));             }  \/\/\/<Introduce int en ptr. Introduces int in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,int v) const
InInt3	JBinaryData.h	/^  void InInt3   (unsigned &count,unsigned size,byte *ptr,tint3 v)const{           InData(count,size,ptr,(byte*)&v,sizeof(tint3));           }  \/\/\/<Introduce tint3 en ptr. Introduces tint3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tint3 v) const
InItem	JBinaryData.cpp	/^void JBinaryData::InItem(unsigned &count,unsigned size,byte *ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
InItem	JBinaryData.h	/^  void InItem(unsigned &count,unsigned size,byte *ptr,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
InItemBase	JBinaryData.cpp	/^void JBinaryData::InItemBase(unsigned &count,unsigned size,byte *ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
InItemBase	JBinaryData.h	/^  void InItemBase(unsigned &count,unsigned size,byte *ptr,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
InLlong	JBinaryData.h	/^  void InLlong  (unsigned &count,unsigned size,byte *ptr,llong v)const{           InData(count,size,ptr,(byte*)&v,sizeof(llong));           }  \/\/\/<Introduce long long en ptr. Introduces long long in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,llong v) const
InShort	JBinaryData.h	/^  void InShort  (unsigned &count,unsigned size,byte *ptr,short v)const{           InData(count,size,ptr,(byte*)&v,sizeof(short));           }  \/\/\/<Introduce short en ptr. Introduces short in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,short v) const
InStr	JBinaryData.cpp	/^void JBinaryData::InStr(unsigned &count,unsigned size,byte *ptr,const std::string &cad)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const std::string &cad) const
InStr	JBinaryData.h	/^  void InStr    (unsigned &count,unsigned size,byte *ptr,const std::string &cad)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const std::string &cad) const
InUchar	JBinaryData.h	/^  void InUchar  (unsigned &count,unsigned size,byte *ptr,unsigned char v)const{   InData(count,size,ptr,(byte*)&v,sizeof(unsigned char));   }  \/\/\/<Introduce unsigned char en ptr. Introduces unsigned char in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned char v) const
InUint	JBinaryData.h	/^  void InUint   (unsigned &count,unsigned size,byte *ptr,unsigned v)const{        InData(count,size,ptr,(byte*)&v,sizeof(unsigned));        }  \/\/\/<Introduce unsigned en ptr. Introduces unsigned in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned v) const
InUint3	JBinaryData.h	/^  void InUint3  (unsigned &count,unsigned size,byte *ptr,tuint3 v)const{          InData(count,size,ptr,(byte*)&v,sizeof(tuint3));          }  \/\/\/<Introduce tuint3 en ptr. Introduces tuint3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tuint3 v) const
InUllong	JBinaryData.h	/^  void InUllong (unsigned &count,unsigned size,byte *ptr,ullong v)const{          InData(count,size,ptr,(byte*)&v,sizeof(ullong));          }  \/\/\/<Introduce unsigned long long en ptr. Introduces unsigned long in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,ullong v) const
InUshort	JBinaryData.h	/^  void InUshort (unsigned &count,unsigned size,byte *ptr,unsigned short v)const{  InData(count,size,ptr,(byte*)&v,sizeof(unsigned short));  }  \/\/\/<Introduce unsigned short en ptr. Introduces unsigned short in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned short v) const
InValue	JBinaryData.cpp	/^void JBinaryData::InValue(unsigned &count,unsigned size,byte *ptr,const StValue &v)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const StValue &v) const
InValue	JBinaryData.h	/^  void InValue(unsigned &count,unsigned size,byte *ptr,const StValue &v)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const StValue &v) const
IncreaseNp	JCellDivCpu.h	/^  unsigned IncreaseNp; \/\/\/<Possible number of particles to be created in the near future.$/;"	m	class:JCellDivCpu	access:protected
IncreaseNp	JCellDivGpu.h	/^  unsigned IncreaseNp; \/\/\/<Possible number of particles to be created in the near future.$/;"	m	class:JCellDivGpu	access:protected
Indent	tinyxml.h	/^    const char* Indent()                            { return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
Index	JRadixSort.h	/^  unsigned *Index;$/;"	m	class:JRadixSort	access:private
IndexCreate	JRadixSort.cpp	/^void JRadixSort::IndexCreate(){$/;"	f	class:JRadixSort	signature:()
IndexCreate	JRadixSort.h	/^  void IndexCreate();$/;"	p	class:JRadixSort	access:private	signature:()
Inertia	JSpaceParts.h	/^  tmatrix3d Inertia;$/;"	m	class:JSpacePartBlock_Floating	access:private
InfoData	JBlockSizeAuto.h	/^  float *InfoData;             \/\/\/< Buffer to store values [InfoDataSizeLine*InfoDataLines].$/;"	m	class:JBlockSizeAutoKer	access:protected
InfoDataCount	JBlockSizeAuto.h	/^  unsigned InfoDataCount;      \/\/\/< Number of used lines.$/;"	m	class:JBlockSizeAutoKer	access:protected
InfoDataLines	JBlockSizeAuto.h	/^  unsigned InfoDataLines;      \/\/\/< Number of lines for which memory was allocated.$/;"	m	class:JBlockSizeAutoKer	access:protected
InfoDataSaved	JBlockSizeAuto.h	/^  bool InfoDataSaved;          \/\/\/< Indicates if data was saved.$/;"	m	class:JBlockSizeAutoKer	access:protected
InfoDataSizeLine	JBlockSizeAuto.h	/^  unsigned InfoDataSizeLine;   \/\/\/< Number of floats per line.$/;"	m	class:JBlockSizeAutoKer	access:protected
Init	JDsphConfig.cpp	/^void JDsphConfig::Init(std::string path){$/;"	f	class:JDsphConfig	signature:(std::string path)
Init	JDsphConfig.h	/^  void Init(std::string path);$/;"	p	class:JDsphConfig	access:public	signature:(std::string path)
Init	JLog2.cpp	/^void JLog2::Init(std::string fname,bool mpirun,int mpirank,int mpilaunch){$/;"	f	class:JLog2	signature:(std::string fname,bool mpirun,int mpirank,int mpilaunch)
Init	JLog2.h	/^  void Init(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0);$/;"	p	class:JLog2	access:public	signature:(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0)
Init	JMeanValues.cpp	/^void JMeanMoving::Init(unsigned size,bool weighted){ $/;"	f	class:JMeanMoving	signature:(unsigned size,bool weighted)
Init	JMeanValues.h	/^  void Init(unsigned size,bool weighted);$/;"	p	class:JMeanMoving	access:protected	signature:(unsigned size,bool weighted)
Init	JSphAccInput.cpp	/^void JSphAccInput::Init(double tmax){$/;"	f	class:JSphAccInput	signature:(double tmax)
Init	JSphAccInput.cpp	/^void JSphAccInputMk::Init(double tmax){$/;"	f	class:JSphAccInputMk	signature:(double tmax)
Init	JSphAccInput.h	/^  void Init(double tmax);$/;"	p	class:JSphAccInput	access:public	signature:(double tmax)
Init	JSphAccInput.h	/^  void Init(double tmax);$/;"	p	class:JSphAccInputMk	access:public	signature:(double tmax)
Init	JSphMotion.cpp	/^void JSphMotion::Init(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata){$/;"	f	class:JSphMotion	signature:(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata)
Init	JSphMotion.h	/^  void Init(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata);$/;"	p	class:JSphMotion	access:public	signature:(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata)
Init	JWaveGen.h	/^  void Init(JGaugeSystem *gaugesystem,const JSphMk *mkinfo,double timemax,tfloat3 gravity);$/;"	p	class:JWaveGen	access:public	signature:(JGaugeSystem *gaugesystem,const JSphMk *mkinfo,double timemax,tfloat3 gravity)
Init0	randomc.cpp	/^void CRandomMersenne::Init0(int seed) {$/;"	f	class:CRandomMersenne	signature:(int seed)
Init0	randomc.h	/^   void Init0(int seed);               \/\/ Basic initialization procedure$/;"	p	class:CRandomMersenne	access:private	signature:(int seed)
InitArray	JSphGpu_ker.cu	/^void InitArray(unsigned n,float3 *v,tfloat3 value){$/;"	f	namespace:cusph	signature:(unsigned n,float3 *v,tfloat3 value)
InitArray	JSphGpu_ker.h	/^void InitArray(unsigned n,float3 *v,tfloat3 value);$/;"	p	namespace:cusph	signature:(unsigned n,float3 *v,tfloat3 value)
InitData32	JRadixSort.h	/^  unsigned *InitData32;$/;"	m	class:JRadixSort	access:private
InitData64	JRadixSort.h	/^  ullong *InitData64;$/;"	m	class:JRadixSort	access:private
InitFloating	JSphCpu.cpp	/^void JSphCpu::InitFloating(){$/;"	f	class:JSphCpu	signature:()
InitFloating	JSphCpu.h	/^  void InitFloating();$/;"	p	class:JSphCpu	access:protected	signature:()
InitFloating	JSphGpu.cpp	/^void JSphGpu::InitFloating(){$/;"	f	class:JSphGpu	signature:()
InitFloating	JSphGpu.h	/^  void InitFloating();$/;"	p	class:JSphGpu	access:protected	signature:()
InitFmt	JSaveCsv2.cpp	/^void JSaveCsv2::InitFmt(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
InitFmt	JSaveCsv2.h	/^  void InitFmt();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
InitRun	JSph.cpp	/^void JSph::InitRun(unsigned np,const unsigned *idp,const tdouble3 *pos){$/;"	f	class:JSph	signature:(unsigned np,const unsigned *idp,const tdouble3 *pos)
InitRun	JSph.h	/^  void InitRun(unsigned np,const unsigned *idp,const tdouble3 *pos);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const unsigned *idp,const tdouble3 *pos)
InitRunCpu	JSphCpu.cpp	/^void JSphCpu::InitRunCpu(){$/;"	f	class:JSphCpu	signature:()
InitRunCpu	JSphCpu.h	/^  void InitRunCpu();$/;"	p	class:JSphCpu	access:protected	signature:()
InitRunGpu	JSphGpu.cpp	/^void JSphGpu::InitRunGpu(){$/;"	f	class:JSphGpu	signature:()
InitRunGpu	JSphGpu.h	/^  void InitRunGpu();$/;"	p	class:JSphGpu	access:protected	signature:()
InitSimple	JMeanValues.cpp	/^void JMeanMoving::InitSimple(unsigned size){ $/;"	f	class:JMeanMoving	signature:(unsigned size)
InitSimple	JMeanValues.h	/^  void InitSimple(unsigned size);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size)
InitVars	JSph.cpp	/^void JSph::InitVars(){$/;"	f	class:JSph	signature:()
InitVars	JSph.h	/^  void InitVars();$/;"	p	class:JSph	access:private	signature:()
InitVars	JSphCpu.cpp	/^void JSphCpu::InitVars(){$/;"	f	class:JSphCpu	signature:()
InitVars	JSphCpu.h	/^  void InitVars();$/;"	p	class:JSphCpu	access:protected	signature:()
InitVars	JSphGpu.cpp	/^void JSphGpu::InitVars(){$/;"	f	class:JSphGpu	signature:()
InitVars	JSphGpu.h	/^  void InitVars();$/;"	p	class:JSphGpu	access:protected	signature:()
InitWeightedExponential	JMeanValues.cpp	/^void JMeanMoving::InitWeightedExponential(unsigned size,float fac){ $/;"	f	class:JMeanMoving	signature:(unsigned size,float fac)
InitWeightedExponential	JMeanValues.h	/^  void InitWeightedExponential(unsigned size,float fac=1);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size,float fac=1)
InitWeightedLinear	JMeanValues.cpp	/^void JMeanMoving::InitWeightedLinear(unsigned size){ $/;"	f	class:JMeanMoving	signature:(unsigned size)
InitWeightedLinear	JMeanValues.h	/^  void InitWeightedLinear(unsigned size);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size)
InitialCenter	JGaugeItem.h	/^  tfloat3 InitialCenter;$/;"	m	class:JGaugeForce	access:protected
InitialP1	JMotionMov.h	/^  const tdouble3 InitialP1;$/;"	m	class:JMotionAxis	access:public
InitialP2	JMotionMov.h	/^  const tdouble3 InitialP2;$/;"	m	class:JMotionAxis	access:public
InitialSaved	JPartFloatBi4.h	/^  bool InitialSaved;     \/\/\/<Indica si se grabo la informacion de cabecera. Indicates if header information is recorded.$/;"	m	class:JPartFloatBi4Save	access:private
InitialSaved	JPartOutBi4Save.h	/^  bool InitialSaved;     \/\/\/<Indica si se grabo la informacion de cabecera. Indicates if header information is recorded.$/;"	m	class:JPartOutBi4Save	access:private
InitializeInfo	JSph.h	/^  std::vector<std::string> InitializeInfo; \/\/\/<Stores information about initialize configuration applied.$/;"	m	class:JSph	access:protected
Inputs	JSphAccInput.h	/^  std::vector<JSphAccInputMk*> Inputs;$/;"	m	class:JSphAccInput	access:protected
InsertAfterChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertAfterChild	tinyxml.h	/^    TiXmlNode* InsertAfterChild(  TiXmlNode* afterThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertBeforeChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertBeforeChild	tinyxml.h	/^    TiXmlNode* InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
InsertEndChild	tinyxml.h	/^    TiXmlNode* InsertEndChild( const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode& addThis )
Int32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
Int3RangeStr	Functions.h	/^inline std::string Int3RangeStr(const tint3 &v,const tint3 &v2){ return(std::string("(")+Int3Str(v)+")-("+Int3Str(v2)+")"); }$/;"	f	namespace:fun	signature:(const tint3 &v,const tint3 &v2)
Int3Str	Functions.cpp	/^std::string Int3Str(const tint3 &v){$/;"	f	namespace:fun	signature:(const tint3 &v)
Int3Str	Functions.h	/^std::string Int3Str(const tint3 &v);$/;"	p	namespace:fun	signature:(const tint3 &v)
Int4	JGauge_ker.h	/^inline int4 Int4(const tint4& v){ int4 p={v.x,v.y,v.z,v.w}; return(p); }$/;"	f	namespace:cugauge	signature:(const tint4& v)
IntStr	Functions.cpp	/^std::string IntStr(int v){$/;"	f	namespace:fun	signature:(int v)
IntStr	Functions.h	/^std::string IntStr(int v);$/;"	p	namespace:fun	signature:(int v)
IntStrFill	Functions.cpp	/^std::string IntStrFill(int v,int vmax){$/;"	f	namespace:fun	signature:(int v,int vmax)
IntStrFill	Functions.h	/^std::string IntStrFill(int v,int vmax);$/;"	p	namespace:fun	signature:(int v,int vmax)
IntValue	tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
IntValue	tinyxml.h	/^    int             IntValue() const;                                   \/\/\/< Return the value of this attribute, converted to an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
InterStep	JSph.h	/^  TpInterStep InterStep;$/;"	m	class:JSph	access:protected
InteractionForcesBound	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> void JSphCpu::InteractionForcesBound$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pinit,tint4 nc,int hdiv,unsigned cellinitial ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,float *ar) const
InteractionForcesBound	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode> void InteractionForcesBound$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,tint4 nc,int hdiv,unsigned cellinitial ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhopp,const typecode *code,const unsigned *id ,float &viscdt,float *ar) const
InteractionForcesDEM	JSphCpu.cpp	/^template<bool psingle> void JSphCpu::InteractionForcesDEM$/;"	f	class:JSphCpu	signature:(unsigned nfloat,tint4 nc,int hdiv,unsigned cellfluid ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const StDemData* demdata ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,tfloat3 *ace) const
InteractionForcesDEM	JSphCpu.h	/^  template<bool psingle> void InteractionForcesDEM$/;"	p	class:JSphCpu	access:protected	signature:(unsigned nfloat,tint4 nc,int hdiv,unsigned cellfluid ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const StDemData* demobjs ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,tfloat3 *ace) const
InteractionForcesFluid	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void JSphCpu::InteractionForcesFluid$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pinit,tint4 nc,int hdiv,unsigned cellinitial,float visco ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tsymatrix3f* tau,tsymatrix3f* gradvel ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float *ar,tfloat3 *ace,float *delta ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
InteractionForcesFluid	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void InteractionForcesFluid$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,tint4 nc,int hdiv,unsigned cellfluid,float visco ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tsymatrix3f* tau,tsymatrix3f* gradvel ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float *ar,tfloat3 *ace,float *delta ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
InteractionSimple_Forces	JSphCpu.cpp	/^void JSphCpu::InteractionSimple_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tfloat3 *pspos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
InteractionSimple_Forces	JSphCpu.h	/^  void InteractionSimple_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tfloat3 *pspos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
Interaction_Forces	JSphCpu.cpp	/^void JSphCpu::Interaction_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
Interaction_Forces	JSphCpu.h	/^  void Interaction_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
Interaction_Forces	JSphCpuSingle.cpp	/^void JSphCpuSingle::Interaction_Forces(TpInterStep interstep){$/;"	f	class:JSphCpuSingle	signature:(TpInterStep interstep)
Interaction_Forces	JSphCpuSingle.h	/^  void Interaction_Forces(TpInterStep tinterstep);$/;"	p	class:JSphCpuSingle	access:protected	signature:(TpInterStep tinterstep)
Interaction_Forces	JSphGpuSingle.cpp	/^void JSphGpuSingle::Interaction_Forces(TpInterStep interstep){$/;"	f	class:JSphGpuSingle	signature:(TpInterStep interstep)
Interaction_Forces	JSphGpuSingle.h	/^  void Interaction_Forces(TpInterStep interstep);$/;"	p	class:JSphGpuSingle	access:protected	signature:(TpInterStep interstep)
Interaction_Forces	JSphGpu_ker.cu	/^void Interaction_Forces(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps$/;"	f	namespace:cusph	signature:(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps ,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
Interaction_Forces	JSphGpu_ker.h	/^void Interaction_Forces(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps$/;"	p	namespace:cusph	signature:(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps ,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
Interaction_ForcesDem	JSphGpu_ker.cu	/^void Interaction_ForcesDem(bool psingle,TpCellMode cellmode,unsigned bsize$/;"	f	namespace:cusph	signature:(bool psingle,TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
Interaction_ForcesDem	JSphGpu_ker.h	/^void Interaction_ForcesDem(bool psingle,TpCellMode cellmode,unsigned bsize$/;"	p	namespace:cusph	signature:(bool psingle,TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
Interaction_ForcesDemT	JSphGpu_ker.cu	/^template<bool psingle> void Interaction_ForcesDemT$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
Interaction_ForcesDemT_KerInfo	JSphGpu_ker.cu	/^template<bool psingle> void Interaction_ForcesDemT_KerInfo(StKerInfo *kerinfo)$/;"	f	namespace:cusph	signature:(StKerInfo *kerinfo)
Interaction_ForcesT	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void JSphCpu::Interaction_ForcesT$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
Interaction_ForcesT	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
Interaction_ForcesT	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
Interaction_ForcesT_BsAuto	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT_BsAuto$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,JBlockSizeAuto *bsauto)
Interaction_ForcesT_KerInfo	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT_KerInfo$/;"	f	namespace:cusph	signature:(StKerInfo *kerinfo)
Interaction_Forces_t1	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> void Interaction_Forces_t1(bool lamsps,TpDeltaSph tdelta,TpCellMode cellmode$/;"	f	namespace:cusph	signature:(bool lamsps,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
Interaction_Forces_t2	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps> void Interaction_Forces_t2(TpDeltaSph tdelta,TpCellMode cellmode$/;"	f	namespace:cusph	signature:(TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
Interaction_GaugeForce	JGauge_ker.cu	/^void Interaction_GaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell,tdouble3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
Interaction_GaugeForce	JGauge_ker.h	/^void Interaction_GaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	p	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell,tdouble3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
Interaction_GaugeMaxz	JGauge_ker.cu	/^void Interaction_GaugeMaxz(tdouble3 point0,float maxdist2$/;"	f	namespace:cugauge	signature:(tdouble3 point0,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
Interaction_GaugeMaxz	JGauge_ker.h	/^void Interaction_GaugeMaxz(tdouble3 point0,float maxdist2$/;"	p	namespace:cugauge	signature:(tdouble3 point0,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
Interaction_GaugeSwl	JGauge_ker.cu	/^void Interaction_GaugeSwl(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit$/;"	f	namespace:cugauge	signature:(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,tdouble3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
Interaction_GaugeSwl	JGauge_ker.h	/^void Interaction_GaugeSwl(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit$/;"	p	namespace:cugauge	signature:(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,tdouble3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
Interaction_GaugeVel	JGauge_ker.cu	/^void Interaction_GaugeVel(tdouble3 ptpos$/;"	f	namespace:cugauge	signature:(tdouble3 ptpos ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,tdouble3 domposmin,float scell,float fourh2,float h,float massf)
Interaction_GaugeVel	JGauge_ker.h	/^void Interaction_GaugeVel(tdouble3 ptpos$/;"	p	namespace:cugauge	signature:(tdouble3 ptpos ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,tdouble3 domposmin,float scell,float fourh2,float h,float massf)
InterpolationBilinear	FunctionsMath.h	/^inline double InterpolationBilinear(double x,double y,double px,double py,double dx,double dy,double vxy,double vxyy,double vxxy,double vxxyy){$/;"	f	namespace:fmath	signature:(double x,double y,double px,double py,double dx,double dy,double vxy,double vxyy,double vxxy,double vxxyy)
InterpolationLinear	FunctionsMath.h	/^inline double InterpolationLinear(double x,double x0,double x1,double v0,double v1){$/;"	f	namespace:fmath	signature:(double x,double x0,double x1,double v0,double v1)
InterpolationLinear	FunctionsMath.h	/^inline float InterpolationLinear(float x,float x0,float x1,float v0,float v1){$/;"	f	namespace:fmath	signature:(float x,float x0,float x1,float v0,float v1)
Intersec3Planes	FunctionsMath.cpp	/^tdouble3 Intersec3Planes(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3)
Intersec3Planes	FunctionsMath.cpp	/^tfloat3 Intersec3Planes(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3)
Intersec3Planes	FunctionsMath.h	/^tdouble3 Intersec3Planes(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3);$/;"	p	namespace:fmath	signature:(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3)
Intersec3Planes	FunctionsMath.h	/^tfloat3 Intersec3Planes(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3);$/;"	p	namespace:fmath	signature:(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3)
IntersecPlaneLine	FunctionsMath.cpp	/^tdouble3 IntersecPlaneLine(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2)
IntersecPlaneLine	FunctionsMath.cpp	/^tfloat3 IntersecPlaneLine(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2){$/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2)
IntersecPlaneLine	FunctionsMath.h	/^tdouble3 IntersecPlaneLine(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2);$/;"	p	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2)
IntersecPlaneLine	FunctionsMath.h	/^tfloat3 IntersecPlaneLine(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2);$/;"	p	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2)
InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3d InverseMatrix3x3(const tmatrix3d &d){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d)
InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3d InverseMatrix3x3(const tmatrix3d &d,const double det){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d,const double det)
InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3f InverseMatrix3x3(const tmatrix3f &d){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d)
InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3f InverseMatrix3x3(const tmatrix3f &d,const float det){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d,const float det)
InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d InverseMatrix3x3(const tmatrix3d &d){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d)
InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d InverseMatrix3x3(const tmatrix3d &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d,const double det)
InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3(const tmatrix3f &d,const float det){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d,const float det)
InverseMatrix3x3dbl	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3dbl(const tmatrix3f &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d,const double det)
InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4d InverseMatrix4x4(const tmatrix4d &d){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d)
InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4d InverseMatrix4x4(const tmatrix4d &d,const double det){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d,const double det)
InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4f InverseMatrix4x4(const tmatrix4f &d){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d)
InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4f InverseMatrix4x4(const tmatrix4f &d,const float det){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d,const float det)
InverseMatrix4x4	FunctionsMath_ker.cu	/^__device__ tmatrix4d InverseMatrix4x4(const tmatrix4d &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix4d &d,const double det)
InverseMatrix4x4	FunctionsMath_ker.cu	/^__device__ tmatrix4f InverseMatrix4x4(const tmatrix4f &d,const float det){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d,const float det)
InverseMatrix4x4dbl	FunctionsMath_ker.cu	/^__device__ tmatrix4f InverseMatrix4x4dbl(const tmatrix4f &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d,const double det)
IsActive	JBlockSizeAuto.h	/^  bool IsActive(unsigned ct)const{ return(int(ct)<BsNum && BsActive[ct]); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct) const
IsAlpha	tinyxml.h	/^    static int IsAlpha( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
IsAlpha	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsAlphaNum	tinyxml.h	/^    static int IsAlphaNum( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
IsAlphaNum	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsBound	JParticlesDef.h	/^inline bool IsBound(const TpParticles type){ return(type<TpPartFluid); }$/;"	f	signature:(const TpParticles type)
IsFluid	JParticlesDef.h	/^inline bool IsFluid(const TpParticles type){ return(type==TpPartFluid); }$/;"	f	signature:(const TpParticles type)
IsGPUCapableP2P	FunctionsCuda.cpp	/^inline bool IsGPUCapableP2P(const cudaDeviceProp *pProp){$/;"	f	namespace:fcuda	signature:(const cudaDeviceProp *pProp)
IsInfinity	Functions.cpp	/^bool IsInfinity(double v){$/;"	f	namespace:fun	signature:(double v)
IsInfinity	Functions.cpp	/^bool IsInfinity(float v){$/;"	f	namespace:fun	signature:(float v)
IsInfinity	Functions.h	/^bool IsInfinity(double v);$/;"	p	namespace:fun	signature:(double v)
IsInfinity	Functions.h	/^bool IsInfinity(float v);$/;"	p	namespace:fun	signature:(float v)
IsNAN	Functions.cpp	/^bool IsNAN(double v){$/;"	f	namespace:fun	signature:(double v)
IsNAN	Functions.cpp	/^bool IsNAN(float v){$/;"	f	namespace:fun	signature:(float v)
IsNAN	Functions.h	/^bool IsNAN(double v);$/;"	p	namespace:fun	signature:(double v)
IsNAN	Functions.h	/^bool IsNAN(float v);$/;"	p	namespace:fun	signature:(float v)
IsOk	JLog2.h	/^  bool IsOk()const{ return(Ok); }$/;"	f	class:JLog2	access:public	signature:() const
IsSimple	JMotionPos.h	/^  bool IsSimple()const{ return(TypeSimple); }$/;"	f	class:JMotionPos	access:public	signature:() const
IsWhiteSpace	tinyxml.h	/^    inline static bool IsWhiteSpace( char c )       $/;"	f	class:TiXmlBase	access:protected	signature:( char c )
IsWhiteSpace	tinyxml.h	/^    inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
IsWhiteSpaceCondensed	tinyxml.h	/^    static bool IsWhiteSpaceCondensed()                     { return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
IteNum	JTimeControl.h	/^  unsigned IteNum;  \/\/\/<Number of iterations. | Numero de iteraciones.$/;"	m	class:JTimeControl	access:protected
IteStart	JTimeControl.h	/^  double IteStart;  \/\/\/<Instant to start (IteNum is initialized). | Instante en que empieza (se inicializa IteNum).$/;"	m	class:JTimeControl	access:protected
Items	JBinaryData.h	/^  std::vector<JBinaryData*> Items;$/;"	m	class:JBinaryData	access:private
IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {    return IterateChildren (_value.c_str (), previous); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous ) const
IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const char * value, const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * value, const TiXmlNode* previous ) const
IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const  {   return IterateChildren (_value.c_str (), previous); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
JAppInfo	JAppInfo.cpp	/^JAppInfo::JAppInfo(std::string name,std::string ver$/;"	f	class:JAppInfo	signature:(std::string name,std::string ver ,std::string subname,std::string subver,std::string date)
JAppInfo	JAppInfo.cpp	/^JAppInfo::JAppInfo(std::string name,std::string ver,std::string date){$/;"	f	class:JAppInfo	signature:(std::string name,std::string ver,std::string date)
JAppInfo	JAppInfo.h	/^  JAppInfo(std::string name,std::string ver,std::string date);$/;"	p	class:JAppInfo	access:public	signature:(std::string name,std::string ver,std::string date)
JAppInfo	JAppInfo.h	/^  JAppInfo(std::string name,std::string ver,std::string subname,std::string subver,std::string date);$/;"	p	class:JAppInfo	access:public	signature:(std::string name,std::string ver,std::string subname,std::string subver,std::string date)
JAppInfo	JAppInfo.h	/^class JAppInfo : public JObject$/;"	c	inherits:JObject
JAppInfo::AddNameExtra	JAppInfo.cpp	/^void JAppInfo::AddNameExtra(std::string extra){$/;"	f	class:JAppInfo	signature:(std::string extra)
JAppInfo::AddNameExtra	JAppInfo.h	/^  void AddNameExtra(std::string extra);$/;"	p	class:JAppInfo	access:public	signature:(std::string extra)
JAppInfo::ClearNameExtra	JAppInfo.h	/^  void ClearNameExtra(){ MainNameExtra=""; };$/;"	f	class:JAppInfo	access:public	signature:()
JAppInfo::ConfigOutput	JAppInfo.cpp	/^void JAppInfo::ConfigOutput(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout){$/;"	f	class:JAppInfo	signature:(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout)
JAppInfo::ConfigOutput	JAppInfo.h	/^  void ConfigOutput(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout="");$/;"	p	class:JAppInfo	access:public	signature:(bool createdirs,bool csvsepcoma,std::string dirout,std::string dirdataout=Ó)
JAppInfo::ConfigRunPaths	JAppInfo.cpp	/^void JAppInfo::ConfigRunPaths(std::string runcommand){$/;"	f	class:JAppInfo	signature:(std::string runcommand)
JAppInfo::ConfigRunPaths	JAppInfo.h	/^  void ConfigRunPaths(std::string runcommand);$/;"	p	class:JAppInfo	access:public	signature:(std::string runcommand)
JAppInfo::CreateDirs	JAppInfo.h	/^  bool CreateDirs;   \/\/\/<Creates full path for output files (true by default).$/;"	m	class:JAppInfo	access:private
JAppInfo::CsvSepComa	JAppInfo.h	/^  bool CsvSepComa;   \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:JAppInfo	access:private
JAppInfo::Date	JAppInfo.h	/^  std::string Date;$/;"	m	class:JAppInfo	access:private
JAppInfo::DirDataOut	JAppInfo.h	/^  std::string DirDataOut;$/;"	m	class:JAppInfo	access:private
JAppInfo::DirOut	JAppInfo.h	/^  std::string DirOut;$/;"	m	class:JAppInfo	access:private
JAppInfo::GetCreateDirs	JAppInfo.h	/^  bool GetCreateDirs()const{ return(CreateDirs); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetCsvSepComa	JAppInfo.h	/^  bool GetCsvSepComa()const{ return(CsvSepComa); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetDirDataOut	JAppInfo.h	/^  std::string GetDirDataOut()const{ return(DirDataOut); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetDirOut	JAppInfo.h	/^  std::string GetDirOut()const{ return(DirOut); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetFullName	JAppInfo.cpp	/^std::string JAppInfo::GetFullName()const{$/;"	f	class:JAppInfo	signature:() const
JAppInfo::GetFullName	JAppInfo.h	/^  std::string GetFullName()const;$/;"	p	class:JAppInfo	access:public	signature:() const
JAppInfo::GetProgramPath	JAppInfo.h	/^  std::string GetProgramPath()const{ return(ProgramPath); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetRunCommand	JAppInfo.h	/^  std::string GetRunCommand()const{ return(RunCommand); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetRunPath	JAppInfo.h	/^  std::string GetRunPath()const{ return(RunPath); };$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::GetShortName	JAppInfo.cpp	/^std::string JAppInfo::GetShortName()const{$/;"	f	class:JAppInfo	signature:() const
JAppInfo::GetShortName	JAppInfo.h	/^  std::string GetShortName()const;$/;"	p	class:JAppInfo	access:public	signature:() const
JAppInfo::JAppInfo	JAppInfo.cpp	/^JAppInfo::JAppInfo(std::string name,std::string ver$/;"	f	class:JAppInfo	signature:(std::string name,std::string ver ,std::string subname,std::string subver,std::string date)
JAppInfo::JAppInfo	JAppInfo.cpp	/^JAppInfo::JAppInfo(std::string name,std::string ver,std::string date){$/;"	f	class:JAppInfo	signature:(std::string name,std::string ver,std::string date)
JAppInfo::JAppInfo	JAppInfo.h	/^  JAppInfo(std::string name,std::string ver,std::string date);$/;"	p	class:JAppInfo	access:public	signature:(std::string name,std::string ver,std::string date)
JAppInfo::JAppInfo	JAppInfo.h	/^  JAppInfo(std::string name,std::string ver,std::string subname,std::string subver,std::string date);$/;"	p	class:JAppInfo	access:public	signature:(std::string name,std::string ver,std::string subname,std::string subver,std::string date)
JAppInfo::Log	JAppInfo.h	/^  JLog2* Log;$/;"	m	class:JAppInfo	access:private
JAppInfo::LogDefined	JAppInfo.h	/^  bool LogDefined()const{ return(Log!=NULL); }$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::LogDefined	JAppInfo.h	/^  bool LogDefined()const{ return(false); }$/;"	f	class:JAppInfo	access:public	signature:() const
JAppInfo::LogInit	JAppInfo.cpp	/^void JAppInfo::LogInit(std::string fname,bool mpirun,int mpirank,int mpilaunch){$/;"	f	class:JAppInfo	signature:(std::string fname,bool mpirun,int mpirank,int mpilaunch)
JAppInfo::LogInit	JAppInfo.h	/^  void LogInit(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0);$/;"	p	class:JAppInfo	access:public	signature:(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0)
JAppInfo::LogPtr	JAppInfo.h	/^  JLog2* LogPtr(){ return(Log); }$/;"	f	class:JAppInfo	access:public	signature:()
JAppInfo::MainName	JAppInfo.h	/^  std::string MainName;$/;"	m	class:JAppInfo	access:private
JAppInfo::MainNameExtra	JAppInfo.h	/^  std::string MainNameExtra;$/;"	m	class:JAppInfo	access:private
JAppInfo::MainVer	JAppInfo.h	/^  std::string MainVer;$/;"	m	class:JAppInfo	access:private
JAppInfo::MkdirPath	JAppInfo.cpp	/^int JAppInfo::MkdirPath(const std::string &dir)const{$/;"	f	class:JAppInfo	signature:(const std::string &dir) const
JAppInfo::MkdirPath	JAppInfo.h	/^  int MkdirPath(const std::string &dir)const;$/;"	p	class:JAppInfo	access:public	signature:(const std::string &dir) const
JAppInfo::MkdirPathFile	JAppInfo.cpp	/^int JAppInfo::MkdirPathFile(const std::string &file)const{$/;"	f	class:JAppInfo	signature:(const std::string &file) const
JAppInfo::MkdirPathFile	JAppInfo.h	/^  int MkdirPathFile(const std::string &file)const;$/;"	p	class:JAppInfo	access:public	signature:(const std::string &file) const
JAppInfo::ProgramPath	JAppInfo.h	/^  std::string ProgramPath;$/;"	m	class:JAppInfo	access:private
JAppInfo::Reset	JAppInfo.cpp	/^void JAppInfo::Reset(){$/;"	f	class:JAppInfo	signature:()
JAppInfo::Reset	JAppInfo.h	/^  void Reset();$/;"	p	class:JAppInfo	access:public	signature:()
JAppInfo::RunCommand	JAppInfo.h	/^  std::string RunCommand;$/;"	m	class:JAppInfo	access:private
JAppInfo::RunPath	JAppInfo.h	/^  std::string RunPath;$/;"	m	class:JAppInfo	access:private
JAppInfo::SubName	JAppInfo.h	/^  std::string SubName;$/;"	m	class:JAppInfo	access:private
JAppInfo::SubVer	JAppInfo.h	/^  std::string SubVer;$/;"	m	class:JAppInfo	access:private
JAppInfo::~JAppInfo	JAppInfo.cpp	/^JAppInfo::~JAppInfo(){$/;"	f	class:JAppInfo	signature:()
JAppInfo::~JAppInfo	JAppInfo.h	/^  ~JAppInfo();$/;"	p	class:JAppInfo	access:public	signature:()
JArraysCpu	JArraysCpu.cpp	/^JArraysCpu::JArraysCpu(){$/;"	f	class:JArraysCpu	signature:()
JArraysCpu	JArraysCpu.h	/^  JArraysCpu();$/;"	p	class:JArraysCpu	access:public	signature:()
JArraysCpu	JArraysCpu.h	/^class JArraysCpu : protected JObject$/;"	c	inherits:JObject
JArraysCpu::AddArrayCount	JArraysCpu.h	/^  void AddArrayCount(TpArraySize tsize,unsigned count=1){ SetArrayCount(tsize,GetArrayCount(tsize)+count); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize,unsigned count=1)
JArraysCpu::Arrays12b	JArraysCpu.h	/^  JArraysCpuSize *Arrays12b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays16b	JArraysCpu.h	/^  JArraysCpuSize *Arrays16b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays1b	JArraysCpu.h	/^  JArraysCpuSize *Arrays1b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays24b	JArraysCpu.h	/^  JArraysCpuSize *Arrays24b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays2b	JArraysCpu.h	/^  JArraysCpuSize *Arrays2b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays32b	JArraysCpu.h	/^  JArraysCpuSize *Arrays32b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays4b	JArraysCpu.h	/^  JArraysCpuSize *Arrays4b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Arrays8b	JArraysCpu.h	/^  JArraysCpuSize *Arrays8b;$/;"	m	class:JArraysCpu	access:protected
JArraysCpu::Free	JArraysCpu.h	/^  void Free(byte        *pointer){ Arrays1b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(byte *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(double      *pointer){ Arrays8b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(double *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(float       *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(float *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(int         *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(int *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(tdouble2    *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tdouble2 *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(tdouble3    *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tdouble3 *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(tfloat3     *pointer){ Arrays12b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tfloat3 *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(tfloat4     *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tfloat4 *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(tsymatrix3f *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysCpu	access:public	signature:(tsymatrix3f *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(unsigned    *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(unsigned *pointer)
JArraysCpu::Free	JArraysCpu.h	/^  void Free(word        *pointer){ Arrays2b->Free(pointer);  }$/;"	f	class:JArraysCpu	access:public	signature:(word *pointer)
JArraysCpu::GetAllocMemoryCpu	JArraysCpu.cpp	/^llong JArraysCpu::GetAllocMemoryCpu()const{ $/;"	f	class:JArraysCpu	signature:() const
JArraysCpu::GetAllocMemoryCpu	JArraysCpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JArraysCpu	access:public	signature:() const
JArraysCpu::GetArrayCount	JArraysCpu.h	/^  unsigned GetArrayCount(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCount()); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize) const
JArraysCpu::GetArrayCountUsed	JArraysCpu.h	/^  unsigned GetArrayCountUsed(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCountUsed()); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize) const
JArraysCpu::GetArraySize	JArraysCpu.h	/^  unsigned GetArraySize()const{ return(Arrays1b->GetArraySize()); }$/;"	f	class:JArraysCpu	access:public	signature:() const
JArraysCpu::GetArrays	JArraysCpu.h	/^  JArraysCpuSize* GetArrays(TpArraySize tsize)const{ return(tsize==SIZE_32B? Arrays32b: (tsize==SIZE_24B? Arrays24b: (tsize==SIZE_16B? Arrays16b: (tsize==SIZE_12B? Arrays12b: (tsize==SIZE_8B? Arrays8b: (tsize==SIZE_4B? Arrays4b: (tsize==SIZE_2B? Arrays2b: Arrays1b))))))); }$/;"	f	class:JArraysCpu	access:protected	signature:(TpArraySize tsize) const
JArraysCpu::JArraysCpu	JArraysCpu.cpp	/^JArraysCpu::JArraysCpu(){$/;"	f	class:JArraysCpu	signature:()
JArraysCpu::JArraysCpu	JArraysCpu.h	/^  JArraysCpu();$/;"	p	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveByte	JArraysCpu.h	/^  byte*        ReserveByte(){       return((byte*)Arrays1b->Reserve());         }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveDouble	JArraysCpu.h	/^  double*      ReserveDouble(){     return((double*)Arrays8b->Reserve());       }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveDouble2	JArraysCpu.h	/^  tdouble2*    ReserveDouble2(){    return((tdouble2*)Arrays16b->Reserve());    }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveDouble3	JArraysCpu.h	/^  tdouble3*    ReserveDouble3(){    return((tdouble3*)Arrays24b->Reserve());    }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveFloat	JArraysCpu.h	/^  float*       ReserveFloat(){      return((float*)Arrays4b->Reserve());        }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveFloat3	JArraysCpu.h	/^  tfloat3*     ReserveFloat3(){     return((tfloat3*)Arrays12b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveFloat4	JArraysCpu.h	/^  tfloat4*     ReserveFloat4(){     return((tfloat4*)Arrays16b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveInt	JArraysCpu.h	/^  int*         ReserveInt(){        return((int*)Arrays4b->Reserve());          }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveSymatrix3f	JArraysCpu.h	/^  tsymatrix3f* ReserveSymatrix3f(){ return((tsymatrix3f*)Arrays24b->Reserve()); }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveTypeCode	JArraysCpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveUint());                      }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveTypeCode	JArraysCpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveWord());                      }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveUint	JArraysCpu.h	/^  unsigned*    ReserveUint(){       return((unsigned*)Arrays4b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::ReserveWord	JArraysCpu.h	/^  word*        ReserveWord(){       return((word*)Arrays2b->Reserve());         }$/;"	f	class:JArraysCpu	access:public	signature:()
JArraysCpu::Reset	JArraysCpu.cpp	/^void JArraysCpu::Reset(){$/;"	f	class:JArraysCpu	signature:()
JArraysCpu::Reset	JArraysCpu.h	/^  void Reset();$/;"	p	class:JArraysCpu	access:public	signature:()
JArraysCpu::SIZE_12B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_16B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_1B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_24B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_2B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_32B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_4B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SIZE_8B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
JArraysCpu::SetArrayCount	JArraysCpu.h	/^  void SetArrayCount(TpArraySize tsize,unsigned count){ GetArrays(tsize)->SetArrayCount(count); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize,unsigned count)
JArraysCpu::SetArraySize	JArraysCpu.cpp	/^void JArraysCpu::SetArraySize(unsigned size){ $/;"	f	class:JArraysCpu	signature:(unsigned size)
JArraysCpu::SetArraySize	JArraysCpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysCpu	access:public	signature:(unsigned size)
JArraysCpu::TpArraySize	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	t	class:JArraysCpu	typeref:enum:JArraysCpu::__anon3	access:public
JArraysCpu::~JArraysCpu	JArraysCpu.cpp	/^JArraysCpu::~JArraysCpu(){$/;"	f	class:JArraysCpu	signature:()
JArraysCpu::~JArraysCpu	JArraysCpu.h	/^  ~JArraysCpu();$/;"	p	class:JArraysCpu	access:public	signature:()
JArraysCpuSize	JArraysCpu.cpp	/^JArraysCpuSize::JArraysCpuSize(unsigned elementsize):ElementSize(elementsize){$/;"	f	class:JArraysCpuSize	signature:(unsigned elementsize)
JArraysCpuSize	JArraysCpu.h	/^  JArraysCpuSize(unsigned elementsize);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned elementsize)
JArraysCpuSize	JArraysCpu.h	/^class JArraysCpuSize : protected JObject$/;"	c	inherits:JObject
JArraysCpuSize::AllocPointer	JArraysCpu.cpp	/^void* JArraysCpuSize::AllocPointer(unsigned size)const{$/;"	f	class:JArraysCpuSize	signature:(unsigned size) const
JArraysCpuSize::AllocPointer	JArraysCpu.h	/^  void* AllocPointer(unsigned size)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(unsigned size) const
JArraysCpuSize::ArraySize	JArraysCpu.h	/^  unsigned ArraySize;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::Count	JArraysCpu.h	/^  unsigned Count;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::CountMax	JArraysCpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::CountUsed	JArraysCpu.h	/^  unsigned CountUsed;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::CountUsedMax	JArraysCpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::ElementSize	JArraysCpu.h	/^  const unsigned ElementSize;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::FindPointerUsed	JArraysCpu.cpp	/^unsigned JArraysCpuSize::FindPointerUsed(void *pointer)const{$/;"	f	class:JArraysCpuSize	signature:(void *pointer) const
JArraysCpuSize::FindPointerUsed	JArraysCpu.h	/^  unsigned FindPointerUsed(void *pointer)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(void *pointer) const
JArraysCpuSize::Free	JArraysCpu.cpp	/^void JArraysCpuSize::Free(void *pointer){$/;"	f	class:JArraysCpuSize	signature:(void *pointer)
JArraysCpuSize::Free	JArraysCpu.h	/^  void Free(void *pointer);$/;"	p	class:JArraysCpuSize	access:public	signature:(void *pointer)
JArraysCpuSize::FreeMemory	JArraysCpu.cpp	/^void JArraysCpuSize::FreeMemory(){$/;"	f	class:JArraysCpuSize	signature:()
JArraysCpuSize::FreeMemory	JArraysCpu.h	/^  void FreeMemory();$/;"	p	class:JArraysCpuSize	access:protected	signature:()
JArraysCpuSize::FreePointer	JArraysCpu.cpp	/^void JArraysCpuSize::FreePointer(void* pointer)const{$/;"	f	class:JArraysCpuSize	signature:(void* pointer) const
JArraysCpuSize::FreePointer	JArraysCpu.h	/^  void FreePointer(void* pointer)const;$/;"	p	class:JArraysCpuSize	access:protected	signature:(void* pointer) const
JArraysCpuSize::GetAllocMemoryCpu	JArraysCpu.h	/^  llong GetAllocMemoryCpu()const{ return((llong)(Count)*ElementSize*ArraySize); };$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::GetArrayCount	JArraysCpu.h	/^  unsigned GetArrayCount()const{ return(Count); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::GetArrayCountMax	JArraysCpu.h	/^  unsigned GetArrayCountMax()const{ return(CountMax); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::GetArrayCountUsed	JArraysCpu.h	/^  unsigned GetArrayCountUsed()const{ return(CountUsed); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::GetArrayCountUsedMax	JArraysCpu.h	/^  unsigned GetArrayCountUsedMax()const{ return(CountUsedMax); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::GetArraySize	JArraysCpu.h	/^  unsigned GetArraySize()const{ return(ArraySize); }$/;"	f	class:JArraysCpuSize	access:public	signature:() const
JArraysCpuSize::JArraysCpuSize	JArraysCpu.cpp	/^JArraysCpuSize::JArraysCpuSize(unsigned elementsize):ElementSize(elementsize){$/;"	f	class:JArraysCpuSize	signature:(unsigned elementsize)
JArraysCpuSize::JArraysCpuSize	JArraysCpu.h	/^  JArraysCpuSize(unsigned elementsize);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned elementsize)
JArraysCpuSize::MAXPOINTERS	JArraysCpu.h	/^  static const unsigned MAXPOINTERS=30;$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::Pointers	JArraysCpu.h	/^  void* Pointers[MAXPOINTERS];$/;"	m	class:JArraysCpuSize	access:protected
JArraysCpuSize::Reserve	JArraysCpu.cpp	/^void* JArraysCpuSize::Reserve(){$/;"	f	class:JArraysCpuSize	signature:()
JArraysCpuSize::Reserve	JArraysCpu.h	/^  void* Reserve();$/;"	p	class:JArraysCpuSize	access:public	signature:()
JArraysCpuSize::Reset	JArraysCpu.cpp	/^void JArraysCpuSize::Reset(){$/;"	f	class:JArraysCpuSize	signature:()
JArraysCpuSize::Reset	JArraysCpu.h	/^  void Reset();$/;"	p	class:JArraysCpuSize	access:public	signature:()
JArraysCpuSize::SetArrayCount	JArraysCpu.cpp	/^void JArraysCpuSize::SetArrayCount(unsigned count){$/;"	f	class:JArraysCpuSize	signature:(unsigned count)
JArraysCpuSize::SetArrayCount	JArraysCpu.h	/^  void SetArrayCount(unsigned count);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned count)
JArraysCpuSize::SetArraySize	JArraysCpu.cpp	/^void JArraysCpuSize::SetArraySize(unsigned size){$/;"	f	class:JArraysCpuSize	signature:(unsigned size)
JArraysCpuSize::SetArraySize	JArraysCpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned size)
JArraysCpuSize::~JArraysCpuSize	JArraysCpu.cpp	/^JArraysCpuSize::~JArraysCpuSize(){$/;"	f	class:JArraysCpuSize	signature:()
JArraysCpuSize::~JArraysCpuSize	JArraysCpu.h	/^  ~JArraysCpuSize();$/;"	p	class:JArraysCpuSize	access:public	signature:()
JArraysGpu	JArraysGpu.cpp	/^JArraysGpu::JArraysGpu(){$/;"	f	class:JArraysGpu	signature:()
JArraysGpu	JArraysGpu.h	/^  JArraysGpu();$/;"	p	class:JArraysGpu	access:public	signature:()
JArraysGpu	JArraysGpu.h	/^class JArraysGpu : protected JObjectGpu$/;"	c	inherits:JObjectGpu
JArraysGpu::AddArrayCount	JArraysGpu.h	/^  void AddArrayCount(TpArraySize tsize,unsigned count=1){ SetArrayCount(tsize,GetArrayCount(tsize)+count); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize,unsigned count=1)
JArraysGpu::Arrays12b	JArraysGpu.h	/^  JArraysGpuSize *Arrays12b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays16b	JArraysGpu.h	/^  JArraysGpuSize *Arrays16b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays1b	JArraysGpu.h	/^  JArraysGpuSize *Arrays1b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays24b	JArraysGpu.h	/^  JArraysGpuSize *Arrays24b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays2b	JArraysGpu.h	/^  JArraysGpuSize *Arrays2b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays32b	JArraysGpu.h	/^  JArraysGpuSize *Arrays32b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays4b	JArraysGpu.h	/^  JArraysGpuSize *Arrays4b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Arrays8b	JArraysGpu.h	/^  JArraysGpuSize *Arrays8b;$/;"	m	class:JArraysGpu	access:protected
JArraysGpu::Free	JArraysGpu.h	/^  void Free(byte     *pointer){ Arrays1b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(byte *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(double   *pointer){ Arrays8b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(double *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(double2  *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double2 *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(double3  *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double3 *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(double4  *pointer){ Arrays32b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(double4 *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(float    *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(float *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(float3   *pointer){ Arrays12b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(float3 *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(float4   *pointer){ Arrays16b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(float4 *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(int      *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(int *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(tsymatrix3f *pointer){ Arrays24b->Free(pointer); }$/;"	f	class:JArraysGpu	access:public	signature:(tsymatrix3f *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(unsigned *pointer){ Arrays4b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(unsigned *pointer)
JArraysGpu::Free	JArraysGpu.h	/^  void Free(word     *pointer){ Arrays2b->Free(pointer);  }$/;"	f	class:JArraysGpu	access:public	signature:(word *pointer)
JArraysGpu::GetAllocMemoryGpu	JArraysGpu.cpp	/^llong JArraysGpu::GetAllocMemoryGpu()const{ $/;"	f	class:JArraysGpu	signature:() const
JArraysGpu::GetAllocMemoryGpu	JArraysGpu.h	/^  llong GetAllocMemoryGpu()const;$/;"	p	class:JArraysGpu	access:public	signature:() const
JArraysGpu::GetArrayCount	JArraysGpu.h	/^  unsigned GetArrayCount(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCount()); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize) const
JArraysGpu::GetArrayCountUsed	JArraysGpu.h	/^  unsigned GetArrayCountUsed(TpArraySize tsize)const{ return(GetArrays(tsize)->GetArrayCountUsed()); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize) const
JArraysGpu::GetArraySize	JArraysGpu.h	/^  unsigned GetArraySize()const{ return(Arrays1b->GetArraySize()); }$/;"	f	class:JArraysGpu	access:public	signature:() const
JArraysGpu::GetArrays	JArraysGpu.h	/^  JArraysGpuSize* GetArrays(TpArraySize tsize)const{ return(tsize==SIZE_32B? Arrays32b: (tsize==SIZE_24B? Arrays24b: (tsize==SIZE_16B? Arrays16b: (tsize==SIZE_12B? Arrays12b: (tsize==SIZE_8B? Arrays8b: (tsize==SIZE_4B? Arrays4b: (tsize==SIZE_2B? Arrays2b: Arrays1b))))))); }$/;"	f	class:JArraysGpu	access:protected	signature:(TpArraySize tsize) const
JArraysGpu::JArraysGpu	JArraysGpu.cpp	/^JArraysGpu::JArraysGpu(){$/;"	f	class:JArraysGpu	signature:()
JArraysGpu::JArraysGpu	JArraysGpu.h	/^  JArraysGpu();$/;"	p	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveByte	JArraysGpu.h	/^  byte*        ReserveByte(){       return((byte*)Arrays1b->Reserve());         }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveDouble	JArraysGpu.h	/^  double*      ReserveDouble(){     return((double*)Arrays8b->Reserve());       }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveDouble2	JArraysGpu.h	/^  double2*     ReserveDouble2(){    return((double2*)Arrays16b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveDouble3	JArraysGpu.h	/^  double3*     ReserveDouble3(){    return((double3*)Arrays24b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveDouble4	JArraysGpu.h	/^  double4*     ReserveDouble4(){    return((double4*)Arrays32b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveFloat	JArraysGpu.h	/^  float*       ReserveFloat(){      return((float*)Arrays4b->Reserve());        }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveFloat3	JArraysGpu.h	/^  float3*      ReserveFloat3(){     return((float3*)Arrays12b->Reserve());      }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveFloat4	JArraysGpu.h	/^  float4*      ReserveFloat4(){     return((float4*)Arrays16b->Reserve());      }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveInt	JArraysGpu.h	/^  int*         ReserveInt(){        return((int*)Arrays4b->Reserve());          }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveSymatrix3f	JArraysGpu.h	/^  tsymatrix3f* ReserveSymatrix3f(){ return((tsymatrix3f*)Arrays24b->Reserve()); }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveTypeCode	JArraysGpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveUint());                      }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveTypeCode	JArraysGpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveWord());                      }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveUint	JArraysGpu.h	/^  unsigned*    ReserveUint(){       return((unsigned*)Arrays4b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::ReserveWord	JArraysGpu.h	/^  word*        ReserveWord(){       return((word*)Arrays2b->Reserve());         }$/;"	f	class:JArraysGpu	access:public	signature:()
JArraysGpu::Reset	JArraysGpu.cpp	/^void JArraysGpu::Reset(){$/;"	f	class:JArraysGpu	signature:()
JArraysGpu::Reset	JArraysGpu.h	/^  void Reset();$/;"	p	class:JArraysGpu	access:public	signature:()
JArraysGpu::SIZE_12B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_16B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_1B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_24B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_2B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_32B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_4B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SIZE_8B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
JArraysGpu::SetArrayCount	JArraysGpu.h	/^  void SetArrayCount(TpArraySize tsize,unsigned count){ GetArrays(tsize)->SetArrayCount(count); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize,unsigned count)
JArraysGpu::SetArraySize	JArraysGpu.cpp	/^void JArraysGpu::SetArraySize(unsigned size){ $/;"	f	class:JArraysGpu	signature:(unsigned size)
JArraysGpu::SetArraySize	JArraysGpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysGpu	access:public	signature:(unsigned size)
JArraysGpu::TpArraySize	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	t	class:JArraysGpu	typeref:enum:JArraysGpu::__anon4	access:public
JArraysGpu::~JArraysGpu	JArraysGpu.cpp	/^JArraysGpu::~JArraysGpu(){$/;"	f	class:JArraysGpu	signature:()
JArraysGpu::~JArraysGpu	JArraysGpu.h	/^  ~JArraysGpu();$/;"	p	class:JArraysGpu	access:public	signature:()
JArraysGpuSize	JArraysGpu.cpp	/^JArraysGpuSize::JArraysGpuSize(unsigned elementsize):ElementSize(elementsize){$/;"	f	class:JArraysGpuSize	signature:(unsigned elementsize)
JArraysGpuSize	JArraysGpu.h	/^  JArraysGpuSize(unsigned elementsize);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned elementsize)
JArraysGpuSize	JArraysGpu.h	/^class JArraysGpuSize : protected JObjectGpu$/;"	c	inherits:JObjectGpu
JArraysGpuSize::ArraySize	JArraysGpu.h	/^  unsigned ArraySize;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::Count	JArraysGpu.h	/^  unsigned Count;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::CountMax	JArraysGpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::CountUsed	JArraysGpu.h	/^  unsigned CountUsed;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::CountUsedMax	JArraysGpu.h	/^  unsigned CountMax,CountUsedMax;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::ElementSize	JArraysGpu.h	/^  const unsigned ElementSize;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::FindPointerUsed	JArraysGpu.cpp	/^unsigned JArraysGpuSize::FindPointerUsed(void *pointer)const{$/;"	f	class:JArraysGpuSize	signature:(void *pointer) const
JArraysGpuSize::FindPointerUsed	JArraysGpu.h	/^  unsigned FindPointerUsed(void *pointer)const;$/;"	p	class:JArraysGpuSize	access:protected	signature:(void *pointer) const
JArraysGpuSize::Free	JArraysGpu.cpp	/^void JArraysGpuSize::Free(void *pointer){$/;"	f	class:JArraysGpuSize	signature:(void *pointer)
JArraysGpuSize::Free	JArraysGpu.h	/^  void Free(void *pointer);$/;"	p	class:JArraysGpuSize	access:public	signature:(void *pointer)
JArraysGpuSize::FreeMemory	JArraysGpu.cpp	/^void JArraysGpuSize::FreeMemory(){$/;"	f	class:JArraysGpuSize	signature:()
JArraysGpuSize::FreeMemory	JArraysGpu.h	/^  void FreeMemory();$/;"	p	class:JArraysGpuSize	access:protected	signature:()
JArraysGpuSize::GetAllocMemoryGpu	JArraysGpu.h	/^  llong GetAllocMemoryGpu()const{ return((llong)(Count)*ElementSize*ArraySize); };$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::GetArrayCount	JArraysGpu.h	/^  unsigned GetArrayCount()const{ return(Count); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::GetArrayCountMax	JArraysGpu.h	/^  unsigned GetArrayCountMax()const{ return(CountMax); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::GetArrayCountUsed	JArraysGpu.h	/^  unsigned GetArrayCountUsed()const{ return(CountUsed); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::GetArrayCountUsedMax	JArraysGpu.h	/^  unsigned GetArrayCountUsedMax()const{ return(CountUsedMax); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::GetArraySize	JArraysGpu.h	/^  unsigned GetArraySize()const{ return(ArraySize); }$/;"	f	class:JArraysGpuSize	access:public	signature:() const
JArraysGpuSize::JArraysGpuSize	JArraysGpu.cpp	/^JArraysGpuSize::JArraysGpuSize(unsigned elementsize):ElementSize(elementsize){$/;"	f	class:JArraysGpuSize	signature:(unsigned elementsize)
JArraysGpuSize::JArraysGpuSize	JArraysGpu.h	/^  JArraysGpuSize(unsigned elementsize);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned elementsize)
JArraysGpuSize::MAXPOINTERS	JArraysGpu.h	/^  static const unsigned MAXPOINTERS=30;$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::Pointers	JArraysGpu.h	/^  void* Pointers[MAXPOINTERS];$/;"	m	class:JArraysGpuSize	access:protected
JArraysGpuSize::Reserve	JArraysGpu.cpp	/^void* JArraysGpuSize::Reserve(){$/;"	f	class:JArraysGpuSize	signature:()
JArraysGpuSize::Reserve	JArraysGpu.h	/^  void* Reserve();$/;"	p	class:JArraysGpuSize	access:public	signature:()
JArraysGpuSize::Reset	JArraysGpu.cpp	/^void JArraysGpuSize::Reset(){$/;"	f	class:JArraysGpuSize	signature:()
JArraysGpuSize::Reset	JArraysGpu.h	/^  void Reset();$/;"	p	class:JArraysGpuSize	access:public	signature:()
JArraysGpuSize::SetArrayCount	JArraysGpu.cpp	/^void JArraysGpuSize::SetArrayCount(unsigned count){$/;"	f	class:JArraysGpuSize	signature:(unsigned count)
JArraysGpuSize::SetArrayCount	JArraysGpu.h	/^  void SetArrayCount(unsigned count);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned count)
JArraysGpuSize::SetArraySize	JArraysGpu.cpp	/^void JArraysGpuSize::SetArraySize(unsigned size){$/;"	f	class:JArraysGpuSize	signature:(unsigned size)
JArraysGpuSize::SetArraySize	JArraysGpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned size)
JArraysGpuSize::~JArraysGpuSize	JArraysGpu.cpp	/^JArraysGpuSize::~JArraysGpuSize(){$/;"	f	class:JArraysGpuSize	signature:()
JArraysGpuSize::~JArraysGpuSize	JArraysGpu.h	/^  ~JArraysGpuSize();$/;"	p	class:JArraysGpuSize	access:public	signature:()
JBinaryData	JBinaryData.cpp	/^JBinaryData::JBinaryData(const JBinaryData &src){$/;"	f	class:JBinaryData	signature:(const JBinaryData &src)
JBinaryData	JBinaryData.cpp	/^JBinaryData::JBinaryData(std::string name):Name(name){ $/;"	f	class:JBinaryData	signature:(std::string name)
JBinaryData	JBinaryData.h	/^  JBinaryData(const JBinaryData &src);$/;"	p	class:JBinaryData	access:public	signature:(const JBinaryData &src)
JBinaryData	JBinaryData.h	/^  JBinaryData(std::string name="JBinary_Data");$/;"	p	class:JBinaryData	access:public	signature:(std::string name=Ó)
JBinaryData	JBinaryData.h	/^class JBinaryData : protected JObject$/;"	c	inherits:JObject
JBinaryData::Arrays	JBinaryData.h	/^  std::vector<JBinaryDataArray*> Arrays;$/;"	m	class:JBinaryData	access:private
JBinaryData::CheckFileHead	JBinaryData.cpp	/^unsigned JBinaryData::CheckFileHead(const std::string &file,std::ifstream *pf,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,std::ifstream *pf,const std::string &filecode) const
JBinaryData::CheckFileHead	JBinaryData.h	/^  unsigned CheckFileHead(const std::string &file,std::ifstream *pf,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,std::ifstream *pf,const std::string &filecode) const
JBinaryData::CheckFileListHead	JBinaryData.cpp	/^unsigned JBinaryData::CheckFileListHead(const std::string &file,std::fstream *pf,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,std::fstream *pf,const std::string &filecode) const
JBinaryData::CheckFileListHead	JBinaryData.h	/^  unsigned CheckFileListHead(const std::string &file,std::fstream *pf,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,std::fstream *pf,const std::string &filecode) const
JBinaryData::CheckGetValue	JBinaryData.cpp	/^int JBinaryData::CheckGetValue(const std::string &name,bool optional,JBinaryDataDef::TpData type)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,JBinaryDataDef::TpData type) const
JBinaryData::CheckGetValue	JBinaryData.h	/^  int CheckGetValue(const std::string &name,bool optional,JBinaryDataDef::TpData type)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,bool optional,JBinaryDataDef::TpData type) const
JBinaryData::CheckHead	JBinaryData.cpp	/^void JBinaryData::CheckHead(const std::string &file,const StHeadFmtBin &head,const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &file,const StHeadFmtBin &head,const std::string &filecode) const
JBinaryData::CheckHead	JBinaryData.h	/^  void CheckHead(const std::string &file,const StHeadFmtBin &head,const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &file,const StHeadFmtBin &head,const std::string &filecode) const
JBinaryData::CheckSetValue	JBinaryData.cpp	/^int JBinaryData::CheckSetValue(const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type)
JBinaryData::CheckSetValue	JBinaryData.h	/^  int CheckSetValue(const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type)
JBinaryData::Clear	JBinaryData.cpp	/^void JBinaryData::Clear(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::Clear	JBinaryData.h	/^  void Clear();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::CloseFileStructure	JBinaryData.cpp	/^void JBinaryData::CloseFileStructure(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::CloseFileStructure	JBinaryData.h	/^  void CloseFileStructure();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::CodeArrayDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeArrayDef="\\nARRAY";$/;"	m	class:JBinaryData	file:
JBinaryData::CodeArrayDef	JBinaryData.h	/^  static const std::string CodeArrayDef;$/;"	m	class:JBinaryData	access:private
JBinaryData::CodeItemDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeItemDef="\\nITEM\\n";$/;"	m	class:JBinaryData	file:
JBinaryData::CodeItemDef	JBinaryData.h	/^  static const std::string CodeItemDef;$/;"	m	class:JBinaryData	access:private
JBinaryData::CodeValuesDef	JBinaryData.cpp	/^const std::string JBinaryData::CodeValuesDef="\\nVALUES";$/;"	m	class:JBinaryData	file:
JBinaryData::CodeValuesDef	JBinaryData.h	/^  static const std::string CodeValuesDef;$/;"	m	class:JBinaryData	access:private
JBinaryData::CreateArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::CreateArray(const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type)
JBinaryData::CreateArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::CreateArray(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer)
JBinaryData::CreateArray	JBinaryData.h	/^  JBinaryDataArray* CreateArray(const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type)
JBinaryData::CreateArray	JBinaryData.h	/^  JBinaryDataArray* CreateArray(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned count,const void *data,bool externalpointer)
JBinaryData::CreateItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::CreateItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::CreateItem	JBinaryData.h	/^  JBinaryData* CreateItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::ExistsValue	JBinaryData.cpp	/^bool JBinaryData::ExistsValue(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
JBinaryData::ExistsValue	JBinaryData.cpp	/^bool JBinaryData::ExistsValue(const std::string &name,JBinaryDataDef::TpData type)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type) const
JBinaryData::ExistsValue	JBinaryData.h	/^  bool ExistsValue(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
JBinaryData::ExistsValue	JBinaryData.h	/^  bool ExistsValue(const std::string &name,JBinaryDataDef::TpData type)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,JBinaryDataDef::TpData type) const
JBinaryData::FileStructure	JBinaryData.h	/^  std::ifstream *FileStructure;$/;"	m	class:JBinaryData	access:private
JBinaryData::FmtDouble	JBinaryData.h	/^  std::string FmtDouble; \/\/\/<Formato para valores double, por defecto "%.15E" Format for double, by default " %.15E".$/;"	m	class:JBinaryData	access:private
JBinaryData::FmtFloat	JBinaryData.h	/^  std::string FmtFloat;  \/\/\/<Formato para valores float, por defecto "%.7E". Format for float, by default " %.7E". $/;"	m	class:JBinaryData	access:private
JBinaryData::GetAllocMemory	JBinaryData.cpp	/^llong JBinaryData::GetAllocMemory()const{$/;"	f	class:JBinaryData	signature:() const
JBinaryData::GetAllocMemory	JBinaryData.h	/^  llong GetAllocMemory()const;$/;"	p	class:JBinaryData	access:public	signature:() const
JBinaryData::GetArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::GetArray(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::GetArray	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::GetArray(unsigned index){$/;"	f	class:JBinaryData	signature:(unsigned index)
JBinaryData::GetArray	JBinaryData.h	/^  JBinaryDataArray* GetArray(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::GetArray	JBinaryData.h	/^  JBinaryDataArray* GetArray(unsigned index);$/;"	p	class:JBinaryData	access:public	signature:(unsigned index)
JBinaryData::GetArrayIndex	JBinaryData.cpp	/^int JBinaryData::GetArrayIndex(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
JBinaryData::GetArrayIndex	JBinaryData.h	/^  int GetArrayIndex(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
JBinaryData::GetArraysCount	JBinaryData.h	/^  unsigned GetArraysCount()const{ return(unsigned(Arrays.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetFileHead	JBinaryData.cpp	/^unsigned JBinaryData::GetFileHead(std::ifstream *pf,JBinaryData::StHeadFmtBin &head)const{$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,JBinaryData::StHeadFmtBin &head) const
JBinaryData::GetFileHead	JBinaryData.h	/^  unsigned GetFileHead(std::ifstream *pf,JBinaryData::StHeadFmtBin &head)const;$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,JBinaryData::StHeadFmtBin &head) const
JBinaryData::GetFileStructure	JBinaryData.cpp	/^std::ifstream* JBinaryData::GetFileStructure()const{$/;"	f	class:JBinaryData	signature:() const
JBinaryData::GetFileStructure	JBinaryData.h	/^  std::ifstream* GetFileStructure()const;$/;"	p	class:JBinaryData	access:public	signature:() const
JBinaryData::GetFmtDouble	JBinaryData.h	/^  std::string GetFmtDouble()const{ return(FmtDouble); };$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetFmtFloat	JBinaryData.h	/^  std::string GetFmtFloat()const{ return(FmtFloat); };$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetHide	JBinaryData.h	/^  bool GetHide()const{ return(HideAll); }$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetHideValues	JBinaryData.h	/^  bool GetHideValues()const{ return(HideValues); }$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::GetItem	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItem(unsigned index){$/;"	f	class:JBinaryData	signature:(unsigned index)
JBinaryData::GetItem	JBinaryData.h	/^  JBinaryData* GetItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::GetItem	JBinaryData.h	/^  JBinaryData* GetItem(unsigned index);$/;"	p	class:JBinaryData	access:public	signature:(unsigned index)
JBinaryData::GetItemIndex	JBinaryData.cpp	/^int JBinaryData::GetItemIndex(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::GetItemIndex	JBinaryData.h	/^  int GetItemIndex(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::GetItemRoot	JBinaryData.cpp	/^JBinaryData* JBinaryData::GetItemRoot(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::GetItemRoot	JBinaryData.h	/^  JBinaryData* GetItemRoot();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::GetItemsCount	JBinaryData.h	/^  unsigned GetItemsCount()const{ return(unsigned(Items.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetName	JBinaryData.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetParent	JBinaryData.h	/^  JBinaryData* GetParent(){ return(Parent); };$/;"	f	class:JBinaryData	access:public	signature:()
JBinaryData::GetSizeData	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeData(bool all){$/;"	f	class:JBinaryData	signature:(bool all)
JBinaryData::GetSizeData	JBinaryData.h	/^  unsigned GetSizeData(bool all);$/;"	p	class:JBinaryData	access:public	signature:(bool all)
JBinaryData::GetSizeDataConst	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeDataConst(bool all)const{$/;"	f	class:JBinaryData	signature:(bool all) const
JBinaryData::GetSizeDataConst	JBinaryData.h	/^  unsigned GetSizeDataConst(bool all)const;$/;"	p	class:JBinaryData	access:public	signature:(bool all) const
JBinaryData::GetSizeValues	JBinaryData.cpp	/^unsigned JBinaryData::GetSizeValues()const{$/;"	f	class:JBinaryData	signature:() const
JBinaryData::GetSizeValues	JBinaryData.h	/^  unsigned GetSizeValues()const;$/;"	p	class:JBinaryData	access:private	signature:() const
JBinaryData::GetValueIndex	JBinaryData.cpp	/^int JBinaryData::GetValueIndex(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
JBinaryData::GetValueIndex	JBinaryData.h	/^  int GetValueIndex(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
JBinaryData::GetValuesCount	JBinaryData.h	/^  unsigned GetValuesCount()const{ return(unsigned(Values.size())); }$/;"	f	class:JBinaryData	access:public	signature:() const
JBinaryData::GetVisibleArraysCount	JBinaryData.cpp	/^unsigned JBinaryData::GetVisibleArraysCount()const{$/;"	f	class:JBinaryData	signature:() const
JBinaryData::GetVisibleArraysCount	JBinaryData.h	/^  unsigned GetVisibleArraysCount()const;$/;"	p	class:JBinaryData	access:public	signature:() const
JBinaryData::GetVisibleItemsCount	JBinaryData.cpp	/^unsigned JBinaryData::GetVisibleItemsCount()const{$/;"	f	class:JBinaryData	signature:() const
JBinaryData::GetVisibleItemsCount	JBinaryData.h	/^  unsigned GetVisibleItemsCount()const;$/;"	p	class:JBinaryData	access:public	signature:() const
JBinaryData::GetvBool	JBinaryData.cpp	/^bool JBinaryData::GetvBool(const std::string &name,bool optional,bool valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,bool valdef) const
JBinaryData::GetvBool	JBinaryData.h	/^  bool           GetvBool   (const std::string &name,bool optional=false,bool valdef=false)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,bool valdef=false) const
JBinaryData::GetvChar	JBinaryData.cpp	/^char JBinaryData::GetvChar(const std::string &name,bool optional,char valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,char valdef) const
JBinaryData::GetvChar	JBinaryData.h	/^  char           GetvChar   (const std::string &name,bool optional=false,char valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,char valdef=0) const
JBinaryData::GetvDouble	JBinaryData.cpp	/^double JBinaryData::GetvDouble(const std::string &name,bool optional,double valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,double valdef) const
JBinaryData::GetvDouble	JBinaryData.h	/^  double         GetvDouble (const std::string &name,bool optional=false,double valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,double valdef=0) const
JBinaryData::GetvDouble3	JBinaryData.cpp	/^tdouble3 JBinaryData::GetvDouble3(const std::string &name,bool optional,tdouble3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tdouble3 valdef) const
JBinaryData::GetvDouble3	JBinaryData.h	/^  tdouble3       GetvDouble3(const std::string &name,bool optional=false,tdouble3 valdef=TDouble3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tdouble3 valdef=TDouble3(0)) const
JBinaryData::GetvFloat	JBinaryData.cpp	/^float JBinaryData::GetvFloat(const std::string &name,bool optional,float valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,float valdef) const
JBinaryData::GetvFloat	JBinaryData.h	/^  float          GetvFloat  (const std::string &name,bool optional=false,float valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,float valdef=0) const
JBinaryData::GetvFloat3	JBinaryData.cpp	/^tfloat3 JBinaryData::GetvFloat3(const std::string &name,bool optional,tfloat3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tfloat3 valdef) const
JBinaryData::GetvFloat3	JBinaryData.h	/^  tfloat3        GetvFloat3 (const std::string &name,bool optional=false,tfloat3 valdef=TFloat3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tfloat3 valdef=TFloat3(0)) const
JBinaryData::GetvInt	JBinaryData.cpp	/^int JBinaryData::GetvInt(const std::string &name,bool optional,int valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,int valdef) const
JBinaryData::GetvInt	JBinaryData.h	/^  int            GetvInt    (const std::string &name,bool optional=false,int valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,int valdef=0) const
JBinaryData::GetvInt3	JBinaryData.cpp	/^tint3 JBinaryData::GetvInt3(const std::string &name,bool optional,tint3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tint3 valdef) const
JBinaryData::GetvInt3	JBinaryData.h	/^  tint3          GetvInt3   (const std::string &name,bool optional=false,tint3 valdef=TInt3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tint3 valdef=TInt3(0)) const
JBinaryData::GetvLlong	JBinaryData.cpp	/^llong JBinaryData::GetvLlong(const std::string &name,bool optional,llong valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,llong valdef) const
JBinaryData::GetvLlong	JBinaryData.h	/^  llong          GetvLlong  (const std::string &name,bool optional=false,llong valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,llong valdef=0) const
JBinaryData::GetvShort	JBinaryData.cpp	/^short JBinaryData::GetvShort(const std::string &name,bool optional,short valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,short valdef) const
JBinaryData::GetvShort	JBinaryData.h	/^  short          GetvShort  (const std::string &name,bool optional=false,short valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,short valdef=0) const
JBinaryData::GetvText	JBinaryData.cpp	/^std::string JBinaryData::GetvText(const std::string &name,bool optional,std::string valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,std::string valdef) const
JBinaryData::GetvText	JBinaryData.h	/^  std::string    GetvText   (const std::string &name,bool optional=false,std::string valdef="")const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,std::string valdef=Ó) const
JBinaryData::GetvUchar	JBinaryData.cpp	/^unsigned char JBinaryData::GetvUchar(const std::string &name,bool optional,unsigned char valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned char valdef) const
JBinaryData::GetvUchar	JBinaryData.h	/^  unsigned char  GetvUchar  (const std::string &name,bool optional=false,unsigned char valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned char valdef=0) const
JBinaryData::GetvUint	JBinaryData.cpp	/^unsigned JBinaryData::GetvUint(const std::string &name,bool optional,unsigned valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned valdef) const
JBinaryData::GetvUint	JBinaryData.h	/^  unsigned       GetvUint   (const std::string &name,bool optional=false,unsigned valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned valdef=0) const
JBinaryData::GetvUint3	JBinaryData.cpp	/^tuint3 JBinaryData::GetvUint3(const std::string &name,bool optional,tuint3 valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,tuint3 valdef) const
JBinaryData::GetvUint3	JBinaryData.h	/^  tuint3         GetvUint3  (const std::string &name,bool optional=false,tuint3 valdef=TUint3(0))const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,tuint3 valdef=TUint3(0)) const
JBinaryData::GetvUllong	JBinaryData.cpp	/^ullong JBinaryData::GetvUllong(const std::string &name,bool optional,ullong valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,ullong valdef) const
JBinaryData::GetvUllong	JBinaryData.h	/^  ullong         GetvUllong (const std::string &name,bool optional=false,ullong valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,ullong valdef=0) const
JBinaryData::GetvUshort	JBinaryData.cpp	/^unsigned short JBinaryData::GetvUshort(const std::string &name,bool optional,unsigned short valdef)const{$/;"	f	class:JBinaryData	signature:(const std::string &name,bool optional,unsigned short valdef) const
JBinaryData::GetvUshort	JBinaryData.h	/^  unsigned short GetvUshort (const std::string &name,bool optional=false,unsigned short valdef=0)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool optional=false,unsigned short valdef=0) const
JBinaryData::HideAll	JBinaryData.h	/^  bool HideAll;          \/\/\/<Ignora el item en determinados metodos como SaveData(). It ignores the item in certain functions as SaveData().$/;"	m	class:JBinaryData	access:private
JBinaryData::HideValues	JBinaryData.h	/^  bool HideValues;       \/\/\/<Ignora los Values en determinados metodos como SaveData(). It ignores the values in certain functions as SaveData().$/;"	m	class:JBinaryData	access:private
JBinaryData::InArray	JBinaryData.cpp	/^void JBinaryData::InArray(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InArray	JBinaryData.h	/^  void InArray(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InArrayBase	JBinaryData.cpp	/^void JBinaryData::InArrayBase(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InArrayBase	JBinaryData.h	/^  void InArrayBase(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InArrayData	JBinaryData.cpp	/^void JBinaryData::InArrayData(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InArrayData	JBinaryData.h	/^  void InArrayData(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const JBinaryDataArray *ar) const
JBinaryData::InBool	JBinaryData.h	/^  void InBool   (unsigned &count,unsigned size,byte *ptr,bool v)const{            int vv=(v? 1: 0); InInt(count,size,ptr,vv);               }  \/\/\/<Introduce bool en ptr. Introduces bool in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool v) const
JBinaryData::InChar	JBinaryData.h	/^  void InChar   (unsigned &count,unsigned size,byte *ptr,char v)const{            InData(count,size,ptr,(byte*)&v,sizeof(char));            }  \/\/\/<Introduce char en ptr. Introduces char in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,char v) const
JBinaryData::InData	JBinaryData.cpp	/^void JBinaryData::InData(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat) const
JBinaryData::InData	JBinaryData.h	/^  void InData   (unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const byte *dat,unsigned sdat) const
JBinaryData::InDouble	JBinaryData.h	/^  void InDouble (unsigned &count,unsigned size,byte *ptr,double v)const{          InData(count,size,ptr,(byte*)&v,sizeof(double));          }  \/\/\/<Introduce double en ptr. Introduces double in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,double v) const
JBinaryData::InDouble3	JBinaryData.h	/^  void InDouble3(unsigned &count,unsigned size,byte *ptr,tdouble3 v)const{        InData(count,size,ptr,(byte*)&v,sizeof(tdouble3));        }  \/\/\/<Introduce tdouble3 en ptr. Introduces tdouble3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tdouble3 v) const
JBinaryData::InFloat	JBinaryData.h	/^  void InFloat  (unsigned &count,unsigned size,byte *ptr,float v)const{           InData(count,size,ptr,(byte*)&v,sizeof(float));           }  \/\/\/<Introduce float en ptr. Introduces float in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,float v) const
JBinaryData::InFloat3	JBinaryData.h	/^  void InFloat3 (unsigned &count,unsigned size,byte *ptr,tfloat3 v)const{         InData(count,size,ptr,(byte*)&v,sizeof(tfloat3));         }  \/\/\/<Introduce tfloat3 en ptr. Introduces tfloat3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tfloat3 v) const
JBinaryData::InInt	JBinaryData.h	/^  void InInt    (unsigned &count,unsigned size,byte *ptr,int v)const{             InData(count,size,ptr,(byte*)&v,sizeof(int));             }  \/\/\/<Introduce int en ptr. Introduces int in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,int v) const
JBinaryData::InInt3	JBinaryData.h	/^  void InInt3   (unsigned &count,unsigned size,byte *ptr,tint3 v)const{           InData(count,size,ptr,(byte*)&v,sizeof(tint3));           }  \/\/\/<Introduce tint3 en ptr. Introduces tint3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tint3 v) const
JBinaryData::InItem	JBinaryData.cpp	/^void JBinaryData::InItem(unsigned &count,unsigned size,byte *ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
JBinaryData::InItem	JBinaryData.h	/^  void InItem(unsigned &count,unsigned size,byte *ptr,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
JBinaryData::InItemBase	JBinaryData.cpp	/^void JBinaryData::InItemBase(unsigned &count,unsigned size,byte *ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
JBinaryData::InItemBase	JBinaryData.h	/^  void InItemBase(unsigned &count,unsigned size,byte *ptr,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,bool all) const
JBinaryData::InLlong	JBinaryData.h	/^  void InLlong  (unsigned &count,unsigned size,byte *ptr,llong v)const{           InData(count,size,ptr,(byte*)&v,sizeof(llong));           }  \/\/\/<Introduce long long en ptr. Introduces long long in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,llong v) const
JBinaryData::InShort	JBinaryData.h	/^  void InShort  (unsigned &count,unsigned size,byte *ptr,short v)const{           InData(count,size,ptr,(byte*)&v,sizeof(short));           }  \/\/\/<Introduce short en ptr. Introduces short in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,short v) const
JBinaryData::InStr	JBinaryData.cpp	/^void JBinaryData::InStr(unsigned &count,unsigned size,byte *ptr,const std::string &cad)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const std::string &cad) const
JBinaryData::InStr	JBinaryData.h	/^  void InStr    (unsigned &count,unsigned size,byte *ptr,const std::string &cad)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const std::string &cad) const
JBinaryData::InUchar	JBinaryData.h	/^  void InUchar  (unsigned &count,unsigned size,byte *ptr,unsigned char v)const{   InData(count,size,ptr,(byte*)&v,sizeof(unsigned char));   }  \/\/\/<Introduce unsigned char en ptr. Introduces unsigned char in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned char v) const
JBinaryData::InUint	JBinaryData.h	/^  void InUint   (unsigned &count,unsigned size,byte *ptr,unsigned v)const{        InData(count,size,ptr,(byte*)&v,sizeof(unsigned));        }  \/\/\/<Introduce unsigned en ptr. Introduces unsigned in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned v) const
JBinaryData::InUint3	JBinaryData.h	/^  void InUint3  (unsigned &count,unsigned size,byte *ptr,tuint3 v)const{          InData(count,size,ptr,(byte*)&v,sizeof(tuint3));          }  \/\/\/<Introduce tuint3 en ptr. Introduces tuint3 in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,tuint3 v) const
JBinaryData::InUllong	JBinaryData.h	/^  void InUllong (unsigned &count,unsigned size,byte *ptr,ullong v)const{          InData(count,size,ptr,(byte*)&v,sizeof(ullong));          }  \/\/\/<Introduce unsigned long long en ptr. Introduces unsigned long in ptr$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,ullong v) const
JBinaryData::InUshort	JBinaryData.h	/^  void InUshort (unsigned &count,unsigned size,byte *ptr,unsigned short v)const{  InData(count,size,ptr,(byte*)&v,sizeof(unsigned short));  }  \/\/\/<Introduce unsigned short en ptr. Introduces unsigned short in ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,unsigned short v) const
JBinaryData::InValue	JBinaryData.cpp	/^void JBinaryData::InValue(unsigned &count,unsigned size,byte *ptr,const StValue &v)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr,const StValue &v) const
JBinaryData::InValue	JBinaryData.h	/^  void InValue(unsigned &count,unsigned size,byte *ptr,const StValue &v)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr,const StValue &v) const
JBinaryData::Items	JBinaryData.h	/^  std::vector<JBinaryData*> Items;$/;"	m	class:JBinaryData	access:private
JBinaryData::JBinaryData	JBinaryData.cpp	/^JBinaryData::JBinaryData(const JBinaryData &src){$/;"	f	class:JBinaryData	signature:(const JBinaryData &src)
JBinaryData::JBinaryData	JBinaryData.cpp	/^JBinaryData::JBinaryData(std::string name):Name(name){ $/;"	f	class:JBinaryData	signature:(std::string name)
JBinaryData::JBinaryData	JBinaryData.h	/^  JBinaryData(const JBinaryData &src);$/;"	p	class:JBinaryData	access:public	signature:(const JBinaryData &src)
JBinaryData::JBinaryData	JBinaryData.h	/^  JBinaryData(std::string name="JBinary_Data");$/;"	p	class:JBinaryData	access:public	signature:(std::string name=Ó)
JBinaryData::LoadData	JBinaryData.cpp	/^void JBinaryData::LoadData(unsigned size,const byte* ptr){$/;"	f	class:JBinaryData	signature:(unsigned size,const byte* ptr)
JBinaryData::LoadData	JBinaryData.h	/^  void LoadData(unsigned size,const byte* ptr);$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,const byte* ptr)
JBinaryData::LoadFile	JBinaryData.cpp	/^void JBinaryData::LoadFile(const std::string &file,const std::string &filecode,bool memory){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory)
JBinaryData::LoadFile	JBinaryData.h	/^  void LoadFile(const std::string &file,const std::string &filecode="",bool memory=false);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode=Ó,bool memory=false)
JBinaryData::LoadFileListApp	JBinaryData.cpp	/^void JBinaryData::LoadFileListApp(const std::string &file,const std::string &filecode,bool memory){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory)
JBinaryData::LoadFileListApp	JBinaryData.h	/^  void LoadFileListApp(const std::string &file,const std::string &filecode,bool memory=false);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode,bool memory=false)
JBinaryData::MakeFileHead	JBinaryData.cpp	/^JBinaryData::StHeadFmtBin JBinaryData::MakeFileHead(const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &filecode) const
JBinaryData::MakeFileHead	JBinaryData.h	/^  JBinaryData::StHeadFmtBin MakeFileHead(const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &filecode) const
JBinaryData::Name	JBinaryData.h	/^  std::string Name;      \/\/\/<Nombre de item. Name of item.$/;"	m	class:JBinaryData	access:private
JBinaryData::NameOfValue	JBinaryData.cpp	/^std::string JBinaryData::NameOfValue(unsigned index)const{$/;"	f	class:JBinaryData	signature:(unsigned index) const
JBinaryData::NameOfValue	JBinaryData.h	/^  std::string NameOfValue(unsigned index)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned index) const
JBinaryData::OpenFileStructure	JBinaryData.cpp	/^void JBinaryData::OpenFileStructure(const std::string &file,const std::string &filecode){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode)
JBinaryData::OpenFileStructure	JBinaryData.h	/^  void OpenFileStructure(const std::string &file,const std::string &filecode="");$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode=Ó)
JBinaryData::OutArray	JBinaryData.cpp	/^void JBinaryData::OutArray(unsigned &count,unsigned size,const byte *ptr){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr)
JBinaryData::OutArray	JBinaryData.h	/^  void OutArray(unsigned &count,unsigned size,const byte *ptr);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr)
JBinaryData::OutArrayBase	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::OutArrayBase(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata)
JBinaryData::OutArrayBase	JBinaryData.h	/^  JBinaryDataArray* OutArrayBase(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata)
JBinaryData::OutArrayData	JBinaryData.cpp	/^void JBinaryData::OutArrayData(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata)
JBinaryData::OutArrayData	JBinaryData.h	/^  void OutArrayData(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata)
JBinaryData::OutBool	JBinaryData.h	/^  bool           OutBool   (unsigned &count,unsigned size,const byte *ptr)const{  return(OutInt(count,size,ptr)!=0);  }  \/\/\/ Extrae bool de ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutChar	JBinaryData.h	/^  char           OutChar   (unsigned &count,unsigned size,const byte *ptr)const{  char v;           OutData(count,size,ptr,(byte*)&v,sizeof(char));           return(v);  }  \/\/\/< Extrae char de ptr. Extracts char of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutData	JBinaryData.cpp	/^void JBinaryData::OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
JBinaryData::OutData	JBinaryData.h	/^  void           OutData   (unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
JBinaryData::OutDouble	JBinaryData.h	/^  double         OutDouble (unsigned &count,unsigned size,const byte *ptr)const{  double v;         OutData(count,size,ptr,(byte*)&v,sizeof(double));         return(v);  }  \/\/\/< Extrae double de ptr. Extracts double of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutDouble3	JBinaryData.h	/^  tdouble3       OutDouble3(unsigned &count,unsigned size,const byte *ptr)const{  tdouble3 v;       OutData(count,size,ptr,(byte*)&v,sizeof(tdouble3));       return(v);  }  \/\/\/ Extrae tdouble3 de ptr. Extracts tdouble3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutFloat	JBinaryData.h	/^  float          OutFloat  (unsigned &count,unsigned size,const byte *ptr)const{  float v;          OutData(count,size,ptr,(byte*)&v,sizeof(float));          return(v);  }  \/\/\/< Extrae float de ptr. Extracts float of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutFloat3	JBinaryData.h	/^  tfloat3        OutFloat3 (unsigned &count,unsigned size,const byte *ptr)const{  tfloat3 v;        OutData(count,size,ptr,(byte*)&v,sizeof(tfloat3));        return(v);  }  \/\/\/ Extrae tfloat3 de ptr. Extracts tfloat3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutInt	JBinaryData.h	/^  int            OutInt    (unsigned &count,unsigned size,const byte *ptr)const{  int v;            OutData(count,size,ptr,(byte*)&v,sizeof(int));            return(v);  }  \/\/\/< Extrae int de ptr. Extracts int of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutInt3	JBinaryData.h	/^  tint3          OutInt3   (unsigned &count,unsigned size,const byte *ptr)const{  tint3 v;          OutData(count,size,ptr,(byte*)&v,sizeof(tint3));          return(v);  }  \/\/\/< Extrae tint3 de ptr. Extracts tint3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutItem	JBinaryData.cpp	/^void JBinaryData::OutItem(unsigned &count,unsigned size,const byte *ptr,bool create){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,bool create)
JBinaryData::OutItem	JBinaryData.h	/^  void OutItem(unsigned &count,unsigned size,const byte *ptr,bool create);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,bool create)
JBinaryData::OutItemBase	JBinaryData.cpp	/^JBinaryData* JBinaryData::OutItemBase(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues)
JBinaryData::OutItemBase	JBinaryData.h	/^  JBinaryData* OutItemBase(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues)
JBinaryData::OutLlong	JBinaryData.h	/^  llong          OutLlong  (unsigned &count,unsigned size,const byte *ptr)const{  llong v;          OutData(count,size,ptr,(byte*)&v,sizeof(llong));          return(v);  }  \/\/\/< Extrae long long de ptr. Extracts long long of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutShort	JBinaryData.h	/^  short          OutShort  (unsigned &count,unsigned size,const byte *ptr)const{  short v;          OutData(count,size,ptr,(byte*)&v,sizeof(short));          return(v);  }  \/\/\/< Extrae short de ptr. Extracts short of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutStr	JBinaryData.cpp	/^std::string JBinaryData::OutStr(unsigned &count,unsigned size,const byte *ptr)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutStr	JBinaryData.h	/^  std::string    OutStr    (unsigned &count,unsigned size,const byte *ptr)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutUchar	JBinaryData.h	/^  unsigned char  OutUchar  (unsigned &count,unsigned size,const byte *ptr)const{  unsigned char v;  OutData(count,size,ptr,(byte*)&v,sizeof(unsigned char));  return(v);  }  \/\/\/< Extrae unsigned char de ptr. Extracts unsigned char of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutUint	JBinaryData.h	/^  unsigned       OutUint   (unsigned &count,unsigned size,const byte *ptr)const{  unsigned v;       OutData(count,size,ptr,(byte*)&v,sizeof(unsigned));       return(v);  }  \/\/\/< Extrae unsigned de ptr. Extracts unsigned of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutUint3	JBinaryData.h	/^  tuint3         OutUint3  (unsigned &count,unsigned size,const byte *ptr)const{  tuint3 v;         OutData(count,size,ptr,(byte*)&v,sizeof(tuint3));         return(v);  }  \/\/\/ Extrae tuint3 de ptr. Extracts tuint3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutUllong	JBinaryData.h	/^  ullong         OutUllong (unsigned &count,unsigned size,const byte *ptr)const{  ullong v;         OutData(count,size,ptr,(byte*)&v,sizeof(ullong));         return(v);  }  \/\/\/< Extrae unsigned long long de ptr. Extracts unsigned long long of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutUshort	JBinaryData.h	/^  unsigned short OutUshort (unsigned &count,unsigned size,const byte *ptr)const{  unsigned short v; OutData(count,size,ptr,(byte*)&v,sizeof(unsigned short)); return(v);  }  \/\/\/< Extrae unsigned short de ptr. Extracts unsigned short of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryData::OutValue	JBinaryData.cpp	/^void JBinaryData::OutValue(unsigned &count,unsigned size,const byte *ptr){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr)
JBinaryData::OutValue	JBinaryData.h	/^  void OutValue(unsigned &count,unsigned size,const byte *ptr);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr)
JBinaryData::Parent	JBinaryData.h	/^  JBinaryData* Parent;$/;"	m	class:JBinaryData	access:private
JBinaryData::ReadArray	JBinaryData.cpp	/^void JBinaryData::ReadArray(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata)
JBinaryData::ReadArray	JBinaryData.h	/^  void ReadArray(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata)
JBinaryData::ReadArrayData	JBinaryData.cpp	/^void JBinaryData::ReadArrayData(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata)
JBinaryData::ReadArrayData	JBinaryData.h	/^  void ReadArrayData(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata)
JBinaryData::ReadItem	JBinaryData.cpp	/^void JBinaryData::ReadItem(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata)
JBinaryData::ReadItem	JBinaryData.h	/^  void ReadItem(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata)
JBinaryData::ReadUint	JBinaryData.cpp	/^unsigned JBinaryData::ReadUint(std::ifstream *pf)const{$/;"	f	class:JBinaryData	signature:(std::ifstream *pf) const
JBinaryData::ReadUint	JBinaryData.h	/^  unsigned ReadUint(std::ifstream *pf)const;$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf) const
JBinaryData::RemoveArray	JBinaryData.cpp	/^void JBinaryData::RemoveArray(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::RemoveArray	JBinaryData.h	/^  void RemoveArray(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::RemoveArrays	JBinaryData.cpp	/^void JBinaryData::RemoveArrays(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::RemoveArrays	JBinaryData.h	/^  void RemoveArrays();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::RemoveItem	JBinaryData.cpp	/^void JBinaryData::RemoveItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::RemoveItem	JBinaryData.h	/^  void RemoveItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::RemoveItems	JBinaryData.cpp	/^void JBinaryData::RemoveItems(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::RemoveItems	JBinaryData.h	/^  void RemoveItems();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::RemoveValue	JBinaryData.cpp	/^void JBinaryData::RemoveValue(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::RemoveValue	JBinaryData.h	/^  void RemoveValue(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::RemoveValues	JBinaryData.cpp	/^void JBinaryData::RemoveValues(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::RemoveValues	JBinaryData.h	/^  void RemoveValues();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryData::ResetValue	JBinaryData.cpp	/^void JBinaryData::ResetValue(const std::string &name,JBinaryDataDef::TpData type,JBinaryData::StValue &v){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type,JBinaryData::StValue &v)
JBinaryData::ResetValue	JBinaryData.h	/^  static void ResetValue(const std::string &name,JBinaryDataDef::TpData type,StValue &v);$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type,StValue &v)
JBinaryData::SaveData	JBinaryData.cpp	/^unsigned JBinaryData::SaveData(unsigned size,byte* ptr,bool all){$/;"	f	class:JBinaryData	signature:(unsigned size,byte* ptr,bool all)
JBinaryData::SaveData	JBinaryData.h	/^  unsigned SaveData(unsigned size,byte* ptr,bool all);$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,byte* ptr,bool all)
JBinaryData::SaveDataConst	JBinaryData.cpp	/^unsigned JBinaryData::SaveDataConst(unsigned size,byte* ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned size,byte* ptr,bool all) const
JBinaryData::SaveDataConst	JBinaryData.h	/^  unsigned SaveDataConst(unsigned size,byte* ptr,bool all)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,byte* ptr,bool all) const
JBinaryData::SaveFile	JBinaryData.cpp	/^void JBinaryData::SaveFile(const std::string &file,bool memory,bool all){$/;"	f	class:JBinaryData	signature:(const std::string &file,bool memory,bool all)
JBinaryData::SaveFile	JBinaryData.h	/^  void SaveFile(const std::string &file,bool memory=false,bool all=true);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,bool memory=false,bool all=true)
JBinaryData::SaveFileData	JBinaryData.cpp	/^void JBinaryData::SaveFileData(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all) const
JBinaryData::SaveFileData	JBinaryData.h	/^  void SaveFileData(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all) const
JBinaryData::SaveFileListApp	JBinaryData.cpp	/^void JBinaryData::SaveFileListApp(const std::string &file,const std::string &filecode,bool memory,bool all){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory,bool all)
JBinaryData::SaveFileListApp	JBinaryData.h	/^  void SaveFileListApp(const std::string &file,const std::string &filecode,bool memory=false,bool all=true);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode,bool memory=false,bool all=true)
JBinaryData::SaveFileXml	JBinaryData.cpp	/^void JBinaryData::SaveFileXml(std::string file,bool svarrays,const std::string &head)const{$/;"	f	class:JBinaryData	signature:(std::string file,bool svarrays,const std::string &head) const
JBinaryData::SaveFileXml	JBinaryData.h	/^  void SaveFileXml(std::string file,bool svarrays=false,const std::string &head=" fmt=\\"JBinaryData\\"")const;$/;"	p	class:JBinaryData	access:public	signature:(std::string file,bool svarrays=false,const std::string &head=Ó) const
JBinaryData::SaveValues	JBinaryData.cpp	/^void JBinaryData::SaveValues(unsigned &count,unsigned size,byte *ptr)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr) const
JBinaryData::SaveValues	JBinaryData.h	/^  void SaveValues(unsigned &count,unsigned size,byte *ptr)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr) const
JBinaryData::SetFmtDouble	JBinaryData.cpp	/^void JBinaryData::SetFmtDouble(const std::string &fmt,bool down){$/;"	f	class:JBinaryData	signature:(const std::string &fmt,bool down)
JBinaryData::SetFmtDouble	JBinaryData.h	/^  void SetFmtDouble(const std::string &fmt,bool down);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &fmt,bool down)
JBinaryData::SetFmtFloat	JBinaryData.cpp	/^void JBinaryData::SetFmtFloat(const std::string &fmt,bool down){$/;"	f	class:JBinaryData	signature:(const std::string &fmt,bool down)
JBinaryData::SetFmtFloat	JBinaryData.h	/^  void SetFmtFloat(const std::string &fmt,bool down);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &fmt,bool down)
JBinaryData::SetHide	JBinaryData.h	/^  void SetHide(bool hide){ HideAll=hide; }$/;"	f	class:JBinaryData	access:public	signature:(bool hide)
JBinaryData::SetHideArrays	JBinaryData.cpp	/^void JBinaryData::SetHideArrays(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
JBinaryData::SetHideArrays	JBinaryData.h	/^  void SetHideArrays(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
JBinaryData::SetHideItems	JBinaryData.cpp	/^void JBinaryData::SetHideItems(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
JBinaryData::SetHideItems	JBinaryData.h	/^  void SetHideItems(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
JBinaryData::SetHideValues	JBinaryData.cpp	/^void JBinaryData::SetHideValues(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
JBinaryData::SetHideValues	JBinaryData.h	/^  void SetHideValues(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
JBinaryData::SetName	JBinaryData.cpp	/^void JBinaryData::SetName(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
JBinaryData::SetName	JBinaryData.h	/^  void SetName(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
JBinaryData::SetvBool	JBinaryData.cpp	/^void JBinaryData::SetvBool(const std::string &name,bool v){$/;"	f	class:JBinaryData	signature:(const std::string &name,bool v)
JBinaryData::SetvBool	JBinaryData.h	/^  void SetvBool   (const std::string &name,bool v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool v)
JBinaryData::SetvChar	JBinaryData.cpp	/^void JBinaryData::SetvChar(const std::string &name,char v){$/;"	f	class:JBinaryData	signature:(const std::string &name,char v)
JBinaryData::SetvChar	JBinaryData.h	/^  void SetvChar   (const std::string &name,char v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,char v)
JBinaryData::SetvDouble	JBinaryData.cpp	/^void JBinaryData::SetvDouble(const std::string &name,double v){$/;"	f	class:JBinaryData	signature:(const std::string &name,double v)
JBinaryData::SetvDouble	JBinaryData.h	/^  void SetvDouble (const std::string &name,double v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,double v)
JBinaryData::SetvDouble3	JBinaryData.cpp	/^void JBinaryData::SetvDouble3(const std::string &name,tdouble3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tdouble3 v)
JBinaryData::SetvDouble3	JBinaryData.h	/^  void SetvDouble3(const std::string &name,tdouble3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tdouble3 v)
JBinaryData::SetvFloat	JBinaryData.cpp	/^void JBinaryData::SetvFloat(const std::string &name,float v){$/;"	f	class:JBinaryData	signature:(const std::string &name,float v)
JBinaryData::SetvFloat	JBinaryData.h	/^  void SetvFloat  (const std::string &name,float v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,float v)
JBinaryData::SetvFloat3	JBinaryData.cpp	/^void JBinaryData::SetvFloat3(const std::string &name,tfloat3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tfloat3 v)
JBinaryData::SetvFloat3	JBinaryData.h	/^  void SetvFloat3 (const std::string &name,tfloat3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tfloat3 v)
JBinaryData::SetvInt	JBinaryData.cpp	/^void JBinaryData::SetvInt(const std::string &name,int v){$/;"	f	class:JBinaryData	signature:(const std::string &name,int v)
JBinaryData::SetvInt	JBinaryData.h	/^  void SetvInt    (const std::string &name,int v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,int v)
JBinaryData::SetvInt3	JBinaryData.cpp	/^void JBinaryData::SetvInt3(const std::string &name,tint3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tint3 v)
JBinaryData::SetvInt3	JBinaryData.h	/^  void SetvInt3   (const std::string &name,tint3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tint3 v)
JBinaryData::SetvLlong	JBinaryData.cpp	/^void JBinaryData::SetvLlong(const std::string &name,llong v){$/;"	f	class:JBinaryData	signature:(const std::string &name,llong v)
JBinaryData::SetvLlong	JBinaryData.h	/^  void SetvLlong  (const std::string &name,llong v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,llong v)
JBinaryData::SetvShort	JBinaryData.cpp	/^void JBinaryData::SetvShort(const std::string &name,short v){$/;"	f	class:JBinaryData	signature:(const std::string &name,short v)
JBinaryData::SetvShort	JBinaryData.h	/^  void SetvShort  (const std::string &name,short v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,short v)
JBinaryData::SetvText	JBinaryData.cpp	/^void JBinaryData::SetvText(const std::string &name,const std::string &v){$/;"	f	class:JBinaryData	signature:(const std::string &name,const std::string &v)
JBinaryData::SetvText	JBinaryData.h	/^  void SetvText   (const std::string &name,const std::string &v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,const std::string &v)
JBinaryData::SetvUchar	JBinaryData.cpp	/^void JBinaryData::SetvUchar(const std::string &name,unsigned char v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned char v)
JBinaryData::SetvUchar	JBinaryData.h	/^  void SetvUchar  (const std::string &name,unsigned char v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned char v)
JBinaryData::SetvUint	JBinaryData.cpp	/^void JBinaryData::SetvUint(const std::string &name,unsigned v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned v)
JBinaryData::SetvUint	JBinaryData.h	/^  void SetvUint   (const std::string &name,unsigned v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned v)
JBinaryData::SetvUint3	JBinaryData.cpp	/^void JBinaryData::SetvUint3(const std::string &name,tuint3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tuint3 v)
JBinaryData::SetvUint3	JBinaryData.h	/^  void SetvUint3  (const std::string &name,tuint3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tuint3 v)
JBinaryData::SetvUllong	JBinaryData.cpp	/^void JBinaryData::SetvUllong(const std::string &name,ullong v){$/;"	f	class:JBinaryData	signature:(const std::string &name,ullong v)
JBinaryData::SetvUllong	JBinaryData.h	/^  void SetvUllong (const std::string &name,ullong v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,ullong v)
JBinaryData::SetvUshort	JBinaryData.cpp	/^void JBinaryData::SetvUshort(const std::string &name,unsigned short v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned short v)
JBinaryData::SetvUshort	JBinaryData.h	/^  void SetvUshort (const std::string &name,unsigned short v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned short v)
JBinaryData::StHeadFmtBin	JBinaryData.h	/^  }StHeadFmtBin;\/\/-sizeof(64)$/;"	t	class:JBinaryData	typeref:struct:JBinaryData::__anon6	access:private
JBinaryData::StValue	JBinaryData.h	/^  }StValue;$/;"	t	class:JBinaryData	typeref:struct:JBinaryData::__anon7	access:public
JBinaryData::TypeOfValue	JBinaryData.cpp	/^JBinaryDataDef::TpData JBinaryData::TypeOfValue(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
JBinaryData::TypeOfValue	JBinaryData.cpp	/^JBinaryDataDef::TpData JBinaryData::TypeOfValue(unsigned index)const{$/;"	f	class:JBinaryData	signature:(unsigned index) const
JBinaryData::TypeOfValue	JBinaryData.h	/^  JBinaryDataDef::TpData TypeOfValue(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
JBinaryData::TypeOfValue	JBinaryData.h	/^  JBinaryDataDef::TpData TypeOfValue(unsigned index)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned index) const
JBinaryData::ValueToXml	JBinaryData.cpp	/^std::string JBinaryData::ValueToXml(const StValue &v)const{$/;"	f	class:JBinaryData	signature:(const StValue &v) const
JBinaryData::ValueToXml	JBinaryData.h	/^  std::string ValueToXml(const StValue &v)const;$/;"	p	class:JBinaryData	access:private	signature:(const StValue &v) const
JBinaryData::Values	JBinaryData.h	/^  std::vector<StValue> Values;$/;"	m	class:JBinaryData	access:private
JBinaryData::ValuesCachePrepare	JBinaryData.cpp	/^void JBinaryData::ValuesCachePrepare(bool down){$/;"	f	class:JBinaryData	signature:(bool down)
JBinaryData::ValuesCachePrepare	JBinaryData.h	/^  void ValuesCachePrepare(bool down);$/;"	p	class:JBinaryData	access:private	signature:(bool down)
JBinaryData::ValuesCacheReset	JBinaryData.cpp	/^void JBinaryData::ValuesCacheReset(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::ValuesCacheReset	JBinaryData.h	/^  void ValuesCacheReset();$/;"	p	class:JBinaryData	access:private	signature:()
JBinaryData::ValuesData	JBinaryData.h	/^  byte* ValuesData;$/;"	m	class:JBinaryData	access:private
JBinaryData::ValuesModif	JBinaryData.h	/^  bool ValuesModif;$/;"	m	class:JBinaryData	access:private
JBinaryData::ValuesSize	JBinaryData.h	/^  unsigned ValuesSize;$/;"	m	class:JBinaryData	access:private
JBinaryData::WriteArray	JBinaryData.cpp	/^void JBinaryData::WriteArray(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar) const
JBinaryData::WriteArray	JBinaryData.h	/^  void WriteArray(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar) const
JBinaryData::WriteArrayData	JBinaryData.cpp	/^void JBinaryData::WriteArrayData(std::fstream *pf,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,const JBinaryDataArray *ar) const
JBinaryData::WriteArrayData	JBinaryData.h	/^  void WriteArrayData(std::fstream *pf,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,const JBinaryDataArray *ar) const
JBinaryData::WriteFileXml	JBinaryData.cpp	/^void JBinaryData::WriteFileXml(const std::string &tabs,std::ofstream* pf,bool svarrays)const{$/;"	f	class:JBinaryData	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays) const
JBinaryData::WriteFileXml	JBinaryData.h	/^  void WriteFileXml(const std::string &tabs,std::ofstream* pf,bool svarrays)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays) const
JBinaryData::WriteFileXmlArray	JBinaryData.cpp	/^void JBinaryData::WriteFileXmlArray(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar)const{$/;"	f	class:JBinaryData	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar) const
JBinaryData::WriteFileXmlArray	JBinaryData.h	/^  void WriteFileXmlArray(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar) const
JBinaryData::WriteItem	JBinaryData.cpp	/^void JBinaryData::WriteItem(std::fstream *pf,unsigned sbuf,byte *buf,bool all)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,unsigned sbuf,byte *buf,bool all) const
JBinaryData::WriteItem	JBinaryData.h	/^  void WriteItem(std::fstream *pf,unsigned sbuf,byte *buf,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,unsigned sbuf,byte *buf,bool all) const
JBinaryData::__anon6::byteorder	JBinaryData.h	/^    byte byteorder;              \/\/\/<1:BigEndian 0:LittleEndian.$/;"	m	struct:JBinaryData::__anon6	access:public
JBinaryData::__anon6::titu	JBinaryData.h	/^    char titu[60];               \/\/\/<Title of the file eg: "#File JBinaryData".$/;"	m	struct:JBinaryData::__anon6	access:public
JBinaryData::__anon6::void1	JBinaryData.h	/^    byte void1;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
JBinaryData::__anon6::void2	JBinaryData.h	/^    byte void2;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
JBinaryData::__anon6::void3	JBinaryData.h	/^    byte void3;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
JBinaryData::__anon7::__anon8::vchar	JBinaryData.h	/^      char vchar;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vdouble	JBinaryData.h	/^      double vdouble;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vdouble3	JBinaryData.h	/^      tdouble3 vdouble3;   \/\/- Elemento de mayor tamaño utilizado para poner a Zero. Large item used to zero elements.$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vfloat	JBinaryData.h	/^      float vfloat;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vfloat3	JBinaryData.h	/^      tfloat3 vfloat3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vint	JBinaryData.h	/^      int vint;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vint3	JBinaryData.h	/^      tint3 vint3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vllong	JBinaryData.h	/^      llong vllong;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vshort	JBinaryData.h	/^      short vshort;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vuchar	JBinaryData.h	/^      unsigned char vuchar;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vuint	JBinaryData.h	/^      unsigned vuint;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vuint3	JBinaryData.h	/^      tuint3 vuint3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vullong	JBinaryData.h	/^      ullong vullong;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::__anon8::vushort	JBinaryData.h	/^      unsigned vushort;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
JBinaryData::__anon7::name	JBinaryData.h	/^    std::string name;$/;"	m	struct:JBinaryData::__anon7	access:public
JBinaryData::__anon7::type	JBinaryData.h	/^    JBinaryDataDef::TpData type;$/;"	m	struct:JBinaryData::__anon7	access:public
JBinaryData::__anon7::vtext	JBinaryData.h	/^    std::string vtext;$/;"	m	struct:JBinaryData::__anon7	access:public
JBinaryData::operator =	JBinaryData.cpp	/^JBinaryData& JBinaryData::operator=(const JBinaryData &src){$/;"	f	class:JBinaryData	signature:(const JBinaryData &src)
JBinaryData::operator =	JBinaryData.h	/^  JBinaryData& operator=(const JBinaryData &src);$/;"	p	class:JBinaryData	access:public	signature:(const JBinaryData &src)
JBinaryData::~JBinaryData	JBinaryData.cpp	/^JBinaryData::~JBinaryData(){$/;"	f	class:JBinaryData	signature:()
JBinaryData::~JBinaryData	JBinaryData.h	/^  ~JBinaryData();$/;"	p	class:JBinaryData	access:public	signature:()
JBinaryDataArray	JBinaryData.cpp	/^JBinaryDataArray::JBinaryDataArray(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type):Type(type){ $/;"	f	class:JBinaryDataArray	signature:(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type)
JBinaryDataArray	JBinaryData.h	/^  JBinaryDataArray(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryDataArray	access:public	signature:(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type)
JBinaryDataArray	JBinaryData.h	/^class JBinaryDataArray : protected JObject$/;"	c	inherits:JObject
JBinaryDataArray::AddData	JBinaryData.cpp	/^void JBinaryDataArray::AddData(unsigned count,const void* data,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const void* data,bool resize)
JBinaryDataArray::AddData	JBinaryData.h	/^  void AddData(unsigned count,const void* data,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const void* data,bool resize)
JBinaryDataArray::AddText	JBinaryData.cpp	/^void JBinaryDataArray::AddText(const std::string &str,bool resize){$/;"	f	class:JBinaryDataArray	signature:(const std::string &str,bool resize)
JBinaryDataArray::AddText	JBinaryData.h	/^  void AddText(const std::string &str,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(const std::string &str,bool resize)
JBinaryDataArray::AddTexts	JBinaryData.cpp	/^void JBinaryDataArray::AddTexts(unsigned count,const std::string *strs,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const std::string *strs,bool resize)
JBinaryDataArray::AddTexts	JBinaryData.h	/^  void AddTexts(unsigned count,const std::string *strs,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const std::string *strs,bool resize)
JBinaryDataArray::AllocMemory	JBinaryData.cpp	/^void JBinaryDataArray::AllocMemory(unsigned size,bool savedata){$/;"	f	class:JBinaryDataArray	signature:(unsigned size,bool savedata)
JBinaryDataArray::AllocMemory	JBinaryData.h	/^  void AllocMemory(unsigned size,bool savedata=false);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,bool savedata=false)
JBinaryDataArray::AllocPointer	JBinaryData.cpp	/^void* JBinaryDataArray::AllocPointer(unsigned size)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned size) const
JBinaryDataArray::AllocPointer	JBinaryData.h	/^  void* AllocPointer(unsigned size)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned size) const
JBinaryDataArray::CheckMemory	JBinaryData.cpp	/^void JBinaryDataArray::CheckMemory(unsigned count,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,bool resize)
JBinaryDataArray::CheckMemory	JBinaryData.h	/^  void CheckMemory(unsigned count,bool resize);$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned count,bool resize)
JBinaryDataArray::ClearFileData	JBinaryData.cpp	/^void JBinaryDataArray::ClearFileData(){$/;"	f	class:JBinaryDataArray	signature:()
JBinaryDataArray::ClearFileData	JBinaryData.h	/^  void ClearFileData();$/;"	p	class:JBinaryDataArray	access:public	signature:()
JBinaryDataArray::ConfigExternalMemory	JBinaryData.cpp	/^void JBinaryDataArray::ConfigExternalMemory(unsigned size,void* pointer){$/;"	f	class:JBinaryDataArray	signature:(unsigned size,void* pointer)
JBinaryDataArray::ConfigExternalMemory	JBinaryData.h	/^  void ConfigExternalMemory(unsigned size,void* pointer);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,void* pointer)
JBinaryDataArray::ConfigFileData	JBinaryData.cpp	/^void JBinaryDataArray::ConfigFileData(llong filepos,unsigned datacount,unsigned datasize){$/;"	f	class:JBinaryDataArray	signature:(llong filepos,unsigned datacount,unsigned datasize)
JBinaryDataArray::ConfigFileData	JBinaryData.h	/^  void ConfigFileData(llong filepos,unsigned datacount,unsigned datasize);$/;"	p	class:JBinaryDataArray	access:public	signature:(llong filepos,unsigned datacount,unsigned datasize)
JBinaryDataArray::Count	JBinaryData.h	/^  unsigned Count;         \/\/\/<Numero de elementos almacenados en pointer. Number of elements stored in pointer.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::DataInFile	JBinaryData.h	/^  bool DataInFile()const{ return(FileDataPos>=0); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::DataInPointer	JBinaryData.h	/^  bool DataInPointer()const{ return(Pointer&&Count); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::ExternalPointer	JBinaryData.h	/^  bool ExternalPointer;   \/\/\/<Indica que el puntero es externo y no debe liberarse. Indicates that the pointer is external, and should not be released.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::FileDataCount	JBinaryData.h	/^  unsigned FileDataCount; \/\/\/<Numero de elemetos del array en fichero. Number of elements in the array in a file.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::FileDataPos	JBinaryData.h	/^  llong FileDataPos;      \/\/\/<Valor mayor o igual a cero indica la posicion de lectura en el fichero abierto en el ItemHead. Value greater than or equal to zero indicates the position of reading in the file opened in the ItemHead.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::FileDataSize	JBinaryData.h	/^  unsigned FileDataSize;  \/\/\/<Size de datos del array en fichero. Size of array data in file.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::FreeMemory	JBinaryData.cpp	/^void JBinaryDataArray::FreeMemory(){$/;"	f	class:JBinaryDataArray	signature:()
JBinaryDataArray::FreeMemory	JBinaryData.h	/^  void FreeMemory();$/;"	p	class:JBinaryDataArray	access:public	signature:()
JBinaryDataArray::FreePointer	JBinaryData.cpp	/^void JBinaryDataArray::FreePointer(void* ptr)const{$/;"	f	class:JBinaryDataArray	signature:(void* ptr) const
JBinaryDataArray::FreePointer	JBinaryData.h	/^  void FreePointer(void* ptr)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(void* ptr) const
JBinaryDataArray::GetAllocMemory	JBinaryData.cpp	/^llong JBinaryDataArray::GetAllocMemory()const{$/;"	f	class:JBinaryDataArray	signature:() const
JBinaryDataArray::GetAllocMemory	JBinaryData.h	/^  llong GetAllocMemory()const;$/;"	p	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetCount	JBinaryData.h	/^  unsigned GetCount()const{ return(Count); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetDataCopy	JBinaryData.cpp	/^unsigned JBinaryDataArray::GetDataCopy(unsigned size,void* pointer)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned size,void* pointer) const
JBinaryDataArray::GetDataCopy	JBinaryData.h	/^  unsigned GetDataCopy(unsigned size,void* pointer)const;$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned size,void* pointer) const
JBinaryDataArray::GetDataPointer	JBinaryData.cpp	/^const void* JBinaryDataArray::GetDataPointer()const{$/;"	f	class:JBinaryDataArray	signature:() const
JBinaryDataArray::GetDataPointer	JBinaryData.h	/^  const void* GetDataPointer()const;$/;"	p	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetFileDataCount	JBinaryData.h	/^  unsigned GetFileDataCount()const{ return(FileDataCount); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetFileDataSize	JBinaryData.h	/^  unsigned GetFileDataSize()const{ return(FileDataSize); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetHide	JBinaryData.h	/^  bool GetHide()const{ return(Hide); }$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetName	JBinaryData.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetPointer	JBinaryData.h	/^  const void* GetPointer()const{ return(Pointer); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetSize	JBinaryData.h	/^  unsigned GetSize()const{ return(Size); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::GetType	JBinaryData.h	/^  JBinaryDataDef::TpData GetType()const{ return(Type); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::Hide	JBinaryData.h	/^  bool Hide;$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::JBinaryDataArray	JBinaryData.cpp	/^JBinaryDataArray::JBinaryDataArray(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type):Type(type){ $/;"	f	class:JBinaryDataArray	signature:(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type)
JBinaryDataArray::JBinaryDataArray	JBinaryData.h	/^  JBinaryDataArray(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JBinaryDataArray	access:public	signature:(JBinaryData* parent,const std::string &name,JBinaryDataDef::TpData type)
JBinaryDataArray::Name	JBinaryData.h	/^  std::string Name;$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::OutData	JBinaryData.cpp	/^void JBinaryDataArray::OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
JBinaryDataArray::OutData	JBinaryData.h	/^  void        OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
JBinaryDataArray::OutStr	JBinaryData.cpp	/^std::string JBinaryDataArray::OutStr(unsigned &count,unsigned size,const byte *ptr)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryDataArray::OutStr	JBinaryData.h	/^  std::string OutStr (unsigned &count,unsigned size,const byte *ptr)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryDataArray::OutUint	JBinaryData.h	/^  unsigned    OutUint(unsigned &count,unsigned size,const byte *ptr)const{  unsigned v; OutData(count,size,ptr,(byte*)&v,sizeof(unsigned)); return(v);  }  \/\/\/ Extrae unsigned de ptr. Extract ptr unsigned.$/;"	f	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
JBinaryDataArray::Parent	JBinaryData.h	/^  JBinaryData* Parent;$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::Pointer	JBinaryData.h	/^  void* Pointer;$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::PointerIsExternal	JBinaryData.h	/^  bool PointerIsExternal()const{ return(ExternalPointer); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
JBinaryDataArray::ReadData	JBinaryData.cpp	/^void JBinaryDataArray::ReadData(unsigned count,unsigned size,std::ifstream *pf,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,unsigned size,std::ifstream *pf,bool resize)
JBinaryDataArray::ReadData	JBinaryData.h	/^  void ReadData(unsigned count,unsigned size,std::ifstream *pf,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,unsigned size,std::ifstream *pf,bool resize)
JBinaryDataArray::ReadFileData	JBinaryData.cpp	/^void JBinaryDataArray::ReadFileData(bool resize){$/;"	f	class:JBinaryDataArray	signature:(bool resize)
JBinaryDataArray::ReadFileData	JBinaryData.h	/^  void ReadFileData(bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(bool resize)
JBinaryDataArray::SetData	JBinaryData.cpp	/^void JBinaryDataArray::SetData(unsigned count,const void* data,bool externalpointer){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const void* data,bool externalpointer)
JBinaryDataArray::SetData	JBinaryData.h	/^  void SetData(unsigned count,const void* data,bool externalpointer);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const void* data,bool externalpointer)
JBinaryDataArray::SetHide	JBinaryData.h	/^  void SetHide(bool hide){ Hide=hide; }$/;"	f	class:JBinaryDataArray	access:public	signature:(bool hide)
JBinaryDataArray::SetName	JBinaryData.cpp	/^void JBinaryDataArray::SetName(const std::string &name){$/;"	f	class:JBinaryDataArray	signature:(const std::string &name)
JBinaryDataArray::SetName	JBinaryData.h	/^  void SetName(const std::string &name);$/;"	p	class:JBinaryDataArray	access:public	signature:(const std::string &name)
JBinaryDataArray::Size	JBinaryData.h	/^  unsigned Size;          \/\/\/<Numero de elementos para los que hay memoria reservada. Number of elements for which there is reserved memory.$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::Type	JBinaryData.h	/^  const JBinaryDataDef::TpData Type;$/;"	m	class:JBinaryDataArray	access:private
JBinaryDataArray::~JBinaryDataArray	JBinaryData.cpp	/^JBinaryDataArray::~JBinaryDataArray(){$/;"	f	class:JBinaryDataArray	signature:()
JBinaryDataArray::~JBinaryDataArray	JBinaryData.h	/^  ~JBinaryDataArray();$/;"	p	class:JBinaryDataArray	access:public	signature:()
JBinaryDataDef	JBinaryData.h	/^class JBinaryDataDef$/;"	c
JBinaryDataDef::DatBool	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatChar	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatDouble	JBinaryData.h	/^    ,DatFloat=11,DatDouble=12$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatDouble3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatFloat	JBinaryData.h	/^    ,DatFloat=11,DatDouble=12$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatFloat3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatInt	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatInt3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatLlong	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatNull	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatShort	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatText	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatUchar	JBinaryData.h	/^  typedef enum{ DatNull=0,DatText=1,DatBool=2,DatChar=3,DatUchar=4$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatUint	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatUint3	JBinaryData.h	/^    ,DatInt3=20,DatUint3=21,DatFloat3=22,DatDouble3=23 $/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatUllong	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::DatUshort	JBinaryData.h	/^    ,DatShort=5,DatUshort=6,DatInt=7,DatUint=8,DatLlong=9,DatUllong=10$/;"	e	enum:JBinaryDataDef::__anon5
JBinaryDataDef::SizeOfType	JBinaryData.cpp	/^size_t JBinaryDataDef::SizeOfType(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
JBinaryDataDef::SizeOfType	JBinaryData.h	/^  static size_t SizeOfType(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
JBinaryDataDef::TpData	JBinaryData.h	/^  }TpData; $/;"	t	class:JBinaryDataDef	typeref:enum:JBinaryDataDef::__anon5	access:public
JBinaryDataDef::TypeIsTriple	JBinaryData.cpp	/^bool JBinaryDataDef::TypeIsTriple(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
JBinaryDataDef::TypeIsTriple	JBinaryData.h	/^  static bool TypeIsTriple(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
JBinaryDataDef::TypeToStr	JBinaryData.cpp	/^std::string JBinaryDataDef::TypeToStr(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
JBinaryDataDef::TypeToStr	JBinaryData.h	/^  static std::string TypeToStr(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
JBlockSizeAuto	JBlockSizeAuto.cpp	/^JBlockSizeAuto::JBlockSizeAuto(JLog2 *log,unsigned steps):Log(log),StepsInterval(steps){$/;"	f	class:JBlockSizeAuto	signature:(JLog2 *log,unsigned steps)
JBlockSizeAuto	JBlockSizeAuto.h	/^  JBlockSizeAuto(JLog2 *log,unsigned steps);$/;"	p	class:JBlockSizeAuto	access:public	signature:(JLog2 *log,unsigned steps)
JBlockSizeAuto	JBlockSizeAuto.h	/^class JBlockSizeAuto : protected JObject$/;"	c	inherits:JObject
JBlockSizeAuto::AddKernel	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::AddKernel(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault){ $/;"	f	class:JBlockSizeAuto	signature:(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault)
JBlockSizeAuto::AddKernel	JBlockSizeAuto.h	/^  void AddKernel(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault);$/;"	p	class:JBlockSizeAuto	access:public	signature:(std::string name,int bsmin,int bsnum,int bsinc,int bsdefault)
JBlockSizeAuto::GetKernel	JBlockSizeAuto.h	/^  JBlockSizeAutoKer* GetKernel(unsigned c){ return(c<GetKernelsCount()? Kernels[c]: NULL); }$/;"	f	class:JBlockSizeAuto	access:public	signature:(unsigned c)
JBlockSizeAuto::GetKernelByName	JBlockSizeAuto.cpp	/^unsigned JBlockSizeAuto::GetKernelByName(std::string name)const{ $/;"	f	class:JBlockSizeAuto	signature:(std::string name) const
JBlockSizeAuto::GetKernelByName	JBlockSizeAuto.h	/^  unsigned GetKernelByName(std::string name)const;$/;"	p	class:JBlockSizeAuto	access:protected	signature:(std::string name) const
JBlockSizeAuto::GetKernelsCount	JBlockSizeAuto.h	/^  unsigned GetKernelsCount()const{ return(unsigned(Kernels.size())); }$/;"	f	class:JBlockSizeAuto	access:public	signature:() const
JBlockSizeAuto::GetStepsInterval	JBlockSizeAuto.h	/^  unsigned GetStepsInterval()const{ return(StepsInterval); }$/;"	f	class:JBlockSizeAuto	access:public	signature:() const
JBlockSizeAuto::JBlockSizeAuto	JBlockSizeAuto.cpp	/^JBlockSizeAuto::JBlockSizeAuto(JLog2 *log,unsigned steps):Log(log),StepsInterval(steps){$/;"	f	class:JBlockSizeAuto	signature:(JLog2 *log,unsigned steps)
JBlockSizeAuto::JBlockSizeAuto	JBlockSizeAuto.h	/^  JBlockSizeAuto(JLog2 *log,unsigned steps);$/;"	p	class:JBlockSizeAuto	access:public	signature:(JLog2 *log,unsigned steps)
JBlockSizeAuto::Kernels	JBlockSizeAuto.h	/^  std::vector<JBlockSizeAutoKer*> Kernels;$/;"	m	class:JBlockSizeAuto	access:protected
JBlockSizeAuto::Log	JBlockSizeAuto.h	/^  JLog2 *Log;$/;"	m	class:JBlockSizeAuto	access:protected
JBlockSizeAuto::ProcessTimes	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::ProcessTimes(double timestep,unsigned nstep){ $/;"	f	class:JBlockSizeAuto	signature:(double timestep,unsigned nstep)
JBlockSizeAuto::ProcessTimes	JBlockSizeAuto.h	/^  void ProcessTimes(double timestep,unsigned nstep);$/;"	p	class:JBlockSizeAuto	access:public	signature:(double timestep,unsigned nstep)
JBlockSizeAuto::Reset	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::Reset(){$/;"	f	class:JBlockSizeAuto	signature:()
JBlockSizeAuto::Reset	JBlockSizeAuto.h	/^  void Reset();$/;"	p	class:JBlockSizeAuto	access:public	signature:()
JBlockSizeAuto::StepsInterval	JBlockSizeAuto.h	/^  unsigned StepsInterval;$/;"	m	class:JBlockSizeAuto	access:protected
JBlockSizeAuto::~JBlockSizeAuto	JBlockSizeAuto.cpp	/^JBlockSizeAuto::~JBlockSizeAuto(){$/;"	f	class:JBlockSizeAuto	signature:()
JBlockSizeAuto::~JBlockSizeAuto	JBlockSizeAuto.h	/^  ~JBlockSizeAuto();$/;"	p	class:JBlockSizeAuto	access:public	signature:()
JBlockSizeAutoKer	JBlockSizeAuto.cpp	/^JBlockSizeAutoKer::JBlockSizeAutoKer(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef):Log(log),Name(name),BsDef(bsdef),BsMin(bsmin),BsInc(bsinc),BsNum(bsnum){$/;"	f	class:JBlockSizeAutoKer	signature:(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef)
JBlockSizeAutoKer	JBlockSizeAuto.h	/^  JBlockSizeAutoKer(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef);$/;"	p	class:JBlockSizeAutoKer	access:public	signature:(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef)
JBlockSizeAutoKer	JBlockSizeAuto.h	/^class JBlockSizeAutoKer : protected JObject$/;"	c	inherits:JObject
JBlockSizeAutoKer::AllocateInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::AllocateInfoData(unsigned nlines){$/;"	f	class:JBlockSizeAutoKer	signature:(unsigned nlines)
JBlockSizeAutoKer::AllocateInfoData	JBlockSizeAuto.h	/^  void AllocateInfoData(unsigned nlines);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned nlines)
JBlockSizeAutoKer::AllocateMemory	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::AllocateMemory(unsigned size){$/;"	f	class:JBlockSizeAutoKer	signature:(unsigned size)
JBlockSizeAutoKer::AllocateMemory	JBlockSizeAuto.h	/^  void AllocateMemory(unsigned size);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned size)
JBlockSizeAutoKer::BsActive	JBlockSizeAuto.h	/^  bool *BsActive;      \/\/\/< Indicates if Blocksize is active [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::BsDef	JBlockSizeAuto.h	/^  const int BsDef;  \/\/\/< Default BlockSize.$/;"	m	class:JBlockSizeAutoKer	access:public
JBlockSizeAutoKer::BsInc	JBlockSizeAuto.h	/^  const int BsInc;  \/\/\/< Jump between two blocksize values.$/;"	m	class:JBlockSizeAutoKer	access:public
JBlockSizeAutoKer::BsMin	JBlockSizeAuto.h	/^  const int BsMin;  \/\/\/< Minimum BlockSize.$/;"	m	class:JBlockSizeAutoKer	access:public
JBlockSizeAutoKer::BsNum	JBlockSizeAuto.h	/^  const int BsNum;  \/\/\/< Number of BlockSize to test.$/;"	m	class:JBlockSizeAutoKer	access:public
JBlockSizeAutoKer::BsSel	JBlockSizeAuto.h	/^  unsigned BsSel;  \/\/\/< Indicates optimum Blocksize.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::GetBs	JBlockSizeAuto.h	/^  unsigned GetBs(unsigned ct)const{ return(unsigned(BsMin+BsInc*int(ct))); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct) const
JBlockSizeAutoKer::GetOptimumBs	JBlockSizeAuto.h	/^  unsigned GetOptimumBs()const{ return(BsSel); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:() const
JBlockSizeAutoKer::InfoData	JBlockSizeAuto.h	/^  float *InfoData;             \/\/\/< Buffer to store values [InfoDataSizeLine*InfoDataLines].$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::InfoDataCount	JBlockSizeAuto.h	/^  unsigned InfoDataCount;      \/\/\/< Number of used lines.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::InfoDataLines	JBlockSizeAuto.h	/^  unsigned InfoDataLines;      \/\/\/< Number of lines for which memory was allocated.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::InfoDataSaved	JBlockSizeAuto.h	/^  bool InfoDataSaved;          \/\/\/< Indicates if data was saved.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::InfoDataSizeLine	JBlockSizeAuto.h	/^  unsigned InfoDataSizeLine;   \/\/\/< Number of floats per line.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::IsActive	JBlockSizeAuto.h	/^  bool IsActive(unsigned ct)const{ return(int(ct)<BsNum && BsActive[ct]); }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct) const
JBlockSizeAutoKer::JBlockSizeAutoKer	JBlockSizeAuto.cpp	/^JBlockSizeAutoKer::JBlockSizeAutoKer(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef):Log(log),Name(name),BsDef(bsdef),BsMin(bsmin),BsInc(bsinc),BsNum(bsnum){$/;"	f	class:JBlockSizeAutoKer	signature:(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef)
JBlockSizeAutoKer::JBlockSizeAutoKer	JBlockSizeAuto.h	/^  JBlockSizeAutoKer(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef);$/;"	p	class:JBlockSizeAutoKer	access:public	signature:(JLog2 *log,std::string name,int bsmin,int bsnum,int bsinc,int bsdef)
JBlockSizeAutoKer::Log	JBlockSizeAuto.h	/^  JLog2 *Log;$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::MEANDEPTH	JBlockSizeAuto.h	/^  static const int MEANDEPTH=10;$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::MeanExp	JBlockSizeAuto.h	/^  JMeanMoving *MeanExp;$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::MeanTot	JBlockSizeAuto.h	/^  JMeanValue *MeanTot;$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::Name	JBlockSizeAuto.h	/^  const std::string Name; \/\/\/< Kernel name.$/;"	m	class:JBlockSizeAutoKer	access:public
JBlockSizeAutoKer::Nrun	JBlockSizeAuto.h	/^  unsigned Nrun;   \/\/\/< Number of executions.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::NumActive	JBlockSizeAuto.h	/^  int NumActive;       \/\/\/< Number of active values.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::OverMean	JBlockSizeAuto.h	/^  float *OverMean;     \/\/\/< Stores exponential mean overhead [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::ProcessTimes	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::ProcessTimes(double timestep,unsigned nstep){$/;"	f	class:JBlockSizeAutoKer	signature:(double timestep,unsigned nstep)
JBlockSizeAutoKer::ProcessTimes	JBlockSizeAuto.h	/^  void ProcessTimes(double timestep,unsigned nstep);$/;"	p	class:JBlockSizeAutoKer	access:public	signature:(double timestep,unsigned nstep)
JBlockSizeAutoKer::REMOVELIMIT	JBlockSizeAuto.h	/^  static const int REMOVELIMIT=5; \/\/- Numero minimo de valores sin descartar.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::REMOVEPRC	JBlockSizeAuto.h	/^  static const int REMOVEPRC=20;  \/\/- Porcentaje de descartes por ejecucion.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::REMOVESTART	JBlockSizeAuto.h	/^  static const int REMOVESTART=5; \/\/- Despues de cuantas ejecuciones empieza a descartar valores.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::Reset	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::Reset(){$/;"	f	class:JBlockSizeAutoKer	signature:()
JBlockSizeAutoKer::Reset	JBlockSizeAuto.h	/^  void Reset();$/;"	p	class:JBlockSizeAutoKer	access:public	signature:()
JBlockSizeAutoKer::SAVEINFO	JBlockSizeAuto.h	/^  static const int SAVEINFO=0; \/\/\/< Saves statistical data in CSV format or not.$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::SaveFileInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::SaveFileInfoData(){ $/;"	f	class:JBlockSizeAutoKer	signature:()
JBlockSizeAutoKer::SaveFileInfoData	JBlockSizeAuto.h	/^  void SaveFileInfoData();$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:()
JBlockSizeAutoKer::SaveInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::SaveInfoData(unsigned nstep,float timestep){ $/;"	f	class:JBlockSizeAutoKer	signature:(unsigned nstep,float timestep)
JBlockSizeAutoKer::SaveInfoData	JBlockSizeAuto.h	/^  void SaveInfoData(unsigned nstep,float timestep);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned nstep,float timestep)
JBlockSizeAutoKer::SetTime	JBlockSizeAuto.h	/^  void SetTime(unsigned ct,float t){ if(int(ct)<BsNum)Times[ct]=t; }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct,float t)
JBlockSizeAutoKer::Times	JBlockSizeAuto.h	/^  float *Times;        \/\/\/< Saves times of test [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
JBlockSizeAutoKer::~JBlockSizeAutoKer	JBlockSizeAuto.cpp	/^JBlockSizeAutoKer::~JBlockSizeAutoKer(){$/;"	f	class:JBlockSizeAutoKer	signature:()
JBlockSizeAutoKer::~JBlockSizeAutoKer	JBlockSizeAuto.h	/^  ~JBlockSizeAutoKer();$/;"	p	class:JBlockSizeAutoKer	access:public	signature:()
JCellDivCpu	JCellDivCpu.cpp	/^JCellDivCpu::JCellDivCpu(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivCpu	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct,float overmemorynp,word overmemorycells)
JCellDivCpu	JCellDivCpu.h	/^  JCellDivCpu(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivCpu	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct=true,float overmemorynp=CELLDIV_OVERMEMORYNP,word overmemorycells=CELLDIV_OVERMEMORYCELLS)
JCellDivCpu	JCellDivCpu.h	/^class JCellDivCpu : protected JObject$/;"	c	inherits:JObject
JCellDivCpu::AllocFullNct	JCellDivCpu.h	/^  bool AllocFullNct;     \/\/\/<Resserve memory for max number of cells of domain (DomCells). | Reserva memoria para el numero maximo de celdas del dominio (DomCells).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::AllocMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::AllocMemoryNct(ullong nct){$/;"	f	class:JCellDivCpu	signature:(ullong nct)
JCellDivCpu::AllocMemoryNct	JCellDivCpu.h	/^  void AllocMemoryNct(ullong nct);$/;"	p	class:JCellDivCpu	access:protected	signature:(ullong nct)
JCellDivCpu::AllocMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::AllocMemoryNp(ullong np){$/;"	f	class:JCellDivCpu	signature:(ullong np)
JCellDivCpu::AllocMemoryNp	JCellDivCpu.h	/^  void AllocMemoryNp(ullong np);$/;"	p	class:JCellDivCpu	access:protected	signature:(ullong np)
JCellDivCpu::BeginCell	JCellDivCpu.h	/^  unsigned *BeginCell;   \/\/\/<Get first value of each cell. | Contiene el principio de cada celda. $/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundDivideCellMax	JCellDivCpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundDivideCellMin	JCellDivCpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundDivideOk	JCellDivCpu.h	/^  bool BoundDivideOk;   \/\/\/<Indicate that the limits of boundaries used in  previous divide will go in BoundDivideCellMin & BoundDivideCellMax. | Indica que los limites del contorno utilizados en el divide previo fueron BoundDivideCellMin y BoundDivideCellMax.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundLimitCellMax	JCellDivCpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundLimitCellMin	JCellDivCpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoundLimitOk	JCellDivCpu.h	/^  bool BoundLimitOk;    \/\/\/<Indicate that the boundary limits are already calculated in BoundLimitCellMin & BoundLimitCellMax. | Indica que los limites del contorno ya estan calculados en BoundLimitCellMin y BoundLimitCellMax.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxBoundIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxBoundOut	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxBoundOutIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxFluid	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxFluidOut	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::BoxFluidOutIgnore	JCellDivCpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CalcCellDomainBound	JCellDivCpu.cpp	/^void JCellDivCpu::CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
JCellDivCpu::CalcCellDomainBound	JCellDivCpu.h	/^  void CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
JCellDivCpu::CalcCellDomainFluid	JCellDivCpu.cpp	/^void JCellDivCpu::CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
JCellDivCpu::CalcCellDomainFluid	JCellDivCpu.h	/^  void CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)
JCellDivCpu::CaseNbound	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CaseNfixed	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CaseNpb	JCellDivCpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CellDomainMax	JCellDivCpu.h	/^  tuint3 CellDomainMax; \/\/\/<Upper domain limit in cells inside of DomCells. | Limite superior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CellDomainMin	JCellDivCpu.h	/^  tuint3 CellDomainMin; \/\/\/<Lower domain limit in cells inside of DomCells. | Limite inferior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CellMode	JCellDivCpu.h	/^  const TpCellMode CellMode;    \/\/\/<Mode of cell division. | Modo de division en celdas.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CellPart	JCellDivCpu.h	/^  unsigned *CellPart;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::CellSize	JCellDivCpu.h	/^  unsigned CellSize(unsigned box)const{ return(BeginCell[box+1]-BeginCell[box]); }$/;"	f	class:JCellDivCpu	access:protected	signature:(unsigned box) const
JCellDivCpu::CheckMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::CheckMemoryNct(unsigned nctmin){$/;"	f	class:JCellDivCpu	signature:(unsigned nctmin)
JCellDivCpu::CheckMemoryNct	JCellDivCpu.h	/^  void CheckMemoryNct(unsigned nctmin);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned nctmin)
JCellDivCpu::CheckMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::CheckMemoryNp(unsigned npmin){$/;"	f	class:JCellDivCpu	signature:(unsigned npmin)
JCellDivCpu::CheckMemoryNp	JCellDivCpu.h	/^  void CheckMemoryNp(unsigned npmin);$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned npmin)
JCellDivCpu::DefineDomain	JCellDivCpu.cpp	/^void JCellDivCpu::DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax){$/;"	f	class:JCellDivCpu	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
JCellDivCpu::DefineDomain	JCellDivCpu.h	/^  void DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax);$/;"	p	class:JCellDivCpu	access:public	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
JCellDivCpu::DirOut	JCellDivCpu.h	/^  std::string DirOut;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DivideFull	JCellDivCpu.h	/^  bool DivideFull;      \/\/\/<Indicate that divie is applied to fluid & boundary (not only to fluid). | Indica que el divide se aplico a fluido y contorno (no solo al fluido).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomCelFin	JCellDivCpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomCelIni	JCellDivCpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomCellCode	JCellDivCpu.h	/^  unsigned DomCellCode;  \/\/\/<Key for codifying cell of position. | Clave para la codificacion de la celda de posicion.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomCells	JCellDivCpu.h	/^  tuint3 DomCells;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomPosMax	JCellDivCpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::DomPosMin	JCellDivCpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Floating	JCellDivCpu.h	/^  const bool Floating;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::FreeMemoryAll	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryAll(){$/;"	f	class:JCellDivCpu	signature:()
JCellDivCpu::FreeMemoryAll	JCellDivCpu.h	/^  void FreeMemoryAll();$/;"	p	class:JCellDivCpu	access:protected	signature:()
JCellDivCpu::FreeMemoryNct	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryNct(){$/;"	f	class:JCellDivCpu	signature:()
JCellDivCpu::FreeMemoryNct	JCellDivCpu.h	/^  void FreeMemoryNct();$/;"	p	class:JCellDivCpu	access:protected	signature:()
JCellDivCpu::FreeMemoryNp	JCellDivCpu.cpp	/^void JCellDivCpu::FreeMemoryNp(){$/;"	f	class:JCellDivCpu	signature:()
JCellDivCpu::FreeMemoryNp	JCellDivCpu.h	/^  void FreeMemoryNp();$/;"	p	class:JCellDivCpu	access:protected	signature:()
JCellDivCpu::GetAllocMemory	JCellDivCpu.h	/^  ullong GetAllocMemory()const{ return(GetAllocMemoryNp()+GetAllocMemoryNct()); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
JCellDivCpu::GetAllocMemoryNct	JCellDivCpu.h	/^  ullong GetAllocMemoryNct()const{ return(MemAllocNct); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
JCellDivCpu::GetAllocMemoryNp	JCellDivCpu.h	/^  ullong GetAllocMemoryNp()const{ return(MemAllocNp); };$/;"	f	class:JCellDivCpu	access:protected	signature:() const
JCellDivCpu::GetBeginCell	JCellDivCpu.h	/^  const unsigned* GetBeginCell(){ return(BeginCell); }$/;"	f	class:JCellDivCpu	access:public	signature:()
JCellDivCpu::GetBoxFluid	JCellDivCpu.h	/^  unsigned GetBoxFluid()const{ return(BoxFluid); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetCellDomainMax	JCellDivCpu.h	/^  tuint3 GetCellDomainMax()const{ return(CellDomainMax); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetCellDomainMin	JCellDivCpu.h	/^  tuint3 GetCellDomainMin()const{ return(CellDomainMin); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetCellMode	JCellDivCpu.h	/^  TpCellMode GetCellMode()const{ return(CellMode); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetDomainLimits	JCellDivCpu.cpp	/^tdouble3 JCellDivCpu::GetDomainLimits(bool limitmin,unsigned slicecellmin)const{$/;"	f	class:JCellDivCpu	signature:(bool limitmin,unsigned slicecellmin) const
JCellDivCpu::GetDomainLimits	JCellDivCpu.h	/^  tdouble3 GetDomainLimits(bool limitmin,unsigned slicecellmin=0)const;$/;"	p	class:JCellDivCpu	access:public	signature:(bool limitmin,unsigned slicecellmin=0) const
JCellDivCpu::GetHdiv	JCellDivCpu.h	/^  unsigned GetHdiv()const{ return(Hdiv); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNcells	JCellDivCpu.h	/^  tuint3 GetNcells()const{ return(TUint3(Ncx,Ncy,Ncz)); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNct	JCellDivCpu.h	/^  unsigned GetNct()const{ return(Nct); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNcx	JCellDivCpu.h	/^  unsigned GetNcx()const{ return(Ncx); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNcy	JCellDivCpu.h	/^  unsigned GetNcy()const{ return(Ncy); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNcz	JCellDivCpu.h	/^  unsigned GetNcz()const{ return(Ncz); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpFinal	JCellDivCpu.h	/^  unsigned GetNpFinal()const{ return(NpFinal); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpbFinal	JCellDivCpu.h	/^  unsigned GetNpbFinal()const{ return(NpbFinal); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpbIgnore	JCellDivCpu.h	/^  unsigned GetNpbIgnore()const{ return(NpbIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpbOut	JCellDivCpu.h	/^  unsigned GetNpbOut()const{ return(NpbOut); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpbOutIgnore	JCellDivCpu.h	/^  unsigned GetNpbOutIgnore()const{ return(NpbOutIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpfOut	JCellDivCpu.h	/^  unsigned GetNpfOut()const{ return(NpfOut); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetNpfOutIgnore	JCellDivCpu.h	/^  unsigned GetNpfOutIgnore()const{ return(NpfOutIgnore); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::GetScell	JCellDivCpu.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JCellDivCpu	access:public	signature:() const
JCellDivCpu::Hdiv	JCellDivCpu.h	/^  const unsigned Hdiv;          \/\/\/<Value for those divided in DosH. | Valor por el que se divide a DosH.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::IncreaseNp	JCellDivCpu.h	/^  unsigned IncreaseNp; \/\/\/<Possible number of particles to be created in the near future.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::JCellDivCpu	JCellDivCpu.cpp	/^JCellDivCpu::JCellDivCpu(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivCpu	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct,float overmemorynp,word overmemorycells)
JCellDivCpu::JCellDivCpu	JCellDivCpu.h	/^  JCellDivCpu(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivCpu	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct=true,float overmemorynp=CELLDIV_OVERMEMORYNP,word overmemorycells=CELLDIV_OVERMEMORYCELLS)
JCellDivCpu::LimitsCellBound	JCellDivCpu.cpp	/^void JCellDivCpu::LimitsCellBound(unsigned n,unsigned pini,const unsigned* dcellc$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,const unsigned* dcellc ,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
JCellDivCpu::LimitsCellBound	JCellDivCpu.h	/^  void LimitsCellBound(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)const;$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
JCellDivCpu::LimitsCellFluid	JCellDivCpu.cpp	/^void JCellDivCpu::LimitsCellFluid(unsigned n,unsigned pini,const unsigned* dcellc$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,const unsigned* dcellc ,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
JCellDivCpu::LimitsCellFluid	JCellDivCpu.h	/^  void LimitsCellFluid(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)const;$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
JCellDivCpu::Log	JCellDivCpu.h	/^  JLog2 *Log;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Map_Cells	JCellDivCpu.h	/^  const tuint3 Map_Cells;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Map_PosDif	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Map_PosMax	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Map_PosMin	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::MemAllocNct	JCellDivCpu.h	/^  llong MemAllocNct; \/\/\/<Memory reserved for cells. | Mermoria reservada para celdas.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::MemAllocNp	JCellDivCpu.h	/^  llong MemAllocNp;  \/\/\/<Memory reserved for particles. | Mermoria reservada para particulas.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Nct	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Nctt	JCellDivCpu.h	/^  ullong Nctt;          \/\/\/<Total number of special cells included  Nctt=SizeBeginCell(). | Numero total de celdas incluyendo las especiales Nctt=SizeBeginCell().$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Ncx	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Ncy	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Ncz	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Ndiv	JCellDivCpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NdivFull	JCellDivCpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpFinal	JCellDivCpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Npb1	JCellDivCpu.h	/^  unsigned Npb1;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Npb2	JCellDivCpu.h	/^  unsigned Npb2;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpbFinal	JCellDivCpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpbIgnore	JCellDivCpu.h	/^  unsigned NpbIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpbOut	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpbOutIgnore	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Npf1	JCellDivCpu.h	/^  unsigned Npf1;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Npf2	JCellDivCpu.h	/^  unsigned Npf2;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpfOut	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::NpfOutIgnore	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Nptot	JCellDivCpu.h	/^  unsigned Nptot;  \/\/\/<Total number of particles included that are excluded at the end of divide | Numero total de particulas incluidas las que se excluyeron al terminar el divide.$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Nsheet	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::OvScell	JCellDivCpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::OverMemoryCells	JCellDivCpu.h	/^  word OverMemoryCells;  \/\/\/<Cell number that is incremented in each dimension to reserve memory. | Numero celdas que se incrementa en cada dimension reservar memoria. (def=0).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::OverMemoryNp	JCellDivCpu.h	/^  float OverMemoryNp;    \/\/\/<Percentage that is added to the memory reserved for Np. (def=0) | Porcentaje que se añade a la reserva de memoria de Np. (def=0).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::PartsInCell	JCellDivCpu.h	/^  unsigned *PartsInCell;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::PeriActive	JCellDivCpu.h	/^  const byte PeriActive;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Reset	JCellDivCpu.cpp	/^void JCellDivCpu::Reset(){$/;"	f	class:JCellDivCpu	signature:()
JCellDivCpu::Reset	JCellDivCpu.h	/^  void Reset();$/;"	p	class:JCellDivCpu	access:protected	signature:()
JCellDivCpu::Scell	JCellDivCpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::SetIncreaseNp	JCellDivCpu.h	/^  void SetIncreaseNp(unsigned increasenp){ IncreaseNp=increasenp; }$/;"	f	class:JCellDivCpu	access:public	signature:(unsigned increasenp)
JCellDivCpu::SetMemoryVSort	JCellDivCpu.cpp	/^void JCellDivCpu::SetMemoryVSort(byte *vsort){$/;"	f	class:JCellDivCpu	signature:(byte *vsort)
JCellDivCpu::SetMemoryVSort	JCellDivCpu.h	/^  void SetMemoryVSort(byte *vsort);$/;"	p	class:JCellDivCpu	access:protected	signature:(byte *vsort)
JCellDivCpu::SizeBeginCell	JCellDivCpu.h	/^  ullong SizeBeginCell(ullong nct)const{ return((nct*2)+5+1); } \/\/-[BoundOk(nct),BoundIgnore(1),Fluid(nct),BoundOut(1),FluidOut(1),BoundOutIgnore(1),FluidOutIgnore(1),END(1)]$/;"	f	class:JCellDivCpu	access:protected	signature:(ullong nct) const
JCellDivCpu::SizeNct	JCellDivCpu.h	/^  unsigned SizeNct;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::SizeNp	JCellDivCpu.h	/^  unsigned SizeNp;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(float *vec){$/;"	f	class:JCellDivCpu	signature:(float *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tdouble3 *vec){$/;"	f	class:JCellDivCpu	signature:(tdouble3 *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tfloat3 *vec){$/;"	f	class:JCellDivCpu	signature:(tfloat3 *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tfloat4 *vec){$/;"	f	class:JCellDivCpu	signature:(tfloat4 *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tsymatrix3f *vec){$/;"	f	class:JCellDivCpu	signature:(tsymatrix3f *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(unsigned *vec){$/;"	f	class:JCellDivCpu	signature:(unsigned *vec)
JCellDivCpu::SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(word *vec){$/;"	f	class:JCellDivCpu	signature:(word *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(float *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(float *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(tdouble3 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tdouble3 *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(tfloat3 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tfloat3 *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(tfloat4 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tfloat4 *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(tsymatrix3f *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tsymatrix3f *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(unsigned *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(unsigned *vec)
JCellDivCpu::SortArray	JCellDivCpu.h	/^  void SortArray(word *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(word *vec)
JCellDivCpu::SortPart	JCellDivCpu.h	/^  unsigned *SortPart;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::Stable	JCellDivCpu.h	/^  const bool Stable;$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSort	JCellDivCpu.h	/^  byte        *VSort;            \/\/\/<Memory to reorder particles. | Memoria para reordenar particulas. [sizeof(tdouble3)*Np]$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortDouble3	JCellDivCpu.h	/^  tdouble3    *VSortDouble3;     \/\/\/<To order vectors tdouble3 (write to VSort). | Para ordenar vectores tdouble3 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortFloat	JCellDivCpu.h	/^  float       *VSortFloat;       \/\/\/<To order vectors float (write to VSort). | Para ordenar vectores float (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortFloat3	JCellDivCpu.h	/^  tfloat3     *VSortFloat3;      \/\/\/<To order vectors tfloat3 (write to VSort). | Para ordenar vectores tfloat3 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortFloat4	JCellDivCpu.h	/^  tfloat4     *VSortFloat4;      \/\/\/<To order vectors tfloat4 (write to VSort). | Para ordenar vectores tfloat4 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortInt	JCellDivCpu.h	/^  int         *VSortInt;         \/\/\/<To order vectors int (write to VSort). | Para ordenar vectores int (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortSymmatrix3f	JCellDivCpu.h	/^  tsymatrix3f *VSortSymmatrix3f; \/\/\/<To order vectors tsymatrix3f (write to VSort). | Para ordenar vectores tsymatrix3f (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::VSortWord	JCellDivCpu.h	/^  word        *VSortWord;        \/\/\/<To order word vectors (write to VSort). | Para ordenar vectores word (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
JCellDivCpu::~JCellDivCpu	JCellDivCpu.cpp	/^JCellDivCpu::~JCellDivCpu(){$/;"	f	class:JCellDivCpu	signature:()
JCellDivCpu::~JCellDivCpu	JCellDivCpu.h	/^  ~JCellDivCpu();$/;"	p	class:JCellDivCpu	access:public	signature:()
JCellDivCpuSingle	JCellDivCpuSingle.cpp	/^JCellDivCpuSingle::JCellDivCpuSingle(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivCpuSingle	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivCpuSingle	JCellDivCpuSingle.h	/^  JCellDivCpuSingle(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivCpuSingle	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivCpuSingle	JCellDivCpuSingle.h	/^class JCellDivCpuSingle : public JCellDivCpu$/;"	c	inherits:JCellDivCpu
JCellDivCpuSingle::CalcCellDomain	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::CalcCellDomain(const unsigned *dcellc,const typecode *codec){$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned *dcellc,const typecode *codec)
JCellDivCpuSingle::CalcCellDomain	JCellDivCpuSingle.h	/^  void CalcCellDomain(const unsigned *dcellc,const typecode *codec);$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned *dcellc,const typecode *codec)
JCellDivCpuSingle::Divide	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	f	class:JCellDivCpuSingle	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellc,const typecode* codec,const unsigned* idpc,const tdouble3* posc,TimersCpu timers)
JCellDivCpuSingle::Divide	JCellDivCpuSingle.h	/^  void Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	p	class:JCellDivCpuSingle	access:public	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellc,const typecode* codec,const unsigned* idpc,const tdouble3* posc,TimersCpu timers)
JCellDivCpuSingle::GetAllocMemory	JCellDivCpuSingle.h	/^  ullong GetAllocMemory()const{ return(JCellDivCpu::GetAllocMemory()); }$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
JCellDivCpuSingle::GetAllocMemoryNct	JCellDivCpuSingle.h	/^  ullong GetAllocMemoryNct()const{ return(JCellDivCpu::GetAllocMemoryNct()); };$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
JCellDivCpuSingle::GetAllocMemoryNp	JCellDivCpuSingle.h	/^  ullong GetAllocMemoryNp()const{ return(JCellDivCpu::GetAllocMemoryNp()); };$/;"	f	class:JCellDivCpuSingle	access:public	signature:() const
JCellDivCpuSingle::JCellDivCpuSingle	JCellDivCpuSingle.cpp	/^JCellDivCpuSingle::JCellDivCpuSingle(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivCpuSingle	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivCpuSingle::JCellDivCpuSingle	JCellDivCpuSingle.h	/^  JCellDivCpuSingle(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivCpuSingle	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivCpuSingle::MakeSortFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MakeSortFluid(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const{$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
JCellDivCpuSingle::MakeSortFluid	JCellDivCpuSingle.h	/^  void MakeSortFluid(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
JCellDivCpuSingle::MakeSortFull	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MakeSortFull(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const{$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
JCellDivCpuSingle::MakeSortFull	JCellDivCpuSingle.h	/^  void MakeSortFull(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
JCellDivCpuSingle::MergeMapCellBoundFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const{$/;"	f	class:JCellDivCpuSingle	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
JCellDivCpuSingle::MergeMapCellBoundFluid	JCellDivCpuSingle.h	/^  void MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
JCellDivCpuSingle::PreSort	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSort(const unsigned* dcellc,const typecode *codec){$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned* dcellc,const typecode *codec)
JCellDivCpuSingle::PreSort	JCellDivCpuSingle.h	/^  void PreSort(const unsigned* dcellc,const typecode *codec);$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned* dcellc,const typecode *codec)
JCellDivCpuSingle::PreSortFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSortFluid(unsigned np,unsigned pini,const unsigned *dcellc$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,unsigned pini,const unsigned *dcellc ,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
JCellDivCpuSingle::PreSortFluid	JCellDivCpuSingle.h	/^  void PreSortFluid(unsigned np,unsigned pini,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,unsigned pini,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
JCellDivCpuSingle::PreSortFull	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSortFull(unsigned np,const unsigned *dcellc,const typecode *codec$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,const unsigned *dcellc,const typecode *codec ,unsigned* cellpart,unsigned* partsincell) const
JCellDivCpuSingle::PreSortFull	JCellDivCpuSingle.h	/^  void PreSortFull(unsigned np,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
JCellDivCpuSingle::PrepareNct	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PrepareNct(){$/;"	f	class:JCellDivCpuSingle	signature:()
JCellDivCpuSingle::PrepareNct	JCellDivCpuSingle.h	/^  void PrepareNct();$/;"	p	class:JCellDivCpuSingle	access:protected	signature:()
JCellDivGpu	JCellDivGpu.cpp	/^JCellDivGpu::JCellDivGpu(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivGpu	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct,float overmemorynp,word overmemorycells)
JCellDivGpu	JCellDivGpu.h	/^  JCellDivGpu(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivGpu	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct=true,float overmemorynp=CELLDIV_OVERMEMORYNP,word overmemorycells=CELLDIV_OVERMEMORYCELLS)
JCellDivGpu	JCellDivGpu.h	/^class JCellDivGpu : protected JObjectGpu$/;"	c	inherits:JObjectGpu
JCellDivGpu::AllocFullNct	JCellDivGpu.h	/^  bool AllocFullNct;     \/\/\/<Resserve memory for max number of cells of domain (DomCells). | Reserva memoria para el numero maximo de celdas del dominio (DomCells).$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::AllocMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::AllocMemoryNct(ullong nct){$/;"	f	class:JCellDivGpu	signature:(ullong nct)
JCellDivGpu::AllocMemoryNct	JCellDivGpu.h	/^  void AllocMemoryNct(ullong nct);$/;"	p	class:JCellDivGpu	access:protected	signature:(ullong nct)
JCellDivGpu::AllocMemoryNp	JCellDivGpu.cpp	/^void JCellDivGpu::AllocMemoryNp(ullong np){$/;"	f	class:JCellDivGpu	signature:(ullong np)
JCellDivGpu::AllocMemoryNp	JCellDivGpu.h	/^  void AllocMemoryNp(ullong np);$/;"	p	class:JCellDivGpu	access:protected	signature:(ullong np)
JCellDivGpu::AuxMem	JCellDivGpu.h	/^  float *AuxMem;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BeginEndCell	JCellDivGpu.h	/^  int2 *BeginEndCell;  \/\/\/<Contains the first and final particle of each cell. | Contiene el principio y final de cada celda. $/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundDivideCellMax	JCellDivGpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundDivideCellMin	JCellDivGpu.h	/^  tuint3 BoundDivideCellMin,BoundDivideCellMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundDivideOk	JCellDivGpu.h	/^  bool BoundDivideOk;   \/\/\/<Indicate that the limits of boundaries used in  previous divide will go in BoundDivideCellMin & BoundDivideCellMax. | Indica que los limites del contorno utilizados en el divide previo fueron BoundDivideCellMin y BoundDivideCellMax.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundLimitCellMax	JCellDivGpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundLimitCellMin	JCellDivGpu.h	/^  tuint3 BoundLimitCellMin,BoundLimitCellMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoundLimitOk	JCellDivGpu.h	/^  bool BoundLimitOk;    \/\/\/<Indicate that the boundary limits are already calculated in BoundLimitCellMin & BoundLimitCellMax. | Indica que los limites del contorno ya estan calculados en BoundLimitCellMin y BoundLimitCellMax.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxBoundIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxBoundOut	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxBoundOutIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxFluid	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxFluidOut	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::BoxFluidOutIgnore	JCellDivGpu.h	/^  unsigned BoxBoundIgnore,BoxFluid,BoxBoundOut,BoxFluidOut,BoxBoundOutIgnore,BoxFluidOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CalcCellDomainBound	JCellDivGpu.cpp	/^void JCellDivGpu::CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivGpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
JCellDivGpu::CalcCellDomainBound	JCellDivGpu.h	/^  void CalcCellDomainBound(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
JCellDivGpu::CalcCellDomainFluid	JCellDivGpu.cpp	/^void JCellDivGpu::CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2$/;"	f	class:JCellDivGpu	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2 ,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
JCellDivGpu::CalcCellDomainFluid	JCellDivGpu.h	/^  void CalcCellDomainFluid(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned n,unsigned pini,unsigned n2,unsigned pini2,const unsigned* dcellg,const typecode *codeg,tuint3 &cellmin,tuint3 &cellmax)
JCellDivGpu::CaseNbound	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CaseNfixed	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CaseNpb	JCellDivGpu.h	/^  const unsigned CaseNbound,CaseNfixed,CaseNpb;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CellBeginEnd	JCellDivGpu.cpp	/^int2 JCellDivGpu::CellBeginEnd(unsigned cell)const{$/;"	f	class:JCellDivGpu	signature:(unsigned cell) const
JCellDivGpu::CellBeginEnd	JCellDivGpu.cpp	/^void JCellDivGpu::CellBeginEnd(unsigned cell,unsigned ndata,unsigned* data)const{$/;"	f	class:JCellDivGpu	signature:(unsigned cell,unsigned ndata,unsigned* data) const
JCellDivGpu::CellBeginEnd	JCellDivGpu.h	/^  int2 CellBeginEnd(unsigned cell)const;$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned cell) const
JCellDivGpu::CellBeginEnd	JCellDivGpu.h	/^  void CellBeginEnd(unsigned cell,unsigned ndata,unsigned* data)const;$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned cell,unsigned ndata,unsigned* data) const
JCellDivGpu::CellDomainMax	JCellDivGpu.h	/^  tuint3 CellDomainMax; \/\/\/<Upper domain limit in cells inside of DomCells. | Limite superior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CellDomainMin	JCellDivGpu.h	/^  tuint3 CellDomainMin; \/\/\/<Lower domain limit in cells inside of DomCells. | Limite inferior del dominio en celdas dentro de DomCells.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CellMode	JCellDivGpu.h	/^  const TpCellMode CellMode;    \/\/\/<Mode of cell division. | Modo de division en celdas.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CellPart	JCellDivGpu.h	/^  unsigned *CellPart;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::CellSize	JCellDivGpu.h	/^  unsigned CellSize(unsigned cell)const{ int2 v=CellBeginEnd(cell); return(unsigned(v.y-v.x)); }$/;"	f	class:JCellDivGpu	access:protected	signature:(unsigned cell) const
JCellDivGpu::CheckMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::CheckMemoryNct(unsigned nctmin){$/;"	f	class:JCellDivGpu	signature:(unsigned nctmin)
JCellDivGpu::CheckMemoryNct	JCellDivGpu.h	/^  void CheckMemoryNct(unsigned nctmin);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned nctmin)
JCellDivGpu::CheckMemoryNp	JCellDivGpu.cpp	/^void JCellDivGpu::CheckMemoryNp(unsigned npmin){$/;"	f	class:JCellDivGpu	signature:(unsigned npmin)
JCellDivGpu::CheckMemoryNp	JCellDivGpu.h	/^  void CheckMemoryNp(unsigned npmin);$/;"	p	class:JCellDivGpu	access:protected	signature:(unsigned npmin)
JCellDivGpu::DefineDomain	JCellDivGpu.cpp	/^void JCellDivGpu::DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax){$/;"	f	class:JCellDivGpu	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
JCellDivGpu::DefineDomain	JCellDivGpu.h	/^  void DefineDomain(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax);$/;"	p	class:JCellDivGpu	access:public	signature:(unsigned cellcode,tuint3 domcelini,tuint3 domcelfin,tdouble3 domposmin,tdouble3 domposmax)
JCellDivGpu::DirOut	JCellDivGpu.h	/^  std::string DirOut;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DivideFull	JCellDivGpu.h	/^  bool DivideFull;      \/\/\/<Indicate that divie is applied to fluid & boundary (not only to fluid). | Indica que el divide se aplico a fluido y contorno (no solo al fluido).$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomCelFin	JCellDivGpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomCelIni	JCellDivGpu.h	/^  tuint3 DomCelIni,DomCelFin;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomCellCode	JCellDivGpu.h	/^  unsigned DomCellCode;  \/\/\/<Key for codifying cell of position. | Clave para la codificacion de la celda de posicion.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomCells	JCellDivGpu.h	/^  tuint3 DomCells;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomPosMax	JCellDivGpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::DomPosMin	JCellDivGpu.h	/^  tdouble3 DomPosMin,DomPosMax;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Floating	JCellDivGpu.h	/^  const bool Floating;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::FreeMemoryAll	JCellDivGpu.cpp	/^void JCellDivGpu::FreeMemoryAll(){$/;"	f	class:JCellDivGpu	signature:()
JCellDivGpu::FreeMemoryAll	JCellDivGpu.h	/^  void FreeMemoryAll();$/;"	p	class:JCellDivGpu	access:protected	signature:()
JCellDivGpu::FreeMemoryGpu	JCellDivGpu.h	/^  void FreeMemoryGpu(){ FreeMemoryAll(); }$/;"	f	class:JCellDivGpu	access:public	signature:()
JCellDivGpu::FreeMemoryNct	JCellDivGpu.cpp	/^void JCellDivGpu::FreeMemoryNct(){$/;"	f	class:JCellDivGpu	signature:()
JCellDivGpu::FreeMemoryNct	JCellDivGpu.h	/^  void FreeMemoryNct();$/;"	p	class:JCellDivGpu	access:protected	signature:()
JCellDivGpu::GetAllocMemoryCpu	JCellDivGpu.h	/^  ullong GetAllocMemoryCpu()const{ return(0); }$/;"	f	class:JCellDivGpu	access:protected	signature:() const
JCellDivGpu::GetAllocMemoryGpu	JCellDivGpu.h	/^  ullong GetAllocMemoryGpu()const{ return(GetAllocMemoryGpuNp()+GetAllocMemoryGpuNct()); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
JCellDivGpu::GetAllocMemoryGpuNct	JCellDivGpu.h	/^  ullong GetAllocMemoryGpuNct()const{ return(MemAllocGpuNct); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
JCellDivGpu::GetAllocMemoryGpuNp	JCellDivGpu.h	/^  ullong GetAllocMemoryGpuNp()const{ return(MemAllocGpuNp); };$/;"	f	class:JCellDivGpu	access:protected	signature:() const
JCellDivGpu::GetAuxMem	JCellDivGpu.cpp	/^float* JCellDivGpu::GetAuxMem(unsigned size){$/;"	f	class:JCellDivGpu	signature:(unsigned size)
JCellDivGpu::GetAuxMem	JCellDivGpu.h	/^  float* GetAuxMem(unsigned size);$/;"	p	class:JCellDivGpu	access:public	signature:(unsigned size)
JCellDivGpu::GetBeginCell	JCellDivGpu.h	/^  const int2* GetBeginCell(){ return(BeginEndCell); }$/;"	f	class:JCellDivGpu	access:public	signature:()
JCellDivGpu::GetBoxFluid	JCellDivGpu.h	/^  unsigned GetBoxFluid()const{ return(BoxFluid); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetCellDomainMax	JCellDivGpu.h	/^  tuint3 GetCellDomainMax()const{ return(CellDomainMax); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetCellDomainMin	JCellDivGpu.h	/^  tuint3 GetCellDomainMin()const{ return(CellDomainMin); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetCellMode	JCellDivGpu.h	/^  TpCellMode GetCellMode()const{ return(CellMode); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetDomainLimits	JCellDivGpu.cpp	/^tdouble3 JCellDivGpu::GetDomainLimits(bool limitmin,unsigned slicecellmin)const{$/;"	f	class:JCellDivGpu	signature:(bool limitmin,unsigned slicecellmin) const
JCellDivGpu::GetDomainLimits	JCellDivGpu.h	/^  tdouble3 GetDomainLimits(bool limitmin,unsigned slicecellmin=0)const;$/;"	p	class:JCellDivGpu	access:public	signature:(bool limitmin,unsigned slicecellmin=0) const
JCellDivGpu::GetHdiv	JCellDivGpu.h	/^  unsigned GetHdiv()const{ return(Hdiv); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNcells	JCellDivGpu.h	/^  tuint3 GetNcells()const{ return(TUint3(Ncx,Ncy,Ncz)); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNct	JCellDivGpu.h	/^  unsigned GetNct()const{ return(Nct); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNcx	JCellDivGpu.h	/^  unsigned GetNcx()const{ return(Ncx); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNcy	JCellDivGpu.h	/^  unsigned GetNcy()const{ return(Ncy); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNcz	JCellDivGpu.h	/^  unsigned GetNcz()const{ return(Ncz); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpFinal	JCellDivGpu.h	/^  unsigned GetNpFinal()const{ return(NpFinal); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpbFinal	JCellDivGpu.h	/^  unsigned GetNpbFinal()const{ return(NpbFinal); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpbIgnore	JCellDivGpu.h	/^  unsigned GetNpbIgnore()const{ return(NpbIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpbOut	JCellDivGpu.h	/^  unsigned GetNpbOut()const{ return(NpbOut); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpbOutIgnore	JCellDivGpu.h	/^  unsigned GetNpbOutIgnore()const{ return(NpbOutIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpfOut	JCellDivGpu.h	/^  unsigned GetNpfOut()const{ return(NpfOut); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetNpfOutIgnore	JCellDivGpu.h	/^  unsigned GetNpfOutIgnore()const{ return(NpfOutIgnore); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::GetScell	JCellDivGpu.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JCellDivGpu	access:public	signature:() const
JCellDivGpu::Hdiv	JCellDivGpu.h	/^  const unsigned Hdiv;          \/\/\/<Value for those divided in DosH. | Valor por el que se divide a DosH.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::IncreaseNp	JCellDivGpu.h	/^  unsigned IncreaseNp; \/\/\/<Possible number of particles to be created in the near future.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::JCellDivGpu	JCellDivGpu.cpp	/^JCellDivGpu::JCellDivGpu(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivGpu	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct,float overmemorynp,word overmemorycells)
JCellDivGpu::JCellDivGpu	JCellDivGpu.h	/^  JCellDivGpu(bool stable,bool floating,byte periactive$/;"	p	class:JCellDivGpu	access:public	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout ,bool allocfullnct=true,float overmemorynp=CELLDIV_OVERMEMORYNP,word overmemorycells=CELLDIV_OVERMEMORYCELLS)
JCellDivGpu::Log	JCellDivGpu.h	/^  JLog2 *Log;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Map_Cells	JCellDivGpu.h	/^  const tuint3 Map_Cells;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Map_PosDif	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Map_PosMax	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Map_PosMin	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::MemAllocGpuNct	JCellDivGpu.h	/^  ullong MemAllocGpuNct; \/\/\/<GPU memory reserved for cells. | Mermoria GPU reservada para celdas.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::MemAllocGpuNp	JCellDivGpu.h	/^  ullong MemAllocGpuNp;  \/\/\/<GPU memory reserved for particles. | Mermoria GPU reservada para particulas.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Nct	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Nctt	JCellDivGpu.h	/^  ullong Nctt;          \/\/\/<Total number of special cells included  Nctt=SizeBeginEndCell(). | Numero total de celdas incluyendo las especiales Nctt=SizeBeginEndCell().$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Ncx	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Ncy	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Ncz	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Ndiv	JCellDivGpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NdivFull	JCellDivGpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpFinal	JCellDivGpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Npb1	JCellDivGpu.h	/^  unsigned Npb1;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Npb2	JCellDivGpu.h	/^  unsigned Npb2;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpbFinal	JCellDivGpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpbIgnore	JCellDivGpu.h	/^  unsigned NpbIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpbOut	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpbOutIgnore	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Npf1	JCellDivGpu.h	/^  unsigned Npf1;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Npf2	JCellDivGpu.h	/^  unsigned Npf2;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpfOut	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::NpfOutIgnore	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Nptot	JCellDivGpu.h	/^  unsigned Nptot;  \/\/\/<Total number of particles included that are excluded at the end of divide. | Numero total de particulas incluidas las que se excluyeron al terminar el divide.$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Nsheet	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::OvScell	JCellDivGpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::OverMemoryCells	JCellDivGpu.h	/^  word OverMemoryCells;  \/\/\/<Cell number that is incremented in each dimension to reserve memory. | Numero celdas que se incrementa en cada dimension reservar memoria. (def=0).$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::OverMemoryNp	JCellDivGpu.h	/^  float OverMemoryNp;    \/\/\/<Percentage that is added to the memory reserved for Np. (def=0) | Porcentaje que se añade a la reserva de memoria de Np. (def=0).$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::PeriActive	JCellDivGpu.h	/^  const byte PeriActive;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Reset	JCellDivGpu.cpp	/^void JCellDivGpu::Reset(){$/;"	f	class:JCellDivGpu	signature:()
JCellDivGpu::Reset	JCellDivGpu.h	/^  void Reset();$/;"	p	class:JCellDivGpu	access:protected	signature:()
JCellDivGpu::Scell	JCellDivGpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::SetIncreaseNp	JCellDivGpu.h	/^  void SetIncreaseNp(unsigned increasenp){ IncreaseNp=increasenp; }$/;"	f	class:JCellDivGpu	access:public	signature:(unsigned increasenp)
JCellDivGpu::SizeAuxMem	JCellDivGpu.h	/^  unsigned SizeAuxMem;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::SizeBeginEndCell	JCellDivGpu.h	/^  ullong SizeBeginEndCell(ullong nct)const{ return((nct*2)+5); } \/\/-[BoundOk(nct),BoundIgnore(1),Fluid(nct),BoundOut(1),FluidOut(1),BoundOutIgnore(1),FluidOutIgnore(1)]$/;"	f	class:JCellDivGpu	access:protected	signature:(ullong nct) const
JCellDivGpu::SizeNct	JCellDivGpu.h	/^  unsigned SizeNct;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::SizeNp	JCellDivGpu.h	/^  unsigned SizeNp;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::SortBasicArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortBasicArrays(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop$/;"	f	class:JCellDivGpu	signature:(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
JCellDivGpu::SortBasicArrays	JCellDivGpu.h	/^  void SortBasicArrays(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2);$/;"	p	class:JCellDivGpu	access:public	signature:(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
JCellDivGpu::SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2){$/;"	f	class:JCellDivGpu	signature:(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
JCellDivGpu::SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const float *a,const float *b,float *a2,float *b2){$/;"	f	class:JCellDivGpu	signature:(const float *a,const float *b,float *a2,float *b2)
JCellDivGpu::SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const float4 *a,float4 *a2){$/;"	f	class:JCellDivGpu	signature:(const float4 *a,float4 *a2)
JCellDivGpu::SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const tsymatrix3f *a,tsymatrix3f *a2){$/;"	f	class:JCellDivGpu	signature:(const tsymatrix3f *a,tsymatrix3f *a2)
JCellDivGpu::SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2);$/;"	p	class:JCellDivGpu	access:public	signature:(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
JCellDivGpu::SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const float *a,const float *b,float *a2,float *b2);$/;"	p	class:JCellDivGpu	access:public	signature:(const float *a,const float *b,float *a2,float *b2)
JCellDivGpu::SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const float4 *a,float4 *a2);$/;"	p	class:JCellDivGpu	access:public	signature:(const float4 *a,float4 *a2)
JCellDivGpu::SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const tsymatrix3f *a,tsymatrix3f *a2);$/;"	p	class:JCellDivGpu	access:public	signature:(const tsymatrix3f *a,tsymatrix3f *a2)
JCellDivGpu::SortPart	JCellDivGpu.h	/^  unsigned *SortPart;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::Stable	JCellDivGpu.h	/^  const bool Stable;$/;"	m	class:JCellDivGpu	access:protected
JCellDivGpu::~JCellDivGpu	JCellDivGpu.cpp	/^JCellDivGpu::~JCellDivGpu(){$/;"	f	class:JCellDivGpu	signature:()
JCellDivGpu::~JCellDivGpu	JCellDivGpu.h	/^  ~JCellDivGpu();$/;"	p	class:JCellDivGpu	access:public	signature:()
JCellDivGpuSingle	JCellDivGpuSingle.cpp	/^JCellDivGpuSingle::JCellDivGpuSingle(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivGpuSingle	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivGpuSingle	JCellDivGpuSingle.h	/^  JCellDivGpuSingle(bool stable,bool floating,byte periactive,$/;"	p	class:JCellDivGpuSingle	access:public	signature:(bool stable,bool floating,byte periactive, TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivGpuSingle	JCellDivGpuSingle.h	/^class JCellDivGpuSingle : public JCellDivGpu$/;"	c	inherits:JCellDivGpu
JCellDivGpuSingle::CalcCellDomain	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::CalcCellDomain(const unsigned *dcellg,const typecode *codeg){$/;"	f	class:JCellDivGpuSingle	signature:(const unsigned *dcellg,const typecode *codeg)
JCellDivGpuSingle::CalcCellDomain	JCellDivGpuSingle.h	/^  void CalcCellDomain(const unsigned *dcellg,const typecode *codeg);$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const unsigned *dcellg,const typecode *codeg)
JCellDivGpuSingle::Divide	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged$/;"	f	class:JCellDivGpuSingle	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged ,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp)
JCellDivGpuSingle::Divide	JCellDivGpuSingle.h	/^  void Divide(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp);$/;"	p	class:JCellDivGpuSingle	access:public	signature:(unsigned npb1,unsigned npf1,unsigned npb2,unsigned npf2,bool boundchanged,const unsigned *dcellg,const typecode *codeg,TimersGpu timers,const double2 *posxy,const double *posz,const unsigned *idp)
JCellDivGpuSingle::GetAllocMemoryCpu	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryCpu()const{ return(JCellDivGpu::GetAllocMemoryCpu()); }$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
JCellDivGpuSingle::GetAllocMemoryGpu	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpu()const{ return(JCellDivGpu::GetAllocMemoryGpu()); }$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
JCellDivGpuSingle::GetAllocMemoryGpuNct	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpuNct()const{ return(JCellDivGpu::GetAllocMemoryGpuNct()); };$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
JCellDivGpuSingle::GetAllocMemoryGpuNp	JCellDivGpuSingle.h	/^  ullong GetAllocMemoryGpuNp()const{ return(JCellDivGpu::GetAllocMemoryGpuNp()); };$/;"	f	class:JCellDivGpuSingle	access:public	signature:() const
JCellDivGpuSingle::JCellDivGpuSingle	JCellDivGpuSingle.cpp	/^JCellDivGpuSingle::JCellDivGpuSingle(bool stable,bool floating,byte periactive$/;"	f	class:JCellDivGpuSingle	signature:(bool stable,bool floating,byte periactive ,TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivGpuSingle::JCellDivGpuSingle	JCellDivGpuSingle.h	/^  JCellDivGpuSingle(bool stable,bool floating,byte periactive,$/;"	p	class:JCellDivGpuSingle	access:public	signature:(bool stable,bool floating,byte periactive, TpCellMode cellmode,float scell,tdouble3 mapposmin,tdouble3 mapposmax,tuint3 mapcells ,unsigned casenbound,unsigned casenfixed,unsigned casenpb,JLog2 *log,std::string dirout)
JCellDivGpuSingle::MergeMapCellBoundFluid	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const{$/;"	f	class:JCellDivGpuSingle	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
JCellDivGpuSingle::MergeMapCellBoundFluid	JCellDivGpuSingle.h	/^  void MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const;$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
JCellDivGpuSingle::PreSort	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::PreSort(const unsigned *dcellg,const typecode *codeg){$/;"	f	class:JCellDivGpuSingle	signature:(const unsigned *dcellg,const typecode *codeg)
JCellDivGpuSingle::PreSort	JCellDivGpuSingle.h	/^  void PreSort(const unsigned *dcellg,const typecode *codeg);$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const unsigned *dcellg,const typecode *codeg)
JCellDivGpuSingle::PrepareNct	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::PrepareNct(){$/;"	f	class:JCellDivGpuSingle	signature:()
JCellDivGpuSingle::PrepareNct	JCellDivGpuSingle.h	/^  void PrepareNct();$/;"	p	class:JCellDivGpuSingle	access:protected	signature:()
JCfgRun	JCfgRun.cpp	/^JCfgRun::JCfgRun(){$/;"	f	class:JCfgRun	signature:()
JCfgRun	JCfgRun.h	/^  JCfgRun();$/;"	p	class:JCfgRun	access:public	signature:()
JCfgRun	JCfgRun.h	/^class JCfgRun : protected JObject$/;"	c	inherits:JObject
JCfgRun::BlockSizeMode	JCfgRun.h	/^  TpBlockSizeMode BlockSizeMode;$/;"	m	class:JCfgRun	access:public
JCfgRun::CaseName	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
JCfgRun::CellMode	JCfgRun.h	/^  TpCellMode  CellMode;$/;"	m	class:JCfgRun	access:public
JCfgRun::Cpu	JCfgRun.h	/^  bool Cpu;$/;"	m	class:JCfgRun	access:public
JCfgRun::CreateDirs	JCfgRun.h	/^  bool CreateDirs;   \/\/\/<Creates full path for output files (true by default).$/;"	m	class:JCfgRun	access:public
JCfgRun::CsvSepComa	JCfgRun.h	/^  bool CsvSepComa;   \/\/\/<Separator character in CSV files (false=semicolon, true=coma).$/;"	m	class:JCfgRun	access:public
JCfgRun::DeltaSph	JCfgRun.h	/^  float DeltaSph;$/;"	m	class:JCfgRun	access:public
JCfgRun::DirDataOut	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
JCfgRun::DirOut	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
JCfgRun::DirsDef	JCfgRun.h	/^  int DirsDef;$/;"	m	class:JCfgRun	access:protected
JCfgRun::DomainFixedMax	JCfgRun.h	/^  tdouble3 DomainFixedMin,DomainFixedMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainFixedMin	JCfgRun.h	/^  tdouble3 DomainFixedMin,DomainFixedMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainMode	JCfgRun.h	/^  byte DomainMode;  \/\/\/<Domain configuration 0:No configured, 1:Particles, 2:Fixed$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainParticlesMax	JCfgRun.h	/^  tdouble3 DomainParticlesMin,DomainParticlesMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainParticlesMin	JCfgRun.h	/^  tdouble3 DomainParticlesMin,DomainParticlesMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainParticlesPrcMax	JCfgRun.h	/^  tdouble3 DomainParticlesPrcMin,DomainParticlesPrcMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::DomainParticlesPrcMin	JCfgRun.h	/^  tdouble3 DomainParticlesPrcMin,DomainParticlesPrcMax;$/;"	m	class:JCfgRun	access:public
JCfgRun::ErrorParm	JCfgRun.cpp	/^void JCfgRun::ErrorParm(const std::string &opt,int optc,int lv,const std::string &file)const{$/;"	f	class:JCfgRun	signature:(const std::string &opt,int optc,int lv,const std::string &file) const
JCfgRun::ErrorParm	JCfgRun.h	/^  void ErrorParm(const std::string &opt,int optc,int lv,const std::string &file)const;$/;"	p	class:JCfgRun	access:public	signature:(const std::string &opt,int optc,int lv,const std::string &file) const
JCfgRun::FtPause	JCfgRun.h	/^  float FtPause;$/;"	m	class:JCfgRun	access:public
JCfgRun::Gpu	JCfgRun.h	/^  bool Gpu;$/;"	m	class:JCfgRun	access:public
JCfgRun::GpuFree	JCfgRun.h	/^  bool GpuFree;$/;"	m	class:JCfgRun	access:public
JCfgRun::GpuId	JCfgRun.h	/^  int GpuId;$/;"	m	class:JCfgRun	access:public
JCfgRun::JCfgRun	JCfgRun.cpp	/^JCfgRun::JCfgRun(){$/;"	f	class:JCfgRun	signature:()
JCfgRun::JCfgRun	JCfgRun.h	/^  JCfgRun();$/;"	p	class:JCfgRun	access:public	signature:()
JCfgRun::LoadArgv	JCfgRun.cpp	/^void JCfgRun::LoadArgv(int argc,char** argv){$/;"	f	class:JCfgRun	signature:(int argc,char** argv)
JCfgRun::LoadArgv	JCfgRun.h	/^  void LoadArgv(int argc,char** argv);$/;"	p	class:JCfgRun	access:public	signature:(int argc,char** argv)
JCfgRun::LoadDouble3	JCfgRun.cpp	/^void JCfgRun::LoadDouble3(std::string txopt,double def,tdouble3 &v1){$/;"	f	class:JCfgRun	signature:(std::string txopt,double def,tdouble3 &v1)
JCfgRun::LoadDouble3	JCfgRun.h	/^  static void LoadDouble3(std::string txopt,double def,tdouble3 &v1);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,double def,tdouble3 &v1)
JCfgRun::LoadDouble6	JCfgRun.cpp	/^void JCfgRun::LoadDouble6(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2){$/;"	f	class:JCfgRun	signature:(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2)
JCfgRun::LoadDouble6	JCfgRun.h	/^  static void LoadDouble6(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2)
JCfgRun::LoadDsphConfig	JCfgRun.cpp	/^void JCfgRun::LoadDsphConfig(std::string path){$/;"	f	class:JCfgRun	signature:(std::string path)
JCfgRun::LoadDsphConfig	JCfgRun.h	/^  void LoadDsphConfig(std::string path);$/;"	p	class:JCfgRun	access:protected	signature:(std::string path)
JCfgRun::LoadFile	JCfgRun.cpp	/^void JCfgRun::LoadFile(string fname,int lv){$/;"	f	class:JCfgRun	signature:(string fname,int lv)
JCfgRun::LoadFile	JCfgRun.h	/^  void LoadFile(std::string fname,int lv);$/;"	p	class:JCfgRun	access:public	signature:(std::string fname,int lv)
JCfgRun::LoadFloat3	JCfgRun.cpp	/^void JCfgRun::LoadFloat3(std::string txopt,float def,tfloat3 &v1){$/;"	f	class:JCfgRun	signature:(std::string txopt,float def,tfloat3 &v1)
JCfgRun::LoadFloat3	JCfgRun.h	/^  static void LoadFloat3(std::string txopt,float def,tfloat3 &v1);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,float def,tfloat3 &v1)
JCfgRun::LoadFloat6	JCfgRun.cpp	/^void JCfgRun::LoadFloat6(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2){$/;"	f	class:JCfgRun	signature:(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2)
JCfgRun::LoadFloat6	JCfgRun.h	/^  static void LoadFloat6(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2)
JCfgRun::LoadOpts	JCfgRun.cpp	/^void JCfgRun::LoadOpts(string *optlis,int optn,int lv,string file){$/;"	f	class:JCfgRun	signature:(string *optlis,int optn,int lv,string file)
JCfgRun::LoadOpts	JCfgRun.h	/^  void LoadOpts(std::string *optlis,int optn,int lv,std::string file);$/;"	p	class:JCfgRun	access:public	signature:(std::string *optlis,int optn,int lv,std::string file)
JCfgRun::OmpThreads	JCfgRun.h	/^  int OmpThreads;$/;"	m	class:JCfgRun	access:public
JCfgRun::PartBegin	JCfgRun.h	/^  unsigned PartBegin,PartBeginFirst;$/;"	m	class:JCfgRun	access:public
JCfgRun::PartBeginDir	JCfgRun.h	/^  std::string PartBeginDir;$/;"	m	class:JCfgRun	access:public
JCfgRun::PartBeginFirst	JCfgRun.h	/^  unsigned PartBegin,PartBeginFirst;$/;"	m	class:JCfgRun	access:public
JCfgRun::PosDouble	JCfgRun.h	/^  int PosDouble;  \/\/\/<Precision in particle interaction. 0:Simple, 1:Double, 2:Uses and save double (default=0).$/;"	m	class:JCfgRun	access:public
JCfgRun::PrintInfo	JCfgRun.h	/^  bool PrintInfo;$/;"	m	class:JCfgRun	access:public
JCfgRun::Reset	JCfgRun.cpp	/^void JCfgRun::Reset(){$/;"	f	class:JCfgRun	signature:()
JCfgRun::Reset	JCfgRun.h	/^  void Reset();$/;"	p	class:JCfgRun	access:public	signature:()
JCfgRun::RhopOutMax	JCfgRun.h	/^  float RhopOutMin,RhopOutMax;    \/\/\/<Limits for \\ref RhopOut density correction.$/;"	m	class:JCfgRun	access:public
JCfgRun::RhopOutMin	JCfgRun.h	/^  float RhopOutMin,RhopOutMax;    \/\/\/<Limits for \\ref RhopOut density correction.$/;"	m	class:JCfgRun	access:public
JCfgRun::RhopOutModif	JCfgRun.h	/^  bool RhopOutModif;              \/\/\/<Indicates whether \\ref RhopOutMin or RhopOutMax is changed.$/;"	m	class:JCfgRun	access:public
JCfgRun::RunName	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
JCfgRun::Shifting	JCfgRun.h	/^  int Shifting;  \/\/\/<Shifting mode -1:no defined, 0:none, 1:nobound, 2:nofixed, 3:full$/;"	m	class:JCfgRun	access:public
JCfgRun::SplitsOpts	JCfgRun.cpp	/^void JCfgRun::SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull$/;"	f	class:JCfgRun	signature:(const std::string &opt,std::string &txword,std::string &txoptfull ,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4) const
JCfgRun::SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull) const
JCfgRun::SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2) const
JCfgRun::SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3) const
JCfgRun::SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4)const;$/;"	p	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4) const
JCfgRun::Stable	JCfgRun.h	/^  bool Stable;$/;"	m	class:JCfgRun	access:public
JCfgRun::SvDef	JCfgRun.h	/^  bool SvDef;$/;"	m	class:JCfgRun	access:protected
JCfgRun::SvDomainVtk	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::SvRes	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::SvTimers	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::Sv_Binx	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::Sv_Csv	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::Sv_Info	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::Sv_Vtk	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
JCfgRun::TKernel	JCfgRun.h	/^  TpKernel TKernel;$/;"	m	class:JCfgRun	access:public
JCfgRun::TStep	JCfgRun.h	/^  TpStep TStep;$/;"	m	class:JCfgRun	access:public
JCfgRun::TVisco	JCfgRun.h	/^  TpVisco TVisco;$/;"	m	class:JCfgRun	access:public
JCfgRun::TimeMax	JCfgRun.h	/^  double TimeMax,TimePart;$/;"	m	class:JCfgRun	access:public
JCfgRun::TimePart	JCfgRun.h	/^  double TimeMax,TimePart;$/;"	m	class:JCfgRun	access:public
JCfgRun::VerletSteps	JCfgRun.h	/^  int VerletSteps;$/;"	m	class:JCfgRun	access:public
JCfgRun::Visco	JCfgRun.h	/^  float Visco;$/;"	m	class:JCfgRun	access:public
JCfgRun::ViscoBoundFactor	JCfgRun.h	/^  float ViscoBoundFactor;$/;"	m	class:JCfgRun	access:public
JCfgRun::VisuConfig	JCfgRun.cpp	/^void JCfgRun::VisuConfig()const{$/;"	f	class:JCfgRun	signature:() const
JCfgRun::VisuConfig	JCfgRun.h	/^  void VisuConfig()const;$/;"	p	class:JCfgRun	access:public	signature:() const
JCfgRun::VisuInfo	JCfgRun.cpp	/^void JCfgRun::VisuInfo()const{$/;"	f	class:JCfgRun	signature:() const
JCfgRun::VisuInfo	JCfgRun.h	/^  void VisuInfo()const;$/;"	p	class:JCfgRun	access:public	signature:() const
JDamping	JDamping.cpp	/^JDamping::JDamping(double dp,JLog2* log):Dp(dp),Log(log){$/;"	f	class:JDamping	signature:(double dp,JLog2* log)
JDamping	JDamping.h	/^  JDamping(double dp,JLog2* log);$/;"	p	class:JDamping	access:public	signature:(double dp,JLog2* log)
JDamping	JDamping.h	/^class JDamping : protected JObject$/;"	c	inherits:JObject
JDamping::ComputeDamping	JDamping.cpp	/^void JDamping::ComputeDamping(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::ComputeDamping	JDamping.cpp	/^void JDamping::ComputeDamping(double timestep,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(double timestep,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::ComputeDamping	JDamping.h	/^  void ComputeDamping(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:private	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::ComputeDamping	JDamping.h	/^  void ComputeDamping(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:public	signature:(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::ComputeDamping	JDamping.h	/^  void ComputeDamping(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,tfloat4 *velrhop)const{ ComputeDamping(timestep,dt,n,pini,pos,NULL,velrhop); }$/;"	f	class:JDamping	access:public	signature:(double timestep,double dt,unsigned n,unsigned pini,const tdouble3 *pos,tfloat4 *velrhop) const
JDamping::ComputeDampingPla	JDamping.cpp	/^void JDamping::ComputeDampingPla(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini$/;"	f	class:JDamping	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini ,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::ComputeDampingPla	JDamping.h	/^  void ComputeDampingPla(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JDamping	access:private	signature:(const JDamping::StDamping &da,double dt,unsigned n,unsigned pini,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JDamping::Dp	JDamping.h	/^  const double Dp;$/;"	m	class:JDamping	access:private
JDamping::GetCount	JDamping.h	/^  unsigned GetCount()const{ return(unsigned(List.size())); }$/;"	f	class:JDamping	access:public	signature:() const
JDamping::GetDampingZone	JDamping.cpp	/^const JDamping::StDamping* JDamping::GetDampingZone(unsigned c)const{$/;"	f	class:JDamping	signature:(unsigned c) const
JDamping::GetDampingZone	JDamping.h	/^  const JDamping::StDamping* GetDampingZone(unsigned c)const;$/;"	p	class:JDamping	access:public	signature:(unsigned c) const
JDamping::JDamping	JDamping.cpp	/^JDamping::JDamping(double dp,JLog2* log):Dp(dp),Log(log){$/;"	f	class:JDamping	signature:(double dp,JLog2* log)
JDamping::JDamping	JDamping.h	/^  JDamping(double dp,JLog2* log);$/;"	p	class:JDamping	access:public	signature:(double dp,JLog2* log)
JDamping::List	JDamping.h	/^  std::vector<StDamping> List;$/;"	m	class:JDamping	access:private
JDamping::LoadXml	JDamping.cpp	/^void JDamping::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JDamping	signature:(JXml *sxml,const std::string &place)
JDamping::LoadXml	JDamping.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JDamping	access:public	signature:(JXml *sxml,const std::string &place)
JDamping::Log	JDamping.h	/^  JLog2* Log;$/;"	m	class:JDamping	access:private
JDamping::ReadXml	JDamping.cpp	/^void JDamping::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JDamping	signature:(JXml *sxml,TiXmlElement* lis)
JDamping::ReadXml	JDamping.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JDamping	access:private	signature:(JXml *sxml,TiXmlElement* ele)
JDamping::Reset	JDamping.cpp	/^void JDamping::Reset(){$/;"	f	class:JDamping	signature:()
JDamping::Reset	JDamping.h	/^  void Reset();$/;"	p	class:JDamping	access:public	signature:()
JDamping::SaveVtkConfig	JDamping.cpp	/^void JDamping::SaveVtkConfig(double dp)const{$/;"	f	class:JDamping	signature:(double dp) const
JDamping::SaveVtkConfig	JDamping.h	/^  void SaveVtkConfig(double dp)const;$/;"	p	class:JDamping	access:private	signature:(double dp) const
JDamping::StDamping	JDamping.h	/^  }StDamping;$/;"	t	class:JDamping	typeref:struct:JDamping::__anon9	access:public
JDamping::VisuConfig	JDamping.cpp	/^void JDamping::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JDamping	signature:(std::string txhead,std::string txfoot)
JDamping::VisuConfig	JDamping.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JDamping	access:public	signature:(std::string txhead,std::string txfoot)
JDamping::__anon9::dist	JDamping.h	/^    float dist;         \/\/\/<Distance between limitmin and limitmax points. | Distancia entre puntos limitmin y limitmax.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompla0	JDamping.h	/^    tdouble4 dompla0;   \/\/\/<Domain definition - plane 0.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompla1	JDamping.h	/^    tdouble4 dompla1;   \/\/\/<Domain definition - plane 1.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompla2	JDamping.h	/^    tdouble4 dompla2;   \/\/\/<Domain definition - plane 2.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompla3	JDamping.h	/^    tdouble4 dompla3;   \/\/\/<Domain definition - plane 3.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompt0	JDamping.h	/^    tdouble2 dompt0;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompt1	JDamping.h	/^    tdouble2 dompt1;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompt2	JDamping.h	/^    tdouble2 dompt2;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::dompt3	JDamping.h	/^    tdouble2 dompt3;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::domzmax	JDamping.h	/^    double domzmax;     \/\/\/<Domain definition - Z maximum. | Definicion de dominio - Z maxima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::domzmin	JDamping.h	/^    double domzmin;     \/\/\/<Domain definition - Z minimum. | Definicion de dominio - Z minima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::factorxyz	JDamping.h	/^    tfloat3 factorxyz;  \/\/\/<Factor applied on each axis. | Factor de aplicacion en cada eje.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::limitmax	JDamping.h	/^    tdouble3 limitmax;  \/\/\/<Miximum reduction position. | Posicion de reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::limitmin	JDamping.h	/^    tdouble3 limitmin;  \/\/\/<Minimal reduction position. | Posicion de reduccion minima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::overlimit	JDamping.h	/^    float overlimit;    \/\/\/<Distance after limit with maximum reduction. | Distancia despues de limite con reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::plane	JDamping.h	/^    tdouble4 plane;     \/\/\/<Plane at the limitmin point. | Plano en el punto limitmin.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::redumax	JDamping.h	/^    float redumax;      \/\/\/<Percentage of maximum reduction. | Porcentaje de reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::__anon9::usedomain	JDamping.h	/^    bool usedomain;     \/\/\/<Indicates use of domain planes. | Indica uso de planos del dominio.$/;"	m	struct:JDamping::__anon9	access:public
JDamping::~JDamping	JDamping.cpp	/^JDamping::~JDamping(){$/;"	f	class:JDamping	signature:()
JDamping::~JDamping	JDamping.h	/^  ~JDamping();$/;"	p	class:JDamping	access:public	signature:()
JDsphConfig	JDsphConfig.cpp	/^JDsphConfig::JDsphConfig(){$/;"	f	class:JDsphConfig	signature:()
JDsphConfig	JDsphConfig.h	/^  JDsphConfig();$/;"	p	class:JDsphConfig	access:public	signature:()
JDsphConfig	JDsphConfig.h	/^class JDsphConfig : protected JObject$/;"	c	inherits:JObject
JDsphConfig::CreateDirs	JDsphConfig.h	/^  int CreateDirs;   \/\/\/<Creates full path for output files (-1=undefined, 0=no, 1=yes).$/;"	m	class:JDsphConfig	access:protected
JDsphConfig::CsvSeparator	JDsphConfig.h	/^  int CsvSeparator; \/\/\/<Separator character in CSV files (-1=undefined, 0=semicolon, 1=coma).$/;"	m	class:JDsphConfig	access:protected
JDsphConfig::FileCfg	JDsphConfig.h	/^  std::string FileCfg;$/;"	m	class:JDsphConfig	access:protected
JDsphConfig::GetCreateDirs	JDsphConfig.h	/^  int GetCreateDirs()const{ return(CreateDirs); }$/;"	f	class:JDsphConfig	access:public	signature:() const
JDsphConfig::GetCsvSeparator	JDsphConfig.h	/^  int GetCsvSeparator()const{ return(CsvSeparator); }$/;"	f	class:JDsphConfig	access:public	signature:() const
JDsphConfig::GetFileCfg	JDsphConfig.h	/^  std::string GetFileCfg()const{ return(FileCfg); }$/;"	f	class:JDsphConfig	access:public	signature:() const
JDsphConfig::Init	JDsphConfig.cpp	/^void JDsphConfig::Init(std::string path){$/;"	f	class:JDsphConfig	signature:(std::string path)
JDsphConfig::Init	JDsphConfig.h	/^  void Init(std::string path);$/;"	p	class:JDsphConfig	access:public	signature:(std::string path)
JDsphConfig::JDsphConfig	JDsphConfig.cpp	/^JDsphConfig::JDsphConfig(){$/;"	f	class:JDsphConfig	signature:()
JDsphConfig::JDsphConfig	JDsphConfig.h	/^  JDsphConfig();$/;"	p	class:JDsphConfig	access:public	signature:()
JDsphConfig::Reset	JDsphConfig.cpp	/^void JDsphConfig::Reset(){$/;"	f	class:JDsphConfig	signature:()
JDsphConfig::Reset	JDsphConfig.h	/^  void Reset();$/;"	p	class:JDsphConfig	access:public	signature:()
JDsphConfig::~JDsphConfig	JDsphConfig.cpp	/^JDsphConfig::~JDsphConfig(){$/;"	f	class:JDsphConfig	signature:()
JDsphConfig::~JDsphConfig	JDsphConfig.h	/^  ~JDsphConfig();$/;"	p	class:JDsphConfig	access:public	signature:()
JException	JException.cpp	/^JException::JException(const std::string &classname,const std::string &method,const std::string &text,const std::string &file){$/;"	f	class:JException	signature:(const std::string &classname,const std::string &method,const std::string &text,const std::string &file)
JException	JException.h	/^  JException(const std::string &classname,const std::string &method,const std::string &text,const std::string &file);$/;"	p	class:JException	access:public	signature:(const std::string &classname,const std::string &method,const std::string &text,const std::string &file)
JException	JException.h	/^class JException : public std::exception{$/;"	c	inherits:std::exception
JException::ClassName	JException.h	/^  std::string ClassName; \/\/\/<Name of the class that generated an exception. $/;"	m	class:JException	access:protected
JException::ExName	JException.h	/^  std::string ExName;    \/\/\/<Name of the exception. $/;"	m	class:JException	access:protected
JException::File	JException.h	/^  std::string File;      \/\/\/<File related to the exception.$/;"	m	class:JException	access:protected
JException::JException	JException.cpp	/^JException::JException(const std::string &classname,const std::string &method,const std::string &text,const std::string &file){$/;"	f	class:JException	signature:(const std::string &classname,const std::string &method,const std::string &text,const std::string &file)
JException::JException	JException.h	/^  JException(const std::string &classname,const std::string &method,const std::string &text,const std::string &file);$/;"	p	class:JException	access:public	signature:(const std::string &classname,const std::string &method,const std::string &text,const std::string &file)
JException::Method	JException.h	/^  std::string Method;    \/\/\/<Name of the method that generated an exception. $/;"	m	class:JException	access:protected
JException::Print	JException.cpp	/^void JException::Print()const{$/;"	f	class:JException	signature:() const
JException::Print	JException.h	/^  void Print()const;$/;"	p	class:JException	access:public	signature:() const
JException::Text	JException.h	/^  std::string Text;      \/\/\/<Text of the exception.$/;"	m	class:JException	access:protected
JException::ToStr	JException.cpp	/^std::string JException::ToStr()const{$/;"	f	class:JException	signature:() const
JException::ToStr	JException.h	/^  std::string ToStr()const;$/;"	p	class:JException	access:public	signature:() const
JException::what	JException.h	/^  virtual const char* what() const throw(){ $/;"	f	class:JException	access:public	signature:() const
JException::~JException	JException.h	/^  ~JException() throw(){}  \/\/\/<Destructor of objects.$/;"	f	class:JException	access:public	signature:()
JFormatFiles2	JFormatFiles2.h	/^class JFormatFiles2$/;"	c
JFormatFiles2::AddShape_Circle	JFormatFiles2.h	/^  static void AddShape_Circle(std::vector<StShapeData> &shapes,bool circle$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes,bool circle ,const tdouble3 &pt,double radius,const tdouble3 &vec,int nside,int value,float valuef)
JFormatFiles2::AddShape_Circle	JFormatFiles2.h	/^  static void AddShape_Circle(std::vector<StShapeData> &shapes,bool circle$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes,bool circle ,const tfloat3 &pt,float radius,const tfloat3 &vec,int nside,int value,float valuef)
JFormatFiles2::AddShape_Cross	JFormatFiles2.h	/^  static void AddShape_Cross(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,double radius,int value,float valuef)
JFormatFiles2::AddShape_Cross	JFormatFiles2.h	/^  static void AddShape_Cross(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,float radius,int value,float valuef)
JFormatFiles2::AddShape_Cylinder	JFormatFiles2.h	/^  static void AddShape_Cylinder(std::vector<JFormatFiles2::StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<JFormatFiles2::StShapeData> &shapes ,const tfloat3 &p1,const tfloat3 &p2,float radius,int nside,unsigned maskfaceshide,int value,float valuef)
JFormatFiles2::AddShape_Cylinder	JFormatFiles2.h	/^  static void AddShape_Cylinder(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &p1,const tdouble3 &p2,double radius,int nside,unsigned maskfaceshide,int value,float valuef)
JFormatFiles2::AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)
JFormatFiles2::AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,const tdouble3 &pt3,const tdouble3 &pt4,int value,float valuef)
JFormatFiles2::AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef)
JFormatFiles2::AddShape_QuadLines	JFormatFiles2.h	/^  static void AddShape_QuadLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &pt2,const tfloat3 &pt3,const tfloat3 &pt4,int value,float valuef)
JFormatFiles2::AddShape_Sphere	JFormatFiles2.h	/^  static void AddShape_Sphere(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt,double radius,int nside,int value,float valuef)
JFormatFiles2::AddShape_Sphere	JFormatFiles2.h	/^  static void AddShape_Sphere(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt,float radius,int nside,int value,float valuef)
JFormatFiles2::AddShape_Spring	JFormatFiles2.h	/^  static void AddShape_Spring(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,double restlength,double scalesize ,StShapeSpring config,int value,float valuef)
JFormatFiles2::AddShape_Spring	JFormatFiles2.h	/^  static void AddShape_Spring(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &p2,float restlength,float scalesize ,StShapeSpring config,int value,float valuef)
JFormatFiles2::AddShape_TriangleLines	JFormatFiles2.h	/^  static void AddShape_TriangleLines(std::vector<StShapeData> &shapes$/;"	f	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tdouble3 &pt1,const tdouble3 &pt2,const tdouble3 &pt3,int value,float valuef)
JFormatFiles2::AddShape_TriangleLines	JFormatFiles2.h	/^  static void AddShape_TriangleLines(std::vector<StShapeData> &shapes$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StShapeData> &shapes ,const tfloat3 &pt1,const tfloat3 &pt2,const tfloat3 &pt3,int value,float valuef)
JFormatFiles2::CalculateStats	JFormatFiles2.h	/^  static void CalculateStats(unsigned np,unsigned nfields,StStatistics* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned np,unsigned nfields,StStatistics* fields)
JFormatFiles2::Char8	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::CheckFields	JFormatFiles2.h	/^  static void CheckFields(const std::vector<StScalarData> &fields);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::vector<StScalarData> &fields)
JFormatFiles2::CheckFields	JFormatFiles2.h	/^  static void CheckFields(unsigned nfields,const StScalarData* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned nfields,const StScalarData* fields)
JFormatFiles2::CheckStats	JFormatFiles2.h	/^  static void CheckStats(unsigned nfields,const StStatistics* fields);$/;"	p	class:JFormatFiles2	access:public	signature:(unsigned nfields,const StStatistics* fields)
JFormatFiles2::CreateOBJsByMk	JFormatFiles2.h	/^  static void CreateOBJsByMk(void* ptr_vtksimple,std::string filein,std::string filesout$/;"	p	class:JFormatFiles2	access:public	signature:(void* ptr_vtksimple,std::string filein,std::string filesout ,const std::vector<unsigned> &mkbounds,unsigned mkboundfirst,TpModeNormal normalmode)
JFormatFiles2::CreateShapesMk	JFormatFiles2.h	/^  static void* CreateShapesMk(const std::vector<std::string> &vtkfiles);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::vector<std::string> &vtkfiles)
JFormatFiles2::DefineField	JFormatFiles2.h	/^  static StScalarData DefineField(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL){$/;"	f	class:JFormatFiles2	access:public	signature:(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL)
JFormatFiles2::DefineFieldDel	JFormatFiles2.h	/^  static StScalarData DefineFieldDel(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL){$/;"	f	class:JFormatFiles2	access:public	signature:(const std::string &name,TpData type,unsigned comp,const void *pointer=NULL)
JFormatFiles2::DefineFieldFormat	JFormatFiles2.h	/^  static void DefineFieldFormat(StScalarData &field);$/;"	p	class:JFormatFiles2	access:public	signature:(StScalarData &field)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,const tdouble3 &pt4,const tdouble3 &pt5,const tdouble3 &pt6 ,const tdouble3 &pt7,const tdouble3 &pt8,int value,float valuef)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &size$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &size ,int value,float valuef)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tdouble3 &pt1,const tdouble3 &vx$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &vx ,const tdouble3 &vy,const tdouble3 &vz,int value,float valuef)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,const tfloat3 &pt4,const tfloat3 &pt5,const tfloat3 &pt6 ,const tfloat3 &pt7,const tfloat3 &pt8,int value,float valuef)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &size$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &size ,int value,float valuef)
JFormatFiles2::DefineShape_Box	JFormatFiles2.h	/^  static StShapeData DefineShape_Box(const tfloat3 &pt1,const tfloat3 &vx$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &vx ,const tfloat3 &vy,const tfloat3 &vz,int value,float valuef)
JFormatFiles2::DefineShape_Line	JFormatFiles2.h	/^  static StShapeData DefineShape_Line(const tdouble3 &pt1,const tdouble3 &pt2,int value,float valuef){$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2,int value,float valuef)
JFormatFiles2::DefineShape_Line	JFormatFiles2.h	/^  static StShapeData DefineShape_Line(const tfloat3 &pt1,const tfloat3 &pt2,int value,float valuef){$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2,int value,float valuef)
JFormatFiles2::DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt,const tdouble3 &vec,double size,int value,float valuef)
JFormatFiles2::DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,const tdouble3 &pt4,int value,float valuef)
JFormatFiles2::DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef);$/;"	p	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt,const tfloat3 &vec,float size,int value,float valuef)
JFormatFiles2::DefineShape_Quad	JFormatFiles2.h	/^  static StShapeData DefineShape_Quad(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,const tfloat3 &pt4,int value,float valuef)
JFormatFiles2::DefineShape_Triangle	JFormatFiles2.h	/^  static StShapeData DefineShape_Triangle(const tdouble3 &pt1,const tdouble3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tdouble3 &pt1,const tdouble3 &pt2 ,const tdouble3 &pt3,int value,float valuef)
JFormatFiles2::DefineShape_Triangle	JFormatFiles2.h	/^  static StShapeData DefineShape_Triangle(const tfloat3 &pt1,const tfloat3 &pt2$/;"	f	class:JFormatFiles2	access:public	signature:(const tfloat3 &pt1,const tfloat3 &pt2 ,const tfloat3 &pt3,int value,float valuef)
JFormatFiles2::DefineStatsField	JFormatFiles2.h	/^  static StStatistics DefineStatsField(const std::string &name$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &name ,TpData type,unsigned comp,const void *pointer ,bool selmin=true,bool selmax=true,bool selmean=true,bool seltotal=true,bool selcomponent=true)
JFormatFiles2::DeleteFields	JFormatFiles2.h	/^  static void DeleteFields(std::vector<StScalarData> &fields);$/;"	p	class:JFormatFiles2	access:public	signature:(std::vector<StScalarData> &fields)
JFormatFiles2::DeleteShapesMk	JFormatFiles2.h	/^  static void DeleteShapesMk(void* ptr_vtksimple);$/;"	p	class:JFormatFiles2	access:public	signature:(void* ptr_vtksimple)
JFormatFiles2::Double64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::Float32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::GetUnits	JFormatFiles2.h	/^  static std::string GetUnits(const std::string &varname);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &varname)
JFormatFiles2::Int32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::Llong64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::NorInvert	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
JFormatFiles2::NorNULL	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
JFormatFiles2::NorOriginal	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
JFormatFiles2::NorTwoFace	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
JFormatFiles2::ParticlesToAscii	JFormatFiles2.h	/^  static void ParticlesToAscii(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor)
JFormatFiles2::ParticlesToAscii2	JFormatFiles2.h	/^  static void ParticlesToAscii2(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *acepos,const tfloat3 *aceneg,const tfloat3 *vor)
JFormatFiles2::ParticlesToCsv	JFormatFiles2.h	/^  static void ParticlesToCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,unsigned nfixed,unsigned nmoving,unsigned nfloat,unsigned nfluid,unsigned nfluidout,float timestep ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press,const float *mass ,const unsigned *id,const byte *type,const byte *mk,const tfloat3 *ace,const tfloat3 *vor)
JFormatFiles2::ParticlesToCsv2	JFormatFiles2.h	/^  static void ParticlesToCsv2(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,unsigned nfixed,unsigned nmoving,unsigned nfloat,unsigned nfluid,unsigned nfluidout,float timestep ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press,const float *mass ,const unsigned *id,const byte *type,const byte *mk,const tfloat3 *acepos,const tfloat3 *aceneg,const tfloat3 *vor)
JFormatFiles2::ParticlesToVtk	JFormatFiles2.h	/^  static void ParticlesToVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor,int domain=0)
JFormatFiles2::ParticlesToVtk	JFormatFiles2.h	/^  static void ParticlesToVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor,int domain=0)
JFormatFiles2::ParticlesToVtkFloat	JFormatFiles2.h	/^  static void ParticlesToVtkFloat(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const float *id,const float *type,const float *mk ,const tfloat3 *ace,const tfloat3 *vor)
JFormatFiles2::RunException	JFormatFiles2.h	/^  static void RunException(std::string method,std::string msg);$/;"	p	class:JFormatFiles2	access:public	signature:(std::string method,std::string msg)
JFormatFiles2::RunException	JFormatFiles2.h	/^  static void RunException(std::string method,std::string msg,std::string file);$/;"	p	class:JFormatFiles2	access:public	signature:(std::string method,std::string msg,std::string file)
JFormatFiles2::SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const double* data,bool first=false)
JFormatFiles2::SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const float* data,bool first=false)
JFormatFiles2::SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tfloat3* pos,const float* data,bool first=false)
JFormatFiles2::SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const tdouble3* data,bool first=false)
JFormatFiles2::SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const tfloat3* data,bool first=false)
JFormatFiles2::SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tfloat3* pos,const tfloat3* data,bool first=false)
JFormatFiles2::SaveAscii	JFormatFiles2.h	/^  static void SaveAscii(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd ,const std::vector<StScalarData> &fields,std::string head=Ó)
JFormatFiles2::SaveAscii	JFormatFiles2.h	/^  static void SaveAscii(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd ,unsigned nfields,const StScalarData* fields,std::string head=Ó)
JFormatFiles2::SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tdouble3* pos,const std::vector<StScalarData> &fields,std::string head=Ó)
JFormatFiles2::SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tdouble3* pos,unsigned nfields,const StScalarData* fields,std::string head=Ó)
JFormatFiles2::SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tfloat3* pos,const std::vector<StScalarData> &fields,std::string head=Ó)
JFormatFiles2::SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tfloat3* pos,unsigned nfields,const StScalarData* fields,std::string head=Ó)
JFormatFiles2::SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const double* data,bool first=false)
JFormatFiles2::SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const float* data,bool first=false)
JFormatFiles2::SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tfloat3* pos,const float* data,bool first=false)
JFormatFiles2::SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const tdouble3* data,bool first=false)
JFormatFiles2::SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const tfloat3* data,bool first=false)
JFormatFiles2::SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tfloat3* pos,const tfloat3* data,bool first=false)
JFormatFiles2::SaveMotionPredef	JFormatFiles2.h	/^  static void SaveMotionPredef(const std::string &fname,unsigned np,const float *time,const float *pos);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned np,const float *time,const float *pos)
JFormatFiles2::SaveMotionPredef	JFormatFiles2.h	/^  static void SaveMotionPredef(const std::string &fname,unsigned np,const float *time,const tfloat3 *pos);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned np,const float *time,const tfloat3 *pos)
JFormatFiles2::SaveStats	JFormatFiles2.h	/^  static void SaveStats(std::string fname,bool csvsepcoma,bool firstdata,unsigned part$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,bool firstdata,unsigned part ,double timestep,unsigned np,unsigned nfields,StStatistics* fields,std::string head)
JFormatFiles2::SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3* pos,const std::vector<StScalarData> &fields)
JFormatFiles2::SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3* pos,unsigned nfields,const StScalarData* fields)
JFormatFiles2::SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,const std::vector<StScalarData> &fields)
JFormatFiles2::SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,unsigned nfields,const StScalarData* fields)
JFormatFiles2::SaveVtkBasic	JFormatFiles2.h	/^  static void SaveVtkBasic(std::string fname,unsigned np$/;"	f	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,const unsigned* idp,const tfloat3* vel,const float* rhop)
JFormatFiles2::SaveVtkBoxes	JFormatFiles2.h	/^  static void SaveVtkBoxes(const std::string &fname,unsigned nbox,const tfloat3 *vbox,float sizemin=0);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned nbox,const tfloat3 *vbox,float sizemin=0)
JFormatFiles2::SaveVtkCells	JFormatFiles2.h	/^  static void SaveVtkCells(const std::string &fname,const tfloat3 &posmin,const tuint3 &cells,float scell);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,const tfloat3 &posmin,const tuint3 &cells,float scell)
JFormatFiles2::SaveVtkPointsVar	JFormatFiles2.h	/^  static void SaveVtkPointsVar(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const std::string &varname,const float *var)
JFormatFiles2::SaveVtkShapes	JFormatFiles2.h	/^  static void SaveVtkShapes(std::string fname,const std::string &valuename$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,const std::string &valuename ,const std::string &valuefname,const std::vector<StShapeData> &shapes)
JFormatFiles2::ShBox	JFormatFiles2.h	/^    ,ShBox$/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::ShLine	JFormatFiles2.h	/^     ShLine$/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::ShNull	JFormatFiles2.h	/^    ,ShNull $/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::ShQuad	JFormatFiles2.h	/^    ,ShQuad$/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::ShSphere	JFormatFiles2.h	/^    ,ShSphere$/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::ShTriangle	JFormatFiles2.h	/^    ,ShTriangle$/;"	e	enum:JFormatFiles2::__anon14
JFormatFiles2::Short16	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::StScalarData	JFormatFiles2.h	/^  }StScalarData;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::StShapeData	JFormatFiles2.h	/^  }StShapeData;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::StrShapeData	access:public
JFormatFiles2::StShapeSpring	JFormatFiles2.h	/^  }StShapeSpring;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StStatistics	JFormatFiles2.h	/^  }StStatistics;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::StrShapeData	JFormatFiles2.h	/^  typedef struct StrShapeData{$/;"	s	class:JFormatFiles2	access:public
JFormatFiles2::StrShapeData::StrShapeData	JFormatFiles2.h	/^    StrShapeData(){ reset(); }$/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:()
JFormatFiles2::StrShapeData::StrShapeData	JFormatFiles2.h	/^    StrShapeData(TpShape tsh,int vi,float vf,tfloat3 p0=TFloat3(0)$/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:(TpShape tsh,int vi,float vf,tfloat3 p0=TFloat3(0) ,tfloat3 p1=TFloat3(0),tfloat3 p2=TFloat3(0),tfloat3 p3=TFloat3(0) ,tfloat3 p4=TFloat3(0),tfloat3 p5=TFloat3(0),tfloat3 p6=TFloat3(0) ,tfloat3 p7=TFloat3(0))
JFormatFiles2::StrShapeData::reset	JFormatFiles2.h	/^    void reset(){ $/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:()
JFormatFiles2::StrShapeData::tshape	JFormatFiles2.h	/^    TpShape tshape;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
JFormatFiles2::StrShapeData::value	JFormatFiles2.h	/^    int value;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
JFormatFiles2::StrShapeData::valuef	JFormatFiles2.h	/^    float valuef;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
JFormatFiles2::StrShapeData::vpt	JFormatFiles2.h	/^    tfloat3 vpt[8];$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
JFormatFiles2::StrShapeSpring	JFormatFiles2.h	/^  typedef struct StrShapeSpring{$/;"	s	class:JFormatFiles2	access:public
JFormatFiles2::StrShapeSpring::StrShapeSpring	JFormatFiles2.h	/^    StrShapeSpring(){ reset(); }$/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:()
JFormatFiles2::StrShapeSpring::StrShapeSpring	JFormatFiles2.h	/^    StrShapeSpring(float xcornersout,float xcornersin,float xradius,float xlength,int xnside)$/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:(float xcornersout,float xcornersin,float xradius,float xlength,int xnside)
JFormatFiles2::StrShapeSpring::cornersin	JFormatFiles2.h	/^    float cornersin;  \/\/-Size of corner (inside).$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StrShapeSpring::cornersout	JFormatFiles2.h	/^    float cornersout; \/\/-Size of corner.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StrShapeSpring::length	JFormatFiles2.h	/^    float length;     \/\/-Length for each revolution.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StrShapeSpring::nside	JFormatFiles2.h	/^    int nside;        \/\/-Number of sections for each revolution.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StrShapeSpring::radius	JFormatFiles2.h	/^    float radius;     \/\/-Spring radius.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
JFormatFiles2::StrShapeSpring::reset	JFormatFiles2.h	/^    void reset(){ $/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:()
JFormatFiles2::TpData	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon11	access:public
JFormatFiles2::TpDataNull	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::TpModeNormal	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon10	access:public
JFormatFiles2::TpShape	JFormatFiles2.h	/^  }TpShape;$/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon14	access:public
JFormatFiles2::UChar8	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::UInt32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::ULlong64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::UShort16	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
JFormatFiles2::__anon12::comp	JFormatFiles2.h	/^    unsigned comp;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::delptr	JFormatFiles2.h	/^    bool delptr;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::fmt	JFormatFiles2.h	/^    std::string fmt;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::name	JFormatFiles2.h	/^    std::string name; \/\/"name:outputformat:units", e.g. "velocity:%f:m\/s"$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::pointer	JFormatFiles2.h	/^    const void *pointer;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::type	JFormatFiles2.h	/^    TpData type;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon12::units	JFormatFiles2.h	/^    std::string units;$/;"	m	struct:JFormatFiles2::__anon12	access:public
JFormatFiles2::__anon13::comp	JFormatFiles2.h	/^    unsigned comp;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::max	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::max1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::max2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::max3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::mean	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::mean1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::mean2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::mean3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::min	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::min1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::min2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::min3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::name	JFormatFiles2.h	/^    std::string name;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::num	JFormatFiles2.h	/^    ullong num;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::pointer	JFormatFiles2.h	/^    const void *pointer;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::selcomponent	JFormatFiles2.h	/^    bool seltotal,selcomponent;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::selmax	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::selmean	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::selmin	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::seltotal	JFormatFiles2.h	/^    bool seltotal,selcomponent;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JFormatFiles2::__anon13::type	JFormatFiles2.h	/^    TpData type;$/;"	m	struct:JFormatFiles2::__anon13	access:public
JGaugeForce	JGaugeItem.cpp	/^JGaugeForce::JGaugeForce(unsigned idx,std::string name,word mkbound$/;"	f	class:JGaugeForce	signature:(unsigned idx,std::string name,word mkbound ,TpParticles typeparts,unsigned idbegin,unsigned count,typecode code ,tfloat3 center,bool cpu,JLog2* log)
JGaugeForce	JGaugeItem.h	/^  JGaugeForce(unsigned idx,std::string name,word mkbound,TpParticles typeparts$/;"	p	class:JGaugeForce	access:public	signature:(unsigned idx,std::string name,word mkbound,TpParticles typeparts ,unsigned idbegin,unsigned count,typecode code,tfloat3 center,bool cpu,JLog2* log)
JGaugeForce	JGaugeItem.h	/^class JGaugeForce : public JGaugeItem$/;"	c	inherits:JGaugeItem
JGaugeForce::Auxg	JGaugeItem.h	/^  float3 *Auxg;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::CalculeCpu	JGaugeItem.cpp	/^void JGaugeForce::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeForce	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeForce::CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeForce	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeForce::CalculeGpu	JGaugeItem.cpp	/^void JGaugeForce::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeForce	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeForce::CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeForce	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeForce::ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeForce	access:protected	signature:()
JGaugeForce::Code	JGaugeItem.h	/^  typecode Code;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::Count	JGaugeItem.h	/^  unsigned Count;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::GetCode	JGaugeItem.h	/^  typecode    GetCode()     const{ return(Code); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetCount	JGaugeItem.h	/^  unsigned    GetCount()    const{ return(Count); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetIdBegin	JGaugeItem.h	/^  unsigned    GetIdBegin()  const{ return(IdBegin); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetInitialCenter	JGaugeItem.h	/^  tfloat3     GetInitialCenter()const{ return(InitialCenter); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetMkBound	JGaugeItem.h	/^  word        GetMkBound()  const{ return(MkBound); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeForce::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeForce	signature:(std::vector<tfloat3> &points) const
JGaugeForce::GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeForce	access:public	signature:(std::vector<tfloat3> &points) const
JGaugeForce::GetResult	JGaugeItem.h	/^  const StGaugeForceRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::GetTypeParts	JGaugeItem.h	/^  TpParticles GetTypeParts()const{ return(TypeParts); }$/;"	f	class:JGaugeForce	access:public	signature:() const
JGaugeForce::IdBegin	JGaugeItem.h	/^  unsigned IdBegin;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::InitialCenter	JGaugeItem.h	/^  tfloat3 InitialCenter;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::JGaugeForce	JGaugeItem.cpp	/^JGaugeForce::JGaugeForce(unsigned idx,std::string name,word mkbound$/;"	f	class:JGaugeForce	signature:(unsigned idx,std::string name,word mkbound ,TpParticles typeparts,unsigned idbegin,unsigned count,typecode code ,tfloat3 center,bool cpu,JLog2* log)
JGaugeForce::JGaugeForce	JGaugeItem.h	/^  JGaugeForce(unsigned idx,std::string name,word mkbound,TpParticles typeparts$/;"	p	class:JGaugeForce	access:public	signature:(unsigned idx,std::string name,word mkbound,TpParticles typeparts ,unsigned idbegin,unsigned count,typecode code,tfloat3 center,bool cpu,JLog2* log)
JGaugeForce::MkBound	JGaugeItem.h	/^  word MkBound;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::OutBuff	JGaugeItem.h	/^  std::vector<StGaugeForceRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::PartAcec	JGaugeItem.h	/^  tfloat3 *PartAcec;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::PartAceg	JGaugeItem.h	/^  float3 *PartAceg;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::Reset	JGaugeItem.cpp	/^void JGaugeForce::Reset(){$/;"	f	class:JGaugeForce	signature:()
JGaugeForce::Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeForce	access:protected	signature:()
JGaugeForce::Result	JGaugeItem.h	/^  StGaugeForceRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::SaveResults	JGaugeItem.cpp	/^void JGaugeForce::SaveResults(){$/;"	f	class:JGaugeForce	signature:()
JGaugeForce::SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeForce	access:public	signature:()
JGaugeForce::SaveVtkResult	JGaugeItem.cpp	/^void JGaugeForce::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeForce	signature:(unsigned cpart)
JGaugeForce::SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeForce	access:public	signature:(unsigned cpart)
JGaugeForce::StGaugeForceRes	JGaugeItem.h	/^  }StGaugeForceRes;$/;"	t	class:JGaugeForce	typeref:struct:JGaugeForce::StrGaugeForceRes	access:public
JGaugeForce::StoreResult	JGaugeItem.cpp	/^void JGaugeForce::StoreResult(){$/;"	f	class:JGaugeForce	signature:()
JGaugeForce::StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeForce	access:protected	signature:()
JGaugeForce::StrGaugeForceRes	JGaugeItem.h	/^  typedef struct StrGaugeForceRes{$/;"	s	class:JGaugeForce	access:public
JGaugeForce::StrGaugeForceRes::Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:()
JGaugeForce::StrGaugeForceRes::Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &forceres){$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:(double t,const tfloat3 &forceres)
JGaugeForce::StrGaugeForceRes::StrGaugeForceRes	JGaugeItem.h	/^    StrGaugeForceRes(){ Reset(); }$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:()
JGaugeForce::StrGaugeForceRes::force	JGaugeItem.h	/^    tfloat3 force;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
JGaugeForce::StrGaugeForceRes::mkbound	JGaugeItem.h	/^    word mkbound;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
JGaugeForce::StrGaugeForceRes::modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
JGaugeForce::StrGaugeForceRes::timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
JGaugeForce::TypeParts	JGaugeItem.h	/^  TpParticles TypeParts;$/;"	m	class:JGaugeForce	access:protected
JGaugeForce::~JGaugeForce	JGaugeItem.cpp	/^JGaugeForce::~JGaugeForce(){$/;"	f	class:JGaugeForce	signature:()
JGaugeForce::~JGaugeForce	JGaugeItem.h	/^  ~JGaugeForce();$/;"	p	class:JGaugeForce	access:public	signature:()
JGaugeItem	JGaugeItem.cpp	/^JGaugeItem::JGaugeItem(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)$/;"	f	class:JGaugeItem	signature:(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)
JGaugeItem	JGaugeItem.h	/^  JGaugeItem(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log);$/;"	p	class:JGaugeItem	access:protected	signature:(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)
JGaugeItem	JGaugeItem.h	/^class JGaugeItem : protected JObject$/;"	c	inherits:JObject
JGaugeItem::Awen	JGaugeItem.h	/^  float Awen;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Bwen	JGaugeItem.h	/^  float Bwen;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::CalculeCpu	JGaugeItem.h	/^  virtual void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeItem	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeItem::CalculeGpu	JGaugeItem.h	/^  virtual void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeItem	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeItem::CheckCudaError	JGaugeItem.cpp	/^void JGaugeItem::CheckCudaError(const std::string &method,const std::string &msg){$/;"	f	class:JGaugeItem	signature:(const std::string &method,const std::string &msg)
JGaugeItem::CheckCudaError	JGaugeItem.h	/^  void CheckCudaError(const std::string &method,const std::string &msg);$/;"	p	class:JGaugeItem	access:protected	signature:(const std::string &method,const std::string &msg)
JGaugeItem::ClearResult	JGaugeItem.h	/^  virtual void ClearResult()=0;$/;"	p	class:JGaugeItem	access:protected	signature:()
JGaugeItem::ComputeDt	JGaugeItem.h	/^  double ComputeDt;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::ComputeEnd	JGaugeItem.h	/^  double ComputeEnd;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::ComputeNext	JGaugeItem.h	/^  double ComputeNext;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::ComputeStart	JGaugeItem.h	/^  double ComputeStart;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Config	JGaugeItem.cpp	/^void JGaugeItem::Config(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax$/;"	f	class:JGaugeItem	signature:(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax ,float scell,int hdiv,float h,float massfluid,float massbound ,float cteb,float gamma,float rhopzero)
JGaugeItem::Config	JGaugeItem.h	/^  void Config(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax$/;"	p	class:JGaugeItem	access:public	signature:(bool simulate2d,tdouble3 domposmin,tdouble3 domposmax ,float scell,int hdiv,float h,float massfluid,float massbound ,float cteb,float gamma,float rhopzero)
JGaugeItem::ConfigComputeTiming	JGaugeItem.cpp	/^void JGaugeItem::ConfigComputeTiming(double start,double end,double dt){$/;"	f	class:JGaugeItem	signature:(double start,double end,double dt)
JGaugeItem::ConfigComputeTiming	JGaugeItem.h	/^  void ConfigComputeTiming(double start,double end,double dt);$/;"	p	class:JGaugeItem	access:public	signature:(double start,double end,double dt)
JGaugeItem::ConfigOutputTiming	JGaugeItem.cpp	/^void JGaugeItem::ConfigOutputTiming(bool save,double start,double end,double dt){$/;"	f	class:JGaugeItem	signature:(bool save,double start,double end,double dt)
JGaugeItem::ConfigOutputTiming	JGaugeItem.h	/^  void ConfigOutputTiming(bool save,double start,double end,double dt);$/;"	p	class:JGaugeItem	access:public	signature:(bool save,double start,double end,double dt)
JGaugeItem::Cpu	JGaugeItem.h	/^  const bool Cpu;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::CteB	JGaugeItem.h	/^  float CteB;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::DomPosMax	JGaugeItem.h	/^  tdouble3 DomPosMax;  \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeItem	access:protected
JGaugeItem::DomPosMin	JGaugeItem.h	/^  tdouble3 DomPosMin;  \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeItem	access:protected
JGaugeItem::FileInfo	JGaugeItem.h	/^  std::string FileInfo;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Fourh2	JGaugeItem.h	/^  float Fourh2;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::GAUGE_Force	JGaugeItem.h	/^    ,GAUGE_Force$/;"	e	enum:JGaugeItem::__anon15
JGaugeItem::GAUGE_MaxZ	JGaugeItem.h	/^    ,GAUGE_MaxZ$/;"	e	enum:JGaugeItem::__anon15
JGaugeItem::GAUGE_Swl	JGaugeItem.h	/^    ,GAUGE_Swl$/;"	e	enum:JGaugeItem::__anon15
JGaugeItem::GAUGE_Vel	JGaugeItem.h	/^     GAUGE_Vel$/;"	e	enum:JGaugeItem::__anon15
JGaugeItem::Gamma	JGaugeItem.h	/^  float Gamma;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::GetComputeDt	JGaugeItem.h	/^  double GetComputeDt()const{ return(ComputeDt); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetComputeEnd	JGaugeItem.h	/^  double GetComputeEnd()const{ return(ComputeEnd); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetComputeStart	JGaugeItem.h	/^  double GetComputeStart()const{ return(ComputeStart); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetConfig	JGaugeItem.cpp	/^void JGaugeItem::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JGaugeItem	signature:(std::vector<std::string> &lines) const
JGaugeItem::GetConfig	JGaugeItem.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JGaugeItem	access:public	signature:(std::vector<std::string> &lines) const
JGaugeItem::GetInteractionCells	JGaugeItem.cpp	/^void JGaugeItem::GetInteractionCells(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	f	class:JGaugeItem	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JGaugeItem::GetInteractionCells	JGaugeItem.h	/^  inline void GetInteractionCells(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	p	class:JGaugeItem	access:protected	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JGaugeItem::GetNameType	JGaugeItem.cpp	/^std::string JGaugeItem::GetNameType(TpGauge type){$/;"	f	class:JGaugeItem	signature:(TpGauge type)
JGaugeItem::GetNameType	JGaugeItem.h	/^  static std::string GetNameType(TpGauge type);$/;"	p	class:JGaugeItem	access:protected	signature:(TpGauge type)
JGaugeItem::GetOutputDt	JGaugeItem.h	/^  double GetOutputDt()const{ return(OutputDt); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetOutputEnd	JGaugeItem.h	/^  double GetOutputEnd()const{ return(OutputEnd); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetOutputStart	JGaugeItem.h	/^  double GetOutputStart()const{ return(OutputStart); }$/;"	f	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetPointDef	JGaugeItem.h	/^  virtual unsigned GetPointDef(std::vector<tfloat3> &points)const=0;$/;"	p	class:JGaugeItem	access:public	signature:(std::vector<tfloat3> &points) const
JGaugeItem::GetResultsFileCsv	JGaugeItem.cpp	/^std::string JGaugeItem::GetResultsFileCsv()const{$/;"	f	class:JGaugeItem	signature:() const
JGaugeItem::GetResultsFileCsv	JGaugeItem.h	/^  std::string GetResultsFileCsv()const;$/;"	p	class:JGaugeItem	access:public	signature:() const
JGaugeItem::GetResultsFileVtk	JGaugeItem.cpp	/^std::string JGaugeItem::GetResultsFileVtk()const{$/;"	f	class:JGaugeItem	signature:() const
JGaugeItem::GetResultsFileVtk	JGaugeItem.h	/^  std::string GetResultsFileVtk()const;$/;"	p	class:JGaugeItem	access:public	signature:() const
JGaugeItem::H	JGaugeItem.h	/^  float H;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Hdiv	JGaugeItem.h	/^  int Hdiv;            \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Idx	JGaugeItem.h	/^  const unsigned Idx;$/;"	m	class:JGaugeItem	access:public
JGaugeItem::JGaugeItem	JGaugeItem.cpp	/^JGaugeItem::JGaugeItem(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)$/;"	f	class:JGaugeItem	signature:(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)
JGaugeItem::JGaugeItem	JGaugeItem.h	/^  JGaugeItem(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log);$/;"	p	class:JGaugeItem	access:protected	signature:(TpGauge type,unsigned idx,std::string name,bool cpu,JLog2* log)
JGaugeItem::Log	JGaugeItem.h	/^  JLog2* Log;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::MassBound	JGaugeItem.h	/^  float MassBound;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::MassFluid	JGaugeItem.h	/^  float MassFluid;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Name	JGaugeItem.h	/^  const std::string Name;$/;"	m	class:JGaugeItem	access:public
JGaugeItem::OutCount	JGaugeItem.h	/^  unsigned OutCount;                 \/\/\/<Number of stored results in buffer.$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutFile	JGaugeItem.h	/^  std::string OutFile;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutSize	JGaugeItem.h	/^  static const unsigned OutSize=200; \/\/\/<Maximum number of results in buffer.$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::Output	JGaugeItem.h	/^  bool Output(double timestep)const{ return(OutputSave && timestep>=OutputNext && OutputStart<=timestep && timestep<=OutputEnd); }$/;"	f	class:JGaugeItem	access:public	signature:(double timestep) const
JGaugeItem::OutputDt	JGaugeItem.h	/^  double OutputDt;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutputEnd	JGaugeItem.h	/^  double OutputEnd;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutputNext	JGaugeItem.h	/^  double OutputNext;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutputSave	JGaugeItem.h	/^  bool OutputSave;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::OutputStart	JGaugeItem.h	/^  double OutputStart;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::PointIsOut	JGaugeItem.h	/^  bool PointIsOut(double px,double py)const{ return(px!=px || py!=py || px<DomPosMin.x || py<DomPosMin.y || px>=DomPosMax.x || py>=DomPosMax.y); }$/;"	f	class:JGaugeItem	access:protected	signature:(double px,double py) const
JGaugeItem::PointIsOut	JGaugeItem.h	/^  bool PointIsOut(double px,double py,double pz)const{ return(px!=px || py!=py || pz!=pz || px<DomPosMin.x || py<DomPosMin.y || pz<DomPosMin.z || px>=DomPosMax.x || py>=DomPosMax.y || pz>=DomPosMax.z); }$/;"	f	class:JGaugeItem	access:protected	signature:(double px,double py,double pz) const
JGaugeItem::Reset	JGaugeItem.cpp	/^void JGaugeItem::Reset(){$/;"	f	class:JGaugeItem	signature:()
JGaugeItem::Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeItem	access:protected	signature:()
JGaugeItem::RhopZero	JGaugeItem.h	/^  float RhopZero;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::RunExceptionCuda	JGaugeItem.cpp	/^void JGaugeItem::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error){$/;"	f	class:JGaugeItem	signature:(const std::string &method,const std::string &msg,cudaError_t error)
JGaugeItem::RunExceptionCuda	JGaugeItem.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error);$/;"	p	class:JGaugeItem	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error)
JGaugeItem::SaveResults	JGaugeItem.cpp	/^void JGaugeItem::SaveResults(unsigned cpart){$/;"	f	class:JGaugeItem	signature:(unsigned cpart)
JGaugeItem::SaveResults	JGaugeItem.h	/^  virtual void SaveResults()=0;$/;"	p	class:JGaugeItem	access:public	signature:()
JGaugeItem::SaveResults	JGaugeItem.h	/^  void SaveResults(unsigned cpart);$/;"	p	class:JGaugeItem	access:public	signature:(unsigned cpart)
JGaugeItem::SaveVtkPart	JGaugeItem.h	/^  bool SaveVtkPart; \/\/-Creates VTK files for each PART.$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::SaveVtkResult	JGaugeItem.h	/^  virtual void SaveVtkResult(unsigned cpart)=0;$/;"	p	class:JGaugeItem	access:public	signature:(unsigned cpart)
JGaugeItem::Scell	JGaugeItem.h	/^  float Scell;         \/\/\/<Cell size: 2h or h. | Tamaño de celda: 2h o h.$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::SetSaveVtkPart	JGaugeItem.h	/^  void SetSaveVtkPart(bool save){ SaveVtkPart=save; }$/;"	f	class:JGaugeItem	access:public	signature:(bool save)
JGaugeItem::SetTimeStep	JGaugeItem.cpp	/^void JGaugeItem::SetTimeStep(double timestep){$/;"	f	class:JGaugeItem	signature:(double timestep)
JGaugeItem::SetTimeStep	JGaugeItem.h	/^  void SetTimeStep(double timestep);$/;"	p	class:JGaugeItem	access:protected	signature:(double timestep)
JGaugeItem::Simulate2D	JGaugeItem.h	/^  bool Simulate2D;     \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::StDefault	JGaugeItem.h	/^  }StDefault;$/;"	t	class:JGaugeItem	typeref:struct:JGaugeItem::__anon16	access:public
JGaugeItem::StoreResult	JGaugeItem.h	/^  virtual void StoreResult()=0;$/;"	p	class:JGaugeItem	access:protected	signature:()
JGaugeItem::TimeStep	JGaugeItem.h	/^  double TimeStep;$/;"	m	class:JGaugeItem	access:protected
JGaugeItem::TpGauge	JGaugeItem.h	/^  }TpGauge;$/;"	t	class:JGaugeItem	typeref:enum:JGaugeItem::__anon15	access:public
JGaugeItem::Type	JGaugeItem.h	/^  const TpGauge Type;$/;"	m	class:JGaugeItem	access:public
JGaugeItem::Update	JGaugeItem.h	/^  bool Update(double timestep)const{ return(timestep>=ComputeNext && ComputeStart<=timestep && timestep<=ComputeEnd); }$/;"	f	class:JGaugeItem	access:public	signature:(double timestep) const
JGaugeItem::__anon16::computedt	JGaugeItem.h	/^    double computedt;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::computeend	JGaugeItem.h	/^    double computeend;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::computestart	JGaugeItem.h	/^    double computestart;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::output	JGaugeItem.h	/^    bool output;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::outputdt	JGaugeItem.h	/^    double outputdt;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::outputend	JGaugeItem.h	/^    double outputend;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::outputstart	JGaugeItem.h	/^    double outputstart;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeItem::__anon16::savevtkpart	JGaugeItem.h	/^    bool savevtkpart;$/;"	m	struct:JGaugeItem::__anon16	access:public
JGaugeMaxZ	JGaugeItem.cpp	/^JGaugeMaxZ::JGaugeMaxZ(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)$/;"	f	class:JGaugeMaxZ	signature:(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)
JGaugeMaxZ	JGaugeItem.h	/^  JGaugeMaxZ(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log);$/;"	p	class:JGaugeMaxZ	access:public	signature:(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)
JGaugeMaxZ	JGaugeItem.h	/^class JGaugeMaxZ : public JGaugeItem$/;"	c	inherits:JGaugeItem
JGaugeMaxZ::CalculeCpu	JGaugeItem.cpp	/^void JGaugeMaxZ::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeMaxZ	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeMaxZ::CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeMaxZ	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeMaxZ::CalculeGpu	JGaugeItem.cpp	/^void JGaugeMaxZ::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeMaxZ	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeMaxZ::CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeMaxZ	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeMaxZ::ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeMaxZ	access:protected	signature:()
JGaugeMaxZ::DistLimit	JGaugeItem.h	/^  float DistLimit;$/;"	m	class:JGaugeMaxZ	access:protected
JGaugeMaxZ::GetDistLimit	JGaugeItem.h	/^  float GetDistLimit()const{ return(DistLimit); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
JGaugeMaxZ::GetHeight	JGaugeItem.h	/^  double GetHeight()const{ return(Height); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
JGaugeMaxZ::GetInteractionCellsMaxZ	JGaugeItem.cpp	/^void JGaugeMaxZ::GetInteractionCellsMaxZ(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	f	class:JGaugeMaxZ	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JGaugeMaxZ::GetInteractionCellsMaxZ	JGaugeItem.h	/^  void GetInteractionCellsMaxZ(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero$/;"	p	class:JGaugeMaxZ	access:protected	signature:(const tdouble3 &pos,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JGaugeMaxZ::GetPoint0	JGaugeItem.h	/^  tdouble3 GetPoint0()const{ return(Point0); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
JGaugeMaxZ::GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeMaxZ::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeMaxZ	signature:(std::vector<tfloat3> &points) const
JGaugeMaxZ::GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeMaxZ	access:public	signature:(std::vector<tfloat3> &points) const
JGaugeMaxZ::GetResult	JGaugeItem.h	/^  const StGaugeMaxzRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeMaxZ	access:public	signature:() const
JGaugeMaxZ::Height	JGaugeItem.h	/^  double Height;$/;"	m	class:JGaugeMaxZ	access:protected
JGaugeMaxZ::JGaugeMaxZ	JGaugeItem.cpp	/^JGaugeMaxZ::JGaugeMaxZ(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)$/;"	f	class:JGaugeMaxZ	signature:(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)
JGaugeMaxZ::JGaugeMaxZ	JGaugeItem.h	/^  JGaugeMaxZ(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log);$/;"	p	class:JGaugeMaxZ	access:public	signature:(unsigned idx,std::string name,tdouble3 point0,double height,float distlimit,bool cpu,JLog2* log)
JGaugeMaxZ::OutBuff	JGaugeItem.h	/^  std::vector<StGaugeMaxzRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeMaxZ	access:protected
JGaugeMaxZ::Point0	JGaugeItem.h	/^  tdouble3 Point0;$/;"	m	class:JGaugeMaxZ	access:protected
JGaugeMaxZ::Reset	JGaugeItem.cpp	/^void JGaugeMaxZ::Reset(){$/;"	f	class:JGaugeMaxZ	signature:()
JGaugeMaxZ::Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeMaxZ	access:protected	signature:()
JGaugeMaxZ::Result	JGaugeItem.h	/^  StGaugeMaxzRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeMaxZ	access:protected
JGaugeMaxZ::SaveResults	JGaugeItem.cpp	/^void JGaugeMaxZ::SaveResults(){$/;"	f	class:JGaugeMaxZ	signature:()
JGaugeMaxZ::SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeMaxZ	access:public	signature:()
JGaugeMaxZ::SaveVtkResult	JGaugeItem.cpp	/^void JGaugeMaxZ::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeMaxZ	signature:(unsigned cpart)
JGaugeMaxZ::SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeMaxZ	access:public	signature:(unsigned cpart)
JGaugeMaxZ::SetDistLimit	JGaugeItem.h	/^  void SetDistLimit(float distlimit){        ClearResult(); DistLimit=distlimit; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(float distlimit)
JGaugeMaxZ::SetHeight	JGaugeItem.h	/^  void SetHeight   (double height){          ClearResult(); Height=height; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(double height)
JGaugeMaxZ::SetPoint0	JGaugeItem.h	/^  void SetPoint0   (const tdouble3 &point0){ ClearResult(); Point0=point0; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(const tdouble3 &point0)
JGaugeMaxZ::StGaugeMaxzRes	JGaugeItem.h	/^  }StGaugeMaxzRes;$/;"	t	class:JGaugeMaxZ	typeref:struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
JGaugeMaxZ::StoreResult	JGaugeItem.cpp	/^void JGaugeMaxZ::StoreResult(){$/;"	f	class:JGaugeMaxZ	signature:()
JGaugeMaxZ::StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeMaxZ	access:protected	signature:()
JGaugeMaxZ::StrGaugeMaxzRes	JGaugeItem.h	/^  typedef struct StrGaugeMaxzRes{$/;"	s	class:JGaugeMaxZ	access:public
JGaugeMaxZ::StrGaugeMaxzRes::Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:()
JGaugeMaxZ::StrGaugeMaxzRes::Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt,float z){$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:(double t,const tfloat3 &pt,float z)
JGaugeMaxZ::StrGaugeMaxzRes::StrGaugeMaxzRes	JGaugeItem.h	/^    StrGaugeMaxzRes(){ Reset(); }$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:()
JGaugeMaxZ::StrGaugeMaxzRes::modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
JGaugeMaxZ::StrGaugeMaxzRes::point0	JGaugeItem.h	/^    tfloat3 point0;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
JGaugeMaxZ::StrGaugeMaxzRes::timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
JGaugeMaxZ::StrGaugeMaxzRes::zmax	JGaugeItem.h	/^    float zmax;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
JGaugeMaxZ::~JGaugeMaxZ	JGaugeItem.cpp	/^JGaugeMaxZ::~JGaugeMaxZ(){$/;"	f	class:JGaugeMaxZ	signature:()
JGaugeMaxZ::~JGaugeMaxZ	JGaugeItem.h	/^  ~JGaugeMaxZ();$/;"	p	class:JGaugeMaxZ	access:public	signature:()
JGaugeSwl	JGaugeItem.cpp	/^JGaugeSwl::JGaugeSwl(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)$/;"	f	class:JGaugeSwl	signature:(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)
JGaugeSwl	JGaugeItem.h	/^  JGaugeSwl(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log);$/;"	p	class:JGaugeSwl	access:public	signature:(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)
JGaugeSwl	JGaugeItem.h	/^class JGaugeSwl : public JGaugeItem$/;"	c	inherits:JGaugeItem
JGaugeSwl::CalculeCpu	JGaugeItem.cpp	/^void JGaugeSwl::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeSwl	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeSwl::CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSwl	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeSwl::CalculeGpu	JGaugeItem.cpp	/^void JGaugeSwl::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeSwl	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeSwl::CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSwl	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeSwl::CalculeMassCpu	JGaugeItem.cpp	/^float JGaugeSwl::CalculeMassCpu(const tdouble3 &ptpos,const tint4 &nc$/;"	f	class:JGaugeSwl	signature:(const tdouble3 &ptpos,const tint4 &nc ,const tint3 &cellzero,unsigned cellfluid,const unsigned *begincell ,const tdouble3 *pos,const typecode *code,const tfloat4 *velrhop) const
JGaugeSwl::CalculeMassCpu	JGaugeItem.h	/^  float CalculeMassCpu(const tdouble3 &ptpos,const tint4 &nc$/;"	p	class:JGaugeSwl	access:protected	signature:(const tdouble3 &ptpos,const tint4 &nc ,const tint3 &cellzero,unsigned cellfluid,const unsigned *begincell ,const tdouble3 *pos,const typecode *code,const tfloat4 *velrhop) const
JGaugeSwl::ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeSwl	access:protected	signature:()
JGaugeSwl::GetMassLimit	JGaugeItem.h	/^  float GetMassLimit()const{ return(MassLimit); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
JGaugeSwl::GetPoint0	JGaugeItem.h	/^  tdouble3 GetPoint0()const{ return(Point0); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
JGaugeSwl::GetPoint2	JGaugeItem.h	/^  tdouble3 GetPoint2()const{ return(Point2); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
JGaugeSwl::GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeSwl::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeSwl	signature:(std::vector<tfloat3> &points) const
JGaugeSwl::GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeSwl	access:public	signature:(std::vector<tfloat3> &points) const
JGaugeSwl::GetPointDp	JGaugeItem.h	/^  double GetPointDp()const{ return(PointDp); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
JGaugeSwl::GetResult	JGaugeItem.h	/^  const StGaugeSwlRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeSwl	access:public	signature:() const
JGaugeSwl::JGaugeSwl	JGaugeItem.cpp	/^JGaugeSwl::JGaugeSwl(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)$/;"	f	class:JGaugeSwl	signature:(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)
JGaugeSwl::JGaugeSwl	JGaugeItem.h	/^  JGaugeSwl(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log);$/;"	p	class:JGaugeSwl	access:public	signature:(unsigned idx,std::string name,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit,bool cpu,JLog2* log)
JGaugeSwl::MassLimit	JGaugeItem.h	/^  float MassLimit;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::OutBuff	JGaugeItem.h	/^  std::vector<StGaugeSwlRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::Point0	JGaugeItem.h	/^  tdouble3 Point0;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::Point2	JGaugeItem.h	/^  tdouble3 Point2;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::PointDir	JGaugeItem.h	/^  tdouble3 PointDir;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::PointDp	JGaugeItem.h	/^  double PointDp;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::PointNp	JGaugeItem.h	/^  unsigned PointNp;$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::Reset	JGaugeItem.cpp	/^void JGaugeSwl::Reset(){$/;"	f	class:JGaugeSwl	signature:()
JGaugeSwl::Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeSwl	access:protected	signature:()
JGaugeSwl::Result	JGaugeItem.h	/^  StGaugeSwlRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeSwl	access:protected
JGaugeSwl::SaveResults	JGaugeItem.cpp	/^void JGaugeSwl::SaveResults(){$/;"	f	class:JGaugeSwl	signature:()
JGaugeSwl::SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeSwl	access:public	signature:()
JGaugeSwl::SaveVtkResult	JGaugeItem.cpp	/^void JGaugeSwl::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeSwl	signature:(unsigned cpart)
JGaugeSwl::SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeSwl	access:public	signature:(unsigned cpart)
JGaugeSwl::SetPoints	JGaugeItem.cpp	/^void JGaugeSwl::SetPoints(const tdouble3 &point0,const tdouble3 &point2,double pointdp){$/;"	f	class:JGaugeSwl	signature:(const tdouble3 &point0,const tdouble3 &point2,double pointdp)
JGaugeSwl::SetPoints	JGaugeItem.h	/^  void SetPoints(const tdouble3 &point0,const tdouble3 &point2,double pointdp);$/;"	p	class:JGaugeSwl	access:public	signature:(const tdouble3 &point0,const tdouble3 &point2,double pointdp)
JGaugeSwl::StGaugeSwlRes	JGaugeItem.h	/^  }StGaugeSwlRes;$/;"	t	class:JGaugeSwl	typeref:struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::StoreResult	JGaugeItem.cpp	/^void JGaugeSwl::StoreResult(){$/;"	f	class:JGaugeSwl	signature:()
JGaugeSwl::StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeSwl	access:protected	signature:()
JGaugeSwl::StrGaugeSwlRes	JGaugeItem.h	/^  typedef struct StrGaugeSwlRes{$/;"	s	class:JGaugeSwl	access:public
JGaugeSwl::StrGaugeSwlRes::Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:()
JGaugeSwl::StrGaugeSwlRes::Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt0,const tfloat3 &pt2,const tfloat3 &ps){$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:(double t,const tfloat3 &pt0,const tfloat3 &pt2,const tfloat3 &ps)
JGaugeSwl::StrGaugeSwlRes::StrGaugeSwlRes	JGaugeItem.h	/^    StrGaugeSwlRes(){ Reset(); }$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:()
JGaugeSwl::StrGaugeSwlRes::modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::StrGaugeSwlRes::point0	JGaugeItem.h	/^    tfloat3 point0;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::StrGaugeSwlRes::point2	JGaugeItem.h	/^    tfloat3 point2;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::StrGaugeSwlRes::posswl	JGaugeItem.h	/^    tfloat3 posswl;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::StrGaugeSwlRes::timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
JGaugeSwl::~JGaugeSwl	JGaugeItem.cpp	/^JGaugeSwl::~JGaugeSwl(){$/;"	f	class:JGaugeSwl	signature:()
JGaugeSwl::~JGaugeSwl	JGaugeItem.h	/^  ~JGaugeSwl();$/;"	p	class:JGaugeSwl	access:public	signature:()
JGaugeSystem	JGaugeSystem.cpp	/^JGaugeSystem::JGaugeSystem(bool cpu,JLog2* log):Cpu(cpu),Log(log){$/;"	f	class:JGaugeSystem	signature:(bool cpu,JLog2* log)
JGaugeSystem	JGaugeSystem.h	/^  JGaugeSystem(bool cpu,JLog2* log);$/;"	p	class:JGaugeSystem	access:public	signature:(bool cpu,JLog2* log)
JGaugeSystem	JGaugeSystem.h	/^class JGaugeSystem : protected JObject$/;"	c	inherits:JObject
JGaugeSystem::AddGaugeForce	JGaugeSystem.cpp	/^JGaugeForce* JGaugeSystem::AddGaugeForce(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,const JSphMk* mkinfo,word mkbound)
JGaugeSystem::AddGaugeForce	JGaugeSystem.h	/^  JGaugeForce*    AddGaugeForce(std::string name,double computestart,double computeend,double computedt,const JSphMk* mkinfo,word mkbound);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,const JSphMk* mkinfo,word mkbound)
JGaugeSystem::AddGaugeMaxZ	JGaugeSystem.cpp	/^JGaugeMaxZ* JGaugeSystem::AddGaugeMaxZ(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,tdouble3 point0,double height,float distlimit)
JGaugeSystem::AddGaugeMaxZ	JGaugeSystem.h	/^  JGaugeMaxZ*     AddGaugeMaxZ (std::string name,double computestart,double computeend,double computedt,tdouble3 point0,double height,float distlimit);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,tdouble3 point0,double height,float distlimit)
JGaugeSystem::AddGaugeSwl	JGaugeSystem.cpp	/^JGaugeSwl* JGaugeSystem::AddGaugeSwl(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit)
JGaugeSystem::AddGaugeSwl	JGaugeSystem.h	/^  JGaugeSwl*      AddGaugeSwl  (std::string name,double computestart,double computeend,double computedt,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit=0);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,tdouble3 point0,tdouble3 point2,double pointdp,float masslimit=0)
JGaugeSystem::AddGaugeVel	JGaugeSystem.cpp	/^JGaugeVelocity* JGaugeSystem::AddGaugeVel(std::string name,double computestart,double computeend,double computedt$/;"	f	class:JGaugeSystem	signature:(std::string name,double computestart,double computeend,double computedt ,const tdouble3 &point)
JGaugeSystem::AddGaugeVel	JGaugeSystem.h	/^  JGaugeVelocity* AddGaugeVel  (std::string name,double computestart,double computeend,double computedt,const tdouble3 &point);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string name,double computestart,double computeend,double computedt,const tdouble3 &point)
JGaugeSystem::AuxMemoryg	JGaugeSystem.h	/^  float3* AuxMemoryg;  \/\/\/<Auxiliary allocated memory on GPU [1].$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::CalculeCpu	JGaugeSystem.cpp	/^void JGaugeSystem::CalculeCpu(double timestep,bool svpart,tuint3 ncells$/;"	f	class:JGaugeSystem	signature:(double timestep,bool svpart,tuint3 ncells ,tuint3 cellmin,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeSystem::CalculeCpu	JGaugeSystem.h	/^  void CalculeCpu(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSystem	access:public	signature:(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeSystem::CalculeGpu	JGaugeSystem.cpp	/^void JGaugeSystem::CalculeGpu(double timestep,bool svpart,tuint3 ncells$/;"	f	class:JGaugeSystem	signature:(double timestep,bool svpart,tuint3 ncells ,tuint3 cellmin,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop)
JGaugeSystem::CalculeGpu	JGaugeSystem.h	/^  void CalculeGpu(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeSystem	access:public	signature:(double timestep,bool svpart,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop)
JGaugeSystem::CfgDefault	JGaugeSystem.h	/^  JGaugeItem::StDefault CfgDefault; \/\/\/<Default configuration.$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Config	JGaugeSystem.cpp	/^void JGaugeSystem::Config(bool simulate2d,double simulate2dposy,double timemax,double timepart$/;"	f	class:JGaugeSystem	signature:(bool simulate2d,double simulate2dposy,double timemax,double timepart ,double dp,tdouble3 posmin,tdouble3 posmax,float scell,unsigned hdiv,float h ,float massfluid,float massbound,float cteb,float gamma,float rhopzero)
JGaugeSystem::Config	JGaugeSystem.h	/^  void Config(bool simulate2d,double simulate2dposy,double timemax,double timepart$/;"	p	class:JGaugeSystem	access:public	signature:(bool simulate2d,double simulate2dposy,double timemax,double timepart ,double dp,tdouble3 posmin,tdouble3 posmax,float scell,unsigned hdiv,float h ,float massfluid,float massbound,float cteb,float gamma,float rhopzero)
JGaugeSystem::Configured	JGaugeSystem.h	/^  bool Configured;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Cpu	JGaugeSystem.h	/^  const bool Cpu;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::CteB	JGaugeSystem.h	/^  float CteB;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::DomPosMax	JGaugeSystem.h	/^  tdouble3 DomPosMax;     \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::DomPosMin	JGaugeSystem.h	/^  tdouble3 DomPosMin;     \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Dp	JGaugeSystem.h	/^  double Dp;              \/\/\/<Distance between particles.$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Gamma	JGaugeSystem.h	/^  float Gamma;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Gauges	JGaugeSystem.h	/^  std::vector<JGaugeItem*> Gauges;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::GetCount	JGaugeSystem.h	/^  unsigned GetCount()const{ return(unsigned(Gauges.size())); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetDomPosMax	JGaugeSystem.h	/^  tdouble3 GetDomPosMax()const{ return(DomPosMax); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetDomPosMin	JGaugeSystem.h	/^  tdouble3 GetDomPosMin()const{ return(DomPosMin); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetDp	JGaugeSystem.h	/^  double GetDp()const{ return(Dp); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetGauge	JGaugeSystem.cpp	/^JGaugeItem* JGaugeSystem::GetGauge(unsigned c)const{$/;"	f	class:JGaugeSystem	signature:(unsigned c) const
JGaugeSystem::GetGauge	JGaugeSystem.h	/^  JGaugeItem* GetGauge(unsigned c)const;$/;"	p	class:JGaugeSystem	access:public	signature:(unsigned c) const
JGaugeSystem::GetGaugeIdx	JGaugeSystem.cpp	/^unsigned JGaugeSystem::GetGaugeIdx(const std::string &name)const{$/;"	f	class:JGaugeSystem	signature:(const std::string &name) const
JGaugeSystem::GetGaugeIdx	JGaugeSystem.h	/^  unsigned GetGaugeIdx(const std::string &name)const;$/;"	p	class:JGaugeSystem	access:public	signature:(const std::string &name) const
JGaugeSystem::GetH	JGaugeSystem.h	/^  float GetH()const{ return(H); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetMassBound	JGaugeSystem.h	/^  float GetMassBound()const{ return(MassBound); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetMassFluid	JGaugeSystem.h	/^  float GetMassFluid()const{ return(MassFluid); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetScell	JGaugeSystem.h	/^  float GetScell()const{ return(Scell); }$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::GetSimulate2D	JGaugeSystem.h	/^  bool GetSimulate2D()const{ return(Simulate2D); };$/;"	f	class:JGaugeSystem	access:public	signature:() const
JGaugeSystem::H	JGaugeSystem.h	/^  float H;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Hdiv	JGaugeSystem.h	/^  int Hdiv;               \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::JGaugeSystem	JGaugeSystem.cpp	/^JGaugeSystem::JGaugeSystem(bool cpu,JLog2* log):Cpu(cpu),Log(log){$/;"	f	class:JGaugeSystem	signature:(bool cpu,JLog2* log)
JGaugeSystem::JGaugeSystem	JGaugeSystem.h	/^  JGaugeSystem(bool cpu,JLog2* log);$/;"	p	class:JGaugeSystem	access:public	signature:(bool cpu,JLog2* log)
JGaugeSystem::LoadLinePoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2$/;"	f	class:JGaugeSystem	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2 ,std::vector<tdouble3> &points,const std::string &ref) const
JGaugeSystem::LoadLinePoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2$/;"	f	class:JGaugeSystem	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2 ,std::vector<tdouble3> &points,const std::string &ref) const
JGaugeSystem::LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points)const{ LoadLinePoints(coefdp,point1,point2,points,""); }$/;"	f	class:JGaugeSystem	access:public	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points) const
JGaugeSystem::LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref)const;$/;"	p	class:JGaugeSystem	access:private	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref) const
JGaugeSystem::LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points)const{ LoadLinePoints(count,point1,point2,points,""); }$/;"	f	class:JGaugeSystem	access:public	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points) const
JGaugeSystem::LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref)const;$/;"	p	class:JGaugeSystem	access:private	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref) const
JGaugeSystem::LoadPoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadPoints(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points)const{$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points) const
JGaugeSystem::LoadPoints	JGaugeSystem.h	/^  void LoadPoints(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points)const;$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points) const
JGaugeSystem::LoadXml	JGaugeSystem.cpp	/^void JGaugeSystem::LoadXml(JXml *sxml,const std::string &place,const JSphMk* mkinfo){$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,const std::string &place,const JSphMk* mkinfo)
JGaugeSystem::LoadXml	JGaugeSystem.h	/^  void LoadXml(JXml *sxml,const std::string &place,const JSphMk* mkinfo);$/;"	p	class:JGaugeSystem	access:public	signature:(JXml *sxml,const std::string &place,const JSphMk* mkinfo)
JGaugeSystem::Log	JGaugeSystem.h	/^  JLog2* Log;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::MassBound	JGaugeSystem.h	/^  float MassBound;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::MassFluid	JGaugeSystem.h	/^  float MassFluid;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::ReadXml	JGaugeSystem.cpp	/^void JGaugeSystem::ReadXml(JXml *sxml,TiXmlElement* lis,const JSphMk* mkinfo){$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* lis,const JSphMk* mkinfo)
JGaugeSystem::ReadXml	JGaugeSystem.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele,const JSphMk* mkinfo);$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* ele,const JSphMk* mkinfo)
JGaugeSystem::ReadXmlCommon	JGaugeSystem.cpp	/^JGaugeItem::StDefault JGaugeSystem::ReadXmlCommon(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* ele) const
JGaugeSystem::ReadXmlCommon	JGaugeSystem.h	/^  JGaugeItem::StDefault ReadXmlCommon(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
JGaugeSystem::Reset	JGaugeSystem.cpp	/^void JGaugeSystem::Reset(){$/;"	f	class:JGaugeSystem	signature:()
JGaugeSystem::Reset	JGaugeSystem.h	/^  void Reset();$/;"	p	class:JGaugeSystem	access:public	signature:()
JGaugeSystem::ResetCfgDefault	JGaugeSystem.cpp	/^void JGaugeSystem::ResetCfgDefault(){$/;"	f	class:JGaugeSystem	signature:()
JGaugeSystem::ResetCfgDefault	JGaugeSystem.h	/^  void ResetCfgDefault();$/;"	p	class:JGaugeSystem	access:private	signature:()
JGaugeSystem::RhopZero	JGaugeSystem.h	/^  float RhopZero;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::SaveResults	JGaugeSystem.cpp	/^void JGaugeSystem::SaveResults(unsigned cpart){$/;"	f	class:JGaugeSystem	signature:(unsigned cpart)
JGaugeSystem::SaveResults	JGaugeSystem.h	/^  void SaveResults(unsigned cpart);$/;"	p	class:JGaugeSystem	access:public	signature:(unsigned cpart)
JGaugeSystem::SaveVtkInitPoints	JGaugeSystem.cpp	/^void JGaugeSystem::SaveVtkInitPoints()const{$/;"	f	class:JGaugeSystem	signature:() const
JGaugeSystem::SaveVtkInitPoints	JGaugeSystem.h	/^  void SaveVtkInitPoints()const;$/;"	p	class:JGaugeSystem	access:private	signature:() const
JGaugeSystem::Scell	JGaugeSystem.h	/^  float Scell;            \/\/\/<Cell size: 2h or h. | Tamaño de celda: 2h o h.$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Simulate2D	JGaugeSystem.h	/^  bool Simulate2D;        \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::Simulate2DPosY	JGaugeSystem.h	/^  double Simulate2DPosY;  \/\/\/<Y value in 2D simulations.                        | Valor de Y en simulaciones 2D.$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::TimeMax	JGaugeSystem.h	/^  double TimeMax;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::TimePart	JGaugeSystem.h	/^  double TimePart;$/;"	m	class:JGaugeSystem	access:private
JGaugeSystem::VisuConfig	JGaugeSystem.cpp	/^void JGaugeSystem::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JGaugeSystem	signature:(std::string txhead,std::string txfoot)
JGaugeSystem::VisuConfig	JGaugeSystem.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string txhead,std::string txfoot)
JGaugeSystem::~JGaugeSystem	JGaugeSystem.cpp	/^JGaugeSystem::~JGaugeSystem(){$/;"	f	class:JGaugeSystem	signature:()
JGaugeSystem::~JGaugeSystem	JGaugeSystem.h	/^  ~JGaugeSystem();$/;"	p	class:JGaugeSystem	access:public	signature:()
JGaugeVelocity	JGaugeItem.cpp	/^JGaugeVelocity::JGaugeVelocity(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)$/;"	f	class:JGaugeVelocity	signature:(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)
JGaugeVelocity	JGaugeItem.h	/^  JGaugeVelocity(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log);$/;"	p	class:JGaugeVelocity	access:public	signature:(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)
JGaugeVelocity	JGaugeItem.h	/^class JGaugeVelocity : public JGaugeItem$/;"	c	inherits:JGaugeItem
JGaugeVelocity::CalculeCpu	JGaugeItem.cpp	/^void JGaugeVelocity::CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeVelocity	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeVelocity::CalculeCpu	JGaugeItem.h	/^  void CalculeCpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeVelocity	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const unsigned *begincell,unsigned npbok,unsigned npb,unsigned np ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop)
JGaugeVelocity::CalculeGpu	JGaugeItem.cpp	/^void JGaugeVelocity::CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	f	class:JGaugeVelocity	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeVelocity::CalculeGpu	JGaugeItem.h	/^  void CalculeGpu(double timestep,tuint3 ncells,tuint3 cellmin$/;"	p	class:JGaugeVelocity	access:public	signature:(double timestep,tuint3 ncells,tuint3 cellmin ,const int2 *beginendcell,unsigned npbok,unsigned npb,unsigned np ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop,float3 *aux)
JGaugeVelocity::ClearResult	JGaugeItem.h	/^  void ClearResult(){ Result.Reset(); }$/;"	f	class:JGaugeVelocity	access:protected	signature:()
JGaugeVelocity::GetPoint	JGaugeItem.h	/^  tdouble3 GetPoint()const{ return(Point); }$/;"	f	class:JGaugeVelocity	access:public	signature:() const
JGaugeVelocity::GetPointDef	JGaugeItem.cpp	/^unsigned JGaugeVelocity::GetPointDef(std::vector<tfloat3> &points)const{$/;"	f	class:JGaugeVelocity	signature:(std::vector<tfloat3> &points) const
JGaugeVelocity::GetPointDef	JGaugeItem.h	/^  unsigned GetPointDef(std::vector<tfloat3> &points)const;$/;"	p	class:JGaugeVelocity	access:public	signature:(std::vector<tfloat3> &points) const
JGaugeVelocity::GetResult	JGaugeItem.h	/^  const StGaugeVelRes& GetResult()const{ return(Result); }$/;"	f	class:JGaugeVelocity	access:public	signature:() const
JGaugeVelocity::JGaugeVelocity	JGaugeItem.cpp	/^JGaugeVelocity::JGaugeVelocity(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)$/;"	f	class:JGaugeVelocity	signature:(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)
JGaugeVelocity::JGaugeVelocity	JGaugeItem.h	/^  JGaugeVelocity(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log);$/;"	p	class:JGaugeVelocity	access:public	signature:(unsigned idx,std::string name,tdouble3 point,bool cpu,JLog2* log)
JGaugeVelocity::OutBuff	JGaugeItem.h	/^  std::vector<StGaugeVelRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeVelocity	access:protected
JGaugeVelocity::Point	JGaugeItem.h	/^  tdouble3 Point;$/;"	m	class:JGaugeVelocity	access:protected
JGaugeVelocity::Reset	JGaugeItem.cpp	/^void JGaugeVelocity::Reset(){$/;"	f	class:JGaugeVelocity	signature:()
JGaugeVelocity::Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeVelocity	access:protected	signature:()
JGaugeVelocity::Result	JGaugeItem.h	/^  StGaugeVelRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeVelocity	access:protected
JGaugeVelocity::SaveResults	JGaugeItem.cpp	/^void JGaugeVelocity::SaveResults(){$/;"	f	class:JGaugeVelocity	signature:()
JGaugeVelocity::SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeVelocity	access:public	signature:()
JGaugeVelocity::SaveVtkResult	JGaugeItem.cpp	/^void JGaugeVelocity::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeVelocity	signature:(unsigned cpart)
JGaugeVelocity::SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeVelocity	access:public	signature:(unsigned cpart)
JGaugeVelocity::SetPoint	JGaugeItem.h	/^  void SetPoint(const tdouble3 &point){ ClearResult(); Point=point; }$/;"	f	class:JGaugeVelocity	access:public	signature:(const tdouble3 &point)
JGaugeVelocity::StGaugeVelRes	JGaugeItem.h	/^  }StGaugeVelRes;$/;"	t	class:JGaugeVelocity	typeref:struct:JGaugeVelocity::StrGaugeVelRes	access:public
JGaugeVelocity::StoreResult	JGaugeItem.cpp	/^void JGaugeVelocity::StoreResult(){$/;"	f	class:JGaugeVelocity	signature:()
JGaugeVelocity::StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeVelocity	access:protected	signature:()
JGaugeVelocity::StrGaugeVelRes	JGaugeItem.h	/^  typedef struct StrGaugeVelRes{$/;"	s	class:JGaugeVelocity	access:public
JGaugeVelocity::StrGaugeVelRes::Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:()
JGaugeVelocity::StrGaugeVelRes::Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt,const tfloat3 &ve){$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:(double t,const tfloat3 &pt,const tfloat3 &ve)
JGaugeVelocity::StrGaugeVelRes::StrGaugeVelRes	JGaugeItem.h	/^    StrGaugeVelRes(){ Reset(); }$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:()
JGaugeVelocity::StrGaugeVelRes::modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
JGaugeVelocity::StrGaugeVelRes::point	JGaugeItem.h	/^    tfloat3 point;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
JGaugeVelocity::StrGaugeVelRes::timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
JGaugeVelocity::StrGaugeVelRes::vel	JGaugeItem.h	/^    tfloat3 vel;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
JGaugeVelocity::~JGaugeVelocity	JGaugeItem.cpp	/^JGaugeVelocity::~JGaugeVelocity(){$/;"	f	class:JGaugeVelocity	signature:()
JGaugeVelocity::~JGaugeVelocity	JGaugeItem.h	/^  ~JGaugeVelocity();$/;"	p	class:JGaugeVelocity	access:public	signature:()
JLinearValue	JLinearValue.cpp	/^JLinearValue::JLinearValue(unsigned nvalues):Nvalues(max(1u,nvalues)){$/;"	f	class:JLinearValue	signature:(unsigned nvalues)
JLinearValue	JLinearValue.h	/^  JLinearValue(unsigned nvalues=1);$/;"	p	class:JLinearValue	access:public	signature:(unsigned nvalues=1)
JLinearValue	JLinearValue.h	/^class JLinearValue : protected JObject$/;"	c	inherits:JObject
JLinearValue::AddTimeValue	JLinearValue.cpp	/^unsigned JLinearValue::AddTimeValue(double time,double value){$/;"	f	class:JLinearValue	signature:(double time,double value)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value);$/;"	p	class:JLinearValue	access:public	signature:(double time,double value)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2){ const unsigned idx=AddTimeValue(time,value); SetValue(idx,1,value2); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3){ const unsigned idx=AddTimeValue(time,value,value2); SetValue(idx,2,value3); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4){ const unsigned idx=AddTimeValue(time,value,value2,value3); SetValue(idx,3,value4); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4,double value5){ const unsigned idx=AddTimeValue(time,value,value2,value3,value4); SetValue(idx,4,value5); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4,double value5)
JLinearValue::AddTimeValue	JLinearValue.h	/^  unsigned AddTimeValue(double time,double value,double value2,double value3,double value4,double value5,double value6){ const unsigned idx=AddTimeValue(time,value,value2,value3,value4,value5); SetValue(idx,5,value6); return(idx); }$/;"	f	class:JLinearValue	access:public	signature:(double time,double value,double value2,double value3,double value4,double value5,double value6)
JLinearValue::Count	JLinearValue.h	/^  unsigned Count;$/;"	m	class:JLinearValue	access:protected
JLinearValue::File	JLinearValue.h	/^  std::string File;$/;"	m	class:JLinearValue	access:protected
JLinearValue::FindTime	JLinearValue.cpp	/^void JLinearValue::FindTime(double timestep){$/;"	f	class:JLinearValue	signature:(double timestep)
JLinearValue::FindTime	JLinearValue.h	/^  void FindTime(double timestep);$/;"	p	class:JLinearValue	access:public	signature:(double timestep)
JLinearValue::GetAllocMemory	JLinearValue.cpp	/^unsigned JLinearValue::GetAllocMemory()const{$/;"	f	class:JLinearValue	signature:() const
JLinearValue::GetAllocMemory	JLinearValue.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JLinearValue	access:public	signature:() const
JLinearValue::GetCount	JLinearValue.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetFile	JLinearValue.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetNewInterval	JLinearValue.h	/^  bool GetNewInterval()const{ return(NewInterval); }$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetPos	JLinearValue.h	/^  unsigned GetPos()const{ return(Position); };$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetPosNext	JLinearValue.h	/^  unsigned GetPosNext()const{ return(PositionNext); };$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetSize	JLinearValue.h	/^  unsigned GetSize()const{ return(Size); }$/;"	f	class:JLinearValue	access:public	signature:() const
JLinearValue::GetTimeByIdx	JLinearValue.cpp	/^double JLinearValue::GetTimeByIdx(unsigned idx)const{$/;"	f	class:JLinearValue	signature:(unsigned idx) const
JLinearValue::GetTimeByIdx	JLinearValue.h	/^  double GetTimeByIdx(unsigned idx)const;$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx) const
JLinearValue::GetValue	JLinearValue.cpp	/^double JLinearValue::GetValue(double timestep,unsigned cvalue){$/;"	f	class:JLinearValue	signature:(double timestep,unsigned cvalue)
JLinearValue::GetValue	JLinearValue.h	/^  double GetValue(double timestep,unsigned cvalue=0);$/;"	p	class:JLinearValue	access:public	signature:(double timestep,unsigned cvalue=0)
JLinearValue::GetValueByIdx	JLinearValue.cpp	/^double JLinearValue::GetValueByIdx(unsigned idx,unsigned cvalue)const{$/;"	f	class:JLinearValue	signature:(unsigned idx,unsigned cvalue) const
JLinearValue::GetValueByIdx	JLinearValue.h	/^  double GetValueByIdx(unsigned idx,unsigned cvalue=0)const;$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx,unsigned cvalue=0) const
JLinearValue::JLinearValue	JLinearValue.cpp	/^JLinearValue::JLinearValue(unsigned nvalues):Nvalues(max(1u,nvalues)){$/;"	f	class:JLinearValue	signature:(unsigned nvalues)
JLinearValue::JLinearValue	JLinearValue.h	/^  JLinearValue(unsigned nvalues=1);$/;"	p	class:JLinearValue	access:public	signature:(unsigned nvalues=1)
JLinearValue::LoadFile	JLinearValue.cpp	/^void JLinearValue::LoadFile(std::string file){$/;"	f	class:JLinearValue	signature:(std::string file)
JLinearValue::LoadFile	JLinearValue.h	/^  void LoadFile(std::string file);$/;"	p	class:JLinearValue	access:public	signature:(std::string file)
JLinearValue::NewInterval	JLinearValue.h	/^  bool NewInterval;$/;"	m	class:JLinearValue	access:protected
JLinearValue::Nvalues	JLinearValue.h	/^  const unsigned Nvalues;$/;"	m	class:JLinearValue	access:public
JLinearValue::Position	JLinearValue.h	/^  unsigned Position;$/;"	m	class:JLinearValue	access:protected
JLinearValue::PositionNext	JLinearValue.h	/^  unsigned PositionNext;$/;"	m	class:JLinearValue	access:protected
JLinearValue::Reset	JLinearValue.cpp	/^void JLinearValue::Reset(){$/;"	f	class:JLinearValue	signature:()
JLinearValue::Reset	JLinearValue.h	/^  void Reset();$/;"	p	class:JLinearValue	access:public	signature:()
JLinearValue::SIZEINITIAL	JLinearValue.h	/^  static const unsigned SIZEINITIAL=500;$/;"	m	class:JLinearValue	access:protected
JLinearValue::SIZEMAX	JLinearValue.h	/^  static const unsigned SIZEMAX=200000;$/;"	m	class:JLinearValue	access:protected
JLinearValue::SetSize	JLinearValue.cpp	/^void JLinearValue::SetSize(unsigned size){$/;"	f	class:JLinearValue	signature:(unsigned size)
JLinearValue::SetSize	JLinearValue.h	/^  void SetSize(unsigned size);$/;"	p	class:JLinearValue	access:public	signature:(unsigned size)
JLinearValue::SetValue	JLinearValue.cpp	/^void JLinearValue::SetValue(unsigned idx,unsigned cvalue,double value){$/;"	f	class:JLinearValue	signature:(unsigned idx,unsigned cvalue,double value)
JLinearValue::SetValue	JLinearValue.h	/^  void SetValue(unsigned idx,unsigned cvalue,double value);$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx,unsigned cvalue,double value)
JLinearValue::Size	JLinearValue.h	/^  unsigned Size;$/;"	m	class:JLinearValue	access:protected
JLinearValue::TimeFactor	JLinearValue.h	/^  double TimeFactor;$/;"	m	class:JLinearValue	access:protected
JLinearValue::TimeNext	JLinearValue.h	/^  double TimeNext;$/;"	m	class:JLinearValue	access:protected
JLinearValue::TimePre	JLinearValue.h	/^  double TimePre;$/;"	m	class:JLinearValue	access:protected
JLinearValue::TimeStep	JLinearValue.h	/^  double TimeStep;$/;"	m	class:JLinearValue	access:protected
JLinearValue::Times	JLinearValue.h	/^  double *Times;$/;"	m	class:JLinearValue	access:protected
JLinearValue::Values	JLinearValue.h	/^  double *Values;$/;"	m	class:JLinearValue	access:protected
JLinearValue::VisuData	JLinearValue.cpp	/^void JLinearValue::VisuData(){$/;"	f	class:JLinearValue	signature:()
JLinearValue::VisuData	JLinearValue.h	/^  void VisuData();$/;"	p	class:JLinearValue	access:public	signature:()
JLinearValue::~JLinearValue	JLinearValue.cpp	/^JLinearValue::~JLinearValue(){$/;"	f	class:JLinearValue	signature:()
JLinearValue::~JLinearValue	JLinearValue.h	/^  ~JLinearValue();$/;"	p	class:JLinearValue	access:public	signature:()
JLog2	JLog2.cpp	/^JLog2::JLog2(TpMode_Out modeoutdef):ModeOutDef(modeoutdef){$/;"	f	class:JLog2	signature:(TpMode_Out modeoutdef)
JLog2	JLog2.h	/^  JLog2(TpMode_Out modeoutdef=Out_ScrFile);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out modeoutdef=Out_ScrFile)
JLog2	JLog2.h	/^class JLog2 : protected JObject$/;"	c	inherits:JObject
JLog2::AddFileInfo	JLog2.cpp	/^void JLog2::AddFileInfo(std::string fname,const std::string &finfo){$/;"	f	class:JLog2	signature:(std::string fname,const std::string &finfo)
JLog2::AddFileInfo	JLog2.h	/^  void AddFileInfo(std::string fname,const std::string &finfo);$/;"	p	class:JLog2	access:public	signature:(std::string fname,const std::string &finfo)
JLog2::AddWarning	JLog2.cpp	/^void JLog2::AddWarning(const std::string &tx){$/;"	f	class:JLog2	signature:(const std::string &tx)
JLog2::AddWarning	JLog2.h	/^  void AddWarning(const std::string &tx);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx)
JLog2::DirOut	JLog2.h	/^  std::string DirOut;      \/\/\/<Specifies the general output directory.$/;"	m	class:JLog2	access:protected
JLog2::FileInfo	JLog2.h	/^  std::vector<StFileInfo> FileInfo; \/\/\/<List of file descriptions.$/;"	m	class:JLog2	access:protected
JLog2::FileName	JLog2.h	/^  std::string FileName;$/;"	m	class:JLog2	access:protected
JLog2::FilesCount	JLog2.h	/^  unsigned FilesCount()const{ return(unsigned(FileInfo.size())); }$/;"	f	class:JLog2	access:public	signature:() const
JLog2::GetMpiRank	JLog2.h	/^  int GetMpiRank()const{ return(MpiRun? MpiRank: -1); }$/;"	f	class:JLog2	access:public	signature:() const
JLog2::Init	JLog2.cpp	/^void JLog2::Init(std::string fname,bool mpirun,int mpirank,int mpilaunch){$/;"	f	class:JLog2	signature:(std::string fname,bool mpirun,int mpirank,int mpilaunch)
JLog2::Init	JLog2.h	/^  void Init(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0);$/;"	p	class:JLog2	access:public	signature:(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0)
JLog2::IsOk	JLog2.h	/^  bool IsOk()const{ return(Ok); }$/;"	f	class:JLog2	access:public	signature:() const
JLog2::JLog2	JLog2.cpp	/^JLog2::JLog2(TpMode_Out modeoutdef):ModeOutDef(modeoutdef){$/;"	f	class:JLog2	signature:(TpMode_Out modeoutdef)
JLog2::JLog2	JLog2.h	/^  JLog2(TpMode_Out modeoutdef=Out_ScrFile);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out modeoutdef=Out_ScrFile)
JLog2::ModeOutDef	JLog2.h	/^  TpMode_Out ModeOutDef;$/;"	m	class:JLog2	access:protected
JLog2::MpiLaunch	JLog2.h	/^  int MpiRank,MpiLaunch;$/;"	m	class:JLog2	access:protected
JLog2::MpiRank	JLog2.h	/^  int MpiRank,MpiLaunch;$/;"	m	class:JLog2	access:protected
JLog2::MpiRun	JLog2.h	/^  bool MpiRun;$/;"	m	class:JLog2	access:protected
JLog2::Ok	JLog2.h	/^  bool Ok;$/;"	m	class:JLog2	access:protected
JLog2::Out_Default	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
JLog2::Out_File	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
JLog2::Out_None	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
JLog2::Out_ScrFile	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
JLog2::Out_Screen	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
JLog2::Pf	JLog2.h	/^  std::ofstream *Pf;$/;"	m	class:JLog2	access:protected
JLog2::Print	JLog2.cpp	/^void JLog2::Print(const std::string &tx,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &tx,TpMode_Out mode,bool flush)
JLog2::Print	JLog2.cpp	/^void JLog2::Print(const std::vector<std::string> &lines,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::vector<std::string> &lines,TpMode_Out mode,bool flush)
JLog2::Print	JLog2.h	/^  void Print(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::Print	JLog2.h	/^  void Print(const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintDbg	JLog2.h	/^  void PrintDbg(const std::string &tx,TpMode_Out mode=Out_Default){ Print(tx,mode,true); }$/;"	f	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default)
JLog2::PrintFilesList	JLog2.cpp	/^void JLog2::PrintFilesList(TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(TpMode_Out mode,bool flush)
JLog2::PrintFilesList	JLog2.cpp	/^void JLog2::PrintFilesList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush)
JLog2::PrintFilesList	JLog2.h	/^  void PrintFilesList(TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintFilesList	JLog2.h	/^  void PrintFilesList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintWarning	JLog2.cpp	/^void JLog2::PrintWarning(const std::string &tx,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &tx,TpMode_Out mode,bool flush)
JLog2::PrintWarning	JLog2.h	/^  void PrintWarning(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintWarningList	JLog2.cpp	/^void JLog2::PrintWarningList(TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(TpMode_Out mode,bool flush)
JLog2::PrintWarningList	JLog2.cpp	/^void JLog2::PrintWarningList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush)
JLog2::PrintWarningList	JLog2.h	/^  void PrintWarningList(TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintWarningList	JLog2.h	/^  void PrintWarningList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::Printf	JLog2.cpp	/^void JLog2::Printf(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
JLog2::Printf	JLog2.h	/^  void Printf(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
JLog2::PrintfDbg	JLog2.cpp	/^void JLog2::PrintfDbg(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
JLog2::PrintfDbg	JLog2.h	/^  void PrintfDbg(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
JLog2::PrintfWarning	JLog2.cpp	/^void JLog2::PrintfWarning(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
JLog2::PrintfWarning	JLog2.h	/^  void PrintfWarning(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
JLog2::Printfp	JLog2.cpp	/^void JLog2::Printfp(const std::string &prefix,const char *format,...){$/;"	f	class:JLog2	signature:(const std::string &prefix,const char *format,...)
JLog2::Printfp	JLog2.h	/^  void Printfp(const std::string &prefix,const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const char *format,...)
JLog2::PrintfpDbg	JLog2.cpp	/^void JLog2::PrintfpDbg(const std::string &prefix,const char *format,...){$/;"	f	class:JLog2	signature:(const std::string &prefix,const char *format,...)
JLog2::PrintfpDbg	JLog2.h	/^  void PrintfpDbg(const std::string &prefix,const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const char *format,...)
JLog2::Printp	JLog2.cpp	/^void JLog2::Printp(const std::string &prefix,const std::vector<std::string> &lines,JLog2::TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &prefix,const std::vector<std::string> &lines,JLog2::TpMode_Out mode,bool flush)
JLog2::Printp	JLog2.h	/^  void Printp(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false){ Print(prefix+tx,mode,flush); }$/;"	f	class:JLog2	access:public	signature:(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::Printp	JLog2.h	/^  void Printp(const std::string &prefix,const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false)
JLog2::PrintpDbg	JLog2.h	/^  void PrintpDbg(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default){ Printp(prefix,tx,mode,true); }$/;"	f	class:JLog2	access:public	signature:(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default)
JLog2::Reset	JLog2.cpp	/^void JLog2::Reset(){$/;"	f	class:JLog2	signature:()
JLog2::Reset	JLog2.h	/^  void Reset();$/;"	p	class:JLog2	access:public	signature:()
JLog2::StFileInfo	JLog2.h	/^  }StFileInfo;$/;"	t	class:JLog2	typeref:struct:JLog2::StrFileInfo	access:public
JLog2::StrFileInfo	JLog2.h	/^  typedef struct StrFileInfo{$/;"	s	class:JLog2	access:public
JLog2::StrFileInfo::StrFileInfo	JLog2.h	/^    StrFileInfo(const std::string &xfile,const std::string &xinfo){ file=xfile; info=xinfo; }$/;"	f	struct:JLog2::StrFileInfo	access:public	signature:(const std::string &xfile,const std::string &xinfo)
JLog2::StrFileInfo::file	JLog2.h	/^    std::string file;$/;"	m	struct:JLog2::StrFileInfo	access:public
JLog2::StrFileInfo::info	JLog2.h	/^    std::string info;$/;"	m	struct:JLog2::StrFileInfo	access:public
JLog2::TpMode_Out	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	t	class:JLog2	typeref:enum:JLog2::__anon17	access:public
JLog2::WarningCount	JLog2.h	/^  unsigned WarningCount()const{ return(unsigned(Warnings.size())); }$/;"	f	class:JLog2	access:public	signature:() const
JLog2::Warnings	JLog2.h	/^  std::vector<std::string> Warnings; \/\/\/<List of warnings.$/;"	m	class:JLog2	access:protected
JLog2::~JLog2	JLog2.cpp	/^JLog2::~JLog2(){$/;"	f	class:JLog2	signature:()
JLog2::~JLog2	JLog2.h	/^  ~JLog2();$/;"	p	class:JLog2	access:public	signature:()
JMatrix4	JMatrix4.h	/^  JMatrix4(){ SetIdentity(); }$/;"	f	class:JMatrix4	access:public	signature:()
JMatrix4	JMatrix4.h	/^  JMatrix4(TMAT m){ $/;"	f	class:JMatrix4	access:public	signature:(TMAT m)
JMatrix4	JMatrix4.h	/^template <class T,class T3,class TMAT> class JMatrix4$/;"	c
JMatrix4::GetMatrix	JMatrix4.h	/^  TMAT GetMatrix()const{$/;"	f	class:JMatrix4	access:public	signature:() const
JMatrix4::GetMatrix4d	JMatrix4.h	/^  tmatrix4d GetMatrix4d()const{ return(TMatrix4d(double(a11),double(a12),double(a13),double(a14),double(a21),double(a22),double(a23),double(a24),double(a31),double(a32),double(a33),double(a34),double(a41),double(a42),double(a43),double(a44))); }$/;"	f	class:JMatrix4	access:public	signature:() const
JMatrix4::GetMatrix4f	JMatrix4.h	/^  tmatrix4f GetMatrix4f()const{ return(TMatrix4f(float(a11),float(a12),float(a13),float(a14),float(a21),float(a22),float(a23),float(a24),float(a31),float(a32),float(a33),float(a34),float(a41),float(a42),float(a43),float(a44))); }$/;"	f	class:JMatrix4	access:public	signature:() const
JMatrix4::GetMotion	JMatrix4.h	/^  void GetMotion(T3 &rot,T3 &mov)const{$/;"	f	class:JMatrix4	access:public	signature:(T3 &rot,T3 &mov) const
JMatrix4::JMatrix4	JMatrix4.h	/^  JMatrix4(){ SetIdentity(); }$/;"	f	class:JMatrix4	access:public	signature:()
JMatrix4::JMatrix4	JMatrix4.h	/^  JMatrix4(TMAT m){ $/;"	f	class:JMatrix4	access:public	signature:(TMAT m)
JMatrix4::MatrixMov	JMatrix4.h	/^  static JMatrix4 MatrixMov(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
JMatrix4::MatrixRot	JMatrix4.h	/^  static JMatrix4 MatrixRot(T ang,const T3 &axisp1,const T3 &axisp2){$/;"	f	class:JMatrix4	access:public	signature:(T ang,const T3 &axisp1,const T3 &axisp2)
JMatrix4::MatrixScale	JMatrix4.h	/^  static JMatrix4 MatrixScale(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
JMatrix4::Move	JMatrix4.h	/^  void Move(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
JMatrix4::Mul	JMatrix4.h	/^  void Mul(const JMatrix4 &m2){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m2)
JMatrix4::MulArray	JMatrix4.h	/^  void MulArray(unsigned np,T3 *vp)const{$/;"	f	class:JMatrix4	access:public	signature:(unsigned np,T3 *vp) const
JMatrix4::MulArray	JMatrix4.h	/^  void MulArray(unsigned np,const T3 *vp,T3 *vr)const{$/;"	f	class:JMatrix4	access:public	signature:(unsigned np,const T3 *vp,T3 *vr) const
JMatrix4::MulNormal	JMatrix4.h	/^  T3 MulNormal(const T3 &n)const{$/;"	f	class:JMatrix4	access:public	signature:(const T3 &n) const
JMatrix4::MulPoint	JMatrix4.h	/^  T3 MulPoint(const T3 &p)const{$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p) const
JMatrix4::MulPre	JMatrix4.h	/^  void MulPre(const JMatrix4 &m1){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m1)
JMatrix4::Print	JMatrix4.h	/^  void Print(const char* text,const char* fmt="[%8.5f,%8.5f,%8.5f,%8.5f]\\n")const{$/;"	f	class:JMatrix4	access:public	signature:(const char* text,const char* fmt=Ó) const
JMatrix4::Rotate	JMatrix4.h	/^  void Rotate(T ang,const T3 &axisp1,const T3 &axisp2){$/;"	f	class:JMatrix4	access:public	signature:(T ang,const T3 &axisp1,const T3 &axisp2)
JMatrix4::Scale	JMatrix4.h	/^  void Scale(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
JMatrix4::SetIdentity	JMatrix4.h	/^  void SetIdentity(){$/;"	f	class:JMatrix4	access:public	signature:()
JMatrix4::Sum	JMatrix4.h	/^  void Sum(const JMatrix4 &m){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m)
JMatrix4::a11	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
JMatrix4::a12	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
JMatrix4::a13	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
JMatrix4::a14	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
JMatrix4::a21	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
JMatrix4::a22	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
JMatrix4::a23	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
JMatrix4::a24	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
JMatrix4::a31	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
JMatrix4::a32	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
JMatrix4::a33	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
JMatrix4::a34	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
JMatrix4::a41	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
JMatrix4::a42	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
JMatrix4::a43	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
JMatrix4::a44	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
JMatrix4d	JMatrix4.h	/^typedef JMatrix4<double,tdouble3,tmatrix4d> JMatrix4d; \/\/\/<Matrix of 4x4 for values of type double.$/;"	t
JMatrix4f	JMatrix4.h	/^typedef JMatrix4<float,tfloat3,tmatrix4f> JMatrix4f;   \/\/\/<Matrix of 4x4 for values of type float.$/;"	t
JMeanMoving	JMeanValues.cpp	/^JMeanMoving::JMeanMoving(unsigned size){$/;"	f	class:JMeanMoving	signature:(unsigned size)
JMeanMoving	JMeanValues.h	/^  JMeanMoving(unsigned size=10);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size=10)
JMeanMoving	JMeanValues.h	/^class JMeanMoving : protected JObject$/;"	c	inherits:JObject
JMeanMoving::AddValue	JMeanValues.cpp	/^void JMeanMoving::AddValue(double v){ $/;"	f	class:JMeanMoving	signature:(double v)
JMeanMoving::AddValue	JMeanValues.h	/^  void AddValue(double v);$/;"	p	class:JMeanMoving	access:public	signature:(double v)
JMeanMoving::GetSimpleMean	JMeanValues.cpp	/^double JMeanMoving::GetSimpleMean()const{$/;"	f	class:JMeanMoving	signature:() const
JMeanMoving::GetSimpleMean	JMeanValues.h	/^  double GetSimpleMean()const;$/;"	p	class:JMeanMoving	access:public	signature:() const
JMeanMoving::GetWeightedMean	JMeanValues.cpp	/^double JMeanMoving::GetWeightedMean()const{$/;"	f	class:JMeanMoving	signature:() const
JMeanMoving::GetWeightedMean	JMeanValues.h	/^  double GetWeightedMean()const;$/;"	p	class:JMeanMoving	access:public	signature:() const
JMeanMoving::Init	JMeanValues.cpp	/^void JMeanMoving::Init(unsigned size,bool weighted){ $/;"	f	class:JMeanMoving	signature:(unsigned size,bool weighted)
JMeanMoving::Init	JMeanValues.h	/^  void Init(unsigned size,bool weighted);$/;"	p	class:JMeanMoving	access:protected	signature:(unsigned size,bool weighted)
JMeanMoving::InitSimple	JMeanValues.cpp	/^void JMeanMoving::InitSimple(unsigned size){ $/;"	f	class:JMeanMoving	signature:(unsigned size)
JMeanMoving::InitSimple	JMeanValues.h	/^  void InitSimple(unsigned size);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size)
JMeanMoving::InitWeightedExponential	JMeanValues.cpp	/^void JMeanMoving::InitWeightedExponential(unsigned size,float fac){ $/;"	f	class:JMeanMoving	signature:(unsigned size,float fac)
JMeanMoving::InitWeightedExponential	JMeanValues.h	/^  void InitWeightedExponential(unsigned size,float fac=1);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size,float fac=1)
JMeanMoving::InitWeightedLinear	JMeanValues.cpp	/^void JMeanMoving::InitWeightedLinear(unsigned size){ $/;"	f	class:JMeanMoving	signature:(unsigned size)
JMeanMoving::InitWeightedLinear	JMeanValues.h	/^  void InitWeightedLinear(unsigned size);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size)
JMeanMoving::JMeanMoving	JMeanValues.cpp	/^JMeanMoving::JMeanMoving(unsigned size){$/;"	f	class:JMeanMoving	signature:(unsigned size)
JMeanMoving::JMeanMoving	JMeanValues.h	/^  JMeanMoving(unsigned size=10);$/;"	p	class:JMeanMoving	access:public	signature:(unsigned size=10)
JMeanMoving::NextValue	JMeanValues.h	/^  unsigned NextValue;$/;"	m	class:JMeanMoving	access:protected
JMeanMoving::Reset	JMeanValues.cpp	/^void JMeanMoving::Reset(){$/;"	f	class:JMeanMoving	signature:()
JMeanMoving::Reset	JMeanValues.h	/^  void Reset();$/;"	p	class:JMeanMoving	access:public	signature:()
JMeanMoving::SizeValues	JMeanValues.h	/^  unsigned SizeValues;$/;"	m	class:JMeanMoving	access:protected
JMeanMoving::Values	JMeanValues.h	/^  double *Values;$/;"	m	class:JMeanMoving	access:protected
JMeanMoving::ValuesFull	JMeanValues.h	/^  bool ValuesFull;      \/\/\/< Array of values is full.$/;"	m	class:JMeanMoving	access:protected
JMeanMoving::Weights	JMeanValues.h	/^  double *Weights;$/;"	m	class:JMeanMoving	access:protected
JMeanMoving::~JMeanMoving	JMeanValues.cpp	/^JMeanMoving::~JMeanMoving(){$/;"	f	class:JMeanMoving	signature:()
JMeanMoving::~JMeanMoving	JMeanValues.h	/^  ~JMeanMoving();$/;"	p	class:JMeanMoving	access:public	signature:()
JMeanValue	JMeanValues.h	/^  JMeanValue():Max(-DBL_MAX),Min(DBL_MAX),Mean(0),Values(0){ }$/;"	f	class:JMeanValue	access:public	signature:()
JMeanValue	JMeanValues.h	/^class JMeanValue$/;"	c
JMeanValue::AddValue	JMeanValues.h	/^  void AddValue(double v){ $/;"	f	class:JMeanValue	access:public	signature:(double v)
JMeanValue::GetMax	JMeanValues.h	/^  double GetMax()const{ return(Max); }$/;"	f	class:JMeanValue	access:public	signature:() const
JMeanValue::GetMean	JMeanValues.h	/^  double GetMean()const{ return(Mean); }$/;"	f	class:JMeanValue	access:public	signature:() const
JMeanValue::GetMin	JMeanValues.h	/^  double GetMin()const{ return(Min); }$/;"	f	class:JMeanValue	access:public	signature:() const
JMeanValue::GetValues	JMeanValues.h	/^  ullong GetValues()const{ return(Values); }$/;"	f	class:JMeanValue	access:public	signature:() const
JMeanValue::JMeanValue	JMeanValues.h	/^  JMeanValue():Max(-DBL_MAX),Min(DBL_MAX),Mean(0),Values(0){ }$/;"	f	class:JMeanValue	access:public	signature:()
JMeanValue::Max	JMeanValues.h	/^  double Max;$/;"	m	class:JMeanValue	access:public
JMeanValue::Mean	JMeanValues.h	/^  double Mean;$/;"	m	class:JMeanValue	access:public
JMeanValue::Min	JMeanValues.h	/^  double Min;$/;"	m	class:JMeanValue	access:public
JMeanValue::Reset	JMeanValues.h	/^  void Reset(){ Max=-DBL_MAX; Min=DBL_MAX; Mean=0; Values=0; }$/;"	f	class:JMeanValue	access:public	signature:()
JMeanValue::Values	JMeanValues.h	/^  ullong Values;$/;"	m	class:JMeanValue	access:public
JMotion	JMotion.cpp	/^JMotion::JMotion(){$/;"	f	class:JMotion	signature:()
JMotion	JMotion.h	/^  JMotion();$/;"	p	class:JMotion	access:public	signature:()
JMotion	JMotion.h	/^class JMotion : protected JObject$/;"	c	inherits:JObject
JMotion::AxisAdd	JMotion.cpp	/^JMotionAxis* JMotion::AxisAdd(unsigned objid,const tdouble3 &p1,const tdouble3 &p2){$/;"	f	class:JMotion	signature:(unsigned objid,const tdouble3 &p1,const tdouble3 &p2)
JMotion::AxisAdd	JMotion.h	/^  JMotionAxis* AxisAdd(unsigned objid,const tdouble3 &p1,const tdouble3 &p2);$/;"	p	class:JMotion	access:private	signature:(unsigned objid,const tdouble3 &p1,const tdouble3 &p2)
JMotion::CheckLinkMovs	JMotion.cpp	/^void JMotion::CheckLinkMovs()const{$/;"	f	class:JMotion	signature:() const
JMotion::CheckLinkMovs	JMotion.h	/^  void CheckLinkMovs()const;$/;"	p	class:JMotion	access:public	signature:() const
JMotion::CopyChangeRef	JMotion.cpp	/^void JMotion::CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const{$/;"	f	class:JMotion	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
JMotion::CopyChangeRef	JMotion.h	/^  void CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const;$/;"	p	class:JMotion	access:public	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
JMotion::CopyConfig	JMotion.cpp	/^void JMotion::CopyConfig(JMotion &mot)const{$/;"	f	class:JMotion	signature:(JMotion &mot) const
JMotion::CopyConfig	JMotion.h	/^  void CopyConfig(JMotion &mot)const;$/;"	p	class:JMotion	access:public	signature:(JMotion &mot) const
JMotion::CreateMotList	JMotion.cpp	/^void JMotion::CreateMotList(){$/;"	f	class:JMotion	signature:()
JMotion::CreateMotList	JMotion.h	/^  void CreateMotList();$/;"	p	class:JMotion	access:private	signature:()
JMotion::DirData	JMotion.h	/^  std::string DirData; \/\/-Directory with data files.$/;"	m	class:JMotion	access:private
JMotion::EventAdd	JMotion.cpp	/^void JMotion::EventAdd(unsigned objid,unsigned movid,double timestart,double timefinish){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned movid,double timestart,double timefinish)
JMotion::EventAdd	JMotion.h	/^  void EventAdd(unsigned objid,unsigned movid,double timestart,double timefinish=-1);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned movid,double timestart,double timefinish=-1)
JMotion::EventNext	JMotion.h	/^  int EventNext;$/;"	m	class:JMotion	access:private
JMotion::Events	JMotion.h	/^  std::vector<JMotionEvent*> Events;$/;"	m	class:JMotion	access:private
JMotion::ExistsObj	JMotion.cpp	/^bool JMotion::ExistsObj(JMotionObj* obj)const{$/;"	f	class:JMotion	signature:(JMotionObj* obj) const
JMotion::ExistsObj	JMotion.h	/^  bool ExistsObj(JMotionObj* obj)const;$/;"	p	class:JMotion	access:private	signature:(JMotionObj* obj) const
JMotion::ExistsRef	JMotion.h	/^  bool ExistsRef(int ref)const{ return(ObjGetPointerByRef(ref)!=NULL); }$/;"	f	class:JMotion	access:public	signature:(int ref) const
JMotion::GetDirData	JMotion.h	/^  std::string GetDirData()const{ return(DirData); };$/;"	f	class:JMotion	access:public	signature:() const
JMotion::GetMaxRef	JMotion.cpp	/^int JMotion::GetMaxRef()const{$/;"	f	class:JMotion	signature:() const
JMotion::GetMaxRef	JMotion.h	/^  int GetMaxRef()const;$/;"	p	class:JMotion	access:public	signature:() const
JMotion::GetMov	JMotion.cpp	/^bool JMotion::GetMov(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const{$/;"	f	class:JMotion	signature:(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
JMotion::GetMov	JMotion.h	/^  bool GetMov(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const;$/;"	p	class:JMotion	access:public	signature:(unsigned pos,unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
JMotion::GetMovCount	JMotion.h	/^  unsigned GetMovCount()const{ return(LisMovCount); }$/;"	f	class:JMotion	access:public	signature:() const
JMotion::GetStopCount	JMotion.h	/^  unsigned GetStopCount()const{ return(LisStopCount); }$/;"	f	class:JMotion	access:public	signature:() const
JMotion::GetStopRef	JMotion.cpp	/^unsigned JMotion::GetStopRef(unsigned pos)const{$/;"	f	class:JMotion	signature:(unsigned pos) const
JMotion::GetStopRef	JMotion.h	/^  unsigned GetStopRef(unsigned pos)const;$/;"	p	class:JMotion	access:public	signature:(unsigned pos) const
JMotion::JMotion	JMotion.cpp	/^JMotion::JMotion(){$/;"	f	class:JMotion	signature:()
JMotion::JMotion	JMotion.h	/^  JMotion();$/;"	p	class:JMotion	access:public	signature:()
JMotion::LisMov	JMotion.h	/^  JMotionObj** LisMov;    \/\/-Objects that move in the last ProcesTime()$/;"	m	class:JMotion	access:private
JMotion::LisMovCount	JMotion.h	/^  unsigned LisMovCount;$/;"	m	class:JMotion	access:private
JMotion::LisStop	JMotion.h	/^  JMotionObj** LisStop;   \/\/-Objetos that stop in the last ProcesTime()$/;"	m	class:JMotion	access:private
JMotion::LisStopCount	JMotion.h	/^  unsigned LisStopCount;$/;"	m	class:JMotion	access:private
JMotion::LoadFileXml	JMotion.cpp	/^void JMotion::LoadFileXml(const std::string &dirdata,const std::string &file,const string &path){$/;"	f	class:JMotion	signature:(const std::string &dirdata,const std::string &file,const string &path)
JMotion::LoadFileXml	JMotion.h	/^  void LoadFileXml(const std::string &dirdata,const std::string &file,const std::string &path);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata,const std::string &file,const std::string &path)
JMotion::MotList	JMotion.h	/^  JMotionList *MotList; \/\/-Almacena info de movimiento de todos los objetos tras ejecutar ProcesTimes().$/;"	m	class:JMotion	access:private
JMotion::MovAdd	JMotion.cpp	/^void JMotion::MovAdd(unsigned objid,JMotionMov* mov){$/;"	f	class:JMotion	signature:(unsigned objid,JMotionMov* mov)
JMotion::MovAdd	JMotion.h	/^  void MovAdd(unsigned objid,JMotionMov* mov);$/;"	p	class:JMotion	access:private	signature:(unsigned objid,JMotionMov* mov)
JMotion::MovAddCirSinu	JMotion.cpp	/^void JMotion::MovAddCirSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees)
JMotion::MovAddCirSinu	JMotion.h	/^  void MovAddCirSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true)
JMotion::MovAddCircular	JMotion.cpp	/^void JMotion::MovAddCircular(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees)
JMotion::MovAddCircular	JMotion.h	/^  void MovAddCircular(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees=true)
JMotion::MovAddCircularAce	JMotion.cpp	/^void JMotion::MovAddCircularAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees)
JMotion::MovAddCircularAce	JMotion.h	/^  void MovAddCircularAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees=true)
JMotion::MovAddCopy	JMotion.h	/^  void MovAddCopy(JMotionMov *mv)const;$/;"	p	class:JMotion	access:private	signature:(JMotionMov *mv) const
JMotion::MovAddNull	JMotion.cpp	/^void JMotion::MovAddNull(unsigned objid,unsigned id){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id)
JMotion::MovAddNull	JMotion.h	/^  void MovAddNull(unsigned objid,unsigned id);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id)
JMotion::MovAddRecSinu	JMotion.cpp	/^void JMotion::MovAddRecSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees)
JMotion::MovAddRecSinu	JMotion.h	/^  void MovAddRecSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees=true)
JMotion::MovAddRectilinear	JMotion.cpp	/^void JMotion::MovAddRectilinear(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel)
JMotion::MovAddRectilinear	JMotion.h	/^  void MovAddRectilinear(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel)
JMotion::MovAddRectilinearAce	JMotion.cpp	/^void JMotion::MovAddRectilinearAce(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre)
JMotion::MovAddRectilinearAce	JMotion.h	/^  void MovAddRectilinearAce(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre)
JMotion::MovAddRectilinearFile	JMotion.cpp	/^void JMotion::MovAddRectilinearFile(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
JMotion::MovAddRectilinearFile	JMotion.h	/^  void MovAddRectilinearFile(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
JMotion::MovAddRotSinu	JMotion.cpp	/^void JMotion::MovAddRotSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees)
JMotion::MovAddRotSinu	JMotion.h	/^  void MovAddRotSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true)
JMotion::MovAddRotation	JMotion.cpp	/^void JMotion::MovAddRotation(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees)
JMotion::MovAddRotation	JMotion.h	/^  void MovAddRotation(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees=true)
JMotion::MovAddRotationAce	JMotion.cpp	/^void JMotion::MovAddRotationAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees)
JMotion::MovAddRotationAce	JMotion.h	/^  void MovAddRotationAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees=true)
JMotion::MovAddRotationFile	JMotion.cpp	/^void JMotion::MovAddRotationFile(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees ,const tdouble3 &axisp1,const tdouble3 &axisp2,const std::string &file)
JMotion::MovAddRotationFile	JMotion.h	/^  void MovAddRotationFile(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees ,const tdouble3 &axisp1,const tdouble3 &axisp2,const std::string &file)
JMotion::MovAddTeleport	JMotion.cpp	/^void JMotion::MovAddTeleport(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos)
JMotion::MovAddTeleport	JMotion.h	/^  void MovAddTeleport(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos)
JMotion::MovAddWait	JMotion.cpp	/^void JMotion::MovAddWait(unsigned objid,unsigned id,unsigned nextid,double time){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time)
JMotion::MovAddWait	JMotion.h	/^  void MovAddWait(unsigned objid,unsigned id,unsigned nextid,double time);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time)
JMotion::ObjAdd	JMotion.cpp	/^void JMotion::ObjAdd(unsigned id,unsigned idparent,int ref){$/;"	f	class:JMotion	signature:(unsigned id,unsigned idparent,int ref)
JMotion::ObjAdd	JMotion.h	/^  void ObjAdd(unsigned id,unsigned idparent,int ref);$/;"	p	class:JMotion	access:public	signature:(unsigned id,unsigned idparent,int ref)
JMotion::ObjCount	JMotion.h	/^  unsigned ObjCount;$/;"	m	class:JMotion	access:private
JMotion::ObjGetPointer	JMotion.cpp	/^JMotionObj* JMotion::ObjGetPointer(unsigned id)const{$/;"	f	class:JMotion	signature:(unsigned id) const
JMotion::ObjGetPointer	JMotion.h	/^  JMotionObj* ObjGetPointer(unsigned id)const;$/;"	p	class:JMotion	access:private	signature:(unsigned id) const
JMotion::ObjGetPointerByRef	JMotion.cpp	/^JMotionObj* JMotion::ObjGetPointerByRef(int ref)const{$/;"	f	class:JMotion	signature:(int ref) const
JMotion::ObjGetPointerByRef	JMotion.h	/^  JMotionObj* ObjGetPointerByRef(int ref)const;$/;"	p	class:JMotion	access:private	signature:(int ref) const
JMotion::Objs	JMotion.h	/^  std::vector<JMotionObj*> Objs;$/;"	m	class:JMotion	access:private
JMotion::ObjsActive	JMotion.h	/^  bool ObjsActive;$/;"	m	class:JMotion	access:private
JMotion::Optimize	JMotion.cpp	/^void JMotion::Optimize(){$/;"	f	class:JMotion	signature:()
JMotion::Optimize	JMotion.h	/^  void Optimize();$/;"	p	class:JMotion	access:public	signature:()
JMotion::Prepare	JMotion.cpp	/^void JMotion::Prepare(){$/;"	f	class:JMotion	signature:()
JMotion::Prepare	JMotion.h	/^  void Prepare();$/;"	p	class:JMotion	access:public	signature:()
JMotion::Prepared	JMotion.h	/^  bool Prepared;$/;"	m	class:JMotion	access:private
JMotion::ProcesTime	JMotion.cpp	/^bool JMotion::ProcesTime(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
JMotion::ProcesTime	JMotion.h	/^  bool ProcesTime(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
JMotion::ProcesTimeAce	JMotion.cpp	/^bool JMotion::ProcesTimeAce(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
JMotion::ProcesTimeAce	JMotion.h	/^  bool ProcesTimeAce(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
JMotion::ProcesTimeGetData	JMotion.cpp	/^bool JMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotion::ProcesTimeGetData	JMotion.cpp	/^bool JMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotion::ProcesTimeGetData	JMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	p	class:JMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotion::ProcesTimeGetData	JMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotion::ProcesTimeSimple	JMotion.cpp	/^bool JMotion::ProcesTimeSimple(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
JMotion::ProcesTimeSimple	JMotion.h	/^  bool ProcesTimeSimple(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
JMotion::ReadXml	JMotion.cpp	/^void JMotion::ReadXml(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp){$/;"	f	class:JMotion	signature:(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp)
JMotion::ReadXml	JMotion.cpp	/^void JMotion::ReadXml(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists){$/;"	f	class:JMotion	signature:(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists)
JMotion::ReadXml	JMotion.h	/^  void ReadXml(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp);$/;"	p	class:JMotion	access:private	signature:(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp)
JMotion::ReadXml	JMotion.h	/^  void ReadXml(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists=true);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists=true)
JMotion::Reset	JMotion.cpp	/^void JMotion::Reset(){$/;"	f	class:JMotion	signature:()
JMotion::Reset	JMotion.h	/^  void Reset();$/;"	p	class:JMotion	access:public	signature:()
JMotion::ResetTime	JMotion.cpp	/^void JMotion::ResetTime(double timestep){$/;"	f	class:JMotion	signature:(double timestep)
JMotion::ResetTime	JMotion.h	/^  void ResetTime(double timestep);$/;"	p	class:JMotion	access:public	signature:(double timestep)
JMotion::SaveFileXml	JMotion.cpp	/^void JMotion::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JMotion	signature:(const std::string &file,const std::string &path,bool newfile) const
JMotion::SaveFileXml	JMotion.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JMotion	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
JMotion::SetDirData	JMotion.cpp	/^void JMotion::SetDirData(const std::string &dirdata){$/;"	f	class:JMotion	signature:(const std::string &dirdata)
JMotion::SetDirData	JMotion.h	/^  void SetDirData(const std::string &dirdata);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata)
JMotion::WriteXml	JMotion.cpp	/^void JMotion::WriteXml(JXml *jxml,const std::string &path)const{$/;"	f	class:JMotion	signature:(JXml *jxml,const std::string &path) const
JMotion::WriteXml	JMotion.h	/^  void WriteXml(JXml *jxml,const std::string &path)const;$/;"	p	class:JMotion	access:public	signature:(JXml *jxml,const std::string &path) const
JMotion::~JMotion	JMotion.cpp	/^JMotion::~JMotion(){$/;"	f	class:JMotion	signature:()
JMotion::~JMotion	JMotion.h	/^  ~JMotion();$/;"	p	class:JMotion	access:public	signature:()
JMotionAxis	JMotionMov.h	/^  JMotionAxis(const tdouble3 &p1,const tdouble3 &p2):InitialP1(p1),InitialP2(p2),P1(p1),P2(p2){}$/;"	f	class:JMotionAxis	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2)
JMotionAxis	JMotionMov.h	/^class JMotionAxis$/;"	c
JMotionAxis::Equals	JMotionMov.h	/^  bool Equals(const tdouble3 &p1,const tdouble3 &p2)const{ return(P1.x==p1.x&&P1.y==p1.y&&P1.z==p1.z&&P2.x==p2.x&&P2.y==p2.y&&P2.z==p2.z); }$/;"	f	class:JMotionAxis	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2) const
JMotionAxis::InitialP1	JMotionMov.h	/^  const tdouble3 InitialP1;$/;"	m	class:JMotionAxis	access:public
JMotionAxis::InitialP2	JMotionMov.h	/^  const tdouble3 InitialP2;$/;"	m	class:JMotionAxis	access:public
JMotionAxis::JMotionAxis	JMotionMov.h	/^  JMotionAxis(const tdouble3 &p1,const tdouble3 &p2):InitialP1(p1),InitialP2(p2),P1(p1),P2(p2){}$/;"	f	class:JMotionAxis	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2)
JMotionAxis::P1	JMotionMov.h	/^  tdouble3 P1;$/;"	m	class:JMotionAxis	access:public
JMotionAxis::P2	JMotionMov.h	/^  tdouble3 P2;$/;"	m	class:JMotionAxis	access:public
JMotionAxis::ResetTime	JMotionMov.h	/^  void ResetTime(){ P1=InitialP1; P2=InitialP2; }$/;"	f	class:JMotionAxis	access:public	signature:()
JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::JMotionDataFile(std::string dirdata,std::string file,bool angdegrees):PosType(false){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::JMotionDataFile(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz):PosType(true){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile	JMotionMov.h	/^  JMotionDataFile(std::string dirdata,std::string file,bool angdegrees);$/;"	p	class:JMotionDataFile	access:public	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile	JMotionMov.h	/^  JMotionDataFile(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz);$/;"	p	class:JMotionDataFile	access:public	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile	JMotionMov.h	/^class JMotionDataFile : protected JObject$/;"	c	inherits:JObject
JMotionDataFile::Count	JMotionMov.h	/^  unsigned Count;  \/\/-Numero de posiciones$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::GetCount	JMotionMov.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
JMotionDataFile::GetTimes	JMotionMov.h	/^  const double*   GetTimes()const{ return(Times); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
JMotionDataFile::GetValuesAng	JMotionMov.h	/^  const double*   GetValuesAng()const{ return(ValuesAng); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
JMotionDataFile::GetValuesPos	JMotionMov.h	/^  const tdouble3* GetValuesPos()const{ return(ValuesPos); }$/;"	f	class:JMotionDataFile	access:public	signature:() const
JMotionDataFile::JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::JMotionDataFile(std::string dirdata,std::string file,bool angdegrees):PosType(false){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile::JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::JMotionDataFile(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz):PosType(true){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile::JMotionDataFile	JMotionMov.h	/^  JMotionDataFile(std::string dirdata,std::string file,bool angdegrees);$/;"	p	class:JMotionDataFile	access:public	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile::JMotionDataFile	JMotionMov.h	/^  JMotionDataFile(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz);$/;"	p	class:JMotionDataFile	access:public	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile::LoadFileAng	JMotionMov.cpp	/^void JMotionDataFile::LoadFileAng(std::string dirdata,std::string file,bool angdegrees){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile::LoadFileAng	JMotionMov.h	/^  void LoadFileAng(std::string dirdata,std::string file,bool angdegrees);$/;"	p	class:JMotionDataFile	access:private	signature:(std::string dirdata,std::string file,bool angdegrees)
JMotionDataFile::LoadFilePos	JMotionMov.cpp	/^void JMotionDataFile::LoadFilePos(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile::LoadFilePos	JMotionMov.h	/^  void LoadFilePos(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz);$/;"	p	class:JMotionDataFile	access:private	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
JMotionDataFile::PosType	JMotionMov.h	/^  const bool PosType;    \/\/-Indica que se almacenan posiciones.$/;"	m	class:JMotionDataFile	access:public
JMotionDataFile::Reset	JMotionMov.cpp	/^void JMotionDataFile::Reset(){$/;"	f	class:JMotionDataFile	signature:()
JMotionDataFile::Reset	JMotionMov.h	/^  void Reset();$/;"	p	class:JMotionDataFile	access:private	signature:()
JMotionDataFile::Resize	JMotionMov.cpp	/^void JMotionDataFile::Resize(unsigned size){$/;"	f	class:JMotionDataFile	signature:(unsigned size)
JMotionDataFile::Resize	JMotionMov.h	/^  void Resize(unsigned size);$/;"	p	class:JMotionDataFile	access:private	signature:(unsigned size)
JMotionDataFile::SIZEMAX	JMotionMov.h	/^  static const unsigned SIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::Size	JMotionMov.h	/^  unsigned Size;   \/\/-Posiciones reservadas para vectores$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::Times	JMotionMov.h	/^  double *Times;   \/\/-Tiempos$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::ValuesAng	JMotionMov.h	/^  double *ValuesAng;    \/\/-Angulos, siemgre en grados.$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::ValuesPos	JMotionMov.h	/^  tdouble3 *ValuesPos;  \/\/-Posiciones.$/;"	m	class:JMotionDataFile	access:private
JMotionDataFile::~JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::~JMotionDataFile(){$/;"	f	class:JMotionDataFile	signature:()
JMotionDataFile::~JMotionDataFile	JMotionMov.h	/^  ~JMotionDataFile();$/;"	p	class:JMotionDataFile	access:public	signature:()
JMotionEvent	JMotionEvent.h	/^  JMotionEvent(JMotionObj* obj,JMotionMov* mov,double timestart,double timefinish):Obj(obj),Mov(mov),TimeStart(timestart),TimeFinish(timefinish){}$/;"	f	class:JMotionEvent	access:public	signature:(JMotionObj* obj,JMotionMov* mov,double timestart,double timefinish)
JMotionEvent	JMotionEvent.h	/^class JMotionEvent$/;"	c
JMotionEvent::JMotionEvent	JMotionEvent.h	/^  JMotionEvent(JMotionObj* obj,JMotionMov* mov,double timestart,double timefinish):Obj(obj),Mov(mov),TimeStart(timestart),TimeFinish(timefinish){}$/;"	f	class:JMotionEvent	access:public	signature:(JMotionObj* obj,JMotionMov* mov,double timestart,double timefinish)
JMotionEvent::Mov	JMotionEvent.h	/^  JMotionMov* const Mov;$/;"	m	class:JMotionEvent	access:public
JMotionEvent::Obj	JMotionEvent.h	/^  JMotionObj* const Obj;$/;"	m	class:JMotionEvent	access:public
JMotionEvent::TimeFinish	JMotionEvent.h	/^  const double TimeFinish;$/;"	m	class:JMotionEvent	access:public
JMotionEvent::TimeStart	JMotionEvent.h	/^  const double TimeStart;$/;"	m	class:JMotionEvent	access:public
JMotionList	JMotionList.cpp	/^JMotionList::JMotionList(int nref):Nref(unsigned(nref)){$/;"	f	class:JMotionList	signature:(int nref)
JMotionList	JMotionList.h	/^  JMotionList(int nref);$/;"	p	class:JMotionList	access:public	signature:(int nref)
JMotionList	JMotionList.h	/^class JMotionList : protected JObject$/;"	c	inherits:JObject
JMotionList::Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(unsigned ref,const tdouble3  &mvsimple){  MotionData[ref].Ace2_Move1dt(mvsimple);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple)
JMotionList::Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(unsigned ref,const tmatrix4d &mvmatrix){  MotionData[ref].Ace2_Move1dt(mvmatrix);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix)
JMotionList::Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(unsigned ref,const tdouble3  &mvsimple){  MotionData[ref].Ace2_Move2dt(mvsimple);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple)
JMotionList::Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(unsigned ref,const tmatrix4d &mvmatrix){  MotionData[ref].Ace2_Move2dt(mvmatrix);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix)
JMotionList::Ace2_PosMotion	JMotionList.h	/^  void Ace2_PosMotion(double dt){ for(unsigned c=0;c<Nref;c++)MotionData[c].Ace2_PosMotion(dt); }$/;"	f	class:JMotionList	access:public	signature:(double dt)
JMotionList::GetData	JMotionList.cpp	/^bool JMotionList::GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JMotionList	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotionList::GetData	JMotionList.cpp	/^bool JMotionList::GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotionList	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotionList::GetData	JMotionList.h	/^  bool GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace$/;"	p	class:JMotionList	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace ,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotionList::GetData	JMotionList.h	/^  bool GetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotionList	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotionList::JMotionList	JMotionList.cpp	/^JMotionList::JMotionList(int nref):Nref(unsigned(nref)){$/;"	f	class:JMotionList	signature:(int nref)
JMotionList::JMotionList	JMotionList.h	/^  JMotionList(int nref);$/;"	p	class:JMotionList	access:public	signature:(int nref)
JMotionList::MotionData	JMotionList.h	/^  JMotionListData* MotionData;$/;"	m	class:JMotionList	access:private
JMotionList::Nref	JMotionList.h	/^  const unsigned Nref;$/;"	m	class:JMotionList	access:public
JMotionList::PreMotion	JMotionList.h	/^  void PreMotion(){ for(unsigned c=0;c<Nref;c++)MotionData[c].PreMotion(); }$/;"	f	class:JMotionList	access:public	signature:()
JMotionList::Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(unsigned ref,const tdouble3  &mvsimple,double dt){  MotionData[ref].Sp_Movedt(mvsimple,dt);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple,double dt)
JMotionList::Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(unsigned ref,const tmatrix4d &mvmatrix,double dt){  MotionData[ref].Sp_Movedt(mvmatrix,dt);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix,double dt)
JMotionList::TimeStep	JMotionList.h	/^  double TimeStep;$/;"	m	class:JMotionList	access:public
JMotionList::~JMotionList	JMotionList.cpp	/^JMotionList::~JMotionList(){$/;"	f	class:JMotionList	signature:()
JMotionList::~JMotionList	JMotionList.h	/^  ~JMotionList();$/;"	p	class:JMotionList	access:public	signature:()
JMotionListData	JMotionList.cpp	/^JMotionListData::JMotionListData(){$/;"	f	class:JMotionListData	signature:()
JMotionListData	JMotionList.h	/^  JMotionListData();$/;"	p	class:JMotionListData	access:public	signature:()
JMotionListData	JMotionList.h	/^class JMotionListData : protected JObject$/;"	c	inherits:JObject
JMotionListData::Ace2_Move1dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move1dt(const tdouble3 &mvsimple){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple)
JMotionListData::Ace2_Move1dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move1dt(const tmatrix4d &mvmatrix){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix)
JMotionListData::Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(const tdouble3 &mvsimple);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple)
JMotionListData::Ace2_Move1dt	JMotionList.h	/^  void Ace2_Move1dt(const tmatrix4d &mvmatrix);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix)
JMotionListData::Ace2_Move2dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move2dt(const tdouble3 &mvsimple){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple)
JMotionListData::Ace2_Move2dt	JMotionList.cpp	/^void JMotionListData::Ace2_Move2dt(const tmatrix4d &mvmatrix){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix)
JMotionListData::Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(const tdouble3 &mvsimple);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple)
JMotionListData::Ace2_Move2dt	JMotionList.h	/^  void Ace2_Move2dt(const tmatrix4d &mvmatrix);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix)
JMotionListData::Ace2_PosMotion	JMotionList.cpp	/^void JMotionListData::Ace2_PosMotion(double dt){$/;"	f	class:JMotionListData	signature:(double dt)
JMotionListData::Ace2_PosMotion	JMotionList.h	/^  void Ace2_PosMotion(double dt);$/;"	p	class:JMotionListData	access:public	signature:(double dt)
JMotionListData::AceSimple	JMotionList.h	/^  tdouble3 AceSimple;$/;"	m	class:JMotionListData	access:private
JMotionListData::Active	JMotionList.h	/^  bool Active;$/;"	m	class:JMotionListData	access:private
JMotionListData::GetData	JMotionList.cpp	/^bool JMotionListData::GetData(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel$/;"	f	class:JMotionListData	signature:(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel ,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotionListData::GetData	JMotionList.cpp	/^bool JMotionListData::GetData(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotionListData	signature:(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotionListData::GetData	JMotionList.h	/^  bool GetData(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel$/;"	p	class:JMotionListData	access:public	signature:(bool &typesimple,tdouble3 &simplemov,tdouble3 &simplevel ,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
JMotionListData::GetData	JMotionList.h	/^  bool GetData(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotionListData	access:public	signature:(bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JMotionListData::JMotionListData	JMotionList.cpp	/^JMotionListData::JMotionListData(){$/;"	f	class:JMotionListData	signature:()
JMotionListData::JMotionListData	JMotionList.h	/^  JMotionListData();$/;"	p	class:JMotionListData	access:public	signature:()
JMotionListData::MvMatrix1	JMotionList.h	/^  tmatrix4d MvMatrix1;$/;"	m	class:JMotionListData	access:private
JMotionListData::MvMatrix2	JMotionList.h	/^  tmatrix4d MvMatrix2;$/;"	m	class:JMotionListData	access:private
JMotionListData::MvSimple1	JMotionList.h	/^  tdouble3 MvSimple1;$/;"	m	class:JMotionListData	access:private
JMotionListData::MvSimple2	JMotionList.h	/^  tdouble3 MvSimple2;$/;"	m	class:JMotionListData	access:private
JMotionListData::PreMotion	JMotionList.h	/^  void PreMotion(){  Active=false;  }$/;"	f	class:JMotionListData	access:public	signature:()
JMotionListData::Sp_Movedt	JMotionList.cpp	/^void JMotionListData::Sp_Movedt(const tdouble3 &mvsimple,double dt){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple,double dt)
JMotionListData::Sp_Movedt	JMotionList.cpp	/^void JMotionListData::Sp_Movedt(const tmatrix4d &mvmatrix,double dt){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix,double dt)
JMotionListData::Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(const tdouble3  &mvsimple,double dt);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple,double dt)
JMotionListData::Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(const tmatrix4d &mvmatrix,double dt);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix,double dt)
JMotionListData::TypeSimple	JMotionList.h	/^  bool TypeSimple;$/;"	m	class:JMotionListData	access:private
JMotionListData::VelSimple	JMotionList.h	/^  tdouble3 VelSimple;$/;"	m	class:JMotionListData	access:private
JMotionMov	JMotionMov.h	/^  JMotionMov(const char* classname,bool typeblock,TpMotionMov type,unsigned id,unsigned nextid,double time):TypeBlock(typeblock),Type(type),Id(id),NextId(nextid),Time(time){$/;"	f	class:JMotionMov	access:public	signature:(const char* classname,bool typeblock,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMov	JMotionMov.h	/^class JMotionMov : protected JObject$/;"	c	inherits:JObject
JMotionMov::Circular	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::CircularAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::CircularSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::Id	JMotionMov.h	/^  const unsigned Id;$/;"	m	class:JMotionMov	access:public
JMotionMov::JMotionMov	JMotionMov.h	/^  JMotionMov(const char* classname,bool typeblock,TpMotionMov type,unsigned id,unsigned nextid,double time):TypeBlock(typeblock),Type(type),Id(id),NextId(nextid),Time(time){$/;"	f	class:JMotionMov	access:public	signature:(const char* classname,bool typeblock,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMov::NextId	JMotionMov.h	/^  const unsigned NextId;$/;"	m	class:JMotionMov	access:public
JMotionMov::NextMov	JMotionMov.h	/^  JMotionMov* NextMov;$/;"	m	class:JMotionMov	access:public
JMotionMov::Null	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::Nulo	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::Rectilinear	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RectilinearAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RectilinearFile	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RectilinearSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::Rotation	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RotationAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RotationFile	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::RotationSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::SetNextMov	JMotionMov.h	/^  void SetNextMov(JMotionMov* nextmov){ NextMov=nextmov; }$/;"	f	class:JMotionMov	access:public	signature:(JMotionMov* nextmov)
JMotionMov::Time	JMotionMov.h	/^  const double Time;$/;"	m	class:JMotionMov	access:public
JMotionMov::TpMotionMov	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	t	class:JMotionMov	typeref:enum:JMotionMov::__anon18	access:public
JMotionMov::Type	JMotionMov.h	/^  const TpMotionMov Type;$/;"	m	class:JMotionMov	access:public
JMotionMov::TypeBlock	JMotionMov.h	/^  const bool TypeBlock;$/;"	m	class:JMotionMov	access:public
JMotionMov::Wait	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
JMotionMov::WriteXml	JMotionMov.h	/^  virtual void WriteXml(TiXmlNode* node)const=0;$/;"	p	class:JMotionMov	access:public	signature:(TiXmlNode* node) const
JMotionMov::~JMotionMov	JMotionMov.h	/^  virtual ~JMotionMov(){ DestructorActive=true; \/*printf("del JMotionMov\\n");*\/  }$/;"	f	class:JMotionMov	access:public	signature:()
JMotionMovActive	JMotionObj.cpp	/^JMotionMovActive::JMotionMovActive(double start,double eventfinish,JMotionMov* mov):EventFinish(eventfinish){$/;"	f	class:JMotionMovActive	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionMovActive	JMotionObj.h	/^  JMotionMovActive(double start,double eventfinish,JMotionMov* mov);$/;"	p	class:JMotionMovActive	access:public	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionMovActive	JMotionObj.h	/^class JMotionMovActive : protected JObject$/;"	c	inherits:JObject
JMotionMovActive::BinarySearch	JMotionObj.cpp	/^unsigned JMotionMovActive::BinarySearch(unsigned size,const double *times,double t){$/;"	f	class:JMotionMovActive	signature:(unsigned size,const double *times,double t)
JMotionMovActive::BinarySearch	JMotionObj.h	/^  static unsigned BinarySearch(unsigned size,const double *times,double t);$/;"	p	class:JMotionMovActive	access:public	signature:(unsigned size,const double *times,double t)
JMotionMovActive::ConfigData	JMotionObj.cpp	/^void JMotionMovActive::ConfigData(){$/;"	f	class:JMotionMovActive	signature:()
JMotionMovActive::ConfigData	JMotionObj.h	/^  void ConfigData();$/;"	p	class:JMotionMovActive	access:public	signature:()
JMotionMovActive::DFSIZEMAX	JMotionObj.h	/^  static const unsigned DFSIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::Del	JMotionObj.h	/^  bool Del;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfAng	JMotionObj.h	/^  const double *DfAng;     \/\/-Angulos, siemgre en grados.$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfConfig	JMotionObj.cpp	/^void JMotionMovActive::DfConfig(bool postype){$/;"	f	class:JMotionMovActive	signature:(bool postype)
JMotionMovActive::DfConfig	JMotionObj.h	/^  void DfConfig(bool postype);$/;"	p	class:JMotionMovActive	access:public	signature:(bool postype)
JMotionMovActive::DfCount	JMotionObj.h	/^  unsigned DfCount;  \/\/-Numero de posiciones$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfGetNewAng	JMotionObj.cpp	/^double JMotionMovActive::DfGetNewAng(double t){$/;"	f	class:JMotionMovActive	signature:(double t)
JMotionMovActive::DfGetNewAng	JMotionObj.h	/^  double DfGetNewAng(double t);$/;"	p	class:JMotionMovActive	access:public	signature:(double t)
JMotionMovActive::DfGetNewPos	JMotionObj.cpp	/^tdouble3 JMotionMovActive::DfGetNewPos(double t){$/;"	f	class:JMotionMovActive	signature:(double t)
JMotionMovActive::DfGetNewPos	JMotionObj.h	/^  tdouble3 DfGetNewPos(double t);$/;"	p	class:JMotionMovActive	access:public	signature:(double t)
JMotionMovActive::DfIndex	JMotionObj.h	/^  unsigned DfIndex;  \/\/-Indice de posicionamiento temporal$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfLastAng	JMotionObj.h	/^  double DfLastAng;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfLastPos	JMotionObj.h	/^  tdouble3 DfLastPos;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfPos	JMotionObj.h	/^  const tdouble3 *DfPos;   \/\/-Posiciones$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfPosType	JMotionObj.h	/^  bool DfPosType;    \/\/-Indica que se almacenan posiciones.$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::DfReset	JMotionObj.cpp	/^void JMotionMovActive::DfReset(){$/;"	f	class:JMotionMovActive	signature:()
JMotionMovActive::DfReset	JMotionObj.h	/^  void DfReset();$/;"	p	class:JMotionMovActive	access:public	signature:()
JMotionMovActive::DfTimes	JMotionObj.h	/^  const double *DfTimes;   \/\/-Tiempos$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::EventFinish	JMotionObj.h	/^  const double EventFinish;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::Finish	JMotionObj.h	/^  double Start,Finish;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::Flash	JMotionObj.h	/^  bool Flash;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::JMotionMovActive	JMotionObj.cpp	/^JMotionMovActive::JMotionMovActive(double start,double eventfinish,JMotionMov* mov):EventFinish(eventfinish){$/;"	f	class:JMotionMovActive	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionMovActive::JMotionMovActive	JMotionObj.h	/^  JMotionMovActive(double start,double eventfinish,JMotionMov* mov);$/;"	p	class:JMotionMovActive	access:public	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionMovActive::Mov	JMotionObj.h	/^  JMotionMov* Mov;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::NextMov	JMotionObj.cpp	/^void JMotionMovActive::NextMov(){$/;"	f	class:JMotionMovActive	signature:()
JMotionMovActive::NextMov	JMotionObj.h	/^  void NextMov();$/;"	p	class:JMotionMovActive	access:public	signature:()
JMotionMovActive::Phase	JMotionObj.h	/^  tdouble3 Phase;  \/\/-Solo se usa para el RectilinearSinusoidal$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::PhaseUni	JMotionObj.h	/^  double PhaseUni; \/\/-Solo se usa para el RotationSinusoidal y CircularSinusoidal$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::Start	JMotionObj.h	/^  double Start,Finish;$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::Vel	JMotionObj.h	/^  tdouble3 Vel;    \/\/-Solo se usa para el RectilinearAce$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::VelAng	JMotionObj.h	/^  double VelAng;   \/\/-Solo se usa para el RotationAce$/;"	m	class:JMotionMovActive	access:public
JMotionMovActive::~JMotionMovActive	JMotionObj.cpp	/^JMotionMovActive::~JMotionMovActive(){$/;"	f	class:JMotionMovActive	signature:()
JMotionMovActive::~JMotionMovActive	JMotionObj.h	/^  ~JMotionMovActive();$/;"	p	class:JMotionMovActive	access:public	signature:()
JMotionMovBlock	JMotionMov.h	/^  JMotionMovBlock(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time): JMotionMov(classname,true,type,id,nextid,time) {}$/;"	f	class:JMotionMovBlock	access:public	signature:(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMovBlock	JMotionMov.h	/^class JMotionMovBlock : public JMotionMov$/;"	c	inherits:JMotionMov
JMotionMovBlock::JMotionMovBlock	JMotionMov.h	/^  JMotionMovBlock(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time): JMotionMov(classname,true,type,id,nextid,time) {}$/;"	f	class:JMotionMovBlock	access:public	signature:(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMovCir	JMotionMov.h	/^  JMotionMovCir(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &velang):JMotionMovBlock("JMotionMovCir",Circular,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),VelAng(velang){}$/;"	f	class:JMotionMovCir	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &velang)
JMotionMovCir	JMotionMov.h	/^class JMotionMovCir : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovCir::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovCir	access:public
JMotionMovCir::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCir	access:public
JMotionMovCir::JMotionMovCir	JMotionMov.h	/^  JMotionMovCir(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &velang):JMotionMovBlock("JMotionMovCir",Circular,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),VelAng(velang){}$/;"	f	class:JMotionMovCir	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &velang)
JMotionMovCir::Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCir	access:public
JMotionMovCir::VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovCir	access:public
JMotionMovCir::WriteXml	JMotionMov.cpp	/^void JMotionMovCir::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCir	signature:(TiXmlNode* node) const
JMotionMovCir::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCir	access:public	signature:(TiXmlNode* node) const
JMotionMovCirAce	JMotionMov.h	/^  JMotionMovCirAce(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &aceang,const double &velang,bool velprev):JMotionMovBlock("JMotionMovCirAce",CircularAce,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),AceAng(aceang),VelAng(velang),VelPrev(velprev){}$/;"	f	class:JMotionMovCirAce	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &aceang,const double &velang,bool velprev)
JMotionMovCirAce	JMotionMov.h	/^class JMotionMovCirAce : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovCirAce::AceAng	JMotionMov.h	/^  const double AceAng;  \/\/-Siempre en grados\/s^2.$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::JMotionMovCirAce	JMotionMov.h	/^  JMotionMovCirAce(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &aceang,const double &velang,bool velprev):JMotionMovBlock("JMotionMovCirAce",CircularAce,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),AceAng(aceang),VelAng(velang),VelPrev(velprev){}$/;"	f	class:JMotionMovCirAce	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,const double &aceang,const double &velang,bool velprev)
JMotionMovCirAce::Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovCirAce	access:public
JMotionMovCirAce::WriteXml	JMotionMov.cpp	/^void JMotionMovCirAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCirAce	signature:(TiXmlNode* node) const
JMotionMovCirAce::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCirAce	access:public	signature:(TiXmlNode* node) const
JMotionMovCirSinu	JMotionMov.h	/^  JMotionMovCirSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,double freq,double ampl,double phase,bool phaseprev):JMotionMovBlock("JMotionMovCirSinu",CircularSinusoidal,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovCirSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,double freq,double ampl,double phase,bool phaseprev)
JMotionMovCirSinu	JMotionMov.h	/^class JMotionMovCirSinu : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovCirSinu::Ampl	JMotionMov.h	/^  const double Ampl;  \/\/-Amplitude, siempre en grados.$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::AngDegrees	JMotionMov.h	/^  const bool AngDegrees; \/\/-Independientemente de AngDegrees, todos los valores se guardan en grados.$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::Freq	JMotionMov.h	/^  const double Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::JMotionMovCirSinu	JMotionMov.h	/^  JMotionMovCirSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,double freq,double ampl,double phase,bool phaseprev):JMotionMovBlock("JMotionMovCirSinu",CircularSinusoidal,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Ref(ref),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovCirSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const JMotionAxis* ref,double freq,double ampl,double phase,bool phaseprev)
JMotionMovCirSinu::Phase	JMotionMov.h	/^  const double Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCirSinu	access:public
JMotionMovCirSinu::WriteXml	JMotionMov.cpp	/^void JMotionMovCirSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCirSinu	signature:(TiXmlNode* node) const
JMotionMovCirSinu::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCirSinu	access:public	signature:(TiXmlNode* node) const
JMotionMovNull	JMotionMov.h	/^  JMotionMovNull(unsigned id):JMotionMovBlock("JMotionMovNull",Nulo,id,0,0){}$/;"	f	class:JMotionMovNull	access:public	signature:(unsigned id)
JMotionMovNull	JMotionMov.h	/^class JMotionMovNull : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovNull::JMotionMovNull	JMotionMov.h	/^  JMotionMovNull(unsigned id):JMotionMovBlock("JMotionMovNull",Nulo,id,0,0){}$/;"	f	class:JMotionMovNull	access:public	signature:(unsigned id)
JMotionMovNull::WriteXml	JMotionMov.cpp	/^void JMotionMovNull::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovNull	signature:(TiXmlNode* node) const
JMotionMovNull::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovNull	access:public	signature:(TiXmlNode* node) const
JMotionMovPart	JMotionMov.h	/^  JMotionMovPart(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time): JMotionMov(classname,false,type,id,nextid,time) {}$/;"	f	class:JMotionMovPart	access:public	signature:(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMovPart	JMotionMov.h	/^class JMotionMovPart : public JMotionMov$/;"	c	inherits:JMotionMov
JMotionMovPart::JMotionMovPart	JMotionMov.h	/^  JMotionMovPart(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time): JMotionMov(classname,false,type,id,nextid,time) {}$/;"	f	class:JMotionMovPart	access:public	signature:(const char* classname,TpMotionMov type,unsigned id,unsigned nextid,double time)
JMotionMovRect	JMotionMov.h	/^  JMotionMovRect(unsigned id,unsigned nextid,double time,const tdouble3 &vel):JMotionMovBlock("JMotionMovRect",Rectilinear,id,nextid,time),Vel(vel){}$/;"	f	class:JMotionMovRect	access:public	signature:(unsigned id,unsigned nextid,double time,const tdouble3 &vel)
JMotionMovRect	JMotionMov.h	/^class JMotionMovRect : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovRect::JMotionMovRect	JMotionMov.h	/^  JMotionMovRect(unsigned id,unsigned nextid,double time,const tdouble3 &vel):JMotionMovBlock("JMotionMovRect",Rectilinear,id,nextid,time),Vel(vel){}$/;"	f	class:JMotionMovRect	access:public	signature:(unsigned id,unsigned nextid,double time,const tdouble3 &vel)
JMotionMovRect::Vel	JMotionMov.h	/^  const tdouble3 Vel;$/;"	m	class:JMotionMovRect	access:public
JMotionMovRect::WriteXml	JMotionMov.cpp	/^void JMotionMovRect::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRect	signature:(TiXmlNode* node) const
JMotionMovRect::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRect	access:public	signature:(TiXmlNode* node) const
JMotionMovRectAce	JMotionMov.h	/^  JMotionMovRectAce(unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velprev):JMotionMovBlock("JMotionMovRectAce",RectilinearAce,id,nextid,time),Ace(ace),Vel(vel),VelPrev(velprev){}$/;"	f	class:JMotionMovRectAce	access:public	signature:(unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velprev)
JMotionMovRectAce	JMotionMov.h	/^class JMotionMovRectAce : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovRectAce::Ace	JMotionMov.h	/^  const tdouble3 Ace;$/;"	m	class:JMotionMovRectAce	access:public
JMotionMovRectAce::JMotionMovRectAce	JMotionMov.h	/^  JMotionMovRectAce(unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velprev):JMotionMovBlock("JMotionMovRectAce",RectilinearAce,id,nextid,time),Ace(ace),Vel(vel),VelPrev(velprev){}$/;"	f	class:JMotionMovRectAce	access:public	signature:(unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velprev)
JMotionMovRectAce::Vel	JMotionMov.h	/^  const tdouble3 Vel;$/;"	m	class:JMotionMovRectAce	access:public
JMotionMovRectAce::VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovRectAce	access:public
JMotionMovRectAce::WriteXml	JMotionMov.cpp	/^void JMotionMovRectAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectAce	signature:(TiXmlNode* node) const
JMotionMovRectAce::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectAce	access:public	signature:(TiXmlNode* node) const
JMotionMovRectFile	JMotionMov.h	/^  JMotionMovRectFile(unsigned id,unsigned nextid,double time,const std::string *dirdata,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz):JMotionMovBlock("JMotionMovRectFile",RectilinearFile,id,nextid,time),DirData(dirdata),File(file),Fields(fields),FieldTime(fieldtime),FieldX(fieldx),FieldY(fieldy),FieldZ(fieldz){$/;"	f	class:JMotionMovRectFile	access:public	signature:(unsigned id,unsigned nextid,double time,const std::string *dirdata,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
JMotionMovRectFile	JMotionMov.h	/^class JMotionMovRectFile : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovRectFile::DataFile	JMotionMov.h	/^  JMotionDataFile *DataFile;$/;"	m	class:JMotionMovRectFile	access:private
JMotionMovRectFile::DirData	JMotionMov.h	/^  const std::string* DirData;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::FieldTime	JMotionMov.h	/^  const int FieldTime;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::FieldX	JMotionMov.h	/^  const int FieldX;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::FieldY	JMotionMov.h	/^  const int FieldY;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::FieldZ	JMotionMov.h	/^  const int FieldZ;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::Fields	JMotionMov.h	/^  const int Fields;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::File	JMotionMov.h	/^  const std::string File;$/;"	m	class:JMotionMovRectFile	access:public
JMotionMovRectFile::GetCount	JMotionMov.h	/^  unsigned GetCount()const{  return(DataFile->GetCount());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
JMotionMovRectFile::GetTimes	JMotionMov.h	/^  const double*   GetTimes()const{  return(DataFile->GetTimes());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
JMotionMovRectFile::GetValuesPos	JMotionMov.h	/^  const tdouble3* GetValuesPos()const{  return(DataFile->GetValuesPos());  }$/;"	f	class:JMotionMovRectFile	access:public	signature:() const
JMotionMovRectFile::JMotionMovRectFile	JMotionMov.h	/^  JMotionMovRectFile(unsigned id,unsigned nextid,double time,const std::string *dirdata,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz):JMotionMovBlock("JMotionMovRectFile",RectilinearFile,id,nextid,time),DirData(dirdata),File(file),Fields(fields),FieldTime(fieldtime),FieldX(fieldx),FieldY(fieldy),FieldZ(fieldz){$/;"	f	class:JMotionMovRectFile	access:public	signature:(unsigned id,unsigned nextid,double time,const std::string *dirdata,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
JMotionMovRectFile::PrepareData	JMotionMov.h	/^  void PrepareData(){  if(!DataFile)DataFile=new JMotionDataFile(*DirData,File,Fields,FieldTime,FieldX,FieldY,FieldZ);  }$/;"	f	class:JMotionMovRectFile	access:public	signature:()
JMotionMovRectFile::WriteXml	JMotionMov.cpp	/^void JMotionMovRectFile::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectFile	signature:(TiXmlNode* node) const
JMotionMovRectFile::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectFile	access:public	signature:(TiXmlNode* node) const
JMotionMovRectFile::~JMotionMovRectFile	JMotionMov.h	/^  ~JMotionMovRectFile(){ DestructorActive=true; delete DataFile; DataFile=NULL;  }$/;"	f	class:JMotionMovRectFile	access:public	signature:()
JMotionMovRectSinu	JMotionMov.h	/^  JMotionMovRectSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,const tdouble3 &phase,bool phaseprev):JMotionMovBlock("JMotionMovRectSinu",RectilinearSinusoidal,id,nextid,time),AngDegrees(angdegrees),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovRectSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,const tdouble3 &phase,bool phaseprev)
JMotionMovRectSinu	JMotionMov.h	/^class JMotionMovRectSinu : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovRectSinu::Ampl	JMotionMov.h	/^  const tdouble3 Ampl;  \/\/-Amplitude, siempre en metros.$/;"	m	class:JMotionMovRectSinu	access:public
JMotionMovRectSinu::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRectSinu	access:public
JMotionMovRectSinu::Freq	JMotionMov.h	/^  const tdouble3 Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovRectSinu	access:public
JMotionMovRectSinu::JMotionMovRectSinu	JMotionMov.h	/^  JMotionMovRectSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,const tdouble3 &phase,bool phaseprev):JMotionMovBlock("JMotionMovRectSinu",RectilinearSinusoidal,id,nextid,time),AngDegrees(angdegrees),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovRectSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,const tdouble3 &phase,bool phaseprev)
JMotionMovRectSinu::Phase	JMotionMov.h	/^  const tdouble3 Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovRectSinu	access:public
JMotionMovRectSinu::PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovRectSinu	access:public
JMotionMovRectSinu::WriteXml	JMotionMov.cpp	/^void JMotionMovRectSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectSinu	signature:(TiXmlNode* node) const
JMotionMovRectSinu::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectSinu	access:public	signature:(TiXmlNode* node) const
JMotionMovRot	JMotionMov.h	/^  JMotionMovRot(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &velang):JMotionMovPart("JMotionMovRot",Rotation,id,nextid,time),AngDegrees(angdegrees),Axis(axis),VelAng(velang){}$/;"	f	class:JMotionMovRot	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &velang)
JMotionMovRot	JMotionMov.h	/^class JMotionMovRot : public JMotionMovPart$/;"	c	inherits:JMotionMovPart
JMotionMovRot::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRot	access:public
JMotionMovRot::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRot	access:public
JMotionMovRot::JMotionMovRot	JMotionMov.h	/^  JMotionMovRot(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &velang):JMotionMovPart("JMotionMovRot",Rotation,id,nextid,time),AngDegrees(angdegrees),Axis(axis),VelAng(velang){}$/;"	f	class:JMotionMovRot	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &velang)
JMotionMovRot::VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovRot	access:public
JMotionMovRot::WriteXml	JMotionMov.cpp	/^void JMotionMovRot::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRot	signature:(TiXmlNode* node) const
JMotionMovRot::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRot	access:public	signature:(TiXmlNode* node) const
JMotionMovRotAce	JMotionMov.h	/^  JMotionMovRotAce(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &aceang,const double &velang,bool velprev):JMotionMovPart("JMotionMovRotAce",RotationAce,id,nextid,time),AngDegrees(angdegrees),Axis(axis),AceAng(aceang),VelAng(velang),VelPrev(velprev){}$/;"	f	class:JMotionMovRotAce	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &aceang,const double &velang,bool velprev)
JMotionMovRotAce	JMotionMov.h	/^class JMotionMovRotAce : public JMotionMovPart$/;"	c	inherits:JMotionMovPart
JMotionMovRotAce::AceAng	JMotionMov.h	/^  const double AceAng;  \/\/-Siempre en grados\/s^2.$/;"	m	class:JMotionMovRotAce	access:public
JMotionMovRotAce::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotAce	access:public
JMotionMovRotAce::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotAce	access:public
JMotionMovRotAce::JMotionMovRotAce	JMotionMov.h	/^  JMotionMovRotAce(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &aceang,const double &velang,bool velprev):JMotionMovPart("JMotionMovRotAce",RotationAce,id,nextid,time),AngDegrees(angdegrees),Axis(axis),AceAng(aceang),VelAng(velang),VelPrev(velprev){}$/;"	f	class:JMotionMovRotAce	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const double &aceang,const double &velang,bool velprev)
JMotionMovRotAce::VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovRotAce	access:public
JMotionMovRotAce::VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovRotAce	access:public
JMotionMovRotAce::WriteXml	JMotionMov.cpp	/^void JMotionMovRotAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotAce	signature:(TiXmlNode* node) const
JMotionMovRotAce::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotAce	access:public	signature:(TiXmlNode* node) const
JMotionMovRotFile	JMotionMov.h	/^  JMotionMovRotFile(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const std::string *dirdata,const std::string &file):JMotionMovPart("JMotionMovRotFile",RotationFile,id,nextid,time),DirData(dirdata),AngDegrees(angdegrees),Axis(axis),File(file){$/;"	f	class:JMotionMovRotFile	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const std::string *dirdata,const std::string &file)
JMotionMovRotFile	JMotionMov.h	/^class JMotionMovRotFile : public JMotionMovPart$/;"	c	inherits:JMotionMovPart
JMotionMovRotFile::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotFile	access:public
JMotionMovRotFile::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotFile	access:public
JMotionMovRotFile::DataFile	JMotionMov.h	/^  JMotionDataFile *DataFile;$/;"	m	class:JMotionMovRotFile	access:private
JMotionMovRotFile::DirData	JMotionMov.h	/^  const std::string* DirData;$/;"	m	class:JMotionMovRotFile	access:public
JMotionMovRotFile::File	JMotionMov.h	/^  const std::string File;$/;"	m	class:JMotionMovRotFile	access:public
JMotionMovRotFile::GetCount	JMotionMov.h	/^  unsigned GetCount()const{ return(DataFile->GetCount()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
JMotionMovRotFile::GetTimes	JMotionMov.h	/^  const double* GetTimes()const{ return(DataFile->GetTimes()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
JMotionMovRotFile::GetValuesAng	JMotionMov.h	/^  const double* GetValuesAng()const{ return(DataFile->GetValuesAng()); }$/;"	f	class:JMotionMovRotFile	access:public	signature:() const
JMotionMovRotFile::JMotionMovRotFile	JMotionMov.h	/^  JMotionMovRotFile(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const std::string *dirdata,const std::string &file):JMotionMovPart("JMotionMovRotFile",RotationFile,id,nextid,time),DirData(dirdata),AngDegrees(angdegrees),Axis(axis),File(file){$/;"	f	class:JMotionMovRotFile	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis* axis,const std::string *dirdata,const std::string &file)
JMotionMovRotFile::PrepareData	JMotionMov.h	/^  void PrepareData(){  if(!DataFile)DataFile=new JMotionDataFile(*DirData,File,AngDegrees);  }$/;"	f	class:JMotionMovRotFile	access:public	signature:()
JMotionMovRotFile::WriteXml	JMotionMov.cpp	/^void JMotionMovRotFile::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotFile	signature:(TiXmlNode* node) const
JMotionMovRotFile::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotFile	access:public	signature:(TiXmlNode* node) const
JMotionMovRotFile::~JMotionMovRotFile	JMotionMov.h	/^  ~JMotionMovRotFile(){ DestructorActive=true; delete DataFile; DataFile=NULL;  }$/;"	f	class:JMotionMovRotFile	access:public	signature:()
JMotionMovRotSinu	JMotionMov.h	/^  JMotionMovRotSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis *axis,double freq,double ampl,double phase,bool phaseprev):JMotionMovPart("JMotionMovRotSinu",RotationSinusoidal,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovRotSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis *axis,double freq,double ampl,double phase,bool phaseprev)
JMotionMovRotSinu	JMotionMov.h	/^class JMotionMovRotSinu : public JMotionMovPart$/;"	c	inherits:JMotionMovPart
JMotionMovRotSinu::Ampl	JMotionMov.h	/^  const double Ampl;  \/\/-Amplitude, siempre en grados.$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::AngDegrees	JMotionMov.h	/^  const bool AngDegrees;$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::Axis	JMotionMov.h	/^  const JMotionAxis* Axis;$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::Freq	JMotionMov.h	/^  const double Freq;  \/\/-Frequency, siempre en 1\/s.$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::JMotionMovRotSinu	JMotionMov.h	/^  JMotionMovRotSinu(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis *axis,double freq,double ampl,double phase,bool phaseprev):JMotionMovPart("JMotionMovRotSinu",RotationSinusoidal,id,nextid,time),AngDegrees(angdegrees),Axis(axis),Freq(freq),Ampl(ampl),Phase(phase),PhasePrev(phaseprev){}$/;"	f	class:JMotionMovRotSinu	access:public	signature:(unsigned id,unsigned nextid,double time,bool angdegrees,const JMotionAxis *axis,double freq,double ampl,double phase,bool phaseprev)
JMotionMovRotSinu::Phase	JMotionMov.h	/^  const double Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovRotSinu	access:public
JMotionMovRotSinu::WriteXml	JMotionMov.cpp	/^void JMotionMovRotSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotSinu	signature:(TiXmlNode* node) const
JMotionMovRotSinu::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotSinu	access:public	signature:(TiXmlNode* node) const
JMotionMovWait	JMotionMov.h	/^  JMotionMovWait(unsigned id,unsigned nextid,double time):JMotionMovBlock("JMotionMovWait",Wait,id,nextid,time){}$/;"	f	class:JMotionMovWait	access:public	signature:(unsigned id,unsigned nextid,double time)
JMotionMovWait	JMotionMov.h	/^class JMotionMovWait : public JMotionMovBlock$/;"	c	inherits:JMotionMovBlock
JMotionMovWait::JMotionMovWait	JMotionMov.h	/^  JMotionMovWait(unsigned id,unsigned nextid,double time):JMotionMovBlock("JMotionMovWait",Wait,id,nextid,time){}$/;"	f	class:JMotionMovWait	access:public	signature:(unsigned id,unsigned nextid,double time)
JMotionMovWait::WriteXml	JMotionMov.cpp	/^void JMotionMovWait::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovWait	signature:(TiXmlNode* node) const
JMotionMovWait::WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovWait	access:public	signature:(TiXmlNode* node) const
JMotionObj	JMotionObj.cpp	/^JMotionObj::JMotionObj(unsigned id,JMotionObj* parent,int ref):Id(id),Parent(parent),Ref(ref){$/;"	f	class:JMotionObj	signature:(unsigned id,JMotionObj* parent,int ref)
JMotionObj	JMotionObj.h	/^  JMotionObj(unsigned id,JMotionObj* parent,int ref);$/;"	p	class:JMotionObj	access:public	signature:(unsigned id,JMotionObj* parent,int ref)
JMotionObj	JMotionObj.h	/^class JMotionObj : protected JObject$/;"	c	inherits:JObject
JMotionObj::Active	JMotionObj.h	/^  bool Active;$/;"	m	class:JMotionObj	access:public
JMotionObj::ActiveMovs	JMotionObj.h	/^  std::vector<JMotionMovActive*> ActiveMovs;  \/\/-Movimientos activos$/;"	m	class:JMotionObj	access:private
JMotionObj::AddAxis	JMotionObj.cpp	/^void JMotionObj::AddAxis(JMotionAxis* axis){  Axis.push_back(axis);    }$/;"	f	class:JMotionObj	signature:(JMotionAxis* axis)
JMotionObj::AddAxis	JMotionObj.h	/^  void AddAxis(JMotionAxis* axis);$/;"	p	class:JMotionObj	access:public	signature:(JMotionAxis* axis)
JMotionObj::AddChild	JMotionObj.cpp	/^void JMotionObj::AddChild(JMotionObj* obj){   Children.push_back(obj); }$/;"	f	class:JMotionObj	signature:(JMotionObj* obj)
JMotionObj::AddChild	JMotionObj.h	/^  void AddChild(JMotionObj* obj);$/;"	p	class:JMotionObj	access:public	signature:(JMotionObj* obj)
JMotionObj::AddEvent	JMotionObj.cpp	/^void JMotionObj::AddEvent(JMotionEvent* evt){ Events.push_back(evt);   }$/;"	f	class:JMotionObj	signature:(JMotionEvent* evt)
JMotionObj::AddEvent	JMotionObj.h	/^  void AddEvent(JMotionEvent* evt);$/;"	p	class:JMotionObj	access:public	signature:(JMotionEvent* evt)
JMotionObj::AddMov	JMotionObj.cpp	/^void JMotionObj::AddMov(JMotionMov* mov){     Movs.push_back(mov);     }$/;"	f	class:JMotionObj	signature:(JMotionMov* mov)
JMotionObj::AddMov	JMotionObj.h	/^  void AddMov(JMotionMov* mov);$/;"	p	class:JMotionObj	access:public	signature:(JMotionMov* mov)
JMotionObj::Axis	JMotionObj.h	/^  std::vector<JMotionAxis*> Axis;     \/\/-Ejes asociados$/;"	m	class:JMotionObj	access:private
JMotionObj::AxisGetPointer	JMotionObj.cpp	/^JMotionAxis* JMotionObj::AxisGetPointer(const tdouble3 &p1,const tdouble3 &p2)const{$/;"	f	class:JMotionObj	signature:(const tdouble3 &p1,const tdouble3 &p2) const
JMotionObj::AxisGetPointer	JMotionObj.h	/^  JMotionAxis* AxisGetPointer(const tdouble3 &p1,const tdouble3 &p2)const;$/;"	p	class:JMotionObj	access:public	signature:(const tdouble3 &p1,const tdouble3 &p2) const
JMotionObj::BeginEvent	JMotionObj.cpp	/^void JMotionObj::BeginEvent(double start,double eventfinish,JMotionMov* mov){$/;"	f	class:JMotionObj	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionObj::BeginEvent	JMotionObj.h	/^  void BeginEvent(double start,double eventfinish,JMotionMov* mov);$/;"	p	class:JMotionObj	access:public	signature:(double start,double eventfinish,JMotionMov* mov)
JMotionObj::Children	JMotionObj.h	/^  std::vector<JMotionObj*> Children;  \/\/-Objetos hijos.$/;"	m	class:JMotionObj	access:private
JMotionObj::ChildrenCount	JMotionObj.cpp	/^unsigned JMotionObj::ChildrenCount(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::ChildrenCount	JMotionObj.h	/^  unsigned ChildrenCount();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionObj::CopyChangeRef	JMotionObj.cpp	/^void JMotionObj::CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
JMotionObj::CopyChangeRef	JMotionObj.h	/^  void CopyChangeRef(JMotion &mot,const int* ref,const int* refnew,unsigned refcount)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot,const int* ref,const int* refnew,unsigned refcount) const
JMotionObj::CopyConfig	JMotionObj.cpp	/^void JMotionObj::CopyConfig(JMotion &mot)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot) const
JMotionObj::CopyConfig	JMotionObj.h	/^  void CopyConfig(JMotion &mot)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot) const
JMotionObj::CopyConfigMovs	JMotionObj.cpp	/^void JMotionObj::CopyConfigMovs(JMotion &mot)const{$/;"	f	class:JMotionObj	signature:(JMotion &mot) const
JMotionObj::CopyConfigMovs	JMotionObj.h	/^  void CopyConfigMovs(JMotion &mot)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotion &mot) const
JMotionObj::Events	JMotionObj.h	/^  std::vector<JMotionEvent*> Events;  \/\/-Eventos asociados$/;"	m	class:JMotionObj	access:private
JMotionObj::ExistsObj	JMotionObj.cpp	/^bool JMotionObj::ExistsObj(JMotionObj* obj)const{$/;"	f	class:JMotionObj	signature:(JMotionObj* obj) const
JMotionObj::ExistsObj	JMotionObj.h	/^  bool ExistsObj(JMotionObj* obj)const;$/;"	p	class:JMotionObj	access:public	signature:(JMotionObj* obj) const
JMotionObj::GetMaxRef	JMotionObj.cpp	/^int JMotionObj::GetMaxRef()const{$/;"	f	class:JMotionObj	signature:() const
JMotionObj::GetMaxRef	JMotionObj.h	/^  int GetMaxRef()const;$/;"	p	class:JMotionObj	access:public	signature:() const
JMotionObj::GetMov	JMotionObj.cpp	/^bool JMotionObj::GetMov(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const{$/;"	f	class:JMotionObj	signature:(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
JMotionObj::GetMov	JMotionObj.h	/^  bool GetMov(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix)const;$/;"	p	class:JMotionObj	access:public	signature:(unsigned &ref,tdouble3 &mvsimple,JMatrix4d &mvmatrix) const
JMotionObj::GetPosMov	JMotionObj.cpp	/^int JMotionObj::GetPosMov(JMotionMov* mv)const{$/;"	f	class:JMotionObj	signature:(JMotionMov* mv) const
JMotionObj::GetPosMov	JMotionObj.h	/^  int GetPosMov(JMotionMov* mv)const;$/;"	p	class:JMotionObj	access:private	signature:(JMotionMov* mv) const
JMotionObj::GetRefs	JMotionObj.cpp	/^void JMotionObj::GetRefs(std::vector<int> &refs)const{$/;"	f	class:JMotionObj	signature:(std::vector<int> &refs) const
JMotionObj::GetRefs	JMotionObj.h	/^  void GetRefs(std::vector<int> &refs)const;$/;"	p	class:JMotionObj	access:public	signature:(std::vector<int> &refs) const
JMotionObj::Id	JMotionObj.h	/^  const unsigned Id; \/\/-Identificador de objeto$/;"	m	class:JMotionObj	access:public
JMotionObj::JMotionObj	JMotionObj.cpp	/^JMotionObj::JMotionObj(unsigned id,JMotionObj* parent,int ref):Id(id),Parent(parent),Ref(ref){$/;"	f	class:JMotionObj	signature:(unsigned id,JMotionObj* parent,int ref)
JMotionObj::JMotionObj	JMotionObj.h	/^  JMotionObj(unsigned id,JMotionObj* parent,int ref);$/;"	p	class:JMotionObj	access:public	signature:(unsigned id,JMotionObj* parent,int ref)
JMotionObj::LinkMovs	JMotionObj.cpp	/^void JMotionObj::LinkMovs(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::LinkMovs	JMotionObj.h	/^  void LinkMovs();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionObj::ModPos	JMotionObj.h	/^  JMotionPos ModPos;$/;"	m	class:JMotionObj	access:private
JMotionObj::MovGetPointer	JMotionObj.cpp	/^JMotionMov* JMotionObj::MovGetPointer(unsigned id)const{$/;"	f	class:JMotionObj	signature:(unsigned id) const
JMotionObj::MovGetPointer	JMotionObj.h	/^  JMotionMov* MovGetPointer(unsigned id)const;$/;"	p	class:JMotionObj	access:public	signature:(unsigned id) const
JMotionObj::Moving	JMotionObj.h	/^  bool Moving;$/;"	m	class:JMotionObj	access:private
JMotionObj::Movs	JMotionObj.h	/^  std::vector<JMotionMov*> Movs;      \/\/-Movimientos asociados$/;"	m	class:JMotionObj	access:private
JMotionObj::ObjGetPointer	JMotionObj.cpp	/^JMotionObj* JMotionObj::ObjGetPointer(unsigned id){$/;"	f	class:JMotionObj	signature:(unsigned id)
JMotionObj::ObjGetPointer	JMotionObj.h	/^  JMotionObj* ObjGetPointer(unsigned id);$/;"	p	class:JMotionObj	access:public	signature:(unsigned id)
JMotionObj::ObjGetPointerByRef	JMotionObj.cpp	/^JMotionObj* JMotionObj::ObjGetPointerByRef(int ref){$/;"	f	class:JMotionObj	signature:(int ref)
JMotionObj::ObjGetPointerByRef	JMotionObj.h	/^  JMotionObj* ObjGetPointerByRef(int ref);$/;"	p	class:JMotionObj	access:public	signature:(int ref)
JMotionObj::Optimize	JMotionObj.cpp	/^bool JMotionObj::Optimize(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::Optimize	JMotionObj.h	/^  bool Optimize();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionObj::Parent	JMotionObj.h	/^  const JMotionObj* Parent;$/;"	m	class:JMotionObj	access:public
JMotionObj::ProcesTime	JMotionObj.cpp	/^bool JMotionObj::ProcesTime(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount){$/;"	f	class:JMotionObj	signature:(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount)
JMotionObj::ProcesTime	JMotionObj.h	/^  bool ProcesTime(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount);$/;"	p	class:JMotionObj	access:public	signature:(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount)
JMotionObj::Ref	JMotionObj.h	/^  const int Ref;     \/\/-Referencia a objeto real (ref<0 lo trata como un obj virtual)$/;"	m	class:JMotionObj	access:public
JMotionObj::Reset	JMotionObj.cpp	/^void JMotionObj::Reset(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::Reset	JMotionObj.h	/^  void Reset();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionObj::ResetTime	JMotionObj.cpp	/^void JMotionObj::ResetTime(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::ResetTime	JMotionObj.h	/^  void ResetTime();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionObj::WriteXml	JMotionObj.cpp	/^void JMotionObj::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionObj	signature:(TiXmlNode* node) const
JMotionObj::WriteXml	JMotionObj.cpp	/^void JMotionObj::WriteXml(TiXmlNode* node,const JMotionEvent &evt)const{$/;"	f	class:JMotionObj	signature:(TiXmlNode* node,const JMotionEvent &evt) const
JMotionObj::WriteXml	JMotionObj.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionObj	access:public	signature:(TiXmlNode* node) const
JMotionObj::WriteXml	JMotionObj.h	/^  void WriteXml(TiXmlNode* node,const JMotionEvent &evt)const;$/;"	p	class:JMotionObj	access:private	signature:(TiXmlNode* node,const JMotionEvent &evt) const
JMotionObj::~JMotionObj	JMotionObj.cpp	/^JMotionObj::~JMotionObj(){$/;"	f	class:JMotionObj	signature:()
JMotionObj::~JMotionObj	JMotionObj.h	/^  ~JMotionObj();$/;"	p	class:JMotionObj	access:public	signature:()
JMotionPos	JMotionPos.cpp	/^JMotionPos::JMotionPos(){$/;"	f	class:JMotionPos	signature:()
JMotionPos	JMotionPos.h	/^  JMotionPos();$/;"	p	class:JMotionPos	access:public	signature:()
JMotionPos	JMotionPos.h	/^class JMotionPos$/;"	c
JMotionPos::GetMatrix	JMotionPos.h	/^  JMatrix4d GetMatrix()const{ return(PosMatrix); }$/;"	f	class:JMotionPos	access:public	signature:() const
JMotionPos::GetSimple	JMotionPos.h	/^  tdouble3 GetSimple()const{ return(PosSimple); }$/;"	f	class:JMotionPos	access:public	signature:() const
JMotionPos::IsSimple	JMotionPos.h	/^  bool IsSimple()const{ return(TypeSimple); }$/;"	f	class:JMotionPos	access:public	signature:() const
JMotionPos::JMotionPos	JMotionPos.cpp	/^JMotionPos::JMotionPos(){$/;"	f	class:JMotionPos	signature:()
JMotionPos::JMotionPos	JMotionPos.h	/^  JMotionPos();$/;"	p	class:JMotionPos	access:public	signature:()
JMotionPos::Move	JMotionPos.cpp	/^void JMotionPos::Move(const tdouble3 &dis){$/;"	f	class:JMotionPos	signature:(const tdouble3 &dis)
JMotionPos::Move	JMotionPos.h	/^  void Move(const tdouble3 &dis);$/;"	p	class:JMotionPos	access:public	signature:(const tdouble3 &dis)
JMotionPos::MoveMix	JMotionPos.cpp	/^void JMotionPos::MoveMix(const JMotionPos &modpos){$/;"	f	class:JMotionPos	signature:(const JMotionPos &modpos)
JMotionPos::MoveMix	JMotionPos.h	/^  void MoveMix(const JMotionPos &modpos);$/;"	p	class:JMotionPos	access:public	signature:(const JMotionPos &modpos)
JMotionPos::PointMove	JMotionPos.cpp	/^tdouble3 JMotionPos::PointMove(const tdouble3 &p) const{$/;"	f	class:JMotionPos	signature:(const tdouble3 &p) const
JMotionPos::PointMove	JMotionPos.h	/^  tdouble3 PointMove(const tdouble3 &p) const;$/;"	p	class:JMotionPos	access:public	signature:(const tdouble3 &p) const
JMotionPos::PointsMove	JMotionPos.h	/^  void PointsMove(tdouble3 &p1,tdouble3 &p2) const{ p1=PointMove(p1); p2=PointMove(p2); }$/;"	f	class:JMotionPos	access:public	signature:(tdouble3 &p1,tdouble3 &p2) const
JMotionPos::PosMatrix	JMotionPos.h	/^  JMatrix4d PosMatrix;$/;"	m	class:JMotionPos	access:private
JMotionPos::PosSimple	JMotionPos.h	/^  tdouble3 PosSimple;$/;"	m	class:JMotionPos	access:private
JMotionPos::Reset	JMotionPos.cpp	/^void JMotionPos::Reset(){$/;"	f	class:JMotionPos	signature:()
JMotionPos::Reset	JMotionPos.h	/^  void Reset();$/;"	p	class:JMotionPos	access:public	signature:()
JMotionPos::Rotate	JMotionPos.cpp	/^void JMotionPos::Rotate(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2){$/;"	f	class:JMotionPos	signature:(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2)
JMotionPos::Rotate	JMotionPos.h	/^  void Rotate(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2);$/;"	p	class:JMotionPos	access:public	signature:(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2)
JMotionPos::ToMatrix	JMotionPos.cpp	/^void JMotionPos::ToMatrix(){$/;"	f	class:JMotionPos	signature:()
JMotionPos::ToMatrix	JMotionPos.h	/^  void ToMatrix();$/;"	p	class:JMotionPos	access:public	signature:()
JMotionPos::TypeSimple	JMotionPos.h	/^  bool TypeSimple;$/;"	m	class:JMotionPos	access:private
JObject	JObject.h	/^  JObject():ClassName("JObject"),DestructorActive(false){} \/\/\/<Constructor of objects.$/;"	f	class:JObject	access:public	signature:()
JObject	JObject.h	/^class JObject$/;"	c
JObject::ClassName	JObject.h	/^  std::string ClassName;   \/\/\/<Name of the class.$/;"	m	class:JObject	access:protected
JObject::DestructorActive	JObject.h	/^  bool DestructorActive;   \/\/\/<Destructor of object in execution.$/;"	m	class:JObject	access:protected
JObject::GetExceptionText	JObject.cpp	/^std::string JObject::GetExceptionText(const std::string &method,const std::string &msg)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg) const
JObject::GetExceptionText	JObject.cpp	/^std::string JObject::GetExceptionText(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
JObject::GetExceptionText	JObject.h	/^  std::string GetExceptionText(const std::string &method,const std::string &msg)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg) const
JObject::GetExceptionText	JObject.h	/^  std::string GetExceptionText(const std::string &method,const std::string &msg,const std::string &file)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file) const
JObject::JObject	JObject.h	/^  JObject():ClassName("JObject"),DestructorActive(false){} \/\/\/<Constructor of objects.$/;"	f	class:JObject	access:public	signature:()
JObject::PrintException	JObject.cpp	/^void JObject::PrintException(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
JObject::PrintException	JObject.h	/^  void PrintException(const std::string &method,const std::string &msg,const std::string &file="")const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file=Ó) const
JObject::RunException	JObject.cpp	/^void JObject::RunException(const std::string &method,const std::string &msg)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg) const
JObject::RunException	JObject.cpp	/^void JObject::RunException(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
JObject::RunException	JObject.h	/^  void RunException(const std::string &method,const std::string &msg)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg) const
JObject::RunException	JObject.h	/^  void RunException(const std::string &method,const std::string &msg,const std::string &file)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file) const
JObjectGpu	JObjectGpu.h	/^  JObjectGpu(){ ClassName="JObjectGpu"; } \/\/\/<Constructor.$/;"	f	class:JObjectGpu	access:public	signature:()
JObjectGpu	JObjectGpu.h	/^class JObjectGpu : protected JObject$/;"	c	inherits:JObject
JObjectGpu::CheckCudaError	JObjectGpu.cpp	/^void JObjectGpu::CheckCudaError(const std::string &method,const std::string &msg)const{$/;"	f	class:JObjectGpu	signature:(const std::string &method,const std::string &msg) const
JObjectGpu::CheckCudaError	JObjectGpu.h	/^  void CheckCudaError(const std::string &method,const std::string &msg)const;$/;"	p	class:JObjectGpu	access:protected	signature:(const std::string &method,const std::string &msg) const
JObjectGpu::JObjectGpu	JObjectGpu.h	/^  JObjectGpu(){ ClassName="JObjectGpu"; } \/\/\/<Constructor.$/;"	f	class:JObjectGpu	access:public	signature:()
JObjectGpu::RunExceptionCuda	JObjectGpu.cpp	/^void JObjectGpu::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error)const{$/;"	f	class:JObjectGpu	signature:(const std::string &method,const std::string &msg,cudaError_t error) const
JObjectGpu::RunExceptionCuda	JObjectGpu.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error)const;$/;"	p	class:JObjectGpu	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error) const
JPartDataBi4	JPartDataBi4.cpp	/^JPartDataBi4::JPartDataBi4(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4	JPartDataBi4.h	/^  JPartDataBi4();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4	JPartDataBi4.h	/^class JPartDataBi4 : protected JObject$/;"	c	inherits:JObject
JPartDataBi4::AddPartData	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartData(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const byte     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUchar  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const byte *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const char     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatChar   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const char *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const double   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatDouble ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const double *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const float    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatFloat  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const float *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const int      *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatInt    ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const int *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const llong    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatLlong  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const llong *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const short    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatShort  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const short *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tdouble3 *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatDouble3,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tdouble3 *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tfloat3  *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatFloat3 ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tfloat3 *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tint3    *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatInt3   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tint3 *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const tuint3   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUint3  ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const tuint3 *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const ullong   *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUllong ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const ullong *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const unsigned *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUint   ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const unsigned *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(const std::string &name,unsigned npok,const word     *v,bool externalpointer=true){  AddPartDataVar(name,JBinaryDataDef::DatUshort ,npok,(const void *)v,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(const std::string &name,unsigned npok,const word *v,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const ullong   *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,NULL,idpd,NULL,posd,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const ullong   *idpd,const tfloat3  *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,NULL,idpd,pos ,NULL,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const ullong *idpd,const tfloat3 *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp, const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,idp ,NULL,NULL,posd,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const unsigned *idp, const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp, const tfloat3  *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true){  AddPartData(npok,idp ,NULL,pos ,NULL,vel,rhop,externalpointer);  }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned npok,const unsigned *idp, const tfloat3 *pos, const tfloat3 *vel,const float *rhop,bool externalpointer=true)
JPartDataBi4::AddPartData	JPartDataBi4.h	/^  void AddPartData(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:private	signature:(unsigned npok,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,bool externalpointer=true)
JPartDataBi4::AddPartDataSplitting	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartDataSplitting(unsigned npok,const float *mass,const float *hvar,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(unsigned npok,const float *mass,const float *hvar,bool externalpointer)
JPartDataBi4::AddPartDataSplitting	JPartDataBi4.h	/^  void AddPartDataSplitting(unsigned npok,const float *mass,const float *hvar,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned npok,const float *mass,const float *hvar,bool externalpointer=true)
JPartDataBi4::AddPartDataVar	JPartDataBi4.cpp	/^void JPartDataBi4::AddPartDataVar(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer){$/;"	f	class:JPartDataBi4	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer)
JPartDataBi4::AddPartDataVar	JPartDataBi4.h	/^  void AddPartDataVar(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer=true);$/;"	p	class:JPartDataBi4	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type,unsigned npok,const void *v,bool externalpointer=true)
JPartDataBi4::AddPartInfo	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::AddPartInfo(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal,ullong idmax){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal,ullong idmax)
JPartDataBi4::AddPartInfo	JPartDataBi4.h	/^  JBinaryData* AddPartInfo(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal=0,ullong idmax=0);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned cpart,double timestep,unsigned npok,unsigned nout,unsigned step,double runtime,tdouble3 domainmin,tdouble3 domainmax,ullong nptotal=0,ullong idmax=0)
JPartDataBi4::ArrayExists	JPartDataBi4.cpp	/^bool JPartDataBi4::ArrayExists(std::string name)const{$/;"	f	class:JPartDataBi4	signature:(std::string name) const
JPartDataBi4::ArrayExists	JPartDataBi4.h	/^  bool ArrayExists(std::string name)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name) const
JPartDataBi4::ArrayName	JPartDataBi4.cpp	/^std::string JPartDataBi4::ArrayName(unsigned num)const{$/;"	f	class:JPartDataBi4	signature:(unsigned num) const
JPartDataBi4::ArrayName	JPartDataBi4.h	/^  std::string ArrayName(unsigned num)const;$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned num) const
JPartDataBi4::ArrayTriple	JPartDataBi4.cpp	/^bool JPartDataBi4::ArrayTriple(unsigned num)const{$/;"	f	class:JPartDataBi4	signature:(unsigned num) const
JPartDataBi4::ArrayTriple	JPartDataBi4.h	/^  bool ArrayTriple(unsigned num)const;$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned num) const
JPartDataBi4::ArraysCount	JPartDataBi4.cpp	/^unsigned JPartDataBi4::ArraysCount()const{$/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::ArraysCount	JPartDataBi4.h	/^  unsigned ArraysCount()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Config	JPartDataBi4.cpp	/^void JPartDataBi4::Config(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* phead){$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* phead)
JPartDataBi4::Config	JPartDataBi4.h	/^  void Config(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* parthead);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece,unsigned npiece,std::string dir,const JPartDataHead* parthead)
JPartDataBi4::ConfigBasic	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigBasic(unsigned piece,unsigned npiece,std::string runcode$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece,std::string runcode ,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir)
JPartDataBi4::ConfigBasic	JPartDataBi4.h	/^  void ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,std::string casename,bool data2d,double data2dposy,const std::string &dir)
JPartDataBi4::ConfigCtes	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigCtes(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid){$/;"	f	class:JPartDataBi4	signature:(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid)
JPartDataBi4::ConfigCtes	JPartDataBi4.h	/^  void ConfigCtes(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid);$/;"	p	class:JPartDataBi4	access:public	signature:(double dp,double h,double b,double rhop0,double gamma,double massbound,double massfluid)
JPartDataBi4::ConfigParticles	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic,bool reuseids){$/;"	f	class:JPartDataBi4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic,bool reuseids)
JPartDataBi4::ConfigParticles	JPartDataBi4.h	/^  void ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic=false,bool reuseids=false);$/;"	p	class:JPartDataBi4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,tdouble3 caseposmin,tdouble3 caseposmax,bool npdynamic=false,bool reuseids=false)
JPartDataBi4::ConfigSimDiv	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimDiv(TpAxisDiv axisdiv){$/;"	f	class:JPartDataBi4	signature:(TpAxisDiv axisdiv)
JPartDataBi4::ConfigSimDiv	JPartDataBi4.h	/^  void ConfigSimDiv(TpAxisDiv axisdiv);$/;"	p	class:JPartDataBi4	access:public	signature:(TpAxisDiv axisdiv)
JPartDataBi4::ConfigSimMap	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax){$/;"	f	class:JPartDataBi4	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
JPartDataBi4::ConfigSimMap	JPartDataBi4.h	/^  void ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax);$/;"	p	class:JPartDataBi4	access:public	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
JPartDataBi4::ConfigSimPeri	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc){$/;"	f	class:JPartDataBi4	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
JPartDataBi4::ConfigSimPeri	JPartDataBi4.h	/^  void ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc);$/;"	p	class:JPartDataBi4	access:public	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
JPartDataBi4::ConfigSplitting	JPartDataBi4.cpp	/^void JPartDataBi4::ConfigSplitting(bool splitting){$/;"	f	class:JPartDataBi4	signature:(bool splitting)
JPartDataBi4::ConfigSplitting	JPartDataBi4.h	/^  void ConfigSplitting(bool splitting);$/;"	p	class:JPartDataBi4	access:public	signature:(bool splitting)
JPartDataBi4::Cpart	JPartDataBi4.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::DIV_None	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
JPartDataBi4::DIV_Unknown	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
JPartDataBi4::DIV_X	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
JPartDataBi4::DIV_Y	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
JPartDataBi4::DIV_Z	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	e	enum:JPartDataBi4::__anon19
JPartDataBi4::Data	JPartDataBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::Dir	JPartDataBi4.h	/^  std::string Dir;   \/\/\/<Directorio de datos. Data Directory.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::FormatVer	JPartDataBi4.h	/^  unsigned FormatVer;        \/\/\/<Version de formato. Version of format.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::FormatVerDef	JPartDataBi4.h	/^  static const unsigned FormatVerDef=130825;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::GetAllocMemory	JPartDataBi4.cpp	/^long long JPartDataBi4::GetAllocMemory()const{  $/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::GetAllocMemory	JPartDataBi4.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::GetArray	JPartDataBi4.cpp	/^JBinaryDataArray* JPartDataBi4::GetArray(std::string name)const{$/;"	f	class:JPartDataBi4	signature:(std::string name) const
JPartDataBi4::GetArray	JPartDataBi4.cpp	/^JBinaryDataArray* JPartDataBi4::GetArray(std::string name,JBinaryDataDef::TpData type)const{$/;"	f	class:JPartDataBi4	signature:(std::string name,JBinaryDataDef::TpData type) const
JPartDataBi4::GetArray	JPartDataBi4.h	/^  JBinaryDataArray* GetArray(std::string name)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name) const
JPartDataBi4::GetArray	JPartDataBi4.h	/^  JBinaryDataArray* GetArray(std::string name,JBinaryDataDef::TpData type)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string name,JBinaryDataDef::TpData type) const
JPartDataBi4::GetData	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::GetData()const{$/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::GetData	JPartDataBi4.h	/^  JBinaryData* GetData()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::GetFileData	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileData(std::string casename,std::string dirname,unsigned cpart,byte &npiece){$/;"	f	class:JPartDataBi4	signature:(std::string casename,std::string dirname,unsigned cpart,byte &npiece)
JPartDataBi4::GetFileData	JPartDataBi4.h	/^  static std::string GetFileData(std::string casename,std::string dirname,unsigned cpart,byte &npiece);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string casename,std::string dirname,unsigned cpart,byte &npiece)
JPartDataBi4::GetFileNameCase	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNameCase(const std::string &casename,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(const std::string &casename,unsigned piece,unsigned npiece)
JPartDataBi4::GetFileNameCase	JPartDataBi4.h	/^  static std::string GetFileNameCase(const std::string &casename,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(const std::string &casename,unsigned piece=0,unsigned npiece=1)
JPartDataBi4::GetFileNameInfo	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNameInfo(unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(unsigned piece,unsigned npiece)
JPartDataBi4::GetFileNameInfo	JPartDataBi4.h	/^  static std::string GetFileNameInfo(unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned piece=0,unsigned npiece=1)
JPartDataBi4::GetFileNamePart	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetFileNamePart(unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart,unsigned piece,unsigned npiece)
JPartDataBi4::GetFileNamePart	JPartDataBi4.h	/^  static std::string GetFileNamePart(unsigned cpart,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(unsigned cpart,unsigned piece=0,unsigned npiece=1)
JPartDataBi4::GetNamePart	JPartDataBi4.cpp	/^std::string JPartDataBi4::GetNamePart(unsigned cpart){$/;"	f	class:JPartDataBi4	signature:(unsigned cpart)
JPartDataBi4::GetNamePart	JPartDataBi4.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartDataBi4	access:private	signature:(unsigned cpart)
JPartDataBi4::GetNpiece	JPartDataBi4.h	/^  unsigned GetNpiece()const{ return(Npiece); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::GetPart	JPartDataBi4.cpp	/^JBinaryData* JPartDataBi4::GetPart()const{$/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::GetPart	JPartDataBi4.h	/^  JBinaryData* GetPart()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::GetPiece	JPartDataBi4.h	/^  unsigned GetPiece()const{ return(Piece); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::GetPiecesFile	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFile(std::string file)const{$/;"	f	class:JPartDataBi4	signature:(std::string file) const
JPartDataBi4::GetPiecesFile	JPartDataBi4.h	/^  unsigned GetPiecesFile(std::string file)const;$/;"	p	class:JPartDataBi4	access:private	signature:(std::string file) const
JPartDataBi4::GetPiecesFileCase	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFileCase(std::string dir,std::string casename)const{$/;"	f	class:JPartDataBi4	signature:(std::string dir,std::string casename) const
JPartDataBi4::GetPiecesFileCase	JPartDataBi4.h	/^  unsigned GetPiecesFileCase(std::string dir,std::string casename)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,std::string casename) const
JPartDataBi4::GetPiecesFilePart	JPartDataBi4.cpp	/^unsigned JPartDataBi4::GetPiecesFilePart(std::string dir,unsigned cpart)const{$/;"	f	class:JPartDataBi4	signature:(std::string dir,unsigned cpart) const
JPartDataBi4::GetPiecesFilePart	JPartDataBi4.h	/^  unsigned GetPiecesFilePart(std::string dir,unsigned cpart)const;$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,unsigned cpart) const
JPartDataBi4::Get_AppName	JPartDataBi4.h	/^  std::string Get_AppName()const{ return(GetData()->GetvText("AppName")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_ArrayCount	JPartDataBi4.h	/^  unsigned Get_ArrayCount(std::string name)const{ return(GetArray(name)->GetCount()); }$/;"	f	class:JPartDataBi4	access:public	signature:(std::string name) const
JPartDataBi4::Get_AxisDiv	JPartDataBi4.h	/^  TpAxisDiv Get_AxisDiv()const{   return((TpAxisDiv)GetData()->GetvInt("AxisDiv")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_B	JPartDataBi4.h	/^  double Get_B()const{            return(GetData()->GetvDouble("B"));          }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseName	JPartDataBi4.h	/^  std::string Get_CaseName()const{return(GetData()->GetvText("CaseName",true,"")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseNfixed	JPartDataBi4.h	/^  ullong Get_CaseNfixed()const{   return(GetData()->GetvUllong("CaseNfixed"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseNfloat	JPartDataBi4.h	/^  ullong Get_CaseNfloat()const{   return(GetData()->GetvUllong("CaseNfloat"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseNfluid	JPartDataBi4.h	/^  ullong Get_CaseNfluid()const{   return(GetData()->GetvUllong("CaseNfluid"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseNmoving	JPartDataBi4.h	/^  ullong Get_CaseNmoving()const{  return(GetData()->GetvUllong("CaseNmoving")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CaseNp	JPartDataBi4.h	/^  ullong Get_CaseNp()const{       return(GetData()->GetvUllong("CaseNp"));      } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CasePosMax	JPartDataBi4.h	/^  tdouble3 Get_CasePosMax()const{ return(GetData()->GetvDouble3("CasePosMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_CasePosMin	JPartDataBi4.h	/^  tdouble3 Get_CasePosMin()const{ return(GetData()->GetvDouble3("CasePosMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Data2d	JPartDataBi4.h	/^  bool Get_Data2d()const{         return(GetData()->GetvBool("Data2d"));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Data2dPosY	JPartDataBi4.h	/^  double Get_Data2dPosY()const{   return(GetData()->GetvDouble("Data2dPosY",true,DBL_MAX));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Date	JPartDataBi4.h	/^  std::string Get_Date()const{    return(GetData()->GetvText("Date"));    } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_DomainMax	JPartDataBi4.h	/^  tdouble3 Get_DomainMax()const{  return(GetPart()->GetvDouble3("DomainMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_DomainMin	JPartDataBi4.h	/^  tdouble3 Get_DomainMin()const{  return(GetPart()->GetvDouble3("DomainMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Dp	JPartDataBi4.h	/^  double Get_Dp()const{           return(GetData()->GetvDouble("Dp"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Gamma	JPartDataBi4.h	/^  double Get_Gamma()const{        return(GetData()->GetvDouble("Gamma"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_H	JPartDataBi4.h	/^  double Get_H()const{            return(GetData()->GetvDouble("H"));          }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Hvar	JPartDataBi4.h	/^  unsigned Get_Hvar (unsigned size,float    *data)const{ return(GetArray("Hvar",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
JPartDataBi4::Get_IdMax	JPartDataBi4.h	/^  ullong Get_IdMax()const{        return(GetPart()->GetvUllong("IdMax"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Idp	JPartDataBi4.h	/^  unsigned Get_Idp  (unsigned size,unsigned *data)const{ return(GetArray("Idp" ,JBinaryDataDef::DatUint   )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,unsigned *data) const
JPartDataBi4::Get_IdpSimple	JPartDataBi4.h	/^  bool Get_IdpSimple()const{ return(ArrayExists("Idp")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Idpd	JPartDataBi4.h	/^  unsigned Get_Idpd (unsigned size,ullong   *data)const{ return(GetArray("Idpd",JBinaryDataDef::DatUllong )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,ullong *data) const
JPartDataBi4::Get_MapPosMax	JPartDataBi4.h	/^  tdouble3 Get_MapPosMax()const{  return(GetData()->GetvDouble3("MapPosMax")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_MapPosMin	JPartDataBi4.h	/^  tdouble3 Get_MapPosMin()const{  return(GetData()->GetvDouble3("MapPosMin")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Mass	JPartDataBi4.h	/^  unsigned Get_Mass (unsigned size,float    *data)const{ return(GetArray("Mass",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
JPartDataBi4::Get_MassBound	JPartDataBi4.h	/^  double Get_MassBound()const{    return(GetData()->GetvDouble("MassBound"));  }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_MassFluid	JPartDataBi4.h	/^  double Get_MassFluid()const{    return(GetData()->GetvDouble("MassFluid"));  }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Nout	JPartDataBi4.h	/^  unsigned Get_Nout()const{       return(GetPart()->GetvUint("Nout"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_NpDynamic	JPartDataBi4.h	/^  bool Get_NpDynamic()const{      return(GetData()->GetvBool("NpDynamic",true,false));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_NpTotal	JPartDataBi4.h	/^  ullong Get_NpTotal()const{      return(GetPart()->GetvUllong("NpTotal"));    }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Npok	JPartDataBi4.h	/^  unsigned Get_Npok()const{       return(GetPart()->GetvUint("Npok"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Particles2dPosY	JPartDataBi4.cpp	/^double JPartDataBi4::Get_Particles2dPosY()const{$/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::Get_Particles2dPosY	JPartDataBi4.h	/^  double Get_Particles2dPosY()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_PeriMode	JPartDataBi4.cpp	/^TpPeri JPartDataBi4::Get_PeriMode()const{$/;"	f	class:JPartDataBi4	signature:() const
JPartDataBi4::Get_PeriMode	JPartDataBi4.h	/^  TpPeri Get_PeriMode()const;$/;"	p	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_PeriXinc	JPartDataBi4.h	/^  tdouble3 Get_PeriXinc()const{   return(GetData()->GetvDouble3("PeriXinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_PeriYinc	JPartDataBi4.h	/^  tdouble3 Get_PeriYinc()const{   return(GetData()->GetvDouble3("PeriYinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_PeriZinc	JPartDataBi4.h	/^  tdouble3 Get_PeriZinc()const{   return(GetData()->GetvDouble3("PeriZinc"));       }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Pos	JPartDataBi4.h	/^  unsigned Get_Pos  (unsigned size,tfloat3  *data)const{ return(GetArray("Pos" ,JBinaryDataDef::DatFloat3 )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tfloat3 *data) const
JPartDataBi4::Get_PosSimple	JPartDataBi4.h	/^  bool Get_PosSimple()const{ return(ArrayExists("Pos")); }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Posd	JPartDataBi4.h	/^  unsigned Get_Posd (unsigned size,tdouble3 *data)const{ return(GetArray("Posd",JBinaryDataDef::DatDouble3)->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tdouble3 *data) const
JPartDataBi4::Get_ReuseIds	JPartDataBi4.h	/^  bool Get_ReuseIds()const{       return(GetData()->GetvBool("ReuseIds",true,false));   } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Rhop	JPartDataBi4.h	/^  unsigned Get_Rhop (unsigned size,float    *data)const{ return(GetArray("Rhop",JBinaryDataDef::DatFloat  )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,float *data) const
JPartDataBi4::Get_Rhop0	JPartDataBi4.h	/^  double Get_Rhop0()const{        return(GetData()->GetvDouble("Rhop0"));      }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_RunCode	JPartDataBi4.h	/^  std::string Get_RunCode()const{ return(GetData()->GetvText("RunCode")); } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_RunTime	JPartDataBi4.h	/^  double Get_RunTime()const{      return(GetPart()->GetvDouble("RunTime"));    }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Splitting	JPartDataBi4.h	/^  bool Get_Splitting()const{      return(GetData()->GetvBool("Splitting",true,false));  } $/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Step	JPartDataBi4.h	/^  unsigned Get_Step()const{       return(GetPart()->GetvUint("Step"));         }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_TimeStep	JPartDataBi4.h	/^  double Get_TimeStep()const{     return(GetPart()->GetvDouble("TimeStep"));   }$/;"	f	class:JPartDataBi4	access:public	signature:() const
JPartDataBi4::Get_Vel	JPartDataBi4.h	/^  unsigned Get_Vel  (unsigned size,tfloat3  *data)const{ return(GetArray("Vel" ,JBinaryDataDef::DatFloat3 )->GetDataCopy(size,data)); }$/;"	f	class:JPartDataBi4	access:public	signature:(unsigned size,tfloat3 *data) const
JPartDataBi4::JPartDataBi4	JPartDataBi4.cpp	/^JPartDataBi4::JPartDataBi4(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::JPartDataBi4	JPartDataBi4.h	/^  JPartDataBi4();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::LoadFileCase	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFileCase(std::string dir,std::string casename,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string dir,std::string casename,unsigned piece,unsigned npiece)
JPartDataBi4::LoadFileCase	JPartDataBi4.h	/^  void LoadFileCase(std::string dir,std::string casename,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,std::string casename,unsigned piece=0,unsigned npiece=1)
JPartDataBi4::LoadFileData	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFileData(std::string file,unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string file,unsigned cpart,unsigned piece,unsigned npiece)
JPartDataBi4::LoadFileData	JPartDataBi4.h	/^  void LoadFileData(std::string file,unsigned cpart,unsigned piece,unsigned npiece);$/;"	p	class:JPartDataBi4	access:private	signature:(std::string file,unsigned cpart,unsigned piece,unsigned npiece)
JPartDataBi4::LoadFilePart	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFilePart(std::string dir,unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string dir,unsigned cpart,unsigned piece,unsigned npiece)
JPartDataBi4::LoadFilePart	JPartDataBi4.h	/^  void LoadFilePart(std::string dir,unsigned cpart,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,unsigned cpart,unsigned piece=0,unsigned npiece=1)
JPartDataBi4::Npiece	JPartDataBi4.h	/^  unsigned Npiece;   \/\/\/<Numero total de partes. Number of total parts.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::Part	JPartDataBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de particulas). It belongs to Data, and stores information about a part (including data of particles).$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::Piece	JPartDataBi4.h	/^  unsigned Piece;    \/\/\/<Numero de parte. Part number.$/;"	m	class:JPartDataBi4	access:private
JPartDataBi4::Reset	JPartDataBi4.cpp	/^void JPartDataBi4::Reset(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::Reset	JPartDataBi4.h	/^  void Reset();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::ResetData	JPartDataBi4.cpp	/^void JPartDataBi4::ResetData(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::ResetData	JPartDataBi4.h	/^  void ResetData();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::ResetPart	JPartDataBi4.cpp	/^void JPartDataBi4::ResetPart(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::ResetPart	JPartDataBi4.h	/^  void ResetPart();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::SaveFileCase	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileCase(std::string casename){$/;"	f	class:JPartDataBi4	signature:(std::string casename)
JPartDataBi4::SaveFileCase	JPartDataBi4.h	/^  void SaveFileCase(std::string casename);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string casename)
JPartDataBi4::SaveFileData	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileData(std::string fname){$/;"	f	class:JPartDataBi4	signature:(std::string fname)
JPartDataBi4::SaveFileData	JPartDataBi4.h	/^  void SaveFileData(std::string fname);$/;"	p	class:JPartDataBi4	access:private	signature:(std::string fname)
JPartDataBi4::SaveFileInfo	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileInfo(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::SaveFileInfo	JPartDataBi4.h	/^  void SaveFileInfo();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::SaveFilePart	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFilePart(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::SaveFilePart	JPartDataBi4.h	/^  void SaveFilePart();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataBi4::TpAxisDiv	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	t	class:JPartDataBi4	typeref:enum:JPartDataBi4::__anon19	access:public
JPartDataBi4::~JPartDataBi4	JPartDataBi4.cpp	/^JPartDataBi4::~JPartDataBi4(){$/;"	f	class:JPartDataBi4	signature:()
JPartDataBi4::~JPartDataBi4	JPartDataBi4.h	/^  ~JPartDataBi4();$/;"	p	class:JPartDataBi4	access:public	signature:()
JPartDataHead	JPartDataHead.cpp	/^JPartDataHead::JPartDataHead(){$/;"	f	class:JPartDataHead	signature:()
JPartDataHead	JPartDataHead.h	/^  JPartDataHead();$/;"	p	class:JPartDataHead	access:public	signature:()
JPartDataHead	JPartDataHead.h	/^class JPartDataHead : protected JObject$/;"	c	inherits:JObject
JPartDataHead::AppName	JPartDataHead.h	/^  std::string AppName;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::B	JPartDataHead.h	/^  double B;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseName	JPartDataHead.h	/^  std::string CaseName;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseNfixed	JPartDataHead.h	/^  unsigned CaseNfixed;   \/\/\/<Number of fixed boundary particles. $/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseNfloat	JPartDataHead.h	/^  unsigned CaseNfloat;   \/\/\/<Number of floating boundary particles. $/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseNfluid	JPartDataHead.h	/^  unsigned CaseNfluid;   \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseNmoving	JPartDataHead.h	/^  unsigned CaseNmoving;  \/\/\/<Number of moving boundary particles. $/;"	m	class:JPartDataHead	access:private
JPartDataHead::CaseNp	JPartDataHead.h	/^  unsigned CaseNp;       \/\/\/<Number of total particles of initial PART.  $/;"	m	class:JPartDataHead	access:private
JPartDataHead::CasePosMax	JPartDataHead.h	/^  tdouble3 CasePosMax;   \/\/\/<Upper particle limit of the case in the initial instant.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::CasePosMin	JPartDataHead.h	/^  tdouble3 CasePosMin;   \/\/\/<Lower particle limit of the case in the initial instant.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::ConfigBasic	JPartDataHead.cpp	/^void JPartDataHead::ConfigBasic(std::string runcode,std::string appname$/;"	f	class:JPartDataHead	signature:(std::string runcode,std::string appname ,std::string casename,tdouble3 caseposmin,tdouble3 caseposmax ,bool data2d,double data2dposy,unsigned npieces,unsigned firstpart)
JPartDataHead::ConfigBasic	JPartDataHead.h	/^  void ConfigBasic(std::string runcode,std::string appname$/;"	p	class:JPartDataHead	access:public	signature:(std::string runcode,std::string appname ,std::string casename,tdouble3 caseposmin,tdouble3 caseposmax ,bool data2d,double data2dposy,unsigned npieces,unsigned firstpart)
JPartDataHead::ConfigCtes	JPartDataHead.cpp	/^void JPartDataHead::ConfigCtes(double dp,double h,double b,double rhop0,double gamma$/;"	f	class:JPartDataHead	signature:(double dp,double h,double b,double rhop0,double gamma ,double massbound,double massfluid,tfloat3 gravity)
JPartDataHead::ConfigCtes	JPartDataHead.h	/^  void ConfigCtes(double dp,double h,double b,double rhop0,double gamma$/;"	p	class:JPartDataHead	access:public	signature:(double dp,double h,double b,double rhop0,double gamma ,double massbound,double massfluid,tfloat3 gravity)
JPartDataHead::ConfigParticles	JPartDataHead.cpp	/^void JPartDataHead::ConfigParticles(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count){$/;"	f	class:JPartDataHead	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
JPartDataHead::ConfigParticles	JPartDataHead.h	/^  void ConfigParticles(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count);$/;"	p	class:JPartDataHead	access:public	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
JPartDataHead::ConfigSimMap	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax){$/;"	f	class:JPartDataHead	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
JPartDataHead::ConfigSimMap	JPartDataHead.h	/^  void ConfigSimMap(tdouble3 mapposmin,tdouble3 mapposmax);$/;"	p	class:JPartDataHead	access:public	signature:(tdouble3 mapposmin,tdouble3 mapposmax)
JPartDataHead::ConfigSimNp	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimNp(bool npdynamic,bool reuseids){$/;"	f	class:JPartDataHead	signature:(bool npdynamic,bool reuseids)
JPartDataHead::ConfigSimNp	JPartDataHead.h	/^  void ConfigSimNp(bool npdynamic=false,bool reuseids=false);$/;"	p	class:JPartDataHead	access:public	signature:(bool npdynamic=false,bool reuseids=false)
JPartDataHead::ConfigSimPeri	JPartDataHead.cpp	/^void JPartDataHead::ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc){$/;"	f	class:JPartDataHead	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
JPartDataHead::ConfigSimPeri	JPartDataHead.h	/^  void ConfigSimPeri(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc);$/;"	p	class:JPartDataHead	access:public	signature:(TpPeri tperi,tdouble3 perixinc,tdouble3 periyinc,tdouble3 perizinc)
JPartDataHead::ConfigSplitting	JPartDataHead.cpp	/^void JPartDataHead::ConfigSplitting(bool splitting){$/;"	f	class:JPartDataHead	signature:(bool splitting)
JPartDataHead::ConfigSplitting	JPartDataHead.h	/^  void ConfigSplitting(bool splitting);$/;"	p	class:JPartDataHead	access:public	signature:(bool splitting)
JPartDataHead::ConfigVisco	JPartDataHead.cpp	/^void JPartDataHead::ConfigVisco(JPartDataHead::TpVisco type,float value,float boundfactor){$/;"	f	class:JPartDataHead	signature:(JPartDataHead::TpVisco type,float value,float boundfactor)
JPartDataHead::ConfigVisco	JPartDataHead.h	/^  void ConfigVisco(JPartDataHead::TpVisco type,float value,float boundfactor);$/;"	p	class:JPartDataHead	access:public	signature:(JPartDataHead::TpVisco type,float value,float boundfactor)
JPartDataHead::Data2d	JPartDataHead.h	/^  bool Data2d;           \/\/\/<Toggles 2D simulation.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Data2dPosY	JPartDataHead.h	/^  double Data2dPosY;     \/\/\/<Y value in 2D simulations.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Date	JPartDataHead.h	/^  std::string Date;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::DirData	JPartDataHead.h	/^  std::string DirData;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Dp	JPartDataHead.h	/^  double Dp;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::FirstPart	JPartDataHead.h	/^  unsigned FirstPart;    \/\/\/<First PART number.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::FmtVersion	JPartDataHead.h	/^  unsigned FmtVersion;    \/\/\/<Version de formato. Version of format.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::FmtVersionDef	JPartDataHead.h	/^  static const unsigned FmtVersionDef=180324;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Gamma	JPartDataHead.h	/^  double Gamma;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::GetAppName	JPartDataHead.h	/^  std::string GetAppName()   const{ return(AppName);    };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetB	JPartDataHead.h	/^  double GetB()        const{ return(B);         };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseName	JPartDataHead.h	/^  std::string GetCaseName()  const{ return(CaseName);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseNfixed	JPartDataHead.h	/^  unsigned GetCaseNfixed() const{ return(CaseNfixed);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseNfloat	JPartDataHead.h	/^  unsigned GetCaseNfloat() const{ return(CaseNfloat);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseNfluid	JPartDataHead.h	/^  unsigned GetCaseNfluid() const{ return(CaseNfluid);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseNmoving	JPartDataHead.h	/^  unsigned GetCaseNmoving()const{ return(CaseNmoving); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCaseNp	JPartDataHead.h	/^  unsigned GetCaseNp()     const{ return(CaseNp);      };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCasePosMax	JPartDataHead.h	/^  tdouble3 GetCasePosMax() const{ return(CasePosMax);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetCasePosMin	JPartDataHead.h	/^  tdouble3 GetCasePosMin() const{ return(CasePosMin);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetData2d	JPartDataHead.h	/^  bool        GetData2d()    const{ return(Data2d);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetData2dPosY	JPartDataHead.h	/^  double      GetData2dPosY()const{ return(Data2dPosY); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetDate	JPartDataHead.h	/^  std::string GetDate()      const{ return(Date);       };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetDp	JPartDataHead.h	/^  double GetDp()       const{ return(Dp);        };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetFileName	JPartDataHead.cpp	/^std::string JPartDataHead::GetFileName(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
JPartDataHead::GetFileName	JPartDataHead.h	/^  static std::string GetFileName(std::string dir="");$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir=Ó)
JPartDataHead::GetFirstPart	JPartDataHead.h	/^  unsigned    GetFirstPart() const{ return(FirstPart);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetGamma	JPartDataHead.h	/^  double GetGamma()    const{ return(Gamma);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetGravity	JPartDataHead.h	/^  tfloat3 GetGravity() const{ return(Gravity);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetH	JPartDataHead.h	/^  double GetH()        const{ return(H);         };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMapPosMax	JPartDataHead.h	/^  tdouble3 GetMapPosMax()const{ return(MapPosMax); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMapPosMin	JPartDataHead.h	/^  tdouble3 GetMapPosMin()const{ return(MapPosMin); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMassBound	JPartDataHead.h	/^  double GetMassBound()const{ return(MassBound); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMassFluid	JPartDataHead.h	/^  double GetMassFluid()const{ return(MassFluid); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMkBlockById	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockById(unsigned id)const{$/;"	f	class:JPartDataHead	signature:(unsigned id) const
JPartDataHead::GetMkBlockById	JPartDataHead.h	/^  inline unsigned GetMkBlockById(unsigned id)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned id) const
JPartDataHead::GetMkBlockByMk	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMk(unsigned mk)const{$/;"	f	class:JPartDataHead	signature:(unsigned mk) const
JPartDataHead::GetMkBlockByMk	JPartDataHead.h	/^  unsigned GetMkBlockByMk(unsigned mk)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mk) const
JPartDataHead::GetMkBlockByMkBound	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMkBound(unsigned mkbound)const{$/;"	f	class:JPartDataHead	signature:(unsigned mkbound) const
JPartDataHead::GetMkBlockByMkBound	JPartDataHead.h	/^  unsigned GetMkBlockByMkBound(unsigned mkbound)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mkbound) const
JPartDataHead::GetMkBlockByMkFluid	JPartDataHead.cpp	/^unsigned JPartDataHead::GetMkBlockByMkFluid(unsigned mkfluid)const{$/;"	f	class:JPartDataHead	signature:(unsigned mkfluid) const
JPartDataHead::GetMkBlockByMkFluid	JPartDataHead.h	/^  unsigned GetMkBlockByMkFluid(unsigned mkfluid)const;$/;"	p	class:JPartDataHead	access:public	signature:(unsigned mkfluid) const
JPartDataHead::GetMkBoundFirst	JPartDataHead.h	/^  unsigned GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetMkFluidFirst	JPartDataHead.h	/^  unsigned GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetNpDynamic	JPartDataHead.h	/^  bool GetNpDynamic()const{ return(NpDynamic); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetNpiece	JPartDataHead.h	/^  unsigned    GetNpiece()    const{ return(Npiece);     };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetParticlesInfo	JPartDataHead.cpp	/^void JPartDataHead::GetParticlesInfo(std::vector<std::string> &out)const{$/;"	f	class:JPartDataHead	signature:(std::vector<std::string> &out) const
JPartDataHead::GetParticlesInfo	JPartDataHead.h	/^  void GetParticlesInfo(std::vector<std::string> &out)const;$/;"	p	class:JPartDataHead	access:public	signature:(std::vector<std::string> &out) const
JPartDataHead::GetPeriMode	JPartDataHead.h	/^  TpPeri GetPeriMode()const{ return(PeriMode); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetPeriXinc	JPartDataHead.h	/^  tdouble3 GetPeriXinc()const{ return(PeriXinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetPeriYinc	JPartDataHead.h	/^  tdouble3 GetPeriYinc()const{ return(PeriYinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetPeriZinc	JPartDataHead.h	/^  tdouble3 GetPeriZinc()const{ return(PeriZinc);   };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetReuseIds	JPartDataHead.h	/^  bool GetReuseIds() const{ return(ReuseIds);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetRhopZero	JPartDataHead.h	/^  double GetRhopZero() const{ return(RhopZero);  };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetRunCode	JPartDataHead.h	/^  std::string GetRunCode()   const{ return(RunCode);    };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetSplitting	JPartDataHead.h	/^  bool GetSplitting()const{ return(Splitting); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetViscoBoundFactor	JPartDataHead.h	/^  float   GetViscoBoundFactor()const{ return(ViscoBoundFactor); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetViscoType	JPartDataHead.h	/^  TpVisco GetViscoType()       const{ return(ViscoType);        };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::GetViscoValue	JPartDataHead.h	/^  float   GetViscoValue()      const{ return(ViscoValue);       };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::Gravity	JPartDataHead.h	/^  tfloat3 Gravity;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::H	JPartDataHead.h	/^  double H;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::JPartDataHead	JPartDataHead.cpp	/^JPartDataHead::JPartDataHead(){$/;"	f	class:JPartDataHead	signature:()
JPartDataHead::JPartDataHead	JPartDataHead.h	/^  JPartDataHead();$/;"	p	class:JPartDataHead	access:public	signature:()
JPartDataHead::LoadFile	JPartDataHead.cpp	/^void JPartDataHead::LoadFile(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
JPartDataHead::LoadFile	JPartDataHead.h	/^  void LoadFile(std::string dir);$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir)
JPartDataHead::MapPosMax	JPartDataHead.h	/^  tdouble3 MapPosMax;    \/\/\/<Upper limit of simulation + edge 2h if periodic conditions.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MapPosMin	JPartDataHead.h	/^  tdouble3 MapPosMin;    \/\/\/<Lower limit of simulation + edge 2h if periodic conditions.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MassBound	JPartDataHead.h	/^  double MassBound;  $/;"	m	class:JPartDataHead	access:private
JPartDataHead::MassFluid	JPartDataHead.h	/^  double MassFluid;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkBlockCount	JPartDataHead.h	/^  unsigned MkBlockCount()const{ return(MkListSize); };$/;"	f	class:JPartDataHead	access:public	signature:() const
JPartDataHead::MkBoundFirst	JPartDataHead.h	/^  unsigned MkBoundFirst; \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkFluidFirst	JPartDataHead.h	/^  unsigned MkFluidFirst; \/\/\/<First Mk for fluid blocks (Mk=MkFluid+MkFluidFirst).$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkList	JPartDataHead.h	/^  std::vector<JPartDataHeadMkBlock> MkList;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListBound	JPartDataHead.h	/^  unsigned MkListBound;  \/\/\/<Number of Mk blocks of boundary types. MkListBound=MkListFixed+MkListMoving+MkListFloat$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListFixed	JPartDataHead.h	/^  unsigned MkListFixed;  \/\/\/<Number of Mk blocks of fixed type.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListFloat	JPartDataHead.h	/^  unsigned MkListFloat;  \/\/\/<Number of Mk blocks of floating type.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListFluid	JPartDataHead.h	/^  unsigned MkListFluid;  \/\/\/<Number of Mk blocks of fluid type.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListMoving	JPartDataHead.h	/^  unsigned MkListMoving; \/\/\/<Number of Mk blocks of moving type.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::MkListSize	JPartDataHead.h	/^  unsigned MkListSize;   \/\/\/<Total number of Mk blocks.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Mkblock	JPartDataHead.h	/^  const JPartDataHeadMkBlock& Mkblock(unsigned c)const{ return(MkList[c]); }$/;"	f	class:JPartDataHead	access:public	signature:(unsigned c) const
JPartDataHead::NpDynamic	JPartDataHead.h	/^  bool NpDynamic;        \/\/\/<CaseNp can increase.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Npiece	JPartDataHead.h	/^  unsigned Npiece;       \/\/\/<Total number of file pieces.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::PeriMode	JPartDataHead.h	/^  TpPeri PeriMode;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::PeriXinc	JPartDataHead.h	/^  tdouble3 PeriXinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::PeriYinc	JPartDataHead.h	/^  tdouble3 PeriYinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::PeriZinc	JPartDataHead.h	/^  tdouble3 PeriZinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::Reset	JPartDataHead.cpp	/^void JPartDataHead::Reset(){$/;"	f	class:JPartDataHead	signature:()
JPartDataHead::Reset	JPartDataHead.h	/^  void Reset();$/;"	p	class:JPartDataHead	access:public	signature:()
JPartDataHead::ReuseIds	JPartDataHead.h	/^  bool ReuseIds;         \/\/\/<Id of particles excluded values ââare reused.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::RhopZero	JPartDataHead.h	/^  double RhopZero;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::RunCode	JPartDataHead.h	/^  std::string RunCode;$/;"	m	class:JPartDataHead	access:private
JPartDataHead::SaveFile	JPartDataHead.cpp	/^void JPartDataHead::SaveFile(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
JPartDataHead::SaveFile	JPartDataHead.h	/^  void SaveFile(std::string dir);$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir)
JPartDataHead::Splitting	JPartDataHead.h	/^  bool Splitting;        \/\/\/<Use of Splitting.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::TpVisco	JPartDataHead.h	/^  }TpVisco;            $/;"	t	class:JPartDataHead	typeref:enum:JPartDataHead::__anon20	access:public
JPartDataHead::UptadeMkNumbers	JPartDataHead.cpp	/^void JPartDataHead::UptadeMkNumbers(){$/;"	f	class:JPartDataHead	signature:()
JPartDataHead::UptadeMkNumbers	JPartDataHead.h	/^  void UptadeMkNumbers();$/;"	p	class:JPartDataHead	access:private	signature:()
JPartDataHead::VISCO_Artificial	JPartDataHead.h	/^    VISCO_Artificial=1,        \/\/\/<Artificial viscosity.$/;"	e	enum:JPartDataHead::__anon20
JPartDataHead::VISCO_LaminarSPS	JPartDataHead.h	/^    VISCO_LaminarSPS=2,        \/\/\/<Laminar viscosity and Sub-Partice Scale Turbulence.$/;"	e	enum:JPartDataHead::__anon20
JPartDataHead::VISCO_None	JPartDataHead.h	/^    VISCO_None=0 $/;"	e	enum:JPartDataHead::__anon20
JPartDataHead::ViscoBoundFactor	JPartDataHead.h	/^  float ViscoBoundFactor;\/\/\/<For boundary interaction use ViscoValue*ViscoBoundFactor.$/;"	m	class:JPartDataHead	access:private
JPartDataHead::ViscoType	JPartDataHead.h	/^  TpVisco ViscoType;     \/\/\/<Viscosity type: Artificial,... $/;"	m	class:JPartDataHead	access:private
JPartDataHead::ViscoValue	JPartDataHead.h	/^  float ViscoValue;      \/\/\/<Viscosity value. $/;"	m	class:JPartDataHead	access:private
JPartDataHead::VisuParticlesInfo	JPartDataHead.cpp	/^void JPartDataHead::VisuParticlesInfo()const{$/;"	f	class:JPartDataHead	signature:() const
JPartDataHead::VisuParticlesInfo	JPartDataHead.h	/^  void VisuParticlesInfo()const;$/;"	p	class:JPartDataHead	access:public	signature:() const
JPartDataHead::~JPartDataHead	JPartDataHead.cpp	/^JPartDataHead::~JPartDataHead(){$/;"	f	class:JPartDataHead	signature:()
JPartDataHead::~JPartDataHead	JPartDataHead.h	/^  ~JPartDataHead();$/;"	p	class:JPartDataHead	access:public	signature:()
JPartDataHeadMkBlock	JPartDataHead.h	/^  JPartDataHeadMkBlock(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)$/;"	f	class:JPartDataHeadMkBlock	access:public	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
JPartDataHeadMkBlock	JPartDataHead.h	/^class JPartDataHeadMkBlock$/;"	c
JPartDataHeadMkBlock::Begin	JPartDataHead.h	/^  unsigned Begin;     \/\/\/<Id of the first particle of the block.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartDataHeadMkBlock::Bound	JPartDataHead.h	/^  bool Bound;         \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartDataHeadMkBlock::Count	JPartDataHead.h	/^  unsigned Count;     \/\/\/<Number of particles.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartDataHeadMkBlock::JPartDataHeadMkBlock	JPartDataHead.h	/^  JPartDataHeadMkBlock(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)$/;"	f	class:JPartDataHeadMkBlock	access:public	signature:(TpParticles type,unsigned mk,unsigned mktype,unsigned begin,unsigned count)
JPartDataHeadMkBlock::Mk	JPartDataHead.h	/^  unsigned Mk;        \/\/\/<Absolute label.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartDataHeadMkBlock::MkType	JPartDataHead.h	/^  unsigned MkType;    \/\/\/<Label of block fluid or bound.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartDataHeadMkBlock::Type	JPartDataHead.h	/^  TpParticles Type;   \/\/\/<Type of particle.$/;"	m	class:JPartDataHeadMkBlock	access:public
JPartFloatBi4Load	JPartFloatBi4.cpp	/^JPartFloatBi4Load::JPartFloatBi4Load(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load	JPartFloatBi4.h	/^  JPartFloatBi4Load();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
JPartFloatBi4Load	JPartFloatBi4.h	/^class JPartFloatBi4Load : protected JObject$/;"	c	inherits:JObject
JPartFloatBi4Load::CheckArray	JPartFloatBi4.cpp	/^JBinaryDataArray* JPartFloatBi4Load::CheckArray(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type){$/;"	f	class:JPartFloatBi4Load	signature:(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type)
JPartFloatBi4Load::CheckArray	JPartFloatBi4.h	/^  JBinaryDataArray* CheckArray(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type);$/;"	p	class:JPartFloatBi4Load	access:private	signature:(JBinaryData *bd,const std::string &name,JBinaryDataDef::TpData type)
JPartFloatBi4Load::CheckFloating	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckFloating(unsigned cf)const{$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cf) const
JPartFloatBi4Load::CheckFloating	JPartFloatBi4.h	/^  void CheckFloating(unsigned cf)const;$/;"	p	class:JPartFloatBi4Load	access:private	signature:(unsigned cf) const
JPartFloatBi4Load::CheckHeadData	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass)
JPartFloatBi4Load::CheckHeadData	JPartFloatBi4.h	/^  void CheckHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass)
JPartFloatBi4Load::CheckPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::CheckPart()const{$/;"	f	class:JPartFloatBi4Load	signature:() const
JPartFloatBi4Load::CheckPart	JPartFloatBi4.h	/^  void CheckPart()const;$/;"	p	class:JPartFloatBi4Load	access:private	signature:() const
JPartFloatBi4Load::Data	JPartFloatBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::DemDtForce	JPartFloatBi4.h	/^  double DemDtForce;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::FirstPart	JPartFloatBi4.h	/^  unsigned FirstPart;     \/\/\/<Primer PART almacenado. First number of stored PART.$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::FormatVer	JPartFloatBi4.h	/^  unsigned FormatVer;    \/\/\/<Version de formato. Format version.$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::FormatVerDef	JPartFloatBi4.h	/^  static const unsigned FormatVerDef=180423;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::FtCount	JPartFloatBi4.h	/^  unsigned FtCount;       \/\/\/<Numero de floatings. Floating number$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::GetCount	JPartFloatBi4.h	/^  unsigned GetCount()const{ return(PartCount); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::GetFileNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Load::GetFileNamePart(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load::GetFileNamePart	JPartFloatBi4.h	/^  static std::string GetFileNamePart();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
JPartFloatBi4Load::GetFirstPart	JPartFloatBi4.h	/^  unsigned GetFirstPart()const{ return(FirstPart); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::GetFtCount	JPartFloatBi4.h	/^  unsigned GetFtCount()const{ return(FtCount); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::GetHeadBegin	JPartFloatBi4.h	/^  unsigned GetHeadBegin  (unsigned cf)const{ CheckFloating(cf); return(HeadBegin[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetHeadCount	JPartFloatBi4.h	/^  unsigned GetHeadCount  (unsigned cf)const{ CheckFloating(cf); return(HeadCount[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetHeadMass	JPartFloatBi4.h	/^  float    GetHeadMass   (unsigned cf)const{ CheckFloating(cf); return(HeadMass[cf]);    }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetHeadMk	JPartFloatBi4.h	/^  word     GetHeadMk     (unsigned cf)const{ return(MkBoundFirst+GetHeadMkbound(cf)); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetHeadMkbound	JPartFloatBi4.h	/^  word     GetHeadMkbound(unsigned cf)const{ CheckFloating(cf); return(HeadMkbound[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetHeadRadius	JPartFloatBi4.h	/^  float    GetHeadRadius (unsigned cf)const{ CheckFloating(cf); return(HeadRadius[cf]);  }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetMkBoundFirst	JPartFloatBi4.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::GetPartCenter	JPartFloatBi4.h	/^  tdouble3 GetPartCenter(unsigned cf)const{ CheckFloating(cf); return(PartCenter[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetPartDemDtForce	JPartFloatBi4.h	/^  double GetPartDemDtForce()const{ CheckPart(); return(DemDtForce); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::GetPartFomega	JPartFloatBi4.h	/^  tfloat3 GetPartFomega (unsigned cf)const{ CheckFloating(cf); return(PartFomega[cf]); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetPartFvel	JPartFloatBi4.h	/^  tfloat3 GetPartFvel   (unsigned cf)const{ CheckFloating(cf); return(PartFvel[cf]);   }$/;"	f	class:JPartFloatBi4Load	access:public	signature:(unsigned cf) const
JPartFloatBi4Load::GetPartTimeStep	JPartFloatBi4.h	/^  double GetPartTimeStep()const{ CheckPart(); return(TimeStep); }$/;"	f	class:JPartFloatBi4Load	access:public	signature:() const
JPartFloatBi4Load::HeadBegin	JPartFloatBi4.h	/^  unsigned *HeadBegin;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::HeadCount	JPartFloatBi4.h	/^  unsigned *HeadCount;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::HeadMass	JPartFloatBi4.h	/^  float *HeadMass;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::HeadMkbound	JPartFloatBi4.h	/^  word *HeadMkbound;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::HeadRadius	JPartFloatBi4.h	/^  float *HeadRadius;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::JPartFloatBi4Load	JPartFloatBi4.cpp	/^JPartFloatBi4Load::JPartFloatBi4Load(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load::JPartFloatBi4Load	JPartFloatBi4.h	/^  JPartFloatBi4Load();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
JPartFloatBi4Load::LoadFile	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::LoadFile(const std::string &dir){$/;"	f	class:JPartFloatBi4Load	signature:(const std::string &dir)
JPartFloatBi4Load::LoadFile	JPartFloatBi4.h	/^  void LoadFile(const std::string &dir);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(const std::string &dir)
JPartFloatBi4Load::LoadPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::LoadPart(unsigned cpart){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cpart)
JPartFloatBi4Load::LoadPart	JPartFloatBi4.h	/^  void LoadPart(unsigned cpart);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(unsigned cpart)
JPartFloatBi4Load::MkBoundFirst	JPartFloatBi4.h	/^  word MkBoundFirst;      \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::Part	JPartFloatBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de floatings). Belongs to data and stores information of a part (including data of floatings).$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::PartCenter	JPartFloatBi4.h	/^  tdouble3 *PartCenter;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::PartCount	JPartFloatBi4.h	/^  unsigned PartCount;     \/\/\/<Numero de PARTs. PARTs number$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::PartFomega	JPartFloatBi4.h	/^  tfloat3 *PartFomega;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::PartFvel	JPartFloatBi4.h	/^  tfloat3 *PartFvel;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::Reset	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::Reset(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load::Reset	JPartFloatBi4.h	/^  void Reset();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
JPartFloatBi4Load::ResetPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::ResetPart(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load::ResetPart	JPartFloatBi4.h	/^  void ResetPart();$/;"	p	class:JPartFloatBi4Load	access:private	signature:()
JPartFloatBi4Load::ResizeFtData	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::ResizeFtData(unsigned ftcount){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned ftcount)
JPartFloatBi4Load::ResizeFtData	JPartFloatBi4.h	/^  void ResizeFtData(unsigned ftcount);$/;"	p	class:JPartFloatBi4Load	access:private	signature:(unsigned ftcount)
JPartFloatBi4Load::TimeStep	JPartFloatBi4.h	/^  double TimeStep;$/;"	m	class:JPartFloatBi4Load	access:private
JPartFloatBi4Load::~JPartFloatBi4Load	JPartFloatBi4.cpp	/^JPartFloatBi4Load::~JPartFloatBi4Load(){$/;"	f	class:JPartFloatBi4Load	signature:()
JPartFloatBi4Load::~JPartFloatBi4Load	JPartFloatBi4.h	/^  ~JPartFloatBi4Load();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
JPartFloatBi4Save	JPartFloatBi4.cpp	/^JPartFloatBi4Save::JPartFloatBi4Save(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save	JPartFloatBi4.h	/^  JPartFloatBi4Save();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save	JPartFloatBi4.h	/^class JPartFloatBi4Save : protected JObject$/;"	c	inherits:JObject
JPartFloatBi4Save::AddHeadData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::AddHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius)
JPartFloatBi4Save::AddHeadData	JPartFloatBi4.h	/^  void AddHeadData(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cf,word mkbound,unsigned begin,unsigned count,float mass,float radius)
JPartFloatBi4Save::AddPartData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::AddPartData(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega)
JPartFloatBi4Save::AddPartData	JPartFloatBi4.h	/^  void AddPartData(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cf,const tdouble3 &center,const tfloat3 &fvel,const tfloat3 &fomega)
JPartFloatBi4Save::AddPartFloat	JPartFloatBi4.cpp	/^JBinaryData* JPartFloatBi4Save::AddPartFloat(unsigned cpart,double timestep,double demdtforce){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cpart,double timestep,double demdtforce)
JPartFloatBi4Save::AddPartFloat	JPartFloatBi4.h	/^  JBinaryData* AddPartFloat(unsigned cpart,double timestep,double demdtforce);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(unsigned cpart,double timestep,double demdtforce)
JPartFloatBi4Save::AppName	JPartFloatBi4.h	/^  std::string AppName;   \/\/\/<Nombre de aplicacion. Application Name.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::ClearPartData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ClearPartData(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::ClearPartData	JPartFloatBi4.h	/^  void ClearPartData();$/;"	p	class:JPartFloatBi4Save	access:private	signature:()
JPartFloatBi4Save::Config	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::Config(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount){$/;"	f	class:JPartFloatBi4Save	signature:(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount)
JPartFloatBi4Save::Config	JPartFloatBi4.h	/^  void Config(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount);$/;"	p	class:JPartFloatBi4Save	access:public	signature:(std::string appname,const std::string &dir,word mkboundfirst,unsigned ftcount)
JPartFloatBi4Save::Cpart	JPartFloatBi4.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::Data	JPartFloatBi4.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::Dir	JPartFloatBi4.h	/^  std::string Dir;       \/\/\/<Directorio de datos. Data Directory.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::FormatVer	JPartFloatBi4.h	/^  unsigned FormatVer;    \/\/\/<Version de formato. Format version.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::FormatVerDef	JPartFloatBi4.h	/^  static const unsigned FormatVerDef=180423;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::FtCount	JPartFloatBi4.h	/^  unsigned FtCount;      \/\/\/<Numero de floatings. Number of floats.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::GetAllocMemory	JPartFloatBi4.cpp	/^long long JPartFloatBi4Save::GetAllocMemory()const{  $/;"	f	class:JPartFloatBi4Save	signature:() const
JPartFloatBi4Save::GetAllocMemory	JPartFloatBi4.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartFloatBi4Save	access:public	signature:() const
JPartFloatBi4Save::GetFileNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Save::GetFileNamePart(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::GetFileNamePart	JPartFloatBi4.h	/^  static std::string GetFileNamePart();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::GetNamePart	JPartFloatBi4.cpp	/^std::string JPartFloatBi4Save::GetNamePart(unsigned cpart){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned cpart)
JPartFloatBi4Save::GetNamePart	JPartFloatBi4.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartFloatBi4Save	access:private	signature:(unsigned cpart)
JPartFloatBi4Save::HeadBegin	JPartFloatBi4.h	/^  unsigned *HeadBegin;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::HeadCount	JPartFloatBi4.h	/^  unsigned *HeadCount;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::HeadMass	JPartFloatBi4.h	/^  float *HeadMass;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::HeadMkbound	JPartFloatBi4.h	/^  word *HeadMkbound;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::HeadRadius	JPartFloatBi4.h	/^  float *HeadRadius;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::InitialSaved	JPartFloatBi4.h	/^  bool InitialSaved;     \/\/\/<Indica si se grabo la informacion de cabecera. Indicates if header information is recorded.$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::JPartFloatBi4Save	JPartFloatBi4.cpp	/^JPartFloatBi4Save::JPartFloatBi4Save(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::JPartFloatBi4Save	JPartFloatBi4.h	/^  JPartFloatBi4Save();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::MkBoundFirst	JPartFloatBi4.h	/^  word MkBoundFirst;     \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::Part	JPartFloatBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de floatings). Belongs to data and stores information of a part (including data of floatings).$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::PartCenter	JPartFloatBi4.h	/^  tdouble3 *PartCenter;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::PartFomega	JPartFloatBi4.h	/^  tfloat3 *PartFomega;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::PartFvel	JPartFloatBi4.h	/^  tfloat3 *PartFvel;$/;"	m	class:JPartFloatBi4Save	access:private
JPartFloatBi4Save::Reset	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::Reset(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::Reset	JPartFloatBi4.h	/^  void Reset();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::ResetData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResetData(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::ResetData	JPartFloatBi4.h	/^  void ResetData();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::ResetPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResetPart(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::ResetPart	JPartFloatBi4.h	/^  void ResetPart();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::ResizeFtData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResizeFtData(unsigned ftcount){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned ftcount)
JPartFloatBi4Save::ResizeFtData	JPartFloatBi4.h	/^  void ResizeFtData(unsigned ftcount);$/;"	p	class:JPartFloatBi4Save	access:private	signature:(unsigned ftcount)
JPartFloatBi4Save::SaveInitial	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::SaveInitial(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::SaveInitial	JPartFloatBi4.h	/^  void SaveInitial();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::SavePartFloat	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::SavePartFloat(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::SavePartFloat	JPartFloatBi4.h	/^  void SavePartFloat();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartFloatBi4Save::SavePartFloat	JPartFloatBi4.h	/^  void SavePartFloat(unsigned cpart,double timestep,double demdtforce){   AddPartFloat(cpart,timestep,demdtforce); SavePartFloat();   }$/;"	f	class:JPartFloatBi4Save	access:public	signature:(unsigned cpart,double timestep,double demdtforce)
JPartFloatBi4Save::~JPartFloatBi4Save	JPartFloatBi4.cpp	/^JPartFloatBi4Save::~JPartFloatBi4Save(){$/;"	f	class:JPartFloatBi4Save	signature:()
JPartFloatBi4Save::~JPartFloatBi4Save	JPartFloatBi4.h	/^  ~JPartFloatBi4Save();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
JPartOutBi4Save	JPartOutBi4Save.cpp	/^JPartOutBi4Save::JPartOutBi4Save(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save	JPartOutBi4Save.h	/^  JPartOutBi4Save();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save	JPartOutBi4Save.h	/^class JPartOutBi4Save : protected JObject$/;"	c	inherits:JObject
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.cpp	/^JBinaryData* JPartOutBi4Save::AddPartOut(unsigned cpart,double timestep,unsigned nout$/;"	f	class:JPartOutBi4Save	signature:(unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout$/;"	p	class:JPartOutBi4Save	access:private	signature:(unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const ullong *idpd,const tfloat3 *pos,const tdouble3 *posd ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,NULL,idpd,NULL,posd,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,NULL,idpd,pos ,NULL,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,idp ,NULL,NULL,posd,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::AddPartOut	JPartOutBi4Save.h	/^  JBinaryData* AddPartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  return(AddPartOut(cpart,timestep,nout,idp ,NULL,pos ,NULL,vel,rhop,motive));  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::BLOCKNOUTMAX	JPartOutBi4Save.h	/^  static const unsigned BLOCKNOUTMAX=2500000;  \/\/-Valor por defecto para BlockNoutMax. 2.5M (90-120 MB). Default value for BlockNoutMin.  2.5M (90-120 MB).$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::BLOCKNOUTMIN	JPartOutBi4Save.h	/^  static const unsigned BLOCKNOUTMIN=500000;      \/\/-Valor por defecto para BlockNoutMin. 0.5M (18-24 MB). Default value for BlockNoutMin. 0.5 M (18-24 MB).$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Block	JPartOutBi4Save.h	/^  unsigned Block;    \/\/\/<Numero de bloque. Block number.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::BlockNout	JPartOutBi4Save.h	/^  unsigned BlockNout;    \/\/\/<Numero de particulas exclidas ya grabadas en el bloque actual. Number of excluded particles already recorded in the current block.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::BlockNoutMax	JPartOutBi4Save.h	/^  unsigned BlockNoutMax; \/\/\/<Maximum number of particles that should geting in a block.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::BlockNoutMin	JPartOutBi4Save.h	/^  unsigned BlockNoutMin; \/\/\/<Numero minimo de particulas que se meten por bloque. Minimum number of particles that are are getting in a block.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::ConfigBasic	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir){$/;"	f	class:JPartOutBi4Save	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir)
JPartOutBi4Save::ConfigBasic	JPartOutBi4Save.h	/^  void ConfigBasic(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir);$/;"	p	class:JPartOutBi4Save	access:public	signature:(unsigned piece,unsigned npiece,std::string runcode,std::string appname,bool data2d,const std::string &dir)
JPartOutBi4Save::ConfigLimits	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigLimits(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax){$/;"	f	class:JPartOutBi4Save	signature:(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax)
JPartOutBi4Save::ConfigLimits	JPartOutBi4Save.h	/^  void ConfigLimits(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax);$/;"	p	class:JPartOutBi4Save	access:public	signature:(const tdouble3 &mapposmin,const tdouble3 &mapposmax,float rhopmin,float rhopmax)
JPartOutBi4Save::ConfigParticles	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid){$/;"	f	class:JPartOutBi4Save	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)
JPartOutBi4Save::ConfigParticles	JPartOutBi4Save.h	/^  void ConfigParticles(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid);$/;"	p	class:JPartOutBi4Save	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)
JPartOutBi4Save::Cpart	JPartOutBi4Save.h	/^  unsigned Cpart;    \/\/\/<Numero de PART. PART number.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Data	JPartOutBi4Save.h	/^  JBinaryData *Data;      \/\/\/<Almacena la informacion general de los datos (constante para cada PART). Stores general information of data (constant for each PART).$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Dir	JPartOutBi4Save.h	/^  std::string Dir;   \/\/\/<Directorio de datos. Data directory.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::FmtVersion	JPartOutBi4Save.h	/^  static const unsigned FmtVersion=180320;    \/\/\/<Version de formato by default. Version of format by default.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::GetAllocMemory	JPartOutBi4Save.cpp	/^long long JPartOutBi4Save::GetAllocMemory()const{  $/;"	f	class:JPartOutBi4Save	signature:() const
JPartOutBi4Save::GetAllocMemory	JPartOutBi4Save.h	/^  long long GetAllocMemory()const;$/;"	p	class:JPartOutBi4Save	access:public	signature:() const
JPartOutBi4Save::GetBlockNoutMax	JPartOutBi4Save.h	/^  unsigned GetBlockNoutMax()const{ return(BlockNoutMin); }$/;"	f	class:JPartOutBi4Save	access:public	signature:() const
JPartOutBi4Save::GetBlockNoutMin	JPartOutBi4Save.h	/^  unsigned GetBlockNoutMin()const{ return(BlockNoutMin); }$/;"	f	class:JPartOutBi4Save	access:public	signature:() const
JPartOutBi4Save::GetFileNamePart	JPartOutBi4Save.cpp	/^std::string JPartOutBi4Save::GetFileNamePart(unsigned block,unsigned piece,unsigned npiece){$/;"	f	class:JPartOutBi4Save	signature:(unsigned block,unsigned piece,unsigned npiece)
JPartOutBi4Save::GetFileNamePart	JPartOutBi4Save.h	/^  static std::string GetFileNamePart(unsigned block,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartOutBi4Save	access:public	signature:(unsigned block,unsigned piece=0,unsigned npiece=1)
JPartOutBi4Save::GetNamePart	JPartOutBi4Save.cpp	/^std::string JPartOutBi4Save::GetNamePart(unsigned cpart){$/;"	f	class:JPartOutBi4Save	signature:(unsigned cpart)
JPartOutBi4Save::GetNamePart	JPartOutBi4Save.h	/^  static std::string GetNamePart(unsigned cpart);$/;"	p	class:JPartOutBi4Save	access:private	signature:(unsigned cpart)
JPartOutBi4Save::InitialSaved	JPartOutBi4Save.h	/^  bool InitialSaved;     \/\/\/<Indica si se grabo la informacion de cabecera. Indicates if header information is recorded.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::JPartOutBi4Save	JPartOutBi4Save.cpp	/^JPartOutBi4Save::JPartOutBi4Save(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::JPartOutBi4Save	JPartOutBi4Save.h	/^  JPartOutBi4Save();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::Npiece	JPartOutBi4Save.h	/^  unsigned Npiece;   \/\/\/<Numero total de partes. Number total of parts.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Part	JPartOutBi4Save.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de particulas). Belongs to data and stores information of a part (including data for particles).$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Piece	JPartOutBi4Save.h	/^  unsigned Piece;    \/\/\/<Numero de parte. Part number.$/;"	m	class:JPartOutBi4Save	access:private
JPartOutBi4Save::Reset	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::Reset(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::Reset	JPartOutBi4Save.h	/^  void Reset();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::ResetData	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ResetData(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::ResetData	JPartOutBi4Save.h	/^  void ResetData();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::ResetPart	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ResetPart(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::ResetPart	JPartOutBi4Save.h	/^  void ResetPart();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::SaveInitial	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SaveInitial(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::SaveInitial	JPartOutBi4Save.h	/^  void SaveInitial();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SavePartOut(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SavePartOut(bool posdouble,unsigned cpart,double timestep,unsigned nout$/;"	f	class:JPartOutBi4Save	signature:(bool posdouble,unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel ,const float *rhop,const byte *motive)
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(bool posdouble,unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive);$/;"	p	class:JPartOutBi4Save	access:public	signature:(bool posdouble,unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,NULL,idpd,NULL,posd,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,NULL,idpd,pos ,NULL,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,idp ,NULL,NULL,posd,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,idp ,NULL,pos ,NULL,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
JPartOutBi4Save::SetBlockNoutMax	JPartOutBi4Save.h	/^  void SetBlockNoutMax(unsigned v){ BlockNoutMax=(v<250000u? 250000u: v); } $/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned v)
JPartOutBi4Save::SetBlockNoutMin	JPartOutBi4Save.h	/^  void SetBlockNoutMin(unsigned v){ BlockNoutMin=(v<50000u? 50000u: v); } $/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned v)
JPartOutBi4Save::~JPartOutBi4Save	JPartOutBi4Save.cpp	/^JPartOutBi4Save::~JPartOutBi4Save(){$/;"	f	class:JPartOutBi4Save	signature:()
JPartOutBi4Save::~JPartOutBi4Save	JPartOutBi4Save.h	/^  ~JPartOutBi4Save();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
JPartsLoad4	JPartsLoad4.cpp	/^JPartsLoad4::JPartsLoad4(bool useomp):UseOmp(useomp){$/;"	f	class:JPartsLoad4	signature:(bool useomp)
JPartsLoad4	JPartsLoad4.h	/^  JPartsLoad4(bool useomp);$/;"	p	class:JPartsLoad4	access:public	signature:(bool useomp)
JPartsLoad4	JPartsLoad4.h	/^class JPartsLoad4 : protected JObject$/;"	c	inherits:JObject
JPartsLoad4::AllocMemory	JPartsLoad4.cpp	/^void JPartsLoad4::AllocMemory(unsigned count){$/;"	f	class:JPartsLoad4	signature:(unsigned count)
JPartsLoad4::AllocMemory	JPartsLoad4.h	/^  void AllocMemory(unsigned count);$/;"	p	class:JPartsLoad4	access:protected	signature:(unsigned count)
JPartsLoad4::CalculateCasePos	JPartsLoad4.cpp	/^void JPartsLoad4::CalculateCasePos(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::CalculateCasePos	JPartsLoad4.h	/^  void CalculateCasePos();$/;"	p	class:JPartsLoad4	access:protected	signature:()
JPartsLoad4::CalculeLimits	JPartsLoad4.cpp	/^void JPartsLoad4::CalculeLimits(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax){$/;"	f	class:JPartsLoad4	signature:(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax)
JPartsLoad4::CalculeLimits	JPartsLoad4.h	/^  void CalculeLimits(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax);$/;"	p	class:JPartsLoad4	access:public	signature:(double border,double borderperi,bool perix,bool periy,bool periz,tdouble3 &mapmin,tdouble3 &mapmax)
JPartsLoad4::CaseNfixed	JPartsLoad4.h	/^  ullong CaseNfixed;       \/\/\/<Number of fixed boundary particles. $/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CaseNfloat	JPartsLoad4.h	/^  ullong CaseNfloat;       \/\/\/<Number of floating boundary particles. $/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CaseNfluid	JPartsLoad4.h	/^  ullong CaseNfluid;       \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CaseNmoving	JPartsLoad4.h	/^  ullong CaseNmoving;      \/\/\/<Number of moving boundary particles. $/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CaseNp	JPartsLoad4.h	/^  ullong CaseNp;           \/\/\/<Number of total particles.  $/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CasePosMax	JPartsLoad4.h	/^  tdouble3 CasePosMin,CasePosMax;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CasePosMin	JPartsLoad4.h	/^  tdouble3 CasePosMin,CasePosMax;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::CheckConfig	JPartsLoad4.cpp	/^void JPartsLoad4::CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const$/;"	f	class:JPartsLoad4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
JPartsLoad4::CheckConfig	JPartsLoad4.cpp	/^void JPartsLoad4::CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi)const$/;"	f	class:JPartsLoad4	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi) const
JPartsLoad4::CheckConfig	JPartsLoad4.h	/^  void CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const;$/;"	p	class:JPartsLoad4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
JPartsLoad4::CheckConfig	JPartsLoad4.h	/^  void CheckConfig(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi)const;$/;"	p	class:JPartsLoad4	access:public	signature:(ullong casenp,ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid,TpPeri tperi) const
JPartsLoad4::CheckSortParticles	JPartsLoad4.cpp	/^void JPartsLoad4::CheckSortParticles(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::CheckSortParticles	JPartsLoad4.h	/^  void CheckSortParticles();$/;"	p	class:JPartsLoad4	access:protected	signature:()
JPartsLoad4::Count	JPartsLoad4.h	/^  unsigned Count;    \/\/-Number of particles.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::DemDtForce	JPartsLoad4.h	/^  double DemDtForce;             \/\/\/<Dt for tangencial acceleration in DEM calculations.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::GetAllocMemory	JPartsLoad4.cpp	/^llong JPartsLoad4::GetAllocMemory()const{  $/;"	f	class:JPartsLoad4	signature:() const
JPartsLoad4::GetAllocMemory	JPartsLoad4.h	/^  llong GetAllocMemory()const;$/;"	p	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetCasePosMax	JPartsLoad4.h	/^  tdouble3 GetCasePosMax()const{ return(CasePosMax); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetCasePosMin	JPartsLoad4.h	/^  tdouble3 GetCasePosMin()const{ return(CasePosMin); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetCount	JPartsLoad4.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetDemDtForce	JPartsLoad4.h	/^  double GetDemDtForce()const{ return(DemDtForce); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetIdp	JPartsLoad4.h	/^  const unsigned* GetIdp(){ return(Idp); }$/;"	f	class:JPartsLoad4	access:public	signature:()
JPartsLoad4::GetMapSize	JPartsLoad4.cpp	/^void JPartsLoad4::GetMapSize(tdouble3 &mapmin,tdouble3 &mapmax)const{$/;"	f	class:JPartsLoad4	signature:(tdouble3 &mapmin,tdouble3 &mapmax) const
JPartsLoad4::GetMapSize	JPartsLoad4.h	/^  void GetMapSize(tdouble3 &mapmin,tdouble3 &mapmax)const;$/;"	p	class:JPartsLoad4	access:public	signature:(tdouble3 &mapmin,tdouble3 &mapmax) const
JPartsLoad4::GetPartBeginTimeStep	JPartsLoad4.h	/^  double GetPartBeginTimeStep()const{ return(PartBeginTimeStep); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetPartBeginTotalNp	JPartsLoad4.h	/^  ullong GetPartBeginTotalNp()const{ return(PartBeginTotalNp); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetPos	JPartsLoad4.h	/^  const tdouble3* GetPos(){ return(Pos); }$/;"	f	class:JPartsLoad4	access:public	signature:()
JPartsLoad4::GetSimulate2D	JPartsLoad4.h	/^  bool GetSimulate2D()const{ return(Simulate2D); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetSimulate2DPosY	JPartsLoad4.h	/^  double GetSimulate2DPosY()const{ return(Simulate2DPosY); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetSymplecticDtPre	JPartsLoad4.h	/^  double GetSymplecticDtPre()const{ return(SymplecticDtPre); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::GetVelRhop	JPartsLoad4.h	/^  const tfloat4* GetVelRhop(){ return(VelRhop); }$/;"	f	class:JPartsLoad4	access:public	signature:()
JPartsLoad4::Idp	JPartsLoad4.h	/^  unsigned *Idp;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::JPartsLoad4	JPartsLoad4.cpp	/^JPartsLoad4::JPartsLoad4(bool useomp):UseOmp(useomp){$/;"	f	class:JPartsLoad4	signature:(bool useomp)
JPartsLoad4::JPartsLoad4	JPartsLoad4.h	/^  JPartsLoad4(bool useomp);$/;"	p	class:JPartsLoad4	access:public	signature:(bool useomp)
JPartsLoad4::LoadParticles	JPartsLoad4.cpp	/^void JPartsLoad4::LoadParticles(const std::string &casedir,const std::string &casename$/;"	f	class:JPartsLoad4	signature:(const std::string &casedir,const std::string &casename ,unsigned partbegin,const std::string &casedirbegin)
JPartsLoad4::LoadParticles	JPartsLoad4.h	/^  void LoadParticles(const std::string &casedir,const std::string &casename,unsigned partbegin,const std::string &casedirbegin);$/;"	p	class:JPartsLoad4	access:public	signature:(const std::string &casedir,const std::string &casename,unsigned partbegin,const std::string &casedirbegin)
JPartsLoad4::MapPosMax	JPartsLoad4.h	/^  tdouble3 MapPosMin,MapPosMax;  \/\/\/<Domain limits that already include the border. | Limites del dominio que ya incluyen el borde.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::MapPosMin	JPartsLoad4.h	/^  tdouble3 MapPosMin,MapPosMax;  \/\/\/<Domain limits that already include the border. | Limites del dominio que ya incluyen el borde.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::MapSize	JPartsLoad4.h	/^  bool MapSize;                  \/\/\/<Indicates whether MapPosMin and MapPosMax are valid. | Indica si MapPosMin y MapPosMax son validos.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::MapSizeLoaded	JPartsLoad4.h	/^  bool MapSizeLoaded()const{ return(MapSize); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
JPartsLoad4::NpDynamic	JPartsLoad4.h	/^  bool NpDynamic;          \/\/\/<CaseNp can increase.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::Npiece	JPartsLoad4.h	/^  unsigned Npiece;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PartBegin	JPartsLoad4.h	/^  unsigned PartBegin;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PartBeginTimeStep	JPartsLoad4.h	/^  double PartBeginTimeStep;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PartBeginTotalNp	JPartsLoad4.h	/^  ullong PartBeginTotalNp;        \/\/\/<Total number of simulated particles.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PeriMode	JPartsLoad4.h	/^  TpPeri PeriMode;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PeriXinc	JPartsLoad4.h	/^  tdouble3 PeriXinc;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PeriYinc	JPartsLoad4.h	/^  tdouble3 PeriYinc;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::PeriZinc	JPartsLoad4.h	/^  tdouble3 PeriZinc;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::Pos	JPartsLoad4.h	/^  tdouble3 *Pos;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::RemoveBoundary	JPartsLoad4.cpp	/^void JPartsLoad4::RemoveBoundary(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::RemoveBoundary	JPartsLoad4.h	/^  void RemoveBoundary();$/;"	p	class:JPartsLoad4	access:public	signature:()
JPartsLoad4::Reset	JPartsLoad4.cpp	/^void JPartsLoad4::Reset(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::Reset	JPartsLoad4.h	/^  void Reset();$/;"	p	class:JPartsLoad4	access:public	signature:()
JPartsLoad4::Simulate2D	JPartsLoad4.h	/^  bool Simulate2D;         \/\/\/<Indicates 2D simulation.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::Simulate2DPosY	JPartsLoad4.h	/^  double Simulate2DPosY;   \/\/\/<Y value in 2D simulations.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::SortParticles	JPartsLoad4.cpp	/^template<typename T> T* JPartsLoad4::SortParticles(const unsigned *vsort,unsigned count,T *v)const{$/;"	f	class:JPartsLoad4	signature:(const unsigned *vsort,unsigned count,T *v) const
JPartsLoad4::SortParticles	JPartsLoad4.cpp	/^void JPartsLoad4::SortParticles(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::SortParticles	JPartsLoad4.h	/^  template<typename T> T* SortParticles(const unsigned *vsort,unsigned count,T *v)const;$/;"	p	class:JPartsLoad4	access:protected	signature:(const unsigned *vsort,unsigned count,T *v) const
JPartsLoad4::SortParticles	JPartsLoad4.h	/^  void SortParticles();$/;"	p	class:JPartsLoad4	access:protected	signature:()
JPartsLoad4::SymplecticDtPre	JPartsLoad4.h	/^  double SymplecticDtPre;        \/\/\/<Previous Dt to use with Symplectic.$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::UseOmp	JPartsLoad4.h	/^  const bool UseOmp;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::VelRhop	JPartsLoad4.h	/^  tfloat4 *VelRhop;$/;"	m	class:JPartsLoad4	access:protected
JPartsLoad4::~JPartsLoad4	JPartsLoad4.cpp	/^JPartsLoad4::~JPartsLoad4(){$/;"	f	class:JPartsLoad4	signature:()
JPartsLoad4::~JPartsLoad4	JPartsLoad4.h	/^  ~JPartsLoad4();$/;"	p	class:JPartsLoad4	access:public	signature:()
JPartsOut	JPartsOut.cpp	/^JPartsOut::JPartsOut(unsigned sizeini){$/;"	f	class:JPartsOut	signature:(unsigned sizeini)
JPartsOut	JPartsOut.h	/^  JPartsOut(unsigned sizeini=2000);$/;"	p	class:JPartsOut	access:public	signature:(unsigned sizeini=2000)
JPartsOut	JPartsOut.h	/^class JPartsOut : protected JObject$/;"	c	inherits:JObject
JPartsOut::AddParticles	JPartsOut.cpp	/^void JPartsOut::AddParticles(unsigned np,const unsigned* idp,const tdouble3* pos$/;"	f	class:JPartsOut	signature:(unsigned np,const unsigned* idp,const tdouble3* pos ,const tfloat3* vel,const float* rhop,const typecode* code)
JPartsOut::AddParticles	JPartsOut.h	/^  void AddParticles(unsigned np,const unsigned* idp,const tdouble3* pos,const tfloat3* vel,const float* rhop,const typecode* code);$/;"	p	class:JPartsOut	access:public	signature:(unsigned np,const unsigned* idp,const tdouble3* pos,const tfloat3* vel,const float* rhop,const typecode* code)
JPartsOut::AllocMemory	JPartsOut.cpp	/^void JPartsOut::AllocMemory(unsigned size,bool reset){$/;"	f	class:JPartsOut	signature:(unsigned size,bool reset)
JPartsOut::AllocMemory	JPartsOut.h	/^  void AllocMemory(unsigned size,bool reset);$/;"	p	class:JPartsOut	access:protected	signature:(unsigned size,bool reset)
JPartsOut::Clear	JPartsOut.h	/^  void Clear(){ Count=0; OutPosCount=OutRhopCount=OutMoveCount=0; };$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::Count	JPartsOut.h	/^  unsigned Count;$/;"	m	class:JPartsOut	access:protected
JPartsOut::GetAllocMemory	JPartsOut.cpp	/^llong JPartsOut::GetAllocMemory()const{  $/;"	f	class:JPartsOut	signature:() const
JPartsOut::GetAllocMemory	JPartsOut.h	/^  llong GetAllocMemory()const;$/;"	p	class:JPartsOut	access:public	signature:() const
JPartsOut::GetCount	JPartsOut.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JPartsOut	access:public	signature:() const
JPartsOut::GetIdpOut	JPartsOut.h	/^  const unsigned* GetIdpOut(){ return(Idp); }$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::GetMotiveOut	JPartsOut.h	/^  const byte* GetMotiveOut(){ return(Motive); }$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::GetOutMoveCount	JPartsOut.h	/^  unsigned GetOutMoveCount()const{ return(OutMoveCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
JPartsOut::GetOutPosCount	JPartsOut.h	/^  unsigned GetOutPosCount()const{ return(OutPosCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
JPartsOut::GetOutRhopCount	JPartsOut.h	/^  unsigned GetOutRhopCount()const{ return(OutRhopCount); }$/;"	f	class:JPartsOut	access:public	signature:() const
JPartsOut::GetPosOut	JPartsOut.h	/^  const tdouble3* GetPosOut(){ return(Pos); }$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::GetRhopOut	JPartsOut.h	/^  const float* GetRhopOut(){ return(Rhop); }$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::GetSize	JPartsOut.h	/^  unsigned GetSize()const{ return(Size); }$/;"	f	class:JPartsOut	access:public	signature:() const
JPartsOut::GetVelOut	JPartsOut.h	/^  const tfloat3* GetVelOut(){ return(Vel); }$/;"	f	class:JPartsOut	access:public	signature:()
JPartsOut::Idp	JPartsOut.h	/^  unsigned *Idp;$/;"	m	class:JPartsOut	access:protected
JPartsOut::JPartsOut	JPartsOut.cpp	/^JPartsOut::JPartsOut(unsigned sizeini){$/;"	f	class:JPartsOut	signature:(unsigned sizeini)
JPartsOut::JPartsOut	JPartsOut.h	/^  JPartsOut(unsigned sizeini=2000);$/;"	p	class:JPartsOut	access:public	signature:(unsigned sizeini=2000)
JPartsOut::Motive	JPartsOut.h	/^  byte *Motive; \/\/\/<Motives for exclusion. 1:position, 2:rhop, 3:velocity.$/;"	m	class:JPartsOut	access:protected
JPartsOut::OutMoveCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
JPartsOut::OutPosCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
JPartsOut::OutRhopCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
JPartsOut::Pos	JPartsOut.h	/^  tdouble3 *Pos;$/;"	m	class:JPartsOut	access:protected
JPartsOut::Reset	JPartsOut.cpp	/^void JPartsOut::Reset(){$/;"	f	class:JPartsOut	signature:()
JPartsOut::Reset	JPartsOut.h	/^  void Reset();$/;"	p	class:JPartsOut	access:public	signature:()
JPartsOut::Rhop	JPartsOut.h	/^  float *Rhop;$/;"	m	class:JPartsOut	access:protected
JPartsOut::Size	JPartsOut.h	/^  unsigned Size;$/;"	m	class:JPartsOut	access:protected
JPartsOut::SizeIni	JPartsOut.h	/^  unsigned SizeIni;$/;"	m	class:JPartsOut	access:protected
JPartsOut::Vel	JPartsOut.h	/^  tfloat3 *Vel;$/;"	m	class:JPartsOut	access:protected
JPartsOut::~JPartsOut	JPartsOut.cpp	/^JPartsOut::~JPartsOut(){$/;"	f	class:JPartsOut	signature:()
JPartsOut::~JPartsOut	JPartsOut.h	/^  ~JPartsOut();$/;"	p	class:JPartsOut	access:public	signature:()
JRadixSort	JRadixSort.cpp	/^JRadixSort::JRadixSort(bool useomp):UseOmp(useomp && CompiledOMP()){$/;"	f	class:JRadixSort	signature:(bool useomp)
JRadixSort	JRadixSort.h	/^  JRadixSort(bool useomp);$/;"	p	class:JRadixSort	access:public	signature:(bool useomp)
JRadixSort	JRadixSort.h	/^class JRadixSort : protected JObject$/;"	c	inherits:JObject
JRadixSort::AllocMemory	JRadixSort.cpp	/^void JRadixSort::AllocMemory(unsigned s){$/;"	f	class:JRadixSort	signature:(unsigned s)
JRadixSort::AllocMemory	JRadixSort.h	/^  void AllocMemory(unsigned s);$/;"	p	class:JRadixSort	access:private	signature:(unsigned s)
JRadixSort::BeginKeys	JRadixSort.h	/^  unsigned *BeginKeys;$/;"	m	class:JRadixSort	access:private
JRadixSort::BitsSize	JRadixSort.cpp	/^unsigned JRadixSort::BitsSize(ullong v)const{ return(TBitsSize<ullong>(v,64)); };$/;"	f	class:JRadixSort	signature:(ullong v) const
JRadixSort::BitsSize	JRadixSort.cpp	/^unsigned JRadixSort::BitsSize(unsigned v)const{ return(TBitsSize<unsigned>(v,32)); };$/;"	f	class:JRadixSort	signature:(unsigned v) const
JRadixSort::BitsSize	JRadixSort.h	/^  unsigned BitsSize(ullong v)const;$/;"	p	class:JRadixSort	access:public	signature:(ullong v) const
JRadixSort::BitsSize	JRadixSort.h	/^  unsigned BitsSize(unsigned v)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned v) const
JRadixSort::CalcNbits	JRadixSort.cpp	/^unsigned JRadixSort::CalcNbits(unsigned size,const ullong *data)const{ return(TCalcNbits<ullong>(size,data)); }$/;"	f	class:JRadixSort	signature:(unsigned size,const ullong *data) const
JRadixSort::CalcNbits	JRadixSort.cpp	/^unsigned JRadixSort::CalcNbits(unsigned size,const unsigned *data)const{ return(TCalcNbits<unsigned>(size,data)); }$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data) const
JRadixSort::CalcNbits	JRadixSort.h	/^  unsigned CalcNbits(unsigned size,const ullong *data)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data) const
JRadixSort::CalcNbits	JRadixSort.h	/^  unsigned CalcNbits(unsigned size,const unsigned *data)const;$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data) const
JRadixSort::CompiledOMP	JRadixSort.cpp	/^bool JRadixSort::CompiledOMP(){$/;"	f	class:JRadixSort	signature:()
JRadixSort::CompiledOMP	JRadixSort.h	/^  static bool CompiledOMP();$/;"	p	class:JRadixSort	access:public	signature:()
JRadixSort::Data32	JRadixSort.h	/^  unsigned *Data32;$/;"	m	class:JRadixSort	access:private
JRadixSort::Data64	JRadixSort.h	/^  ullong *Data64;$/;"	m	class:JRadixSort	access:private
JRadixSort::DgCheckResult32	JRadixSort.cpp	/^void JRadixSort::DgCheckResult32()const{$/;"	f	class:JRadixSort	signature:() const
JRadixSort::DgCheckResult32	JRadixSort.h	/^  void DgCheckResult32()const;$/;"	p	class:JRadixSort	access:public	signature:() const
JRadixSort::DgCheckResult64	JRadixSort.cpp	/^void JRadixSort::DgCheckResult64()const{$/;"	f	class:JRadixSort	signature:() const
JRadixSort::DgCheckResult64	JRadixSort.h	/^  void DgCheckResult64()const;$/;"	p	class:JRadixSort	access:public	signature:() const
JRadixSort::Index	JRadixSort.h	/^  unsigned *Index;$/;"	m	class:JRadixSort	access:private
JRadixSort::IndexCreate	JRadixSort.cpp	/^void JRadixSort::IndexCreate(){$/;"	f	class:JRadixSort	signature:()
JRadixSort::IndexCreate	JRadixSort.h	/^  void IndexCreate();$/;"	p	class:JRadixSort	access:private	signature:()
JRadixSort::InitData32	JRadixSort.h	/^  unsigned *InitData32;$/;"	m	class:JRadixSort	access:private
JRadixSort::InitData64	JRadixSort.h	/^  ullong *InitData64;$/;"	m	class:JRadixSort	access:private
JRadixSort::JRadixSort	JRadixSort.cpp	/^JRadixSort::JRadixSort(bool useomp):UseOmp(useomp && CompiledOMP()){$/;"	f	class:JRadixSort	signature:(bool useomp)
JRadixSort::JRadixSort	JRadixSort.h	/^  JRadixSort(bool useomp);$/;"	p	class:JRadixSort	access:public	signature:(bool useomp)
JRadixSort::KEYSBITS	JRadixSort.h	/^  static const int KEYSBITS=8;$/;"	m	class:JRadixSort	access:private
JRadixSort::KEYSMASK	JRadixSort.h	/^  static const int KEYSMASK=0xff;$/;"	m	class:JRadixSort	access:private
JRadixSort::KEYSRANGE	JRadixSort.h	/^  static const int KEYSRANGE=256;$/;"	m	class:JRadixSort	access:private
JRadixSort::LoadBeginKeys	JRadixSort.cpp	/^template<class T> void JRadixSort::LoadBeginKeys(const T* data){$/;"	f	class:JRadixSort	signature:(const T* data)
JRadixSort::LoadBeginKeys	JRadixSort.h	/^  template<class T> void LoadBeginKeys(const T* data);$/;"	p	class:JRadixSort	access:private	signature:(const T* data)
JRadixSort::MakeIndex	JRadixSort.cpp	/^void JRadixSort::MakeIndex(unsigned size,const ullong *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(unsigned size,const ullong *data,unsigned nbits)
JRadixSort::MakeIndex	JRadixSort.cpp	/^void JRadixSort::MakeIndex(unsigned size,const unsigned *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data,unsigned nbits)
JRadixSort::MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const ullong *data){ MakeIndex(size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data)
JRadixSort::MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const ullong *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data,unsigned nbits)
JRadixSort::MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const unsigned *data){ MakeIndex(size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data)
JRadixSort::MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const unsigned *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data,unsigned nbits)
JRadixSort::Nbits	JRadixSort.h	/^  unsigned Nbits;$/;"	m	class:JRadixSort	access:private
JRadixSort::Nkeys	JRadixSort.h	/^  unsigned Nkeys;$/;"	m	class:JRadixSort	access:private
JRadixSort::OMPSIZE	JRadixSort.h	/^  static const int OMPSIZE=1024;$/;"	m	class:JRadixSort	access:private
JRadixSort::OMPSTRIDE	JRadixSort.h	/^  static const int OMPSTRIDE=200;$/;"	m	class:JRadixSort	access:private
JRadixSort::PrevData32	JRadixSort.h	/^  unsigned *PrevData32;$/;"	m	class:JRadixSort	access:private
JRadixSort::PrevData64	JRadixSort.h	/^  ullong *PrevData64;$/;"	m	class:JRadixSort	access:private
JRadixSort::PrevIndex	JRadixSort.h	/^  unsigned *PrevIndex;$/;"	m	class:JRadixSort	access:private
JRadixSort::Reset	JRadixSort.cpp	/^void JRadixSort::Reset(){$/;"	f	class:JRadixSort	signature:()
JRadixSort::Reset	JRadixSort.h	/^  void Reset();$/;"	p	class:JRadixSort	access:public	signature:()
JRadixSort::Size	JRadixSort.h	/^  unsigned Size;$/;"	m	class:JRadixSort	access:private
JRadixSort::Sort	JRadixSort.cpp	/^void JRadixSort::Sort(bool makeindex,unsigned size,ullong *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(bool makeindex,unsigned size,ullong *data,unsigned nbits)
JRadixSort::Sort	JRadixSort.cpp	/^void JRadixSort::Sort(bool makeindex,unsigned size,unsigned *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(bool makeindex,unsigned size,unsigned *data,unsigned nbits)
JRadixSort::Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,ullong *data){ Sort(makeindex,size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,ullong *data)
JRadixSort::Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,ullong *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,ullong *data,unsigned nbits)
JRadixSort::Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,unsigned *data){ Sort(makeindex,size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,unsigned *data)
JRadixSort::Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,unsigned *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,unsigned *data,unsigned nbits)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const byte *data,byte *result){ TSortData<byte>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const byte *data,byte *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const double *data,double *result){ TSortData<double>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const double *data,double *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const float *data,float *result){ TSortData<float>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const float *data,float *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const int *data,int *result){ TSortData<int>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const int *data,int *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tdouble2 *data,tdouble2 *result){ TSortData<tdouble2>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tdouble2 *data,tdouble2 *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tdouble3 *data,tdouble3 *result){ TSortData<tdouble3>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tdouble3 *data,tdouble3 *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat2 *data,tfloat2 *result){ TSortData<tfloat2>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat2 *data,tfloat2 *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat3 *data,tfloat3 *result){ TSortData<tfloat3>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat3 *data,tfloat3 *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat4 *data,tfloat4 *result){ TSortData<tfloat4>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat4 *data,tfloat4 *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const unsigned *data,unsigned *result){ TSortData<unsigned>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data,unsigned *result)
JRadixSort::SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const word *data,word *result){ TSortData<word>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const word *data,word *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const byte *data,byte *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const byte *data,byte *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const double *data,double *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const double *data,double *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const float *data,float *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const float *data,float *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const int *data,int *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const int *data,int *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const tdouble2 *data,tdouble2 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tdouble2 *data,tdouble2 *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const tdouble3 *data,tdouble3 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tdouble3 *data,tdouble3 *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat2 *data,tfloat2 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat2 *data,tfloat2 *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat3 *data,tfloat3 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat3 *data,tfloat3 *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat4 *data,tfloat4 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat4 *data,tfloat4 *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const unsigned *data,unsigned *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data,unsigned *result)
JRadixSort::SortData	JRadixSort.h	/^  void SortData(unsigned size,const word *data,word *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const word *data,word *result)
JRadixSort::SortStep	JRadixSort.cpp	/^template<class T> void JRadixSort::SortStep(unsigned ck,const T* data,T* data2){$/;"	f	class:JRadixSort	signature:(unsigned ck,const T* data,T* data2)
JRadixSort::SortStep	JRadixSort.h	/^  template<class T> void SortStep(unsigned ck,const T* data,T* data2);$/;"	p	class:JRadixSort	access:private	signature:(unsigned ck,const T* data,T* data2)
JRadixSort::SortStepIndex	JRadixSort.cpp	/^template<class T> void JRadixSort::SortStepIndex(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2){$/;"	f	class:JRadixSort	signature:(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2)
JRadixSort::SortStepIndex	JRadixSort.h	/^  template<class T> void SortStepIndex(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2);$/;"	p	class:JRadixSort	access:private	signature:(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2)
JRadixSort::TBitsSize	JRadixSort.cpp	/^template<class T> unsigned JRadixSort::TBitsSize(T v,unsigned smax)const{$/;"	f	class:JRadixSort	signature:(T v,unsigned smax) const
JRadixSort::TBitsSize	JRadixSort.h	/^  template<class T> unsigned TBitsSize(T v,unsigned smax)const;$/;"	p	class:JRadixSort	access:private	signature:(T v,unsigned smax) const
JRadixSort::TCalcNbits	JRadixSort.cpp	/^template<class T> unsigned JRadixSort::TCalcNbits(unsigned size,const T *data)const{$/;"	f	class:JRadixSort	signature:(unsigned size,const T *data) const
JRadixSort::TCalcNbits	JRadixSort.h	/^  template<class T> unsigned TCalcNbits(unsigned size,const T *data)const;$/;"	p	class:JRadixSort	access:private	signature:(unsigned size,const T *data) const
JRadixSort::TSortData	JRadixSort.cpp	/^template<class T> void JRadixSort::TSortData(unsigned size,const T *data,T *result){$/;"	f	class:JRadixSort	signature:(unsigned size,const T *data,T *result)
JRadixSort::TSortData	JRadixSort.h	/^  template<class T> void TSortData(unsigned size,const T *data,T *result);$/;"	p	class:JRadixSort	access:private	signature:(unsigned size,const T *data,T *result)
JRadixSort::Type32	JRadixSort.h	/^  bool Type32;$/;"	m	class:JRadixSort	access:private
JRadixSort::UseOmp	JRadixSort.h	/^  const bool UseOmp;$/;"	m	class:JRadixSort	access:private
JRadixSort::~JRadixSort	JRadixSort.cpp	/^JRadixSort::~JRadixSort(){$/;"	f	class:JRadixSort	signature:()
JRadixSort::~JRadixSort	JRadixSort.h	/^  ~JRadixSort();$/;"	p	class:JRadixSort	access:public	signature:()
JRangeFilter	JRangeFilter.cpp	/^JRangeFilter::JRangeFilter(std::string filter){$/;"	f	class:JRangeFilter	signature:(std::string filter)
JRangeFilter	JRangeFilter.h	/^  JRangeFilter(std::string filter="");$/;"	p	class:JRangeFilter	access:public	signature:(std::string filter=Ó)
JRangeFilter	JRangeFilter.h	/^class JRangeFilter : protected JObject$/;"	c	inherits:JObject
JRangeFilter::AddRange	JRangeFilter.cpp	/^void JRangeFilter::AddRange(unsigned v,unsigned v2){$/;"	f	class:JRangeFilter	signature:(unsigned v,unsigned v2)
JRangeFilter::AddRange	JRangeFilter.h	/^  void AddRange(unsigned v,unsigned v2);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v,unsigned v2)
JRangeFilter::AddRangeStep	JRangeFilter.cpp	/^void JRangeFilter::AddRangeStep(unsigned v,unsigned v2,unsigned step){ $/;"	f	class:JRangeFilter	signature:(unsigned v,unsigned v2,unsigned step)
JRangeFilter::AddRangeStep	JRangeFilter.h	/^  void AddRangeStep(unsigned v,unsigned v2,unsigned step);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v,unsigned v2,unsigned step)
JRangeFilter::AddValue	JRangeFilter.cpp	/^void JRangeFilter::AddValue(unsigned v){$/;"	f	class:JRangeFilter	signature:(unsigned v)
JRangeFilter::AddValue	JRangeFilter.h	/^  void AddValue(unsigned v);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v)
JRangeFilter::CheckNewValue	JRangeFilter.cpp	/^bool JRangeFilter::CheckNewValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
JRangeFilter::CheckNewValue	JRangeFilter.h	/^  bool CheckNewValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:private	signature:(unsigned v) const
JRangeFilter::CheckValue	JRangeFilter.cpp	/^bool JRangeFilter::CheckValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
JRangeFilter::CheckValue	JRangeFilter.h	/^  bool CheckValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:public	signature:(unsigned v) const
JRangeFilter::Config	JRangeFilter.cpp	/^void JRangeFilter::Config(std::string filter){$/;"	f	class:JRangeFilter	signature:(std::string filter)
JRangeFilter::Config	JRangeFilter.h	/^  void Config(std::string filter);$/;"	p	class:JRangeFilter	access:public	signature:(std::string filter)
JRangeFilter::Count	JRangeFilter.h	/^  unsigned Count;            \/\/\/<Number of intervals stored in \\ref Ranges.$/;"	m	class:JRangeFilter	access:private
JRangeFilter::Empty	JRangeFilter.h	/^  bool Empty()const{ return(!Count); }$/;"	f	class:JRangeFilter	access:public	signature:() const
JRangeFilter::FastValue	JRangeFilter.h	/^  byte *FastValue;           \/\/\/<Array to optimise the values search.$/;"	m	class:JRangeFilter	access:private
JRangeFilter::GetFirstValue	JRangeFilter.cpp	/^unsigned JRangeFilter::GetFirstValue()const{$/;"	f	class:JRangeFilter	signature:() const
JRangeFilter::GetFirstValue	JRangeFilter.h	/^  unsigned GetFirstValue()const;$/;"	p	class:JRangeFilter	access:public	signature:() const
JRangeFilter::GetNextValue	JRangeFilter.cpp	/^unsigned JRangeFilter::GetNextValue(unsigned v)const{$/;"	f	class:JRangeFilter	signature:(unsigned v) const
JRangeFilter::GetNextValue	JRangeFilter.h	/^  unsigned GetNextValue(unsigned v)const;$/;"	p	class:JRangeFilter	access:public	signature:(unsigned v) const
JRangeFilter::GetValues	JRangeFilter.cpp	/^void JRangeFilter::GetValues(std::vector<unsigned> &values)const{$/;"	f	class:JRangeFilter	signature:(std::vector<unsigned> &values) const
JRangeFilter::GetValues	JRangeFilter.h	/^  void GetValues(std::vector<unsigned> &values)const;$/;"	p	class:JRangeFilter	access:public	signature:(std::vector<unsigned> &values) const
JRangeFilter::JRangeFilter	JRangeFilter.cpp	/^JRangeFilter::JRangeFilter(std::string filter){$/;"	f	class:JRangeFilter	signature:(std::string filter)
JRangeFilter::JRangeFilter	JRangeFilter.h	/^  JRangeFilter(std::string filter="");$/;"	p	class:JRangeFilter	access:public	signature:(std::string filter=Ó)
JRangeFilter::JoinRanges	JRangeFilter.cpp	/^void JRangeFilter::JoinRanges(){$/;"	f	class:JRangeFilter	signature:()
JRangeFilter::JoinRanges	JRangeFilter.h	/^  void JoinRanges();$/;"	p	class:JRangeFilter	access:private	signature:()
JRangeFilter::Ranges	JRangeFilter.h	/^  unsigned* Ranges;          \/\/\/<Stores intervals$/;"	m	class:JRangeFilter	access:private
JRangeFilter::Reset	JRangeFilter.cpp	/^void JRangeFilter::Reset(){$/;"	f	class:JRangeFilter	signature:()
JRangeFilter::Reset	JRangeFilter.h	/^  void Reset();$/;"	p	class:JRangeFilter	access:public	signature:()
JRangeFilter::ResizeRanges	JRangeFilter.cpp	/^void JRangeFilter::ResizeRanges(unsigned size){$/;"	f	class:JRangeFilter	signature:(unsigned size)
JRangeFilter::ResizeRanges	JRangeFilter.h	/^  void ResizeRanges(unsigned size);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned size)
JRangeFilter::Size	JRangeFilter.h	/^  unsigned Size;             \/\/\/<Number of intervals allocated in \\ref Ranges.$/;"	m	class:JRangeFilter	access:private
JRangeFilter::SortRanges	JRangeFilter.cpp	/^void JRangeFilter::SortRanges(){$/;"	f	class:JRangeFilter	signature:()
JRangeFilter::SortRanges	JRangeFilter.h	/^  void SortRanges();$/;"	p	class:JRangeFilter	access:private	signature:()
JRangeFilter::ToString	JRangeFilter.cpp	/^std::string JRangeFilter::ToString()const{$/;"	f	class:JRangeFilter	signature:() const
JRangeFilter::ToString	JRangeFilter.h	/^  std::string ToString()const;$/;"	p	class:JRangeFilter	access:public	signature:() const
JRangeFilter::ValueMax	JRangeFilter.h	/^  unsigned ValueMin,ValueMax;$/;"	m	class:JRangeFilter	access:private
JRangeFilter::ValueMin	JRangeFilter.h	/^  unsigned ValueMin,ValueMax;$/;"	m	class:JRangeFilter	access:private
JRangeFilter::~JRangeFilter	JRangeFilter.h	/^  ~JRangeFilter(){ DestructorActive=true; Reset(); }$/;"	f	class:JRangeFilter	access:public	signature:()
JReadDatafile	JReadDatafile.cpp	/^JReadDatafile::JReadDatafile(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile	JReadDatafile.h	/^  JReadDatafile();$/;"	p	class:JReadDatafile	access:public	signature:()
JReadDatafile	JReadDatafile.h	/^class JReadDatafile  : protected JObject$/;"	c	inherits:JObject
JReadDatafile::Data	JReadDatafile.h	/^  char *Data;            \/\/\/< Data from file.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::File	JReadDatafile.h	/^  std::string File;      \/\/\/< Name of file.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::Find	JReadDatafile.cpp	/^tint2 JReadDatafile::Find(std::string key,int firstline)const{$/;"	f	class:JReadDatafile	signature:(std::string key,int firstline) const
JReadDatafile::Find	JReadDatafile.h	/^  tint2 Find(std::string key,int firstline=0)const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,int firstline=0) const
JReadDatafile::FindValueDbl	JReadDatafile.cpp	/^double JReadDatafile::FindValueDbl(std::string key,bool optional,double valdef)const{$/;"	f	class:JReadDatafile	signature:(std::string key,bool optional,double valdef) const
JReadDatafile::FindValueDbl	JReadDatafile.h	/^  double FindValueDbl(std::string key,bool optional=false,double valdef=0)const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,bool optional=false,double valdef=0) const
JReadDatafile::FindValueStr	JReadDatafile.cpp	/^std::string JReadDatafile::FindValueStr(std::string key,bool optional,std::string valdef)const{$/;"	f	class:JReadDatafile	signature:(std::string key,bool optional,std::string valdef) const
JReadDatafile::FindValueStr	JReadDatafile.h	/^  std::string FindValueStr(std::string key,bool optional=false,std::string valdef="")const;$/;"	p	class:JReadDatafile	access:public	signature:(std::string key,bool optional=false,std::string valdef=Ó) const
JReadDatafile::GetLine	JReadDatafile.cpp	/^std::string JReadDatafile::GetLine(int line)const{$/;"	f	class:JReadDatafile	signature:(int line) const
JReadDatafile::GetLine	JReadDatafile.h	/^  std::string GetLine(int line)const;$/;"	p	class:JReadDatafile	access:public	signature:(int line) const
JReadDatafile::GetReadLin	JReadDatafile.h	/^  int GetReadLin()const{           return(ReadLin);      }$/;"	f	class:JReadDatafile	access:public	signature:() const
JReadDatafile::GetReadLinValue	JReadDatafile.h	/^  int GetReadLinValue()const{      return(ReadLinValue); }$/;"	f	class:JReadDatafile	access:public	signature:() const
JReadDatafile::GetReadValue	JReadDatafile.h	/^  std::string GetReadValue()const{ return(ReadValue);    }$/;"	f	class:JReadDatafile	access:public	signature:() const
JReadDatafile::JReadDatafile	JReadDatafile.cpp	/^JReadDatafile::JReadDatafile(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile::JReadDatafile	JReadDatafile.h	/^  JReadDatafile();$/;"	p	class:JReadDatafile	access:public	signature:()
JReadDatafile::LineBegin	JReadDatafile.h	/^  unsigned *LineBegin;   \/\/\/< Inicio de cada linea [LineCount+1].$/;"	m	class:JReadDatafile	access:private
JReadDatafile::LineCount	JReadDatafile.h	/^  int LineCount;         \/\/\/< Number of lines.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::Lines	JReadDatafile.h	/^  unsigned Lines()const{ return(LineCount); }$/;"	f	class:JReadDatafile	access:public	signature:() const
JReadDatafile::LoadFile	JReadDatafile.cpp	/^void JReadDatafile::LoadFile(const std::string &file,unsigned maxsize){$/;"	f	class:JReadDatafile	signature:(const std::string &file,unsigned maxsize)
JReadDatafile::LoadFile	JReadDatafile.h	/^  void LoadFile(const std::string &file,unsigned maxsize=1048576000);$/;"	p	class:JReadDatafile	access:public	signature:(const std::string &file,unsigned maxsize=1048576000)
JReadDatafile::ProcessLines	JReadDatafile.cpp	/^void JReadDatafile::ProcessLines(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile::ProcessLines	JReadDatafile.h	/^  void ProcessLines();$/;"	p	class:JReadDatafile	access:private	signature:()
JReadDatafile::ProcessSpaces	JReadDatafile.cpp	/^void JReadDatafile::ProcessSpaces(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile::ProcessSpaces	JReadDatafile.h	/^  void ProcessSpaces();$/;"	p	class:JReadDatafile	access:private	signature:()
JReadDatafile::ReadLin	JReadDatafile.h	/^  int ReadLin;$/;"	m	class:JReadDatafile	access:private
JReadDatafile::ReadLinValue	JReadDatafile.h	/^  int ReadLinValue;$/;"	m	class:JReadDatafile	access:private
JReadDatafile::ReadLine	JReadDatafile.h	/^  std::string ReadLine;$/;"	m	class:JReadDatafile	access:private
JReadDatafile::ReadNextDouble	JReadDatafile.cpp	/^double JReadDatafile::ReadNextDouble(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextDouble	JReadDatafile.h	/^  double ReadNextDouble(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextDouble3	JReadDatafile.cpp	/^tdouble3 JReadDatafile::ReadNextDouble3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextDouble3	JReadDatafile.h	/^  tdouble3 ReadNextDouble3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextFloat	JReadDatafile.h	/^  float ReadNextFloat(bool in_line=false){    return(float(ReadNextDouble(in_line)));      }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextFloat3	JReadDatafile.h	/^  tfloat3 ReadNextFloat3(bool in_line=false){ return(ToTFloat3(ReadNextDouble3(in_line))); }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextInt	JReadDatafile.cpp	/^int JReadDatafile::ReadNextInt(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextInt	JReadDatafile.h	/^  int ReadNextInt(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextInt3	JReadDatafile.cpp	/^tint3 JReadDatafile::ReadNextInt3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextInt3	JReadDatafile.h	/^  tint3 ReadNextInt3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextUnsigned	JReadDatafile.h	/^  unsigned ReadNextUnsigned(bool in_line=false){ return(unsigned(ReadNextInt(in_line))); }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextUnsigned3	JReadDatafile.cpp	/^tuint3 JReadDatafile::ReadNextUnsigned3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextUnsigned3	JReadDatafile.h	/^  tuint3 ReadNextUnsigned3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadNextValue	JReadDatafile.cpp	/^std::string JReadDatafile::ReadNextValue(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
JReadDatafile::ReadNextValue	JReadDatafile.h	/^  std::string ReadNextValue(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
JReadDatafile::ReadValue	JReadDatafile.h	/^  std::string ReadValue;$/;"	m	class:JReadDatafile	access:private
JReadDatafile::RemLineCount	JReadDatafile.h	/^  int RemLineCount;      \/\/\/< Number of remark lines.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::RemLines	JReadDatafile.h	/^  unsigned RemLines()const{ return(RemLineCount); }$/;"	f	class:JReadDatafile	access:public	signature:() const
JReadDatafile::RemoveChar	JReadDatafile.cpp	/^void JReadDatafile::RemoveChar(char let){$/;"	f	class:JReadDatafile	signature:(char let)
JReadDatafile::RemoveChar	JReadDatafile.h	/^  void RemoveChar(char let);$/;"	p	class:JReadDatafile	access:public	signature:(char let)
JReadDatafile::Reset	JReadDatafile.cpp	/^void JReadDatafile::Reset(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile::Reset	JReadDatafile.h	/^  void Reset();$/;"	p	class:JReadDatafile	access:public	signature:()
JReadDatafile::ResetReadLine	JReadDatafile.cpp	/^void JReadDatafile::ResetReadLine(){ $/;"	f	class:JReadDatafile	signature:()
JReadDatafile::ResetReadLine	JReadDatafile.h	/^  void ResetReadLine();$/;"	p	class:JReadDatafile	access:private	signature:()
JReadDatafile::Sep	JReadDatafile.h	/^  std::string Sep;       \/\/\/< Value separator.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::SetReadLine	JReadDatafile.cpp	/^void JReadDatafile::SetReadLine(int line){ $/;"	f	class:JReadDatafile	signature:(int line)
JReadDatafile::SetReadLine	JReadDatafile.h	/^  void SetReadLine(int line);$/;"	p	class:JReadDatafile	access:public	signature:(int line)
JReadDatafile::Size	JReadDatafile.h	/^  unsigned Size;         \/\/\/< Size of data.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::SizeFile	JReadDatafile.h	/^  unsigned SizeFile;     \/\/\/< Size of file.$/;"	m	class:JReadDatafile	access:private
JReadDatafile::~JReadDatafile	JReadDatafile.cpp	/^JReadDatafile::~JReadDatafile(){$/;"	f	class:JReadDatafile	signature:()
JReadDatafile::~JReadDatafile	JReadDatafile.h	/^  ~JReadDatafile();$/;"	p	class:JReadDatafile	access:public	signature:()
JSaveCsv2	JSaveCsv2.cpp	/^JSaveCsv2::JSaveCsv2(std::string fname,bool app,bool csvsepcoma):ExceptionThrown(false),App(app),CsvSepComa(csvsepcoma){$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string fname,bool app,bool csvsepcoma)
JSaveCsv2	JSaveCsv2.h	/^  JSaveCsv2(std::string fname,bool app,bool csvsepcoma);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(std::string fname,bool app,bool csvsepcoma)
JSaveCsv2	JSaveCsv2.h	/^class JSaveCsv2 : protected JObject$/;"	c	namespace:jcsv	inherits:JObject
JSaveDt	JSaveDt.cpp	/^JSaveDt::JSaveDt(JLog2* log):Log(log){$/;"	f	class:JSaveDt	signature:(JLog2* log)
JSaveDt	JSaveDt.h	/^  JSaveDt(JLog2* log);$/;"	p	class:JSaveDt	access:public	signature:(JLog2* log)
JSaveDt	JSaveDt.h	/^class JSaveDt : protected JObject$/;"	c	inherits:JObject
JSaveDt::AceMax	JSaveDt.h	/^  StValue AceMax[SizeValues];           \/\/\/<AceMax [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::AddLastValues	JSaveDt.cpp	/^void JSaveDt::AddLastValues(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::AddLastValues	JSaveDt.h	/^  void AddLastValues();$/;"	p	class:JSaveDt	access:private	signature:()
JSaveDt::AddValueData	JSaveDt.cpp	/^void JSaveDt::AddValueData(double timestep,double dt,StValue &value){$/;"	f	class:JSaveDt	signature:(double timestep,double dt,StValue &value)
JSaveDt::AddValueData	JSaveDt.h	/^  void AddValueData(double timestep,double dt,StValue &value);$/;"	p	class:JSaveDt	access:private	signature:(double timestep,double dt,StValue &value)
JSaveDt::AddValues	JSaveDt.cpp	/^void JSaveDt::AddValues(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax){$/;"	f	class:JSaveDt	signature:(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax)
JSaveDt::AddValues	JSaveDt.h	/^  void AddValues(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax);$/;"	p	class:JSaveDt	access:public	signature:(double timestep,double dtfinal,double dt1,double dt2,double acemax,double viscdtmax,double velmax)
JSaveDt::AllDt	JSaveDt.h	/^  bool AllDt;$/;"	m	class:JSaveDt	access:private
JSaveDt::AllDts	JSaveDt.h	/^  tdouble2 AllDts[SizeAllDts];           $/;"	m	class:JSaveDt	access:private
JSaveDt::Config	JSaveDt.cpp	/^void JSaveDt::Config(JXml *sxml,const std::string &place,double timemax,double timeout){$/;"	f	class:JSaveDt	signature:(JXml *sxml,const std::string &place,double timemax,double timeout)
JSaveDt::Config	JSaveDt.h	/^  void Config(JXml *sxml,const std::string &place,double timemax,double timeout);$/;"	p	class:JSaveDt	access:public	signature:(JXml *sxml,const std::string &place,double timemax,double timeout)
JSaveDt::Count	JSaveDt.h	/^  unsigned Count;                       \/\/\/<Number of stored intervals. | Numero de intervalos almacenados.$/;"	m	class:JSaveDt	access:private
JSaveDt::CountAllDts	JSaveDt.h	/^  unsigned CountAllDts;$/;"	m	class:JSaveDt	access:private
JSaveDt::Dt1	JSaveDt.h	/^  StValue Dt1[SizeValues];              \/\/\/<Dt1 [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::Dt2	JSaveDt.h	/^  StValue Dt2[SizeValues];              \/\/\/<Dt2 [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::DtFinal	JSaveDt.h	/^  StValue DtFinal[SizeValues];          \/\/\/<Resultant minimum Dt [SizeValues]. | Dt minimo resultante [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::FileDtAllInfo	JSaveDt.h	/^  std::string FileDtAllInfo;$/;"	m	class:JSaveDt	access:private
JSaveDt::FileDtInfo	JSaveDt.h	/^  std::string FileDtInfo;$/;"	m	class:JSaveDt	access:private
JSaveDt::FullInfo	JSaveDt.h	/^  bool FullInfo;       \/\/\/<Saves AceMax, ViscDtMax and VelMax.$/;"	m	class:JSaveDt	access:private
JSaveDt::GetFullInfo	JSaveDt.h	/^  bool GetFullInfo()const{ return(FullInfo); }$/;"	f	class:JSaveDt	access:public	signature:() const
JSaveDt::GetSizeValues	JSaveDt.h	/^  unsigned GetSizeValues()const{ return(SizeValues); }$/;"	f	class:JSaveDt	access:private	signature:() const
JSaveDt::JSaveDt	JSaveDt.cpp	/^JSaveDt::JSaveDt(JLog2* log):Log(log){$/;"	f	class:JSaveDt	signature:(JLog2* log)
JSaveDt::JSaveDt	JSaveDt.h	/^  JSaveDt(JLog2* log);$/;"	p	class:JSaveDt	access:public	signature:(JLog2* log)
JSaveDt::LastAceMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastDt1	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastDt2	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastDtf	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastInterval	JSaveDt.h	/^  unsigned LastInterval;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastVelMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
JSaveDt::LastViscDtMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
JSaveDt::LoadXml	JSaveDt.cpp	/^void JSaveDt::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSaveDt	signature:(JXml *sxml,const std::string &place)
JSaveDt::LoadXml	JSaveDt.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSaveDt	access:private	signature:(JXml *sxml,const std::string &place)
JSaveDt::Log	JSaveDt.h	/^  JLog2* Log;$/;"	m	class:JSaveDt	access:private
JSaveDt::ReadXml	JSaveDt.cpp	/^void JSaveDt::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSaveDt	signature:(JXml *sxml,TiXmlElement* ele)
JSaveDt::ReadXml	JSaveDt.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSaveDt	access:private	signature:(JXml *sxml,TiXmlElement* ele)
JSaveDt::Reset	JSaveDt.cpp	/^void JSaveDt::Reset(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::Reset	JSaveDt.h	/^  void Reset();$/;"	p	class:JSaveDt	access:public	signature:()
JSaveDt::SaveData	JSaveDt.cpp	/^void JSaveDt::SaveData(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::SaveData	JSaveDt.h	/^  void SaveData();$/;"	p	class:JSaveDt	access:public	signature:()
JSaveDt::SaveFileAllDts	JSaveDt.cpp	/^void JSaveDt::SaveFileAllDts(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::SaveFileAllDts	JSaveDt.h	/^  void SaveFileAllDts();$/;"	p	class:JSaveDt	access:private	signature:()
JSaveDt::SaveFileValues	JSaveDt.cpp	/^void JSaveDt::SaveFileValues(){ $/;"	f	class:JSaveDt	signature:()
JSaveDt::SaveFileValues	JSaveDt.h	/^  void SaveFileValues();$/;"	p	class:JSaveDt	access:private	signature:()
JSaveDt::SaveFileValuesEnd	JSaveDt.cpp	/^void JSaveDt::SaveFileValuesEnd(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::SaveFileValuesEnd	JSaveDt.h	/^  void SaveFileValuesEnd();$/;"	p	class:JSaveDt	access:private	signature:()
JSaveDt::SizeAllDts	JSaveDt.h	/^  static const unsigned SizeAllDts=1000;$/;"	m	class:JSaveDt	access:private
JSaveDt::SizeValues	JSaveDt.h	/^  static const unsigned SizeValues=100; \/\/\/<Maximum number of intervals to be buffered. | Numero maximo de intervalos a almacenar en buffer.$/;"	m	class:JSaveDt	access:private
JSaveDt::SizeValuesSave	JSaveDt.h	/^  unsigned SizeValuesSave;$/;"	m	class:JSaveDt	access:private
JSaveDt::StValue	JSaveDt.h	/^  }StValue;$/;"	t	class:JSaveDt	typeref:struct:JSaveDt::__anon24	access:public
JSaveDt::TimeFinish	JSaveDt.h	/^  double TimeFinish;   \/\/\/<Time from which dt information is not collected. | Instante a partir del cual se deja de recopilar informacion del dt.$/;"	m	class:JSaveDt	access:private
JSaveDt::TimeInterval	JSaveDt.h	/^  double TimeInterval; \/\/\/<Time lapse every time dt information is saved. | Cada cuanto se guarda info del dt.$/;"	m	class:JSaveDt	access:private
JSaveDt::TimeStart	JSaveDt.h	/^  double TimeStart;    \/\/\/<Time from which information about the DT begins to be collected. | Instante a partir del cual se empieza a recopilar informacion del dt.$/;"	m	class:JSaveDt	access:private
JSaveDt::ValueNull	JSaveDt.h	/^  StValue ValueNull;$/;"	m	class:JSaveDt	access:private
JSaveDt::VelMax	JSaveDt.h	/^  StValue VelMax[SizeValues];           \/\/\/<VelMax [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::ViscDtMax	JSaveDt.h	/^  StValue ViscDtMax[SizeValues];        \/\/\/<ViscDtMax [SizeValues].$/;"	m	class:JSaveDt	access:private
JSaveDt::VisuConfig	JSaveDt.cpp	/^void JSaveDt::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JSaveDt	signature:(std::string txhead,std::string txfoot)
JSaveDt::VisuConfig	JSaveDt.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JSaveDt	access:public	signature:(std::string txhead,std::string txfoot)
JSaveDt::__anon24::num	JSaveDt.h	/^    unsigned num;$/;"	m	struct:JSaveDt::__anon24	access:public
JSaveDt::__anon24::tini	JSaveDt.h	/^    double tini;$/;"	m	struct:JSaveDt::__anon24	access:public
JSaveDt::__anon24::vmax	JSaveDt.h	/^    double vmax;$/;"	m	struct:JSaveDt::__anon24	access:public
JSaveDt::__anon24::vmean	JSaveDt.h	/^    double vmean;$/;"	m	struct:JSaveDt::__anon24	access:public
JSaveDt::__anon24::vmin	JSaveDt.h	/^    double vmin;$/;"	m	struct:JSaveDt::__anon24	access:public
JSaveDt::~JSaveDt	JSaveDt.cpp	/^JSaveDt::~JSaveDt(){$/;"	f	class:JSaveDt	signature:()
JSaveDt::~JSaveDt	JSaveDt.h	/^  ~JSaveDt();$/;"	p	class:JSaveDt	access:public	signature:()
JSpaceCtes	JSpaceCtes.cpp	/^JSpaceCtes::JSpaceCtes(){$/;"	f	class:JSpaceCtes	signature:()
JSpaceCtes	JSpaceCtes.h	/^  JSpaceCtes();$/;"	p	class:JSpaceCtes	access:public	signature:()
JSpaceCtes	JSpaceCtes.h	/^class JSpaceCtes : protected JObject $/;"	c	inherits:JObject
JSpaceCtes::B	JSpaceCtes.h	/^  double B;               \/\/\/<Constant that sets a limit for the maximum change in density.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::BAuto	JSpaceCtes.h	/^  bool BAuto;             \/\/\/<Activates the automatic computation of B.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::CFLnumber	JSpaceCtes.h	/^  double CFLnumber;       \/\/\/<CFL number (0.001-1).$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::CalcConstans	JSpaceCtes.cpp	/^JSpaceCtes::StConstants JSpaceCtes::CalcConstans(StConstants cte){$/;"	f	class:JSpaceCtes	signature:(StConstants cte)
JSpaceCtes::CalcConstans	JSpaceCtes.h	/^  static StConstants CalcConstans(StConstants cte);$/;"	p	class:JSpaceCtes	access:public	signature:(StConstants cte)
JSpaceCtes::CoefH	JSpaceCtes.h	/^  double CoefH;           \/\/\/<Coefficient to calculate the smoothing length H (H=coefficient*sqrt(3*dp^2) in 3D).$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::CoefHdp	JSpaceCtes.h	/^  double CoefHdp;         \/\/\/<Relationship between h and dp. (it is optional).$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::CoefSound	JSpaceCtes.h	/^  double CoefSound;       \/\/\/<Coefficient to multiply speedsystem.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::Dp	JSpaceCtes.h	/^  double Dp;              \/\/\/<Inter-particle distance.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::Eps	JSpaceCtes.h	/^  double Eps;             \/\/\/<Epsilon constant for XSPH variant.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::EpsDefined	JSpaceCtes.h	/^  bool EpsDefined;        \/\/\/<Epsilon was defined in constantsdef.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::Gamma	JSpaceCtes.h	/^  double Gamma;           \/\/\/<Polytropic constant. (1-7).$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::GetB	JSpaceCtes.h	/^  double GetB()const{ return(B); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetBAuto	JSpaceCtes.h	/^  bool GetBAuto()const{ return(BAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetCFLnumber	JSpaceCtes.h	/^  double GetCFLnumber()const{ return(CFLnumber); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetCoefH	JSpaceCtes.h	/^  double GetCoefH()const{ return(CoefH); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetCoefHdp	JSpaceCtes.h	/^  double GetCoefHdp()const{ return(CoefHdp); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetCoefSound	JSpaceCtes.h	/^  double GetCoefSound()const{ return(CoefSound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetCoefficient	JSpaceCtes.h	/^  double GetCoefficient()const{ return(GetCoefH()); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetDp	JSpaceCtes.h	/^  double GetDp()const{ return(Dp); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetEps	JSpaceCtes.h	/^  double GetEps()const{ return(Eps); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetGamma	JSpaceCtes.h	/^  double GetGamma()const{ return(Gamma); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetGravity	JSpaceCtes.h	/^  tdouble3 GetGravity()const{ return(Gravity); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetH	JSpaceCtes.h	/^  double GetH()const{ return(H); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetHAuto	JSpaceCtes.h	/^  bool GetHAuto()const{ return(HAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetHSwl	JSpaceCtes.h	/^  double GetHSwl()const{ return(HSwl); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetHSwlAuto	JSpaceCtes.h	/^  bool GetHSwlAuto()const{ return(HSwlAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetLatticeBound	JSpaceCtes.h	/^  int GetLatticeBound()const{ return(LatticeBound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetLatticeFluid	JSpaceCtes.h	/^  int GetLatticeFluid()const{ return(LatticeFluid); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetMassBound	JSpaceCtes.h	/^  double GetMassBound()const{ return(MassBound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetMassBoundAuto	JSpaceCtes.h	/^  bool GetMassBoundAuto()const{ return(MassBoundAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetMassFluid	JSpaceCtes.h	/^  double GetMassFluid()const{ return(MassFluid); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetMassFluidAuto	JSpaceCtes.h	/^  bool GetMassFluidAuto()const{ return(MassFluidAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetRhop0	JSpaceCtes.h	/^  double GetRhop0()const{ return(Rhop0); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetSpeedSound	JSpaceCtes.h	/^  double GetSpeedSound()const{ return(SpeedSound); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetSpeedSoundAuto	JSpaceCtes.h	/^  bool GetSpeedSoundAuto()const{ return(SpeedSoundAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetSpeedSystem	JSpaceCtes.h	/^  double GetSpeedSystem()const{ return(SpeedSystem); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::GetSpeedSystemAuto	JSpaceCtes.h	/^  bool GetSpeedSystemAuto()const{ return(SpeedSystemAuto); }$/;"	f	class:JSpaceCtes	access:public	signature:() const
JSpaceCtes::Gravity	JSpaceCtes.h	/^  tdouble3 Gravity;       \/\/\/<Gravity acceleration.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::H	JSpaceCtes.h	/^  double H;               \/\/\/<Smoothing length.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::HAuto	JSpaceCtes.h	/^  bool HAuto;             \/\/\/<Activates the automatic computation of H.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::HSwl	JSpaceCtes.h	/^  double HSwl;            \/\/\/<Maximum height of the volume of fluid.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::HSwlAuto	JSpaceCtes.h	/^  bool HSwlAuto;          \/\/\/<Activates the automatic computation of H_Swl.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::JSpaceCtes	JSpaceCtes.cpp	/^JSpaceCtes::JSpaceCtes(){$/;"	f	class:JSpaceCtes	signature:()
JSpaceCtes::JSpaceCtes	JSpaceCtes.h	/^  JSpaceCtes();$/;"	p	class:JSpaceCtes	access:public	signature:()
JSpaceCtes::LatticeBound	JSpaceCtes.h	/^  int LatticeBound;       \/\/\/<Lattice to create boundary particles on its nodes.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::LatticeFluid	JSpaceCtes.h	/^  int LatticeFluid;       \/\/\/<Lattice to create fluid particles on its nodes.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::LoadDefault	JSpaceCtes.cpp	/^void JSpaceCtes::LoadDefault(){$/;"	f	class:JSpaceCtes	signature:()
JSpaceCtes::LoadDefault	JSpaceCtes.h	/^  void LoadDefault();$/;"	p	class:JSpaceCtes	access:public	signature:()
JSpaceCtes::LoadXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::LoadXmlDef(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place)
JSpaceCtes::LoadXmlDef	JSpaceCtes.h	/^  void LoadXmlDef(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place)
JSpaceCtes::LoadXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::LoadXmlRun(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place)
JSpaceCtes::LoadXmlRun	JSpaceCtes.h	/^  void LoadXmlRun(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place)
JSpaceCtes::MassBound	JSpaceCtes.h	/^  double MassBound;       \/\/\/<Mass of a boundary particle.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::MassBoundAuto	JSpaceCtes.h	/^  bool MassBoundAuto;     \/\/\/<Activates the automatic computation of MassBound.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::MassFluid	JSpaceCtes.h	/^  double MassFluid;       \/\/\/<Mass of a fluid particle.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::MassFluidAuto	JSpaceCtes.h	/^  bool MassFluidAuto;     \/\/\/<Activates the automatic computation of MassFluid.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::ReadXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlDef(JXml *sxml,TiXmlElement* node){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node)
JSpaceCtes::ReadXmlDef	JSpaceCtes.h	/^  void ReadXmlDef(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele)
JSpaceCtes::ReadXmlElementAuto	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlElementAuto(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto)
JSpaceCtes::ReadXmlElementAuto	JSpaceCtes.h	/^  void ReadXmlElementAuto(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto)
JSpaceCtes::ReadXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlRun(JXml *sxml,TiXmlElement* node){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node)
JSpaceCtes::ReadXmlRun	JSpaceCtes.h	/^  void ReadXmlRun(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele)
JSpaceCtes::Reset	JSpaceCtes.cpp	/^void JSpaceCtes::Reset(){$/;"	f	class:JSpaceCtes	signature:()
JSpaceCtes::Reset	JSpaceCtes.h	/^  void Reset();$/;"	p	class:JSpaceCtes	access:public	signature:()
JSpaceCtes::Rhop0	JSpaceCtes.h	/^  double Rhop0;           \/\/\/<Density of reference.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::SaveXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::SaveXmlDef(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place) const
JSpaceCtes::SaveXmlDef	JSpaceCtes.h	/^  void SaveXmlDef(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceCtes::SaveXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::SaveXmlRun(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place) const
JSpaceCtes::SaveXmlRun	JSpaceCtes.h	/^  void SaveXmlRun(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceCtes::SetB	JSpaceCtes.h	/^  void SetB(double v){ B=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetBAuto	JSpaceCtes.h	/^  void SetBAuto(bool on){ BAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetCFLnumber	JSpaceCtes.h	/^  void SetCFLnumber(double v){ $/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetCoefH	JSpaceCtes.h	/^  void SetCoefH(double v){ CoefH=v; CoefHdp=0; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetCoefHdp	JSpaceCtes.h	/^  void SetCoefHdp(double v){ if(v){ CoefHdp=v; CoefH=0; } }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetCoefSound	JSpaceCtes.h	/^  void SetCoefSound(double v){ CoefSound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetCoefficient	JSpaceCtes.h	/^  void SetCoefficient(double v){ SetCoefH(v); }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetDp	JSpaceCtes.h	/^  void SetDp(double v){ Dp=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetEps	JSpaceCtes.h	/^  void SetEps(double v){ Eps=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetGamma	JSpaceCtes.h	/^  void SetGamma(double v){ Gamma=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetGravity	JSpaceCtes.h	/^  void SetGravity(const tdouble3& g){ Gravity=g; }$/;"	f	class:JSpaceCtes	access:public	signature:(const tdouble3& g)
JSpaceCtes::SetH	JSpaceCtes.h	/^  void SetH(double v){ H=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetHAuto	JSpaceCtes.h	/^  void SetHAuto(bool on){ HAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetHSwl	JSpaceCtes.h	/^  void SetHSwl(double v){ HSwl=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetHSwlAuto	JSpaceCtes.h	/^  void SetHSwlAuto(bool on){ HSwlAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetLatticeBound	JSpaceCtes.h	/^  void SetLatticeBound(bool simple){ LatticeBound=(simple? 1: 2); }$/;"	f	class:JSpaceCtes	access:public	signature:(bool simple)
JSpaceCtes::SetLatticeFluid	JSpaceCtes.h	/^  void SetLatticeFluid(bool simple){ LatticeFluid=(simple? 1: 2); }$/;"	f	class:JSpaceCtes	access:public	signature:(bool simple)
JSpaceCtes::SetMassBound	JSpaceCtes.h	/^  void SetMassBound(double v){ MassBound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetMassBoundAuto	JSpaceCtes.h	/^  void SetMassBoundAuto(bool on){ MassBoundAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetMassFluid	JSpaceCtes.h	/^  void SetMassFluid(double v){ MassFluid=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetMassFluidAuto	JSpaceCtes.h	/^  void SetMassFluidAuto(bool on){ MassFluidAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetRhop0	JSpaceCtes.h	/^  void SetRhop0(double v){ Rhop0=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetSpeedSound	JSpaceCtes.h	/^  void SetSpeedSound(double v){ SpeedSound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetSpeedSoundAuto	JSpaceCtes.h	/^  void SetSpeedSoundAuto(bool on){ SpeedSoundAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SetSpeedSystem	JSpaceCtes.h	/^  void SetSpeedSystem(double v){ SpeedSystem=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
JSpaceCtes::SetSpeedSystemAuto	JSpaceCtes.h	/^  void SetSpeedSystemAuto(bool on){ SpeedSystemAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
JSpaceCtes::SpeedSound	JSpaceCtes.h	/^  double SpeedSound;      \/\/\/<Speed of sound to use in the simulation (by default speedofsound=coefsound*speedsystem).$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::SpeedSoundAuto	JSpaceCtes.h	/^  bool SpeedSoundAuto;    \/\/\/<Activates the automatic computation of SpeedSound.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::SpeedSystem	JSpaceCtes.h	/^  double SpeedSystem;     \/\/\/<Maximum system speed.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::SpeedSystemAuto	JSpaceCtes.h	/^  bool SpeedSystemAuto;   \/\/\/<Activates the automatic computation of SpeedSystem.$/;"	m	class:JSpaceCtes	access:private
JSpaceCtes::StConstants	JSpaceCtes.h	/^  }StConstants;$/;"	t	class:JSpaceCtes	typeref:struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants	JSpaceCtes.h	/^  typedef struct StrConstants{$/;"	s	class:JSpaceCtes	access:public
JSpaceCtes::StrConstants::Clear	JSpaceCtes.h	/^    void Clear(){ $/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:()
JSpaceCtes::StrConstants::StrConstants	JSpaceCtes.h	/^    StrConstants(){ Clear(); }$/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:()
JSpaceCtes::StrConstants::StrConstants	JSpaceCtes.h	/^    StrConstants(bool vdata2d,tdouble3 vgravity,double vdp,double vcoefh,double vcoefhdp,double vhswl$/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:(bool vdata2d,tdouble3 vgravity,double vdp,double vcoefh,double vcoefhdp,double vhswl ,double vspeedsystem,double vcoefsound,double vspeedsound,double vgamma,double vrhop0 ,double vcteh,double vcteb,double vmassbound,double vmassfluid)
JSpaceCtes::StrConstants::coefh	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::coefhdp	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::coefsound	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::cteb	JSpaceCtes.h	/^    double cteh,cteb;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::cteh	JSpaceCtes.h	/^    double cteh,cteb;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::data2d	JSpaceCtes.h	/^    bool data2d;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::dp	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::gamma	JSpaceCtes.h	/^    double gamma,rhop0;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::gravity	JSpaceCtes.h	/^    tdouble3 gravity;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::hswl	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::massbound	JSpaceCtes.h	/^    double massbound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::massfluid	JSpaceCtes.h	/^    double massfluid;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::rhop0	JSpaceCtes.h	/^    double gamma,rhop0;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::speedsound	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::StrConstants::speedsystem	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
JSpaceCtes::WriteXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlDef(JXml *sxml,TiXmlElement* node)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node) const
JSpaceCtes::WriteXmlDef	JSpaceCtes.h	/^  void WriteXmlDef(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
JSpaceCtes::WriteXmlElementAuto	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlElementAuto(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment,std::string unitscomment)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment,std::string unitscomment) const
JSpaceCtes::WriteXmlElementAuto	JSpaceCtes.h	/^  void WriteXmlElementAuto(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment="",std::string unitscomment="")const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment=Ó,std::string unitscomment=Ó) const
JSpaceCtes::WriteXmlElementComment	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlElementComment(TiXmlElement* ele,std::string comment,std::string unitscomment)const{$/;"	f	class:JSpaceCtes	signature:(TiXmlElement* ele,std::string comment,std::string unitscomment) const
JSpaceCtes::WriteXmlElementComment	JSpaceCtes.h	/^  void WriteXmlElementComment(TiXmlElement* ele,std::string comment="",std::string unitscomment="")const;$/;"	p	class:JSpaceCtes	access:private	signature:(TiXmlElement* ele,std::string comment=Ó,std::string unitscomment=Ó) const
JSpaceCtes::WriteXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlRun(JXml *sxml,TiXmlElement* node)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node) const
JSpaceCtes::WriteXmlRun	JSpaceCtes.h	/^  void WriteXmlRun(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
JSpaceEParms	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParms(){$/;"	f	class:JSpaceEParms	signature:()
JSpaceEParms	JSpaceEParms.h	/^  JSpaceEParms();$/;"	p	class:JSpaceEParms	access:public	signature:()
JSpaceEParms	JSpaceEParms.h	/^class JSpaceEParms : protected JObject$/;"	c	inherits:JObject
JSpaceEParms::Add	JSpaceEParms.cpp	/^void JSpaceEParms::Add(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment)
JSpaceEParms::Add	JSpaceEParms.h	/^  void Add(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment="");$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &value,const std::string &comment,const std::string &unitscomment=Ó)
JSpaceEParms::Count	JSpaceEParms.h	/^  unsigned Count()const{ return(unsigned(List.size())); }$/;"	f	class:JSpaceEParms	access:public	signature:() const
JSpaceEParms::Exists	JSpaceEParms.h	/^  bool Exists(const std::string &key){ return(GetItemPointer(key)!=NULL); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key)
JSpaceEParms::GetItemPointer	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParmsItem* JSpaceEParms::GetItemPointer(const std::string &key){$/;"	f	class:JSpaceEParms	signature:(const std::string &key)
JSpaceEParms::GetItemPointer	JSpaceEParms.h	/^  JSpaceEParmsItem* GetItemPointer(const std::string &key);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key)
JSpaceEParms::GetParm	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParmsItem JSpaceEParms::GetParm(unsigned pos)const{$/;"	f	class:JSpaceEParms	signature:(unsigned pos) const
JSpaceEParms::GetParm	JSpaceEParms.h	/^  JSpaceEParmsItem GetParm(unsigned pos)const;$/;"	p	class:JSpaceEParms	access:public	signature:(unsigned pos) const
JSpaceEParms::GetValue	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValue(const std::string &key){$/;"	f	class:JSpaceEParms	signature:(const std::string &key)
JSpaceEParms::GetValue	JSpaceEParms.h	/^  std::string GetValue(const std::string &key);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key)
JSpaceEParms::GetValueDouble	JSpaceEParms.h	/^  double GetValueDouble(const std::string &key,bool optional=false,double valdef=0){ return(GetValueNumDouble(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,double valdef=0)
JSpaceEParms::GetValueDouble3	JSpaceEParms.h	/^  tdouble3 GetValueDouble3(const std::string &key,bool optional=false,tdouble3 valdef=TDouble3(0)){ return(TDouble3(GetValueNumDouble(key,0,optional,valdef.x),GetValueNumDouble(key,1,optional,valdef.y),GetValueNumDouble(key,2,optional,valdef.z))); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,tdouble3 valdef=TDouble3(0))
JSpaceEParms::GetValueFloat	JSpaceEParms.h	/^  float GetValueFloat(const std::string &key,bool optional=false,float valdef=0){ return(GetValueNumFloat(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,float valdef=0)
JSpaceEParms::GetValueInt	JSpaceEParms.h	/^  int GetValueInt(const std::string &key,bool optional=false,int valdef=0){ return(GetValueNumInt(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,int valdef=0)
JSpaceEParms::GetValueNum	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValueNum(const std::string &key,int num){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num)
JSpaceEParms::GetValueNum	JSpaceEParms.h	/^  std::string GetValueNum(const std::string &key,int num);$/;"	p	class:JSpaceEParms	access:private	signature:(const std::string &key,int num)
JSpaceEParms::GetValueNumDouble	JSpaceEParms.cpp	/^double JSpaceEParms::GetValueNumDouble(const std::string &key,int num,bool optional,double valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,double valdef)
JSpaceEParms::GetValueNumDouble	JSpaceEParms.h	/^  double GetValueNumDouble(const std::string &key,int num,bool optional=false,double valdef=0);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,double valdef=0)
JSpaceEParms::GetValueNumFloat	JSpaceEParms.h	/^  float GetValueNumFloat(const std::string &key,int num,bool optional=false,float valdef=0){ return(float(GetValueNumDouble(key,num,optional,valdef))); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,float valdef=0)
JSpaceEParms::GetValueNumInt	JSpaceEParms.cpp	/^int JSpaceEParms::GetValueNumInt(const std::string &key,int num,bool optional,int valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,int valdef)
JSpaceEParms::GetValueNumInt	JSpaceEParms.h	/^  int GetValueNumInt(const std::string &key,int num,bool optional=false,int valdef=0);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,int valdef=0)
JSpaceEParms::GetValueNumStr	JSpaceEParms.cpp	/^std::string JSpaceEParms::GetValueNumStr(const std::string &key,int num,bool optional,std::string valdef){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,int num,bool optional,std::string valdef)
JSpaceEParms::GetValueNumStr	JSpaceEParms.h	/^  std::string GetValueNumStr(const std::string &key,int num,bool optional=false,std::string valdef="");$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,int num,bool optional=false,std::string valdef=Ó)
JSpaceEParms::GetValueStr	JSpaceEParms.h	/^  std::string GetValueStr(const std::string &key,bool optional=false,std::string valdef=""){ return(GetValueNumStr(key,0,optional,valdef)); }$/;"	f	class:JSpaceEParms	access:public	signature:(const std::string &key,bool optional=false,std::string valdef=Ó)
JSpaceEParms::JSpaceEParms	JSpaceEParms.cpp	/^JSpaceEParms::JSpaceEParms(){$/;"	f	class:JSpaceEParms	signature:()
JSpaceEParms::JSpaceEParms	JSpaceEParms.h	/^  JSpaceEParms();$/;"	p	class:JSpaceEParms	access:public	signature:()
JSpaceEParms::JSpaceEParmsItem	JSpaceEParms.h	/^  }JSpaceEParmsItem;$/;"	t	class:JSpaceEParms	typeref:struct:JSpaceEParms::__anon25	access:public
JSpaceEParms::List	JSpaceEParms.h	/^  VecList List;$/;"	m	class:JSpaceEParms	access:private
JSpaceEParms::LoadFileXml	JSpaceEParms.cpp	/^void JSpaceEParms::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceEParms	signature:(const std::string &file,const std::string &path)
JSpaceEParms::LoadFileXml	JSpaceEParms.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &file,const std::string &path)
JSpaceEParms::LoadXml	JSpaceEParms.cpp	/^void JSpaceEParms::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,const std::string &place)
JSpaceEParms::LoadXml	JSpaceEParms.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceEParms	access:public	signature:(JXml *sxml,const std::string &place)
JSpaceEParms::ReadXml	JSpaceEParms.cpp	/^void JSpaceEParms::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,TiXmlElement* lis)
JSpaceEParms::ReadXml	JSpaceEParms.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceEParms	access:private	signature:(JXml *sxml,TiXmlElement* lis)
JSpaceEParms::Reset	JSpaceEParms.cpp	/^void JSpaceEParms::Reset(){$/;"	f	class:JSpaceEParms	signature:()
JSpaceEParms::Reset	JSpaceEParms.h	/^  void Reset();$/;"	p	class:JSpaceEParms	access:public	signature:()
JSpaceEParms::SaveFileXml	JSpaceEParms.cpp	/^void JSpaceEParms::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceEParms	signature:(const std::string &file,const std::string &path,bool newfile) const
JSpaceEParms::SaveFileXml	JSpaceEParms.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
JSpaceEParms::SaveXml	JSpaceEParms.cpp	/^void JSpaceEParms::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,const std::string &place) const
JSpaceEParms::SaveXml	JSpaceEParms.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceEParms	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceEParms::SetComment	JSpaceEParms.cpp	/^void JSpaceEParms::SetComment(const std::string &key,const std::string &comment){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &comment)
JSpaceEParms::SetComment	JSpaceEParms.h	/^  void SetComment(const std::string &key,const std::string &comment);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &comment)
JSpaceEParms::SetValue	JSpaceEParms.cpp	/^void JSpaceEParms::SetValue(const std::string &key,const std::string &value){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &value)
JSpaceEParms::SetValue	JSpaceEParms.h	/^  void SetValue(const std::string &key,const std::string &value);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &value)
JSpaceEParms::ToString	JSpaceEParms.cpp	/^std::string JSpaceEParms::ToString(unsigned pos)const{$/;"	f	class:JSpaceEParms	signature:(unsigned pos) const
JSpaceEParms::ToString	JSpaceEParms.h	/^  std::string ToString(unsigned pos)const;$/;"	p	class:JSpaceEParms	access:public	signature:(unsigned pos) const
JSpaceEParms::VecList	JSpaceEParms.h	/^  typedef std::vector<JSpaceEParmsItem> VecList;$/;"	t	class:JSpaceEParms	access:private
JSpaceEParms::VecListIt	JSpaceEParms.h	/^  typedef std::vector<JSpaceEParmsItem>::iterator VecListIt;$/;"	t	class:JSpaceEParms	access:private
JSpaceEParms::WriteXml	JSpaceEParms.cpp	/^void JSpaceEParms::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceEParms::WriteXml	JSpaceEParms.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceEParms	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceEParms::__anon25::comment	JSpaceEParms.h	/^    std::string comment;$/;"	m	struct:JSpaceEParms::__anon25	access:public
JSpaceEParms::__anon25::key	JSpaceEParms.h	/^    std::string key;$/;"	m	struct:JSpaceEParms::__anon25	access:public
JSpaceEParms::__anon25::unitscomment	JSpaceEParms.h	/^    std::string unitscomment;$/;"	m	struct:JSpaceEParms::__anon25	access:public
JSpaceEParms::__anon25::value	JSpaceEParms.h	/^    std::string value;$/;"	m	struct:JSpaceEParms::__anon25	access:public
JSpaceEParms::~JSpaceEParms	JSpaceEParms.cpp	/^JSpaceEParms::~JSpaceEParms(){$/;"	f	class:JSpaceEParms	signature:()
JSpaceEParms::~JSpaceEParms	JSpaceEParms.h	/^  ~JSpaceEParms();$/;"	p	class:JSpaceEParms	access:public	signature:()
JSpaceEParmsItem	JSpaceEParms.h	/^  }JSpaceEParmsItem;$/;"	t	class:JSpaceEParms	typeref:struct:JSpaceEParms::__anon25	access:public
JSpacePartBlock	JSpaceParts.h	/^  JSpacePartBlock(const JSpaceProperties* properties,TpParticles type,const char* name$/;"	f	class:JSpacePartBlock	access:public	signature:(const JSpaceProperties* properties,TpParticles type,const char* name ,word mktype=0,unsigned begin=0,unsigned count=0)
JSpacePartBlock	JSpaceParts.h	/^class JSpacePartBlock : public JObject$/;"	c	inherits:JObject
JSpacePartBlock::Begin	JSpaceParts.h	/^  unsigned Begin;                       \/\/\/<Id of the first particle of the block.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::Bound	JSpaceParts.h	/^  const bool Bound;          \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JSpacePartBlock	access:public
JSpacePartBlock::ConfigMk	JSpaceParts.h	/^  void ConfigMk(word mkfirst){ Mk=MkType+mkfirst; }$/;"	f	class:JSpacePartBlock	access:public	signature:(word mkfirst)
JSpacePartBlock::Count	JSpaceParts.h	/^  unsigned Count;                       \/\/\/<Number of particles.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::ExistsSubValue	JSpaceParts.cpp	/^bool JSpacePartBlock::ExistsSubValue(std::string name,std::string subname)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname) const
JSpacePartBlock::ExistsSubValue	JSpaceParts.h	/^  bool ExistsSubValue(std::string name,std::string subname)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname) const
JSpacePartBlock::ExistsValue	JSpaceParts.cpp	/^bool JSpacePartBlock::ExistsValue(std::string name)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name) const
JSpacePartBlock::ExistsValue	JSpaceParts.h	/^  bool ExistsValue(std::string name)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetBegin	JSpaceParts.h	/^  unsigned GetBegin()const{ return(Begin); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetCount	JSpaceParts.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetMk	JSpaceParts.h	/^  word GetMk()const{ return(Mk); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetMkType	JSpaceParts.h	/^  word GetMkType()const{ return(MkType); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetNameXml	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetNameXml()const{$/;"	f	class:JSpacePartBlock	signature:() const
JSpacePartBlock::GetNameXml	JSpaceParts.h	/^  std::string GetNameXml()const;$/;"	p	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetProperty	JSpaceParts.h	/^  std::string GetProperty()const{ return(Props); }$/;"	f	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::GetSubValueDouble	JSpaceParts.cpp	/^double JSpacePartBlock::GetSubValueDouble(std::string name,std::string subname,bool optional,double valdef)const{   $/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,double valdef) const
JSpacePartBlock::GetSubValueDouble	JSpaceParts.h	/^  double GetSubValueDouble(std::string name,std::string subname,bool optional=false,double valdef=0)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,double valdef=0) const
JSpacePartBlock::GetSubValueDouble	JSpaceParts.h	/^  double GetSubValueDouble(unsigned idx,unsigned subidx)const{  return(atof(GetSubValueStr(idx,subidx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueDouble3	JSpaceParts.h	/^  tdouble3 GetSubValueDouble3(std::string name)const{ return(TDouble3(GetSubValueDouble(name,"x"),GetSubValueDouble(name,"y"),GetSubValueDouble(name,"z"))); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetSubValueFloat	JSpaceParts.h	/^  float GetSubValueFloat(std::string name,std::string subname,bool optional=false,float valdef=0)const{  return(float(GetSubValueDouble(name,subname,optional,valdef)));  }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,float valdef=0) const
JSpacePartBlock::GetSubValueFloat	JSpaceParts.h	/^  float GetSubValueFloat(unsigned idx,unsigned subidx)const{    return(float(GetSubValueDouble(idx,subidx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueFloat3	JSpaceParts.h	/^  tfloat3 GetSubValueFloat3(std::string name)const{ return(ToTFloat3(GetSubValueDouble3(name))); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetSubValueInt	JSpaceParts.cpp	/^int JSpacePartBlock::GetSubValueInt(std::string name,std::string subname,bool optional,int valdef)const{   $/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,int valdef) const
JSpacePartBlock::GetSubValueInt	JSpaceParts.h	/^  int GetSubValueInt(std::string name,std::string subname,bool optional=false,int valdef=0)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,int valdef=0) const
JSpacePartBlock::GetSubValueInt	JSpaceParts.h	/^  int GetSubValueInt(unsigned idx,unsigned subidx)const{        return(atoi(GetSubValueStr(idx,subidx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueName	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueName(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueName	JSpaceParts.h	/^  std::string GetSubValueName(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueStr(std::string name,std::string subname,bool optional,std::string valdef)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name,std::string subname,bool optional,std::string valdef) const
JSpacePartBlock::GetSubValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetSubValueStr(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueStr	JSpaceParts.h	/^  std::string GetSubValueStr(std::string name,std::string subname,bool optional=false,std::string valdef="")const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,std::string valdef=Ó) const
JSpacePartBlock::GetSubValueStr	JSpaceParts.h	/^  std::string GetSubValueStr(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValueUint	JSpaceParts.h	/^  unsigned GetSubValueUint(std::string name,std::string subname,bool optional=false,unsigned valdef=0)const{  return(unsigned(GetSubValueInt(name,subname,optional,int(valdef))));  }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name,std::string subname,bool optional=false,unsigned valdef=0) const
JSpacePartBlock::GetSubValueUint	JSpaceParts.h	/^  unsigned GetSubValueUint(unsigned idx,unsigned subidx)const{  return(unsigned(GetSubValueInt(idx,subidx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePartBlock::GetSubValuesCount	JSpaceParts.cpp	/^unsigned JSpacePartBlock::GetSubValuesCount(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
JSpacePartBlock::GetSubValuesCount	JSpaceParts.h	/^  unsigned GetSubValuesCount(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueDouble	JSpaceParts.h	/^  double GetValueDouble(std::string name)const{  return(atof(GetValueStr(name).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetValueDouble	JSpaceParts.h	/^  double GetValueDouble(unsigned idx)const{  return(atof(GetValueStr(idx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueFloat	JSpaceParts.h	/^  float GetValueFloat(std::string name)const{    return(float(GetValueDouble(name)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetValueFloat	JSpaceParts.h	/^  float GetValueFloat(unsigned idx)const{    return(float(GetValueDouble(idx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueInt	JSpaceParts.h	/^  int GetValueInt(std::string name)const{        return(atoi(GetValueStr(name).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetValueInt	JSpaceParts.h	/^  int GetValueInt(unsigned idx)const{        return(atoi(GetValueStr(idx).c_str())); }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueName	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueName(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
JSpacePartBlock::GetValueName	JSpaceParts.h	/^  std::string GetValueName(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueStr(std::string name)const{$/;"	f	class:JSpacePartBlock	signature:(std::string name) const
JSpacePartBlock::GetValueStr	JSpaceParts.cpp	/^std::string JSpacePartBlock::GetValueStr(unsigned idx)const{$/;"	f	class:JSpacePartBlock	signature:(unsigned idx) const
JSpacePartBlock::GetValueStr	JSpaceParts.h	/^  std::string GetValueStr(std::string name)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetValueStr	JSpaceParts.h	/^  std::string GetValueStr(unsigned idx)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValueUint	JSpaceParts.h	/^  unsigned GetValueUint(std::string name)const{  return(unsigned(GetValueInt(name)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(std::string name) const
JSpacePartBlock::GetValueUint	JSpaceParts.h	/^  unsigned GetValueUint(unsigned idx)const{  return(unsigned(GetValueInt(idx)));     }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned idx) const
JSpacePartBlock::GetValuesCount	JSpaceParts.cpp	/^unsigned JSpacePartBlock::GetValuesCount()const{$/;"	f	class:JSpacePartBlock	signature:() const
JSpacePartBlock::GetValuesCount	JSpaceParts.h	/^  unsigned GetValuesCount()const;$/;"	p	class:JSpacePartBlock	access:public	signature:() const
JSpacePartBlock::JSpacePartBlock	JSpaceParts.h	/^  JSpacePartBlock(const JSpaceProperties* properties,TpParticles type,const char* name$/;"	f	class:JSpacePartBlock	access:public	signature:(const JSpaceProperties* properties,TpParticles type,const char* name ,word mktype=0,unsigned begin=0,unsigned count=0)
JSpacePartBlock::Mk	JSpaceParts.h	/^  word Mk;                              \/\/\/<Absolute label.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::MkType	JSpaceParts.h	/^  word MkType;                          \/\/\/<Label of block fluid or bound.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::Properties	JSpaceParts.h	/^  const JSpaceProperties* Properties;   \/\/\/<Pointer to properties object.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::Props	JSpaceParts.h	/^  std::string Props;                    \/\/\/<Assigned properties.$/;"	m	class:JSpacePartBlock	access:private
JSpacePartBlock::ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock::ReadXml	JSpaceParts.h	/^  virtual void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock::SetBegin	JSpaceParts.h	/^  void SetBegin(unsigned begin){ Begin=begin; }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned begin)
JSpacePartBlock::SetCount	JSpaceParts.h	/^  void SetCount(unsigned count){ Count=count; }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned count)
JSpacePartBlock::Type	JSpaceParts.h	/^  const TpParticles Type;    \/\/\/<Type of particle.$/;"	m	class:JSpacePartBlock	access:public
JSpacePartBlock::UpdateProperty	JSpaceParts.cpp	/^void JSpacePartBlock::UpdateProperty(){$/;"	f	class:JSpacePartBlock	signature:()
JSpacePartBlock::UpdateProperty	JSpaceParts.h	/^  void UpdateProperty();$/;"	p	class:JSpacePartBlock	access:public	signature:()
JSpacePartBlock::WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock	signature:(JXml *sxml,TiXmlElement* ele) const
JSpacePartBlock::WriteXml	JSpaceParts.h	/^  virtual TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
JSpacePartBlock::~JSpacePartBlock	JSpaceParts.h	/^  virtual ~JSpacePartBlock(){ DestructorActive=true; }$/;"	f	class:JSpacePartBlock	access:public	signature:()
JSpacePartBlock_Fixed	JSpaceParts.h	/^  JSpacePartBlock_Fixed(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFixed,"Fixed"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Fixed	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Fixed	JSpaceParts.h	/^  JSpacePartBlock_Fixed(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count):JSpacePartBlock(properties,TpPartFixed,"Fixed",mktype,begin,count){}$/;"	f	class:JSpacePartBlock_Fixed	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count)
JSpacePartBlock_Fixed	JSpaceParts.h	/^class JSpacePartBlock_Fixed : public JSpacePartBlock$/;"	c	inherits:JSpacePartBlock
JSpacePartBlock_Fixed::JSpacePartBlock_Fixed	JSpaceParts.h	/^  JSpacePartBlock_Fixed(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFixed,"Fixed"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Fixed	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Fixed::JSpacePartBlock_Fixed	JSpaceParts.h	/^  JSpacePartBlock_Fixed(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count):JSpacePartBlock(properties,TpPartFixed,"Fixed",mktype,begin,count){}$/;"	f	class:JSpacePartBlock_Fixed	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count)
JSpacePartBlock_Floating	JSpaceParts.h	/^  JSpacePartBlock_Floating(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFloating,"Floating"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Floating	JSpaceParts.h	/^  JSpacePartBlock_Floating(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini):JSpacePartBlock(properties,TpPartFloating,"Floating",mktype,begin,count),Massbody(massbody),Center(center),Inertia(inertia),Velini(velini),Omegaini(omegaini){}$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini)
JSpacePartBlock_Floating	JSpaceParts.h	/^class JSpacePartBlock_Floating : public JSpacePartBlock$/;"	c	inherits:JSpacePartBlock
JSpacePartBlock_Floating::Center	JSpaceParts.h	/^  tdouble3 Center;$/;"	m	class:JSpacePartBlock_Floating	access:private
JSpacePartBlock_Floating::GetCenter	JSpaceParts.h	/^  tdouble3 GetCenter()const{ return(Center); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
JSpacePartBlock_Floating::GetInertia	JSpaceParts.h	/^  tmatrix3d GetInertia()const{ return(Inertia); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
JSpacePartBlock_Floating::GetMassbody	JSpaceParts.h	/^  double GetMassbody()const{ return(Massbody); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
JSpacePartBlock_Floating::GetOmegaini	JSpaceParts.h	/^  tdouble3 GetOmegaini()const{ return(Omegaini); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
JSpacePartBlock_Floating::GetVelini	JSpaceParts.h	/^  tdouble3 GetVelini()const{ return(Velini); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:() const
JSpacePartBlock_Floating::Inertia	JSpaceParts.h	/^  tmatrix3d Inertia;$/;"	m	class:JSpacePartBlock_Floating	access:private
JSpacePartBlock_Floating::JSpacePartBlock_Floating	JSpaceParts.h	/^  JSpacePartBlock_Floating(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFloating,"Floating"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Floating::JSpacePartBlock_Floating	JSpaceParts.h	/^  JSpacePartBlock_Floating(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini):JSpacePartBlock(properties,TpPartFloating,"Floating",mktype,begin,count),Massbody(massbody),Center(center),Inertia(inertia),Velini(velini),Omegaini(omegaini){}$/;"	f	class:JSpacePartBlock_Floating	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini)
JSpacePartBlock_Floating::Massbody	JSpaceParts.h	/^  double Massbody;$/;"	m	class:JSpacePartBlock_Floating	access:private
JSpacePartBlock_Floating::Omegaini	JSpaceParts.h	/^  tdouble3 Omegaini;$/;"	m	class:JSpacePartBlock_Floating	access:private
JSpacePartBlock_Floating::ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock_Floating::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock_Floating	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Floating::ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock_Floating	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Floating::Velini	JSpaceParts.h	/^  tdouble3 Velini;$/;"	m	class:JSpacePartBlock_Floating	access:private
JSpacePartBlock_Floating::WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock_Floating::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock_Floating	signature:(JXml *sxml,TiXmlElement* ele) const
JSpacePartBlock_Floating::WriteXml	JSpaceParts.h	/^  TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock_Floating	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
JSpacePartBlock_Fluid	JSpaceParts.h	/^  JSpacePartBlock_Fluid(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFluid,"Fluid"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Fluid	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Fluid	JSpaceParts.h	/^  JSpacePartBlock_Fluid(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count):JSpacePartBlock(properties,TpPartFluid,"Fluid",mktype,begin,count){}$/;"	f	class:JSpacePartBlock_Fluid	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count)
JSpacePartBlock_Fluid	JSpaceParts.h	/^class JSpacePartBlock_Fluid : public JSpacePartBlock$/;"	c	inherits:JSpacePartBlock
JSpacePartBlock_Fluid::JSpacePartBlock_Fluid	JSpaceParts.h	/^  JSpacePartBlock_Fluid(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartFluid,"Fluid"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Fluid	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Fluid::JSpacePartBlock_Fluid	JSpaceParts.h	/^  JSpacePartBlock_Fluid(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count):JSpacePartBlock(properties,TpPartFluid,"Fluid",mktype,begin,count){}$/;"	f	class:JSpacePartBlock_Fluid	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count)
JSpacePartBlock_Moving	JSpaceParts.h	/^  JSpacePartBlock_Moving(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartMoving,"Moving"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Moving	JSpaceParts.h	/^  JSpacePartBlock_Moving(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,unsigned refmotion):JSpacePartBlock(properties,TpPartMoving,"Moving",mktype,begin,count),RefMotion(refmotion){}$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,unsigned refmotion)
JSpacePartBlock_Moving	JSpaceParts.h	/^class JSpacePartBlock_Moving : public JSpacePartBlock$/;"	c	inherits:JSpacePartBlock
JSpacePartBlock_Moving::GetRefMotion	JSpaceParts.h	/^  unsigned GetRefMotion()const{ return(RefMotion); }$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:() const
JSpacePartBlock_Moving::JSpacePartBlock_Moving	JSpaceParts.h	/^  JSpacePartBlock_Moving(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele):JSpacePartBlock(properties,TpPartMoving,"Moving"){ ReadXml(sxml,ele); }$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:(const JSpaceProperties* properties,JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Moving::JSpacePartBlock_Moving	JSpaceParts.h	/^  JSpacePartBlock_Moving(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,unsigned refmotion):JSpacePartBlock(properties,TpPartMoving,"Moving",mktype,begin,count),RefMotion(refmotion){}$/;"	f	class:JSpacePartBlock_Moving	access:public	signature:(const JSpaceProperties* properties,word mktype,unsigned begin,unsigned count,unsigned refmotion)
JSpacePartBlock_Moving::ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock_Moving::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock_Moving	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Moving::ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock_Moving	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSpacePartBlock_Moving::RefMotion	JSpaceParts.h	/^  unsigned RefMotion;$/;"	m	class:JSpacePartBlock_Moving	access:private
JSpacePartBlock_Moving::WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock_Moving::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock_Moving	signature:(JXml *sxml,TiXmlElement* ele) const
JSpacePartBlock_Moving::WriteXml	JSpaceParts.h	/^  TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock_Moving	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
JSpaceParts	JSpaceParts.cpp	/^JSpaceParts::JSpaceParts(){$/;"	f	class:JSpaceParts	signature:()
JSpaceParts	JSpaceParts.h	/^  JSpaceParts();$/;"	p	class:JSpaceParts	access:public	signature:()
JSpaceParts	JSpaceParts.h	/^class JSpaceParts  : protected JObject$/;"	c	inherits:JObject
JSpaceParts::Add	JSpaceParts.cpp	/^void JSpaceParts::Add(JSpacePartBlock* block){$/;"	f	class:JSpaceParts	signature:(JSpacePartBlock* block)
JSpaceParts::Add	JSpaceParts.h	/^  void Add(JSpacePartBlock* block);$/;"	p	class:JSpaceParts	access:private	signature:(JSpacePartBlock* block)
JSpaceParts::AddFixed	JSpaceParts.h	/^  void AddFixed(word mktype,unsigned count){ Add(new JSpacePartBlock_Fixed(Properties,mktype,GetBegin(),count)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count)
JSpaceParts::AddFloating	JSpaceParts.h	/^  void AddFloating(word mktype,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini){ Add(new JSpacePartBlock_Floating(Properties,mktype,GetBegin(),count,massbody,center,inertia,velini,omegaini)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count,double massbody,const tdouble3& center,const tmatrix3d& inertia,const tdouble3& velini,const tdouble3& omegaini)
JSpaceParts::AddFluid	JSpaceParts.h	/^  void AddFluid(word mktype,unsigned count){ Add(new JSpacePartBlock_Fluid(Properties,mktype,GetBegin(),count)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count)
JSpaceParts::AddMoving	JSpaceParts.h	/^  void AddMoving(word mktype,unsigned count,unsigned refmotion){ Add(new JSpacePartBlock_Moving(Properties,mktype,GetBegin(),count,refmotion)); }$/;"	f	class:JSpaceParts	access:public	signature:(word mktype,unsigned count,unsigned refmotion)
JSpaceParts::Begin	JSpaceParts.h	/^  unsigned Begin;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::Blocks	JSpaceParts.h	/^  std::vector<JSpacePartBlock*> Blocks;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::CheckNparticles	JSpaceParts.cpp	/^bool JSpaceParts::CheckNparticles(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const{$/;"	f	class:JSpaceParts	signature:(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
JSpaceParts::CheckNparticles	JSpaceParts.cpp	/^bool JSpaceParts::CheckNparticles(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid)const{$/;"	f	class:JSpaceParts	signature:(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid) const
JSpaceParts::CheckNparticles	JSpaceParts.h	/^  bool CheckNparticles(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid)const;$/;"	p	class:JSpaceParts	access:public	signature:(ullong casenfixed,ullong casenmoving,ullong casenfloat,ullong casenfluid) const
JSpaceParts::CheckNparticles	JSpaceParts.h	/^  bool CheckNparticles(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid)const;$/;"	p	class:JSpaceParts	access:public	signature:(unsigned casenfixed,unsigned casenmoving,unsigned casenfloat,unsigned casenfluid) const
JSpaceParts::Count	JSpaceParts.cpp	/^unsigned JSpaceParts::Count()const{$/;"	f	class:JSpaceParts	signature:() const
JSpaceParts::Count	JSpaceParts.cpp	/^unsigned JSpaceParts::Count(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
JSpaceParts::Count	JSpaceParts.h	/^  unsigned Count()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
JSpaceParts::Count	JSpaceParts.h	/^  unsigned Count(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
JSpaceParts::CountBlocks	JSpaceParts.cpp	/^unsigned JSpaceParts::CountBlocks(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
JSpaceParts::CountBlocks	JSpaceParts.h	/^  unsigned CountBlocks()const{ return(unsigned(Blocks.size())); }$/;"	f	class:JSpaceParts	access:public	signature:() const
JSpaceParts::CountBlocks	JSpaceParts.h	/^  unsigned CountBlocks(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
JSpaceParts::GetBegin	JSpaceParts.h	/^  unsigned GetBegin()const{ return(Begin); }$/;"	f	class:JSpaceParts	access:private	signature:() const
JSpaceParts::GetBlock	JSpaceParts.cpp	/^const JSpacePartBlock& JSpaceParts::GetBlock(unsigned pos)const{$/;"	f	class:JSpaceParts	signature:(unsigned pos) const
JSpaceParts::GetBlock	JSpaceParts.h	/^  const JSpacePartBlock& GetBlock(unsigned pos)const;$/;"	p	class:JSpaceParts	access:public	signature:(unsigned pos) const
JSpaceParts::GetByMkType	JSpaceParts.cpp	/^JSpacePartBlock* JSpaceParts::GetByMkType(bool bound,word mktype)const{$/;"	f	class:JSpaceParts	signature:(bool bound,word mktype) const
JSpaceParts::GetByMkType	JSpaceParts.h	/^  JSpacePartBlock* GetByMkType(bool bound,word mktype)const;$/;"	p	class:JSpaceParts	access:private	signature:(bool bound,word mktype) const
JSpaceParts::GetMkBoundFirst	JSpaceParts.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JSpaceParts	access:public	signature:() const
JSpaceParts::GetMkFluidFirst	JSpaceParts.h	/^  word GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JSpaceParts	access:public	signature:() const
JSpaceParts::GetMkList	JSpaceParts.cpp	/^std::string JSpaceParts::GetMkList(TpParticles type)const{$/;"	f	class:JSpaceParts	signature:(TpParticles type) const
JSpaceParts::GetMkList	JSpaceParts.h	/^  std::string GetMkList(TpParticles type)const;$/;"	p	class:JSpaceParts	access:public	signature:(TpParticles type) const
JSpaceParts::GetParticleSummary	JSpaceParts.cpp	/^void JSpaceParts::GetParticleSummary(std::vector<std::string> &out)const{$/;"	f	class:JSpaceParts	signature:(std::vector<std::string> &out) const
JSpaceParts::GetParticleSummary	JSpaceParts.h	/^  void GetParticleSummary(std::vector<std::string> &out)const;$/;"	p	class:JSpaceParts	access:public	signature:(std::vector<std::string> &out) const
JSpaceParts::GetParticlesInfo	JSpaceParts.cpp	/^void JSpaceParts::GetParticlesInfo(std::vector<std::string> &out)const{$/;"	f	class:JSpaceParts	signature:(std::vector<std::string> &out) const
JSpaceParts::GetParticlesInfo	JSpaceParts.h	/^  void GetParticlesInfo(std::vector<std::string> &out)const;$/;"	p	class:JSpaceParts	access:public	signature:(std::vector<std::string> &out) const
JSpaceParts::GetSummaryData	JSpaceParts.cpp	/^JSpaceParts::StSummaryData JSpaceParts::GetSummaryData()const{$/;"	f	class:JSpaceParts	signature:() const
JSpaceParts::GetSummaryData	JSpaceParts.h	/^  JSpaceParts::StSummaryData GetSummaryData()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
JSpaceParts::JSpaceParts	JSpaceParts.cpp	/^JSpaceParts::JSpaceParts(){$/;"	f	class:JSpaceParts	signature:()
JSpaceParts::JSpaceParts	JSpaceParts.h	/^  JSpaceParts();$/;"	p	class:JSpaceParts	access:public	signature:()
JSpaceParts::LastType	JSpaceParts.h	/^  TpParticles LastType;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::LoadFileXml	JSpaceParts.cpp	/^void JSpaceParts::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceParts	signature:(const std::string &file,const std::string &path)
JSpaceParts::LoadFileXml	JSpaceParts.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceParts	access:public	signature:(const std::string &file,const std::string &path)
JSpaceParts::LoadProperties	JSpaceParts.cpp	/^void JSpaceParts::LoadProperties(const JSpaceProperties *props){$/;"	f	class:JSpaceParts	signature:(const JSpaceProperties *props)
JSpaceParts::LoadProperties	JSpaceParts.h	/^  void LoadProperties(const JSpaceProperties *props);$/;"	p	class:JSpaceParts	access:public	signature:(const JSpaceProperties *props)
JSpaceParts::LoadXml	JSpaceParts.cpp	/^void JSpaceParts::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceParts	signature:(JXml *sxml,const std::string &place)
JSpaceParts::LoadXml	JSpaceParts.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceParts	access:public	signature:(JXml *sxml,const std::string &place)
JSpaceParts::MkBoundFirst	JSpaceParts.h	/^  word MkBoundFirst,MkFluidFirst;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::MkFluidFirst	JSpaceParts.h	/^  word MkBoundFirst,MkFluidFirst;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::Properties	JSpaceParts.h	/^  JSpaceProperties* Properties;$/;"	m	class:JSpaceParts	access:private
JSpaceParts::ReadXml	JSpaceParts.cpp	/^void JSpaceParts::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* lis)
JSpaceParts::ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* lis)
JSpaceParts::Reset	JSpaceParts.cpp	/^void JSpaceParts::Reset(){$/;"	f	class:JSpaceParts	signature:()
JSpaceParts::Reset	JSpaceParts.h	/^  void Reset();$/;"	p	class:JSpaceParts	access:public	signature:()
JSpaceParts::SaveFileXml	JSpaceParts.cpp	/^void JSpaceParts::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceParts	signature:(const std::string &file,const std::string &path,bool newfile) const
JSpaceParts::SaveFileXml	JSpaceParts.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceParts	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
JSpaceParts::SaveXml	JSpaceParts.cpp	/^void JSpaceParts::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,const std::string &place) const
JSpaceParts::SaveXml	JSpaceParts.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceParts	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceParts::SetBlockSize	JSpaceParts.cpp	/^void JSpaceParts::SetBlockSize(unsigned pos,unsigned np){$/;"	f	class:JSpaceParts	signature:(unsigned pos,unsigned np)
JSpaceParts::SetBlockSize	JSpaceParts.h	/^  void SetBlockSize(unsigned pos,unsigned np);$/;"	p	class:JSpaceParts	access:public	signature:(unsigned pos,unsigned np)
JSpaceParts::SetMkFirst	JSpaceParts.cpp	/^void JSpaceParts::SetMkFirst(word boundfirst,word fluidfirst){$/;"	f	class:JSpaceParts	signature:(word boundfirst,word fluidfirst)
JSpaceParts::SetMkFirst	JSpaceParts.h	/^  void SetMkFirst(word boundfirst,word fluidfirst);$/;"	p	class:JSpaceParts	access:public	signature:(word boundfirst,word fluidfirst)
JSpaceParts::StSummaryData	JSpaceParts.h	/^  }StSummaryData;$/;"	t	class:JSpaceParts	typeref:struct:JSpaceParts::__anon26	access:public
JSpaceParts::VisuParticlesInfo	JSpaceParts.cpp	/^void JSpaceParts::VisuParticlesInfo()const{$/;"	f	class:JSpaceParts	signature:() const
JSpaceParts::VisuParticlesInfo	JSpaceParts.h	/^  void VisuParticlesInfo()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
JSpaceParts::WriteXml	JSpaceParts.cpp	/^void JSpaceParts::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceParts::WriteXml	JSpaceParts.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceParts::WriteXmlSummary	JSpaceParts.cpp	/^void JSpaceParts::WriteXmlSummary(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* ele) const
JSpaceParts::WriteXmlSummary	JSpaceParts.h	/^  void WriteXmlSummary(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
JSpaceParts::__anon26::idini	JSpaceParts.h	/^    unsigned idini[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
JSpaceParts::__anon26::idlast	JSpaceParts.h	/^    unsigned idlast[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
JSpaceParts::__anon26::mklist	JSpaceParts.h	/^    std::string mklist[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
JSpaceParts::__anon26::nmk	JSpaceParts.h	/^    unsigned nmk[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
JSpaceParts::__anon26::np	JSpaceParts.h	/^    unsigned np[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
JSpaceParts::~JSpaceParts	JSpaceParts.cpp	/^JSpaceParts::~JSpaceParts(){$/;"	f	class:JSpaceParts	signature:()
JSpaceParts::~JSpaceParts	JSpaceParts.h	/^  ~JSpaceParts();$/;"	p	class:JSpaceParts	access:public	signature:()
JSpacePartsGetMk	JSpaceParts.cpp	/^JSpacePartsGetMk::JSpacePartsGetMk(const JSpaceParts *sparts,bool splitting):Splitting(splitting){$/;"	f	class:JSpacePartsGetMk	signature:(const JSpaceParts *sparts,bool splitting)
JSpacePartsGetMk	JSpaceParts.h	/^  JSpacePartsGetMk(const JSpaceParts *sparts,bool splitting);$/;"	p	class:JSpacePartsGetMk	access:public	signature:(const JSpaceParts *sparts,bool splitting)
JSpacePartsGetMk	JSpaceParts.h	/^class JSpacePartsGetMk  : protected JObject$/;"	c	inherits:JObject
JSpacePartsGetMk::Config	JSpaceParts.cpp	/^void JSpacePartsGetMk::Config(const JSpaceParts *sparts){$/;"	f	class:JSpacePartsGetMk	signature:(const JSpaceParts *sparts)
JSpacePartsGetMk::Config	JSpaceParts.h	/^  void Config(const JSpaceParts *sparts);$/;"	p	class:JSpacePartsGetMk	access:private	signature:(const JSpaceParts *sparts)
JSpacePartsGetMk::GetMkCount	JSpaceParts.h	/^  unsigned GetMkCount()const{ return(MkCount); }$/;"	f	class:JSpacePartsGetMk	access:public	signature:() const
JSpacePartsGetMk::IdToMk	JSpaceParts.h	/^  inline word IdToMk(unsigned id)const{$/;"	f	class:JSpacePartsGetMk	access:public	signature:(unsigned id) const
JSpacePartsGetMk::JSpacePartsGetMk	JSpaceParts.cpp	/^JSpacePartsGetMk::JSpacePartsGetMk(const JSpaceParts *sparts,bool splitting):Splitting(splitting){$/;"	f	class:JSpacePartsGetMk	signature:(const JSpaceParts *sparts,bool splitting)
JSpacePartsGetMk::JSpacePartsGetMk	JSpaceParts.h	/^  JSpacePartsGetMk(const JSpaceParts *sparts,bool splitting);$/;"	p	class:JSpacePartsGetMk	access:public	signature:(const JSpaceParts *sparts,bool splitting)
JSpacePartsGetMk::MkCount	JSpaceParts.h	/^  unsigned MkCount;$/;"	m	class:JSpacePartsGetMk	access:private
JSpacePartsGetMk::MkRange	JSpaceParts.h	/^  unsigned *MkRange;$/;"	m	class:JSpacePartsGetMk	access:private
JSpacePartsGetMk::MkSplitting	JSpaceParts.h	/^  word MkSplitting;$/;"	m	class:JSpacePartsGetMk	access:private
JSpacePartsGetMk::MkValue	JSpaceParts.h	/^  word *MkValue;$/;"	m	class:JSpacePartsGetMk	access:private
JSpacePartsGetMk::Reset	JSpaceParts.cpp	/^void JSpacePartsGetMk::Reset(){$/;"	f	class:JSpacePartsGetMk	signature:()
JSpacePartsGetMk::Reset	JSpaceParts.h	/^  void Reset();$/;"	p	class:JSpacePartsGetMk	access:public	signature:()
JSpacePartsGetMk::Splitting	JSpaceParts.h	/^  const bool Splitting;$/;"	m	class:JSpacePartsGetMk	access:private
JSpacePartsGetMk::~JSpacePartsGetMk	JSpaceParts.cpp	/^JSpacePartsGetMk::~JSpacePartsGetMk(){$/;"	f	class:JSpacePartsGetMk	signature:()
JSpacePartsGetMk::~JSpacePartsGetMk	JSpaceParts.h	/^  ~JSpacePartsGetMk();$/;"	p	class:JSpacePartsGetMk	access:public	signature:()
JSpacePropLink	JSpaceProperties.h	/^  JSpacePropLink(TpLink type,std::string mks,std::string props):Type(type),Mks(mks),Props(props){}$/;"	f	class:JSpacePropLink	access:public	signature:(TpLink type,std::string mks,std::string props)
JSpacePropLink	JSpaceProperties.h	/^class JSpacePropLink$/;"	c
JSpacePropLink::GetMks	JSpaceProperties.h	/^  std::string GetMks()const{ return(Mks); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
JSpacePropLink::GetProps	JSpaceProperties.h	/^  std::string GetProps()const{ return(Props); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
JSpacePropLink::GetType	JSpaceProperties.h	/^  TpLink GetType()const{ return(Type); }$/;"	f	class:JSpacePropLink	access:public	signature:() const
JSpacePropLink::JSpacePropLink	JSpaceProperties.h	/^  JSpacePropLink(TpLink type,std::string mks,std::string props):Type(type),Mks(mks),Props(props){}$/;"	f	class:JSpacePropLink	access:public	signature:(TpLink type,std::string mks,std::string props)
JSpacePropLink::LINK_Mk	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
JSpacePropLink::LINK_MkBound	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
JSpacePropLink::LINK_MkFluid	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
JSpacePropLink::Mks	JSpaceProperties.h	/^  std::string Mks;                     \/\/\/<MK or list of MK values.$/;"	m	class:JSpacePropLink	access:private
JSpacePropLink::Props	JSpaceProperties.h	/^  std::string Props;                   \/\/\/<Property or list of properties.$/;"	m	class:JSpacePropLink	access:private
JSpacePropLink::TpLink	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	t	class:JSpacePropLink	typeref:enum:JSpacePropLink::__anon27	access:public
JSpacePropLink::Type	JSpaceProperties.h	/^  TpLink Type;                         \/\/\/<Type of link.$/;"	m	class:JSpacePropLink	access:private
JSpacePropLinks	JSpaceProperties.cpp	/^JSpacePropLinks::JSpacePropLinks(){$/;"	f	class:JSpacePropLinks	signature:()
JSpacePropLinks	JSpaceProperties.h	/^  JSpacePropLinks();$/;"	p	class:JSpacePropLinks	access:public	signature:()
JSpacePropLinks	JSpaceProperties.h	/^class JSpacePropLinks : public JObject$/;"	c	inherits:JObject
JSpacePropLinks::AddLink	JSpaceProperties.cpp	/^void JSpacePropLinks::AddLink(JSpacePropLink::TpLink type,std::string mks,std::string props){$/;"	f	class:JSpacePropLinks	signature:(JSpacePropLink::TpLink type,std::string mks,std::string props)
JSpacePropLinks::AddLink	JSpaceProperties.h	/^  void AddLink(JSpacePropLink::TpLink type,std::string mks,std::string props);$/;"	p	class:JSpacePropLinks	access:public	signature:(JSpacePropLink::TpLink type,std::string mks,std::string props)
JSpacePropLinks::CopyFrom	JSpaceProperties.cpp	/^void JSpacePropLinks::CopyFrom(const JSpacePropLinks* links){$/;"	f	class:JSpacePropLinks	signature:(const JSpacePropLinks* links)
JSpacePropLinks::CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpacePropLinks* links);$/;"	p	class:JSpacePropLinks	access:public	signature:(const JSpacePropLinks* links)
JSpacePropLinks::GetAllProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetAllProps()const{$/;"	f	class:JSpacePropLinks	signature:() const
JSpacePropLinks::GetAllProps	JSpaceProperties.h	/^  std::string GetAllProps()const;$/;"	p	class:JSpacePropLinks	access:public	signature:() const
JSpacePropLinks::GetCount	JSpaceProperties.h	/^  unsigned GetCount()const{ return(unsigned(Links.size())); }$/;"	f	class:JSpacePropLinks	access:public	signature:() const
JSpacePropLinks::GetProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetProps(word mk)const{$/;"	f	class:JSpacePropLinks	signature:(word mk) const
JSpacePropLinks::GetProps	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetProps(word mk,word mkboundfirst,word mkfluidfirst)const{$/;"	f	class:JSpacePropLinks	signature:(word mk,word mkboundfirst,word mkfluidfirst) const
JSpacePropLinks::GetProps	JSpaceProperties.h	/^  std::string GetProps(word mk)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk) const
JSpacePropLinks::GetProps	JSpaceProperties.h	/^  std::string GetProps(word mk,word mkboundfirst,word mkfluidfirst)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk,word mkboundfirst,word mkfluidfirst) const
JSpacePropLinks::GetPropsFast	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetPropsFast(word mk,word mkboundfirst,word mkfluidfirst$/;"	f	class:JSpacePropLinks	signature:(word mk,word mkboundfirst,word mkfluidfirst ,std::vector<std::string> &vprops_mk ,std::vector<std::string> &vprops_mkb ,std::vector<std::string> &vprops_mkf) const
JSpacePropLinks::GetPropsFast	JSpaceProperties.h	/^  std::string GetPropsFast(word mk,word mkboundfirst,word mkfluidfirst$/;"	p	class:JSpacePropLinks	access:public	signature:(word mk,word mkboundfirst,word mkfluidfirst ,std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf) const
JSpacePropLinks::GetPropsList	JSpaceProperties.cpp	/^void JSpacePropLinks::GetPropsList(std::vector<std::string> &vprops_mk$/;"	f	class:JSpacePropLinks	signature:(std::vector<std::string> &vprops_mk ,std::vector<std::string> &vprops_mkb ,std::vector<std::string> &vprops_mkf) const
JSpacePropLinks::GetPropsList	JSpaceProperties.h	/^  void GetPropsList(std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(std::vector<std::string> &vprops_mk,std::vector<std::string> &vprops_mkb,std::vector<std::string> &vprops_mkf) const
JSpacePropLinks::GetPropsSort	JSpaceProperties.cpp	/^std::string JSpacePropLinks::GetPropsSort(std::string props){$/;"	f	class:JSpacePropLinks	signature:(std::string props)
JSpacePropLinks::GetPropsSort	JSpaceProperties.h	/^  static std::string GetPropsSort(std::string props);$/;"	p	class:JSpacePropLinks	access:private	signature:(std::string props)
JSpacePropLinks::JSpacePropLinks	JSpaceProperties.cpp	/^JSpacePropLinks::JSpacePropLinks(){$/;"	f	class:JSpacePropLinks	signature:()
JSpacePropLinks::JSpacePropLinks	JSpaceProperties.h	/^  JSpacePropLinks();$/;"	p	class:JSpacePropLinks	access:public	signature:()
JSpacePropLinks::Links	JSpaceProperties.h	/^  std::vector<JSpacePropLink*> Links;  \/\/\/<List of links.$/;"	m	class:JSpacePropLinks	access:private
JSpacePropLinks::ReadXml	JSpaceProperties.cpp	/^void JSpacePropLinks::ReadXml(JXml *sxml,TiXmlElement* eprops){$/;"	f	class:JSpacePropLinks	signature:(JXml *sxml,TiXmlElement* eprops)
JSpacePropLinks::ReadXml	JSpaceProperties.h	/^  void ReadXml(JXml *sxml,TiXmlElement* eprops);$/;"	p	class:JSpacePropLinks	access:public	signature:(JXml *sxml,TiXmlElement* eprops)
JSpacePropLinks::Reset	JSpaceProperties.cpp	/^void JSpacePropLinks::Reset(){$/;"	f	class:JSpacePropLinks	signature:()
JSpacePropLinks::Reset	JSpaceProperties.h	/^  void Reset();$/;"	p	class:JSpacePropLinks	access:public	signature:()
JSpacePropLinks::WriteXml	JSpaceProperties.cpp	/^void JSpacePropLinks::WriteXml(JXml *sxml,TiXmlElement* eprops)const{$/;"	f	class:JSpacePropLinks	signature:(JXml *sxml,TiXmlElement* eprops) const
JSpacePropLinks::WriteXml	JSpaceProperties.h	/^  void WriteXml(JXml *sxml,TiXmlElement* eprops)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(JXml *sxml,TiXmlElement* eprops) const
JSpacePropLinks::~JSpacePropLinks	JSpaceProperties.cpp	/^JSpacePropLinks::~JSpacePropLinks(){$/;"	f	class:JSpacePropLinks	signature:()
JSpacePropLinks::~JSpacePropLinks	JSpaceProperties.h	/^  ~JSpacePropLinks();$/;"	p	class:JSpacePropLinks	access:public	signature:()
JSpacePropProperty	JSpaceProperties.cpp	/^JSpacePropProperty::JSpacePropProperty(std::string name){$/;"	f	class:JSpacePropProperty	signature:(std::string name)
JSpacePropProperty	JSpaceProperties.h	/^  JSpacePropProperty(std::string name);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name)
JSpacePropProperty	JSpaceProperties.h	/^class JSpacePropProperty : public JObject$/;"	c	inherits:JObject
JSpacePropProperty::AddSubValue	JSpaceProperties.cpp	/^void JSpacePropProperty::AddSubValue(std::string name,std::string subname,std::string v){$/;"	f	class:JSpacePropProperty	signature:(std::string name,std::string subname,std::string v)
JSpacePropProperty::AddSubValue	JSpaceProperties.h	/^  void AddSubValue(std::string name,std::string subname,std::string v);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name,std::string subname,std::string v)
JSpacePropProperty::AddValue	JSpaceProperties.cpp	/^void JSpacePropProperty::AddValue(std::string name,std::string v){$/;"	f	class:JSpacePropProperty	signature:(std::string name,std::string v)
JSpacePropProperty::AddValue	JSpaceProperties.h	/^  void AddValue(std::string name,std::string v);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name,std::string v)
JSpacePropProperty::Clear	JSpaceProperties.cpp	/^void JSpacePropProperty::Clear(){$/;"	f	class:JSpacePropProperty	signature:()
JSpacePropProperty::Clear	JSpaceProperties.h	/^  void Clear();$/;"	p	class:JSpacePropProperty	access:public	signature:()
JSpacePropProperty::CopyFrom	JSpaceProperties.cpp	/^void JSpacePropProperty::CopyFrom(const JSpacePropProperty* pro){$/;"	f	class:JSpacePropProperty	signature:(const JSpacePropProperty* pro)
JSpacePropProperty::CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpacePropProperty* pro);$/;"	p	class:JSpacePropProperty	access:public	signature:(const JSpacePropProperty* pro)
JSpacePropProperty::ExistsNameValue	JSpaceProperties.h	/^  bool ExistsNameValue(std::string name)const{ return(GetIndexValue(name)!=-1); }$/;"	f	class:JSpacePropProperty	access:public	signature:(std::string name) const
JSpacePropProperty::GetIndexValue	JSpaceProperties.cpp	/^int JSpacePropProperty::GetIndexValue(std::string name)const{$/;"	f	class:JSpacePropProperty	signature:(std::string name) const
JSpacePropProperty::GetIndexValue	JSpaceProperties.h	/^  int GetIndexValue(std::string name)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name) const
JSpacePropProperty::GetName	JSpaceProperties.h	/^  std::string GetName()const{ return(Name); }$/;"	f	class:JSpacePropProperty	access:public	signature:() const
JSpacePropProperty::GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetSubValue(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx,unsigned subidx) const
JSpacePropProperty::GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePropProperty::GetSubValueName	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetSubValueName(unsigned idx,unsigned subidx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx,unsigned subidx) const
JSpacePropProperty::GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(unsigned idx,unsigned subidx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx,unsigned subidx) const
JSpacePropProperty::GetSubValuesCount	JSpaceProperties.cpp	/^unsigned JSpacePropProperty::GetSubValuesCount(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
JSpacePropProperty::GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
JSpacePropProperty::GetValue	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetValue(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
JSpacePropProperty::GetValue	JSpaceProperties.h	/^  std::string GetValue(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
JSpacePropProperty::GetValueName	JSpaceProperties.cpp	/^std::string JSpacePropProperty::GetValueName(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
JSpacePropProperty::GetValueName	JSpaceProperties.h	/^  std::string GetValueName(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
JSpacePropProperty::GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpacePropProperty::GetValuePtr(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
JSpacePropProperty::GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
JSpacePropProperty::GetValueSimple	JSpaceProperties.cpp	/^bool JSpacePropProperty::GetValueSimple(unsigned idx)const{$/;"	f	class:JSpacePropProperty	signature:(unsigned idx) const
JSpacePropProperty::GetValueSimple	JSpaceProperties.h	/^  bool GetValueSimple(unsigned idx)const;$/;"	p	class:JSpacePropProperty	access:public	signature:(unsigned idx) const
JSpacePropProperty::GetValuesCount	JSpaceProperties.h	/^  unsigned GetValuesCount()const{ return(unsigned(Values.size())); }$/;"	f	class:JSpacePropProperty	access:public	signature:() const
JSpacePropProperty::JSpacePropProperty	JSpaceProperties.cpp	/^JSpacePropProperty::JSpacePropProperty(std::string name){$/;"	f	class:JSpacePropProperty	signature:(std::string name)
JSpacePropProperty::JSpacePropProperty	JSpaceProperties.h	/^  JSpacePropProperty(std::string name);$/;"	p	class:JSpacePropProperty	access:public	signature:(std::string name)
JSpacePropProperty::Name	JSpaceProperties.h	/^  std::string Name;                    \/\/\/<Property name.$/;"	m	class:JSpacePropProperty	access:private
JSpacePropProperty::ToStr	JSpaceProperties.cpp	/^std::string JSpacePropProperty::ToStr()const{$/;"	f	class:JSpacePropProperty	signature:() const
JSpacePropProperty::ToStr	JSpaceProperties.h	/^  std::string ToStr()const;$/;"	p	class:JSpacePropProperty	access:public	signature:() const
JSpacePropProperty::Values	JSpaceProperties.h	/^  std::vector<JSpacePropValue*> Values;\/\/\/<List of values.$/;"	m	class:JSpacePropProperty	access:private
JSpacePropProperty::~JSpacePropProperty	JSpaceProperties.cpp	/^JSpacePropProperty::~JSpacePropProperty(){$/;"	f	class:JSpacePropProperty	signature:()
JSpacePropProperty::~JSpacePropProperty	JSpaceProperties.h	/^  ~JSpacePropProperty();$/;"	p	class:JSpacePropProperty	access:public	signature:()
JSpacePropValue	JSpaceProperties.cpp	/^JSpacePropValue::JSpacePropValue(std::string name):Name(name){$/;"	f	class:JSpacePropValue	signature:(std::string name)
JSpacePropValue	JSpaceProperties.h	/^  JSpacePropValue(std::string name);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string name)
JSpacePropValue	JSpaceProperties.h	/^class JSpacePropValue : public JObject$/;"	c	inherits:JObject
JSpacePropValue::AddSubValue	JSpaceProperties.cpp	/^void JSpacePropValue::AddSubValue(std::string subname,std::string v){$/;"	f	class:JSpacePropValue	signature:(std::string subname,std::string v)
JSpacePropValue::AddSubValue	JSpaceProperties.h	/^  void AddSubValue(std::string subname,std::string v);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname,std::string v)
JSpacePropValue::Clear	JSpaceProperties.cpp	/^void JSpacePropValue::Clear(){$/;"	f	class:JSpacePropValue	signature:()
JSpacePropValue::Clear	JSpaceProperties.h	/^  void Clear();$/;"	p	class:JSpacePropValue	access:public	signature:()
JSpacePropValue::ExistsSubName	JSpaceProperties.h	/^  bool ExistsSubName(std::string subname)const{ return(GetIndexSubName(subname)!=-1); }$/;"	f	class:JSpacePropValue	access:public	signature:(std::string subname) const
JSpacePropValue::GetIndexSubName	JSpaceProperties.cpp	/^int JSpacePropValue::GetIndexSubName(std::string subname)const{$/;"	f	class:JSpacePropValue	signature:(std::string subname) const
JSpacePropValue::GetIndexSubName	JSpaceProperties.h	/^  int GetIndexSubName(std::string subname)const;$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname) const
JSpacePropValue::GetName	JSpaceProperties.h	/^  std::string GetName()const{ return(Name); };$/;"	f	class:JSpacePropValue	access:public	signature:() const
JSpacePropValue::GetSimple	JSpaceProperties.h	/^  bool GetSimple()const{ return(Simple); };$/;"	f	class:JSpacePropValue	access:public	signature:() const
JSpacePropValue::GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValue(std::string subname)const{$/;"	f	class:JSpacePropValue	signature:(std::string subname) const
JSpacePropValue::GetSubValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValue(unsigned idx)const{$/;"	f	class:JSpacePropValue	signature:(unsigned idx) const
JSpacePropValue::GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(std::string subname)const;$/;"	p	class:JSpacePropValue	access:public	signature:(std::string subname) const
JSpacePropValue::GetSubValue	JSpaceProperties.h	/^  std::string GetSubValue(unsigned idx)const;$/;"	p	class:JSpacePropValue	access:public	signature:(unsigned idx) const
JSpacePropValue::GetSubValueName	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetSubValueName(unsigned idx)const{$/;"	f	class:JSpacePropValue	signature:(unsigned idx) const
JSpacePropValue::GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(unsigned idx)const;$/;"	p	class:JSpacePropValue	access:public	signature:(unsigned idx) const
JSpacePropValue::GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount()const{ return(Simple? 0: unsigned(SubValues.size())); }$/;"	f	class:JSpacePropValue	access:public	signature:() const
JSpacePropValue::GetValue	JSpaceProperties.cpp	/^std::string JSpacePropValue::GetValue()const{$/;"	f	class:JSpacePropValue	signature:() const
JSpacePropValue::GetValue	JSpaceProperties.h	/^  std::string GetValue()const;$/;"	p	class:JSpacePropValue	access:public	signature:() const
JSpacePropValue::JSpacePropValue	JSpaceProperties.cpp	/^JSpacePropValue::JSpacePropValue(std::string name):Name(name){$/;"	f	class:JSpacePropValue	signature:(std::string name)
JSpacePropValue::JSpacePropValue	JSpaceProperties.h	/^  JSpacePropValue(std::string name);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string name)
JSpacePropValue::Name	JSpaceProperties.h	/^  std::string Name;                    \/\/\/<Value name.$/;"	m	class:JSpacePropValue	access:private
JSpacePropValue::SetValue	JSpaceProperties.cpp	/^void JSpacePropValue::SetValue(std::string v){$/;"	f	class:JSpacePropValue	signature:(std::string v)
JSpacePropValue::SetValue	JSpaceProperties.h	/^  void SetValue(std::string v);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string v)
JSpacePropValue::Simple	JSpaceProperties.h	/^  bool Simple;                         \/\/\/<Indicates that value is in line, not item. $/;"	m	class:JSpacePropValue	access:private
JSpacePropValue::SubNames	JSpaceProperties.h	/^  std::vector<std::string> SubNames;   \/\/\/<Name of each subvalue when it is not simple. $/;"	m	class:JSpacePropValue	access:private
JSpacePropValue::SubValues	JSpaceProperties.h	/^  std::vector<std::string> SubValues;  \/\/\/<Value of each subvalue when it is not simple. $/;"	m	class:JSpacePropValue	access:private
JSpacePropValue::ToStr	JSpaceProperties.cpp	/^std::string JSpacePropValue::ToStr()const{$/;"	f	class:JSpacePropValue	signature:() const
JSpacePropValue::ToStr	JSpaceProperties.h	/^  std::string ToStr()const;$/;"	p	class:JSpacePropValue	access:public	signature:() const
JSpacePropValue::Value	JSpaceProperties.h	/^  std::string Value;                   \/\/\/<Value when it is simple. $/;"	m	class:JSpacePropValue	access:private
JSpacePropValue::~JSpacePropValue	JSpaceProperties.cpp	/^JSpacePropValue::~JSpacePropValue(){$/;"	f	class:JSpacePropValue	signature:()
JSpacePropValue::~JSpacePropValue	JSpaceProperties.h	/^  ~JSpacePropValue();$/;"	p	class:JSpacePropValue	access:public	signature:()
JSpaceProperties	JSpaceProperties.cpp	/^JSpaceProperties::JSpaceProperties(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties	JSpaceProperties.h	/^  JSpaceProperties();$/;"	p	class:JSpaceProperties	access:public	signature:()
JSpaceProperties	JSpaceProperties.h	/^class JSpaceProperties  : protected JObject$/;"	c	inherits:JObject
JSpaceProperties::AddLink	JSpaceProperties.cpp	/^void JSpaceProperties::AddLink(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
JSpaceProperties::AddLink	JSpaceProperties.h	/^  void AddLink(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
JSpaceProperties::AddLinkBound	JSpaceProperties.cpp	/^void JSpaceProperties::AddLinkBound(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
JSpaceProperties::AddLinkBound	JSpaceProperties.h	/^  void AddLinkBound(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
JSpaceProperties::AddLinkFluid	JSpaceProperties.cpp	/^void JSpaceProperties::AddLinkFluid(std::string mks,std::string props){$/;"	f	class:JSpaceProperties	signature:(std::string mks,std::string props)
JSpaceProperties::AddLinkFluid	JSpaceProperties.h	/^  void AddLinkFluid(std::string mks,std::string props);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string mks,std::string props)
JSpaceProperties::AddProperty	JSpaceProperties.cpp	/^JSpacePropProperty* JSpaceProperties::AddProperty(std::string name){$/;"	f	class:JSpaceProperties	signature:(std::string name)
JSpaceProperties::AddProperty	JSpaceProperties.h	/^  JSpacePropProperty* AddProperty(std::string name);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string name)
JSpaceProperties::AddPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::AddPropertyFile(std::string file,std::string path){$/;"	f	class:JSpaceProperties	signature:(std::string file,std::string path)
JSpaceProperties::AddPropertyFile	JSpaceProperties.h	/^  void AddPropertyFile(std::string file,std::string path);$/;"	p	class:JSpaceProperties	access:public	signature:(std::string file,std::string path)
JSpaceProperties::CheckLinks	JSpaceProperties.cpp	/^void JSpaceProperties::CheckLinks(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties::CheckLinks	JSpaceProperties.h	/^  void CheckLinks();$/;"	p	class:JSpaceProperties	access:private	signature:()
JSpaceProperties::ClearPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::ClearPropertyFile(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties::ClearPropertyFile	JSpaceProperties.h	/^  void ClearPropertyFile();$/;"	p	class:JSpaceProperties	access:public	signature:()
JSpaceProperties::CopyFrom	JSpaceProperties.cpp	/^void JSpaceProperties::CopyFrom(const JSpaceProperties* props){$/;"	f	class:JSpaceProperties	signature:(const JSpaceProperties* props)
JSpaceProperties::CopyFrom	JSpaceProperties.h	/^  void CopyFrom(const JSpaceProperties* props);$/;"	p	class:JSpaceProperties	access:public	signature:(const JSpaceProperties* props)
JSpaceProperties::ExistsSubValue	JSpaceProperties.cpp	/^bool JSpaceProperties::ExistsSubValue(std::string props,std::string name,std::string subname)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name,std::string subname) const
JSpaceProperties::ExistsSubValue	JSpaceProperties.h	/^  bool ExistsSubValue(std::string props,std::string name,std::string subname)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name,std::string subname) const
JSpaceProperties::ExistsValue	JSpaceProperties.cpp	/^bool JSpaceProperties::ExistsValue(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
JSpaceProperties::ExistsValue	JSpaceProperties.h	/^  bool ExistsValue(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name) const
JSpaceProperties::FilterMk	JSpaceProperties.cpp	/^void JSpaceProperties::FilterMk(word mkboundfirst,word mkfluidfirst,std::string mkselect){$/;"	f	class:JSpaceProperties	signature:(word mkboundfirst,word mkfluidfirst,std::string mkselect)
JSpaceProperties::FilterMk	JSpaceProperties.h	/^  void FilterMk(word mkboundfirst,word mkfluidfirst,std::string mkselect);$/;"	p	class:JSpaceProperties	access:public	signature:(word mkboundfirst,word mkfluidfirst,std::string mkselect)
JSpaceProperties::GetIndexProperty	JSpaceProperties.cpp	/^int JSpaceProperties::GetIndexProperty(std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string name) const
JSpaceProperties::GetIndexProperty	JSpaceProperties.h	/^  int GetIndexProperty(std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string name) const
JSpaceProperties::GetLinksCount	JSpaceProperties.h	/^  unsigned GetLinksCount()const{ return(Links->GetCount()); }$/;"	f	class:JSpaceProperties	access:public	signature:() const
JSpaceProperties::GetProperty	JSpaceProperties.cpp	/^const JSpacePropProperty* JSpaceProperties::GetProperty(std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string name) const
JSpaceProperties::GetProperty	JSpaceProperties.h	/^  const JSpacePropProperty* GetProperty(std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string name) const
JSpaceProperties::GetPropertyCount	JSpaceProperties.h	/^  unsigned GetPropertyCount()const{ return(unsigned(Props.size())); }$/;"	f	class:JSpaceProperties	access:public	signature:() const
JSpaceProperties::GetPropertyMk	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetPropertyMk(word mk)const{$/;"	f	class:JSpaceProperties	signature:(word mk) const
JSpaceProperties::GetPropertyMk	JSpaceProperties.h	/^  std::string GetPropertyMk(word mk)const;$/;"	p	class:JSpaceProperties	access:public	signature:(word mk) const
JSpaceProperties::GetSubValueName	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueName(std::string props,unsigned idx,unsigned subidx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx,unsigned subidx) const
JSpaceProperties::GetSubValueName	JSpaceProperties.h	/^  std::string GetSubValueName(std::string props,unsigned idx,unsigned subidx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx,unsigned subidx) const
JSpaceProperties::GetSubValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueStr(std::string props,std::string name,std::string subname)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name,std::string subname) const
JSpaceProperties::GetSubValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetSubValueStr(std::string props,unsigned idx,unsigned subidx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx,unsigned subidx) const
JSpaceProperties::GetSubValueStr	JSpaceProperties.h	/^  std::string GetSubValueStr(std::string props,std::string name,std::string subname)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name,std::string subname) const
JSpaceProperties::GetSubValueStr	JSpaceProperties.h	/^  std::string GetSubValueStr(std::string props,unsigned idx,unsigned subidx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx,unsigned subidx) const
JSpaceProperties::GetSubValuesCount	JSpaceProperties.cpp	/^unsigned JSpaceProperties::GetSubValuesCount(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetSubValuesCount	JSpaceProperties.h	/^  unsigned GetSubValuesCount(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValue	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValue(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
JSpaceProperties::GetValue	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValue(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValue	JSpaceProperties.h	/^  const JSpacePropValue* GetValue(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,std::string name) const
JSpaceProperties::GetValue	JSpaceProperties.h	/^  const JSpacePropValue* GetValue(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValueName	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueName(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValueName	JSpaceProperties.h	/^  std::string GetValueName(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValuePtr(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
JSpaceProperties::GetValuePtr	JSpaceProperties.cpp	/^const JSpacePropValue* JSpaceProperties::GetValuePtr(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,std::string name) const
JSpaceProperties::GetValuePtr	JSpaceProperties.h	/^  const JSpacePropValue* GetValuePtr(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:private	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueStr(std::string props,std::string name)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,std::string name) const
JSpaceProperties::GetValueStr	JSpaceProperties.cpp	/^std::string JSpaceProperties::GetValueStr(std::string props,unsigned idx)const{$/;"	f	class:JSpaceProperties	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValueStr	JSpaceProperties.h	/^  std::string GetValueStr(std::string props,std::string name)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,std::string name) const
JSpaceProperties::GetValueStr	JSpaceProperties.h	/^  std::string GetValueStr(std::string props,unsigned idx)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props,unsigned idx) const
JSpaceProperties::GetValuesCount	JSpaceProperties.cpp	/^unsigned JSpaceProperties::GetValuesCount(std::string props)const{$/;"	f	class:JSpaceProperties	signature:(std::string props) const
JSpaceProperties::GetValuesCount	JSpaceProperties.h	/^  unsigned GetValuesCount(std::string props)const;$/;"	p	class:JSpaceProperties	access:public	signature:(std::string props) const
JSpaceProperties::JSpaceProperties	JSpaceProperties.cpp	/^JSpaceProperties::JSpaceProperties(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties::JSpaceProperties	JSpaceProperties.h	/^  JSpaceProperties();$/;"	p	class:JSpaceProperties	access:public	signature:()
JSpaceProperties::Links	JSpaceProperties.h	/^  JSpacePropLinks* Links;                   \/\/\/<Object to manage the links.$/;"	m	class:JSpaceProperties	access:private
JSpaceProperties::LoadFileXml	JSpaceProperties.cpp	/^void JSpaceProperties::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceProperties	signature:(const std::string &file,const std::string &path)
JSpaceProperties::LoadFileXml	JSpaceProperties.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceProperties	access:public	signature:(const std::string &file,const std::string &path)
JSpaceProperties::LoadXml	JSpaceProperties.cpp	/^void JSpaceProperties::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,const std::string &place)
JSpaceProperties::LoadXml	JSpaceProperties.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,const std::string &place)
JSpaceProperties::Props	JSpaceProperties.h	/^  std::vector<JSpacePropProperty*> Props;   \/\/\/<List of properties.$/;"	m	class:JSpaceProperties	access:private
JSpaceProperties::PropsFile	JSpaceProperties.h	/^  std::vector<StPropertyFile> PropsFile;    \/\/\/<List of external files with properties (used only to write XML file).$/;"	m	class:JSpaceProperties	access:private
JSpaceProperties::ReadXml	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXml(JXml *sxml,TiXmlElement* eprops){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops)
JSpaceProperties::ReadXml	JSpaceProperties.h	/^  void ReadXml(JXml *sxml,TiXmlElement* eprops);$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,TiXmlElement* eprops)
JSpaceProperties::ReadXmlProperty	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXmlProperty(JXml *sxml,TiXmlElement* eprop){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprop)
JSpaceProperties::ReadXmlProperty	JSpaceProperties.h	/^  void ReadXmlProperty(JXml *sxml,TiXmlElement* eprop);$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprop)
JSpaceProperties::ReadXmlPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXmlPropertyFile(JXml *sxml,TiXmlElement* epropfile){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* epropfile)
JSpaceProperties::ReadXmlPropertyFile	JSpaceProperties.h	/^  void ReadXmlPropertyFile(JXml *sxml,TiXmlElement* epropfile);$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* epropfile)
JSpaceProperties::Reset	JSpaceProperties.cpp	/^void JSpaceProperties::Reset(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties::Reset	JSpaceProperties.h	/^  void Reset();$/;"	p	class:JSpaceProperties	access:public	signature:()
JSpaceProperties::SaveFileXml	JSpaceProperties.cpp	/^void JSpaceProperties::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceProperties	signature:(const std::string &file,const std::string &path,bool newfile) const
JSpaceProperties::SaveFileXml	JSpaceProperties.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceProperties	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
JSpaceProperties::SaveXml	JSpaceProperties.cpp	/^void JSpaceProperties::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,const std::string &place) const
JSpaceProperties::SaveXml	JSpaceProperties.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceProperties::StPropertyFile	JSpaceProperties.h	/^  }StPropertyFile;$/;"	t	class:JSpaceProperties	typeref:struct:JSpaceProperties::__anon28	access:private
JSpaceProperties::WriteXml	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXml(JXml *sxml,TiXmlElement* eprops)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops) const
JSpaceProperties::WriteXml	JSpaceProperties.h	/^  void WriteXml(JXml *sxml,TiXmlElement* eprops)const;$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,TiXmlElement* eprops) const
JSpaceProperties::WriteXmlProperty	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXmlProperty(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop) const
JSpaceProperties::WriteXmlProperty	JSpaceProperties.h	/^  void WriteXmlProperty(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop)const;$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop) const
JSpaceProperties::WriteXmlPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXmlPropertyFile(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile) const
JSpaceProperties::WriteXmlPropertyFile	JSpaceProperties.h	/^  void WriteXmlPropertyFile(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile)const;$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile) const
JSpaceProperties::__anon28::file	JSpaceProperties.h	/^    std::string file;$/;"	m	struct:JSpaceProperties::__anon28	access:public
JSpaceProperties::__anon28::path	JSpaceProperties.h	/^    std::string path;$/;"	m	struct:JSpaceProperties::__anon28	access:public
JSpaceProperties::~JSpaceProperties	JSpaceProperties.cpp	/^JSpaceProperties::~JSpaceProperties(){$/;"	f	class:JSpaceProperties	signature:()
JSpaceProperties::~JSpaceProperties	JSpaceProperties.h	/^  ~JSpaceProperties();$/;"	p	class:JSpaceProperties	access:public	signature:()
JSpaceVtkOut	JSpaceVtkOut.cpp	/^JSpaceVtkOut::JSpaceVtkOut(){$/;"	f	class:JSpaceVtkOut	signature:()
JSpaceVtkOut	JSpaceVtkOut.h	/^  JSpaceVtkOut();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
JSpaceVtkOut	JSpaceVtkOut.h	/^class JSpaceVtkOut : protected JObject$/;"	c	inherits:JObject
JSpaceVtkOut::AddFile	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::AddFile(const std::string &fname,const std::string &mks){$/;"	f	class:JSpaceVtkOut	signature:(const std::string &fname,const std::string &mks)
JSpaceVtkOut::AddFile	JSpaceVtkOut.h	/^  void AddFile(const std::string &fname,const std::string &mks);$/;"	p	class:JSpaceVtkOut	access:public	signature:(const std::string &fname,const std::string &mks)
JSpaceVtkOut::ConfigMkFirst	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::ConfigMkFirst(word mkboundfirst,word mkfluidfirst){$/;"	f	class:JSpaceVtkOut	signature:(word mkboundfirst,word mkfluidfirst)
JSpaceVtkOut::ConfigMkFirst	JSpaceVtkOut.h	/^  void ConfigMkFirst(word mkboundfirst,word mkfluidfirst);$/;"	p	class:JSpaceVtkOut	access:public	signature:(word mkboundfirst,word mkfluidfirst)
JSpaceVtkOut::Count	JSpaceVtkOut.h	/^  unsigned Count()const{ return(unsigned(Files.size())); }$/;"	f	class:JSpaceVtkOut	access:public	signature:() const
JSpaceVtkOut::Files	JSpaceVtkOut.h	/^  std::vector<JSpaceVtkOutFile*> Files;$/;"	m	class:JSpaceVtkOut	access:private
JSpaceVtkOut::GetByFileName	JSpaceVtkOut.cpp	/^unsigned JSpaceVtkOut::GetByFileName(std::string fname)const{$/;"	f	class:JSpaceVtkOut	signature:(std::string fname) const
JSpaceVtkOut::GetByFileName	JSpaceVtkOut.h	/^  unsigned GetByFileName(std::string fname)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(std::string fname) const
JSpaceVtkOut::GetFiles	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::GetFiles(std::string key,std::vector<std::string> &list)const{$/;"	f	class:JSpaceVtkOut	signature:(std::string key,std::vector<std::string> &list) const
JSpaceVtkOut::GetFiles	JSpaceVtkOut.h	/^  void GetFiles(std::string key,std::vector<std::string> &list)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(std::string key,std::vector<std::string> &list) const
JSpaceVtkOut::GetListMkType	JSpaceVtkOut.cpp	/^std::string JSpaceVtkOut::GetListMkType(bool bound,const std::string &mks)const{$/;"	f	class:JSpaceVtkOut	signature:(bool bound,const std::string &mks) const
JSpaceVtkOut::GetListMkType	JSpaceVtkOut.h	/^  std::string GetListMkType(bool bound,const std::string &mks)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(bool bound,const std::string &mks) const
JSpaceVtkOut::JSpaceVtkOut	JSpaceVtkOut.cpp	/^JSpaceVtkOut::JSpaceVtkOut(){$/;"	f	class:JSpaceVtkOut	signature:()
JSpaceVtkOut::JSpaceVtkOut	JSpaceVtkOut.h	/^  JSpaceVtkOut();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
JSpaceVtkOut::LoadXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::LoadXml(const JXml *sxml,const std::string &place,bool optional){$/;"	f	class:JSpaceVtkOut	signature:(const JXml *sxml,const std::string &place,bool optional)
JSpaceVtkOut::LoadXml	JSpaceVtkOut.h	/^  void LoadXml(const JXml *sxml,const std::string &place,bool optional);$/;"	p	class:JSpaceVtkOut	access:public	signature:(const JXml *sxml,const std::string &place,bool optional)
JSpaceVtkOut::MkBoundFirst	JSpaceVtkOut.h	/^  word MkBoundFirst;$/;"	m	class:JSpaceVtkOut	access:private
JSpaceVtkOut::MkFluidFirst	JSpaceVtkOut.h	/^  word MkFluidFirst;$/;"	m	class:JSpaceVtkOut	access:private
JSpaceVtkOut::ReadXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::ReadXml(const JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceVtkOut	signature:(const JXml *sxml,TiXmlElement* lis)
JSpaceVtkOut::ReadXml	JSpaceVtkOut.h	/^  void ReadXml(const JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceVtkOut	access:private	signature:(const JXml *sxml,TiXmlElement* lis)
JSpaceVtkOut::Reset	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::Reset(){$/;"	f	class:JSpaceVtkOut	signature:()
JSpaceVtkOut::Reset	JSpaceVtkOut.h	/^  void Reset();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
JSpaceVtkOut::SaveXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceVtkOut	signature:(JXml *sxml,const std::string &place) const
JSpaceVtkOut::SaveXml	JSpaceVtkOut.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(JXml *sxml,const std::string &place) const
JSpaceVtkOut::WriteXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceVtkOut	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceVtkOut::WriteXml	JSpaceVtkOut.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceVtkOut	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
JSpaceVtkOut::~JSpaceVtkOut	JSpaceVtkOut.cpp	/^JSpaceVtkOut::~JSpaceVtkOut(){$/;"	f	class:JSpaceVtkOut	signature:()
JSpaceVtkOut::~JSpaceVtkOut	JSpaceVtkOut.h	/^  ~JSpaceVtkOut();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
JSpaceVtkOutFile	JSpaceVtkOut.cpp	/^JSpaceVtkOutFile::JSpaceVtkOutFile(const std::string &file,const std::string &mks):File(file){$/;"	f	class:JSpaceVtkOutFile	signature:(const std::string &file,const std::string &mks)
JSpaceVtkOutFile	JSpaceVtkOut.h	/^  JSpaceVtkOutFile(const std::string &file,const std::string &mks);$/;"	p	class:JSpaceVtkOutFile	access:public	signature:(const std::string &file,const std::string &mks)
JSpaceVtkOutFile	JSpaceVtkOut.h	/^class JSpaceVtkOutFile$/;"	c
JSpaceVtkOutFile::File	JSpaceVtkOut.h	/^  const std::string File;$/;"	m	class:JSpaceVtkOutFile	access:public
JSpaceVtkOutFile::GetMks	JSpaceVtkOut.h	/^  std::string GetMks()const{ return(ListMk); }$/;"	f	class:JSpaceVtkOutFile	access:public	signature:() const
JSpaceVtkOutFile::JSpaceVtkOutFile	JSpaceVtkOut.cpp	/^JSpaceVtkOutFile::JSpaceVtkOutFile(const std::string &file,const std::string &mks):File(file){$/;"	f	class:JSpaceVtkOutFile	signature:(const std::string &file,const std::string &mks)
JSpaceVtkOutFile::JSpaceVtkOutFile	JSpaceVtkOut.h	/^  JSpaceVtkOutFile(const std::string &file,const std::string &mks);$/;"	p	class:JSpaceVtkOutFile	access:public	signature:(const std::string &file,const std::string &mks)
JSpaceVtkOutFile::ListMk	JSpaceVtkOut.h	/^  std::string ListMk;$/;"	m	class:JSpaceVtkOutFile	access:protected
JSpaceVtkOutFile::Reset	JSpaceVtkOut.cpp	/^void JSpaceVtkOutFile::Reset(){$/;"	f	class:JSpaceVtkOutFile	signature:()
JSpaceVtkOutFile::Reset	JSpaceVtkOut.h	/^  void Reset();$/;"	p	class:JSpaceVtkOutFile	access:public	signature:()
JSpaceVtkOutFile::SetMks	JSpaceVtkOut.cpp	/^void JSpaceVtkOutFile::SetMks(const std::string &mks){$/;"	f	class:JSpaceVtkOutFile	signature:(const std::string &mks)
JSpaceVtkOutFile::SetMks	JSpaceVtkOut.h	/^  void SetMks(const std::string &mks);$/;"	p	class:JSpaceVtkOutFile	access:public	signature:(const std::string &mks)
JSpaceVtkOutFile::~JSpaceVtkOutFile	JSpaceVtkOut.cpp	/^JSpaceVtkOutFile::~JSpaceVtkOutFile(){$/;"	f	class:JSpaceVtkOutFile	signature:()
JSpaceVtkOutFile::~JSpaceVtkOutFile	JSpaceVtkOut.h	/^  ~JSpaceVtkOutFile();$/;"	p	class:JSpaceVtkOutFile	access:public	signature:()
JSph	JSph.cpp	/^JSph::JSph(bool cpu,bool withmpi):Cpu(cpu),WithMpi(withmpi){$/;"	f	class:JSph	signature:(bool cpu,bool withmpi)
JSph	JSph.h	/^  JSph(bool cpu,bool withmpi);$/;"	p	class:JSph	access:public	signature:(bool cpu,bool withmpi)
JSph	JSph.h	/^class JSph : protected JObject$/;"	c	inherits:JObject
JSph::AbortBoundOut	JSph.cpp	/^void JSph::AbortBoundOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code){$/;"	f	class:JSph	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
JSph::AbortBoundOut	JSph.h	/^  void AbortBoundOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
JSph::AccInput	JSph.h	/^  JSphAccInput *AccInput;  \/\/\/<Object for variable acceleration functionality.$/;"	m	class:JSph	access:protected
JSph::AddOutCount	JSph.h	/^  void AddOutCount(unsigned outpos,unsigned outrhop,unsigned outmove){ OutPosCount+=outpos; OutRhopCount+=outrhop; OutMoveCount+=outmove; }$/;"	f	class:JSph	access:private	signature:(unsigned outpos,unsigned outrhop,unsigned outmove)
JSph::AddParticlesOut	JSph.cpp	/^void JSph::AddParticlesOut(unsigned nout,const unsigned *idp,const tdouble3 *pos$/;"	f	class:JSph	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos ,const tfloat3 *vel,const float *rhop,const typecode *code)
JSph::AddParticlesOut	JSph.h	/^  void AddParticlesOut(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const typecode *code)
JSph::Agau	JSph.h	/^  float Agau;                 \/\/\/<Gaussian kernel constant to compute wab.                               | Constante para calcular wab con kernel Gaussian.$/;"	m	class:JSph	access:protected
JSph::AllocMemoryFloating	JSph.cpp	/^void JSph::AllocMemoryFloating(unsigned ftcount){$/;"	f	class:JSph	signature:(unsigned ftcount)
JSph::AllocMemoryFloating	JSph.h	/^  void AllocMemoryFloating(unsigned ftcount);$/;"	p	class:JSph	access:protected	signature:(unsigned ftcount)
JSph::AppName	JSph.h	/^  std::string AppName;$/;"	m	class:JSph	access:protected
JSph::Awen	JSph.h	/^  float Awen;                 \/\/\/<Wendland kernel constant (awen) to compute wab.                        | Constante para calcular wab con kernel Wendland.$/;"	m	class:JSph	access:protected
JSph::Bgau	JSph.h	/^  float Bgau;                 \/\/\/<Gaussian kernel constant to compute fac (kernel derivative).           | Constante para calcular fac (derivada del kernel) con kernel Gaussian.$/;"	m	class:JSph	access:protected
JSph::Bwen	JSph.h	/^  float Bwen;                 \/\/\/<Wendland kernel constant (bwen) to compute fac (kernel derivative).    | Constante para calcular fac (derivada del kernel) con kernel Wendland.$/;"	m	class:JSph	access:protected
JSph::CFLnumber	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
JSph::CalcCellCode	JSph.cpp	/^unsigned JSph::CalcCellCode(tuint3 ncells){$/;"	f	class:JSph	signature:(tuint3 ncells)
JSph::CalcCellCode	JSph.h	/^  static unsigned CalcCellCode(tuint3 ncells);$/;"	p	class:JSph	access:protected	signature:(tuint3 ncells)
JSph::CalcFloatingRadius	JSph.cpp	/^void JSph::CalcFloatingRadius(unsigned np,const tdouble3 *pos,const unsigned *idp){$/;"	f	class:JSph	signature:(unsigned np,const tdouble3 *pos,const unsigned *idp)
JSph::CalcFloatingRadius	JSph.h	/^  void CalcFloatingRadius(unsigned np,const tdouble3 *pos,const unsigned *idp);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const tdouble3 *pos,const unsigned *idp)
JSph::CalcRunCode	JSph.cpp	/^std::string JSph::CalcRunCode()const{$/;"	f	class:JSph	signature:() const
JSph::CalcRunCode	JSph.h	/^  std::string CalcRunCode()const;$/;"	p	class:JSph	access:private	signature:() const
JSph::CaseName	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
JSph::CaseNbound	JSph.h	/^  unsigned CaseNbound;       \/\/\/<Number of boundary particles ( \\ref Nfixed + \\ref Nmoving + \\ref Nfloat ).$/;"	m	class:JSph	access:protected
JSph::CaseNfixed	JSph.h	/^  unsigned CaseNfixed;       \/\/\/<Number of fixed boundary particles. $/;"	m	class:JSph	access:protected
JSph::CaseNfloat	JSph.h	/^  unsigned CaseNfloat;       \/\/\/<Number of floating boundary particles. $/;"	m	class:JSph	access:protected
JSph::CaseNfluid	JSph.h	/^  unsigned CaseNfluid;       \/\/\/<Number of fluid particles (including the excluded ones). $/;"	m	class:JSph	access:protected
JSph::CaseNmoving	JSph.h	/^  unsigned CaseNmoving;      \/\/\/<Number of moving boundary particles. $/;"	m	class:JSph	access:protected
JSph::CaseNp	JSph.h	/^  unsigned CaseNp;           \/\/\/<Number of total particles of initial PART.  $/;"	m	class:JSph	access:protected
JSph::CaseNpb	JSph.h	/^  unsigned CaseNpb;          \/\/\/<Number of particles of the boundary block ( \\ref Nbound - \\ref Nfloat ) or ( \\ref Nfixed + \\ref Nmoving).$/;"	m	class:JSph	access:protected
JSph::CasePosMax	JSph.h	/^  tdouble3 CasePosMax;       \/\/\/<Upper particle limit of the case in the initial instant. | Limite superior de particulas del caso en instante inicial.$/;"	m	class:JSph	access:protected
JSph::CasePosMin	JSph.h	/^  tdouble3 CasePosMin;       \/\/\/<Lower particle limit of the case in the initial instant. | Limite inferior de particulas del caso en instante inicial.$/;"	m	class:JSph	access:protected
JSph::CellMode	JSph.h	/^  TpCellMode CellMode;     \/\/\/<Cell division mode. | Modo de division en celdas.$/;"	m	class:JSph	access:protected
JSph::CfgDomainFixedMax	JSph.h	/^  tdouble3 CfgDomainFixedMin,CfgDomainFixedMax;$/;"	m	class:JSph	access:private
JSph::CfgDomainFixedMin	JSph.h	/^  tdouble3 CfgDomainFixedMin,CfgDomainFixedMax;$/;"	m	class:JSph	access:private
JSph::CfgDomainParticlesMax	JSph.h	/^  tdouble3 CfgDomainParticlesMin,CfgDomainParticlesMax;$/;"	m	class:JSph	access:private
JSph::CfgDomainParticlesMin	JSph.h	/^  tdouble3 CfgDomainParticlesMin,CfgDomainParticlesMax;$/;"	m	class:JSph	access:private
JSph::CfgDomainParticlesPrcMax	JSph.h	/^  tdouble3 CfgDomainParticlesPrcMin,CfgDomainParticlesPrcMax;$/;"	m	class:JSph	access:private
JSph::CfgDomainParticlesPrcMin	JSph.h	/^  tdouble3 CfgDomainParticlesPrcMin,CfgDomainParticlesPrcMax;$/;"	m	class:JSph	access:private
JSph::ClearCfgDomain	JSph.cpp	/^void JSph::ClearCfgDomain(){$/;"	f	class:JSph	signature:()
JSph::ClearCfgDomain	JSph.h	/^  void ClearCfgDomain();$/;"	p	class:JSph	access:private	signature:()
JSph::CoefDtMin	JSph.h	/^  float CoefDtMin;           \/\/\/<Coefficient to calculate minimum time step. dtmin=coefdtmin*h\/speedsound (def=0.03).$/;"	m	class:JSph	access:protected
JSph::ConfigCellDivision	JSph.cpp	/^void JSph::ConfigCellDivision(){$/;"	f	class:JSph	signature:()
JSph::ConfigCellDivision	JSph.h	/^  void ConfigCellDivision();$/;"	p	class:JSph	access:protected	signature:()
JSph::ConfigConstants	JSph.cpp	/^void JSph::ConfigConstants(bool simulate2d){$/;"	f	class:JSph	signature:(bool simulate2d)
JSph::ConfigConstants	JSph.h	/^  void ConfigConstants(bool simulate2d);$/;"	p	class:JSph	access:protected	signature:(bool simulate2d)
JSph::ConfigDomainFixed	JSph.cpp	/^void JSph::ConfigDomainFixed(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainFixed	JSph.h	/^  void ConfigDomainFixed(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainFixedValue	JSph.cpp	/^void JSph::ConfigDomainFixedValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
JSph::ConfigDomainFixedValue	JSph.h	/^  void ConfigDomainFixedValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
JSph::ConfigDomainParticles	JSph.cpp	/^void JSph::ConfigDomainParticles(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainParticles	JSph.h	/^  void ConfigDomainParticles(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainParticlesPrc	JSph.cpp	/^void JSph::ConfigDomainParticlesPrc(tdouble3 vmin,tdouble3 vmax){$/;"	f	class:JSph	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainParticlesPrc	JSph.h	/^  void ConfigDomainParticlesPrc(tdouble3 vmin,tdouble3 vmax);$/;"	p	class:JSph	access:private	signature:(tdouble3 vmin,tdouble3 vmax)
JSph::ConfigDomainParticlesPrcValue	JSph.cpp	/^void JSph::ConfigDomainParticlesPrcValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
JSph::ConfigDomainParticlesPrcValue	JSph.h	/^  void ConfigDomainParticlesPrcValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
JSph::ConfigDomainParticlesValue	JSph.cpp	/^void JSph::ConfigDomainParticlesValue(std::string key,double v){$/;"	f	class:JSph	signature:(std::string key,double v)
JSph::ConfigDomainParticlesValue	JSph.h	/^  void ConfigDomainParticlesValue(std::string key,double v);$/;"	p	class:JSph	access:private	signature:(std::string key,double v)
JSph::ConfigSaveData	JSph.cpp	/^void JSph::ConfigSaveData(unsigned piece,unsigned pieces,std::string div){$/;"	f	class:JSph	signature:(unsigned piece,unsigned pieces,std::string div)
JSph::ConfigSaveData	JSph.h	/^  void ConfigSaveData(unsigned piece,unsigned pieces,std::string div);$/;"	p	class:JSph	access:protected	signature:(unsigned piece,unsigned pieces,std::string div)
JSph::Cpu	JSph.h	/^  const bool Cpu;$/;"	m	class:JSph	access:protected
JSph::CreatePartsInit	JSph.cpp	/^void JSph::CreatePartsInit(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSph	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSph::CreatePartsInit	JSph.h	/^  void CreatePartsInit(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSph::Cs0	JSph.h	/^  double Cs0;$/;"	m	class:JSph	access:protected
JSph::CsvSepComa	JSph.h	/^  bool CsvSepComa;           \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:JSph	access:protected
JSph::CteB	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
JSph::CubicCte	JSph.h	/^  StCubicCte CubicCte;        \/\/\/<Constants for Cubic Spline Kernel.                                     | Constante para kernel cubic spline.$/;"	m	class:JSph	access:protected
JSph::Damping	JSph.h	/^  JDamping *Damping;            \/\/\/<Object for damping zones.$/;"	m	class:JSph	access:protected
JSph::DataBi4	JSph.h	/^  JPartDataBi4 *DataBi4;            \/\/\/<To store particles and info in bi4 format.      | Para grabar particulas e info en formato bi4.$/;"	m	class:JSph	access:private
JSph::DataFloatBi4	JSph.h	/^  JPartFloatBi4Save *DataFloatBi4;  \/\/\/<To store floating data in bi4 format.           | Para grabar datos de floatings en formato bi4.$/;"	m	class:JSph	access:private
JSph::DataOutBi4	JSph.h	/^  JPartOutBi4Save *DataOutBi4;      \/\/\/<To store excluded particles in bi4 format.      | Para grabar particulas excluidas en formato bi4.$/;"	m	class:JSph	access:private
JSph::Delta2H	JSph.h	/^  float Delta2H;             \/\/\/<Constant for DeltaSPH. Delta2H=DeltaSph*H*2$/;"	m	class:JSph	access:protected
JSph::DeltaSph	JSph.h	/^  float DeltaSph;             \/\/\/<DeltaSPH constant. The default value is 0.1f, with 0 having no effect. | Constante para DeltaSPH. El valor por defecto es 0.1f, con 0 no tiene efecto.  $/;"	m	class:JSph	access:protected
JSph::DemData	JSph.h	/^  StDemData *DemData;  \/\/\/<Data of DEM objects. [DemDataSize]$/;"	m	class:JSph	access:protected
JSph::DemDataSize	JSph.h	/^  static const unsigned DemDataSize=CODE_TYPE_FLUID;$/;"	m	class:JSph	access:protected
JSph::DemDtForce	JSph.h	/^  double DemDtForce;       \/\/\/<Dt for tangencial acceleration.$/;"	m	class:JSph	access:protected
JSph::DgNum	JSph.h	/^  unsigned DgNum;$/;"	m	class:JSph	access:public
JSph::DgSaveCsvParticlesCpu	JSph.cpp	/^void JSph::DgSaveCsvParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const float *ar,const tfloat3 *ace,const tfloat3 *vcorr){$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const float *ar,const tfloat3 *ace,const tfloat3 *vcorr)
JSph::DgSaveCsvParticlesCpu	JSph.h	/^  void DgSaveCsvParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const float *ar=NULL,const tfloat3 *ace=NULL,const tfloat3 *vcorr=NULL);$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const float *ar=NULL,const tfloat3 *ace=NULL,const tfloat3 *vcorr=NULL)
JSph::DgSaveVtkParticlesCpu	JSph.cpp	/^void JSph::DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin ,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop ,const tfloat3 *ace) const
JSph::DgSaveVtkParticlesCpu	JSph.cpp	/^void JSph::DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop){$/;"	f	class:JSph	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop)
JSph::DgSaveVtkParticlesCpu	JSph.h	/^  void DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop,const tfloat3 *ace=NULL)const;$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tdouble3 *pos,const typecode *code,const unsigned *idp,const tfloat4 *velrhop,const tfloat3 *ace=NULL) const
JSph::DgSaveVtkParticlesCpu	JSph.h	/^  void DgSaveVtkParticlesCpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop);$/;"	p	class:JSph	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const tfloat3 *pos,const byte *check,const unsigned *idp,const tfloat3 *vel,const float *rhop)
JSph::DirCase	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
JSph::DirDataOut	JSph.h	/^  std::string DirDataOut;     \/\/\/<Specifies the output subdirectory for binary data.$/;"	m	class:JSph	access:protected
JSph::DirOut	JSph.h	/^  std::string DirOut;         \/\/\/<Specifies the general output directory.$/;"	m	class:JSph	access:protected
JSph::DomCelFin	JSph.h	/^  tuint3 DomCelFin;        \/\/\/<Last cell within the Map defining local simulation area. DomCelIni=Map_Cells for Single-CPU  | Celda final dentro de Map que define el area de simulacion local.$/;"	m	class:JSph	access:protected
JSph::DomCelIni	JSph.h	/^  tuint3 DomCelIni;        \/\/\/<First cell within the Map defining local simulation area. DomCelIni=TUint3(0) for Single-CPU | Celda inicial dentro de Map que define el area de simulacion local.$/;"	m	class:JSph	access:protected
JSph::DomCellCode	JSph.h	/^  unsigned DomCellCode;    \/\/\/<Key for encoding cell position within the Domain. | Clave para la codificacion de la celda de posicion dentro de Domain.$/;"	m	class:JSph	access:protected
JSph::DomCells	JSph.h	/^  tuint3 DomCells;         \/\/\/<Number of cells in each direction. DomCells=DomCelFin-DomCelIni                              | Numero de celdas en cada direccion.                                                                $/;"	m	class:JSph	access:protected
JSph::DomPosMax	JSph.h	/^  tdouble3 DomPosMax;      \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. DomPosMax=min(Map_PosMax,Map_PosMin+(DomCelFin*Scell)); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JSph	access:protected
JSph::DomPosMin	JSph.h	/^  tdouble3 DomPosMin;      \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. DomPosMin=Map_PosMin+(DomCelIni*Scell); | Limite inferior de simulacion + borde 2h si hay condiciones periodicas. $/;"	m	class:JSph	access:protected
JSph::DomRealPosMax	JSph.h	/^  tdouble3 DomRealPosMax;  \/\/\/<Real upper limit of the simulation according to DomCelIni\/Fin (without periodic condition borders) DomRealPosMax=min(DomPosMax,MapRealPosMax) | Limite real superior de simulacion segun DomCelIni\/Fin (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
JSph::DomRealPosMin	JSph.h	/^  tdouble3 DomRealPosMin;  \/\/\/<Real lower limit of the simulation according to DomCelIni\/Fin (without periodic condition borders) DomRealPosMin=max(DomPosMin,MapRealPosMin) | Limite real inferior de simulacion segun DomCelIni\/Fin (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
JSph::DomSize	JSph.h	/^  tdouble3 DomSize;        \/\/\/<Result of DomSize = DomPosMax - DomPosMin$/;"	m	class:JSph	access:protected
JSph::Dosh	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
JSph::Dp	JSph.h	/^  double Dp;$/;"	m	class:JSph	access:protected
JSph::DtAllParticles	JSph.h	/^  bool DtAllParticles;       \/\/\/<Velocity of particles used to calculate DT. 1:All, 0:Only fluid\/floating (def=0).$/;"	m	class:JSph	access:protected
JSph::DtFixed	JSph.h	/^  JSphDtFixed *DtFixed;$/;"	m	class:JSph	access:protected
JSph::DtIni	JSph.h	/^  double DtIni;              \/\/\/<Initial Dt$/;"	m	class:JSph	access:protected
JSph::DtMin	JSph.h	/^  double DtMin;              \/\/\/<Minimum allowed Dt (if the calculated value is lower is replaced by DTmin).$/;"	m	class:JSph	access:protected
JSph::DtModif	JSph.h	/^  unsigned DtModif;       \/\/\/<Number of modifications on  dt computed when it is too low. | Numero de modificaciones del dt calculado por ser demasiado bajo.         $/;"	m	class:JSph	access:protected
JSph::DtModifWrn	JSph.h	/^  unsigned DtModifWrn;    \/\/\/<Limit number for warning generation.$/;"	m	class:JSph	access:protected
JSph::Eta2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
JSph::FileXml	JSph.h	/^  std::string FileXml;$/;"	m	class:JSph	access:protected
JSph::Fourh2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
JSph::FreePartsInit	JSph.cpp	/^void JSph::FreePartsInit(){$/;"	f	class:JSph	signature:()
JSph::FreePartsInit	JSph.h	/^  void FreePartsInit();$/;"	p	class:JSph	access:protected	signature:()
JSph::FtCount	JSph.h	/^  unsigned FtCount;          \/\/\/<Number of floating objects.$/;"	m	class:JSph	access:protected
JSph::FtMode	JSph.h	/^  TpFtMode FtMode;           \/\/\/<Defines interaction mode for floatings and boundaries.$/;"	m	class:JSph	access:protected
JSph::FtObjs	JSph.h	/^  StFloatingData *FtObjs;    \/\/\/<Data of floating objects. [ftcount]$/;"	m	class:JSph	access:protected
JSph::FtPause	JSph.h	/^  float FtPause;             \/\/\/<Time to start floating bodies movement.$/;"	m	class:JSph	access:protected
JSph::Gamma	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
JSph::GaugeSystem	JSph.h	/^  JGaugeSystem *GaugeSystem;    \/\/\/<Object for automatic gauge system.$/;"	m	class:JSph	access:protected
JSph::GetAllocMemoryCpu	JSph.cpp	/^llong JSph::GetAllocMemoryCpu()const{  $/;"	f	class:JSph	signature:() const
JSph::GetAllocMemoryCpu	JSph.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::GetDeltaSphName	JSph.cpp	/^std::string JSph::GetDeltaSphName(TpDeltaSph tdelta){$/;"	f	class:JSph	signature:(TpDeltaSph tdelta)
JSph::GetDeltaSphName	JSph.h	/^  static std::string GetDeltaSphName(TpDeltaSph tdelta);$/;"	p	class:JSph	access:public	signature:(TpDeltaSph tdelta)
JSph::GetKernelName	JSph.cpp	/^std::string JSph::GetKernelName(TpKernel tkernel){$/;"	f	class:JSph	signature:(TpKernel tkernel)
JSph::GetKernelName	JSph.h	/^  static std::string GetKernelName(TpKernel tkernel);$/;"	p	class:JSph	access:public	signature:(TpKernel tkernel)
JSph::GetOutMoveCount	JSph.h	/^  unsigned GetOutMoveCount()const{ return(OutMoveCount); }$/;"	f	class:JSph	access:protected	signature:() const
JSph::GetOutPosCount	JSph.h	/^  unsigned GetOutPosCount()const{ return(OutPosCount); }$/;"	f	class:JSph	access:protected	signature:() const
JSph::GetOutRhopCount	JSph.h	/^  unsigned GetOutRhopCount()const{ return(OutRhopCount); }$/;"	f	class:JSph	access:protected	signature:() const
JSph::GetPointerDataFloat3	JSph.cpp	/^tfloat3* JSph::GetPointerDataFloat3(unsigned n,const tdouble3* v)const{$/;"	f	class:JSph	signature:(unsigned n,const tdouble3* v) const
JSph::GetPointerDataFloat3	JSph.h	/^  tfloat3* GetPointerDataFloat3(unsigned n,const tdouble3* v)const;$/;"	p	class:JSph	access:protected	signature:(unsigned n,const tdouble3* v) const
JSph::GetPosDoubleName	JSph.cpp	/^std::string JSph::GetPosDoubleName(bool psingle,bool svdouble){$/;"	f	class:JSph	signature:(bool psingle,bool svdouble)
JSph::GetPosDoubleName	JSph.h	/^  static std::string GetPosDoubleName(bool psingle,bool svdouble);$/;"	p	class:JSph	access:public	signature:(bool psingle,bool svdouble)
JSph::GetResInfo	JSph.cpp	/^void JSph::GetResInfo(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo){$/;"	f	class:JSph	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo)
JSph::GetResInfo	JSph.h	/^  void GetResInfo(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo);$/;"	p	class:JSph	access:protected	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus,std::string &hinfo,std::string &dinfo)
JSph::GetShiftingName	JSph.cpp	/^std::string JSph::GetShiftingName(TpShifting tshift){$/;"	f	class:JSph	signature:(TpShifting tshift)
JSph::GetShiftingName	JSph.h	/^  static std::string GetShiftingName(TpShifting tshift);$/;"	p	class:JSph	access:public	signature:(TpShifting tshift)
JSph::GetStepName	JSph.cpp	/^std::string JSph::GetStepName(TpStep tstep){$/;"	f	class:JSph	signature:(TpStep tstep)
JSph::GetStepName	JSph.h	/^  static std::string GetStepName(TpStep tstep);$/;"	p	class:JSph	access:public	signature:(TpStep tstep)
JSph::GetViscoName	JSph.cpp	/^std::string JSph::GetViscoName(TpVisco tvisco){$/;"	f	class:JSph	signature:(TpVisco tvisco)
JSph::GetViscoName	JSph.h	/^  static std::string GetViscoName(TpVisco tvisco);$/;"	p	class:JSph	access:public	signature:(TpVisco tvisco)
JSph::Gravity	JSph.h	/^  tfloat3 Gravity;$/;"	m	class:JSph	access:protected
JSph::H	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
JSph::H2	JSph.h	/^  float Dosh,H2,Fourh2,Eta2;$/;"	m	class:JSph	access:protected
JSph::Hardware	JSph.h	/^  std::string Hardware;$/;"	m	class:JSph	access:protected
JSph::Hdiv	JSph.h	/^  unsigned Hdiv;           \/\/\/<Value to divide 2H. | Valor por el que se divide a DosH$/;"	m	class:JSph	access:protected
JSph::IdMax	JSph.h	/^  unsigned IdMax;          \/\/\/<It is the maximum Id used.$/;"	m	class:JSph	access:protected
JSph::InitRun	JSph.cpp	/^void JSph::InitRun(unsigned np,const unsigned *idp,const tdouble3 *pos){$/;"	f	class:JSph	signature:(unsigned np,const unsigned *idp,const tdouble3 *pos)
JSph::InitRun	JSph.h	/^  void InitRun(unsigned np,const unsigned *idp,const tdouble3 *pos);$/;"	p	class:JSph	access:protected	signature:(unsigned np,const unsigned *idp,const tdouble3 *pos)
JSph::InitVars	JSph.cpp	/^void JSph::InitVars(){$/;"	f	class:JSph	signature:()
JSph::InitVars	JSph.h	/^  void InitVars();$/;"	p	class:JSph	access:private	signature:()
JSph::InitializeInfo	JSph.h	/^  std::vector<std::string> InitializeInfo; \/\/\/<Stores information about initialize configuration applied.$/;"	m	class:JSph	access:protected
JSph::InterStep	JSph.h	/^  TpInterStep InterStep;$/;"	m	class:JSph	access:protected
JSph::JSph	JSph.cpp	/^JSph::JSph(bool cpu,bool withmpi):Cpu(cpu),WithMpi(withmpi){$/;"	f	class:JSph	signature:(bool cpu,bool withmpi)
JSph::JSph	JSph.h	/^  JSph(bool cpu,bool withmpi);$/;"	p	class:JSph	access:public	signature:(bool cpu,bool withmpi)
JSph::LoadCaseConfig	JSph.cpp	/^void JSph::LoadCaseConfig(){$/;"	f	class:JSph	signature:()
JSph::LoadCaseConfig	JSph.h	/^  void LoadCaseConfig();$/;"	p	class:JSph	access:protected	signature:()
JSph::LoadCaseParticles	JSph.cpp	/^void JSph::LoadCaseParticles(){$/;"	f	class:JSph	signature:()
JSph::LoadCaseParticles	JSph.h	/^  void LoadCaseParticles();$/;"	p	class:JSph	access:protected	signature:()
JSph::LoadCodeParticles	JSph.cpp	/^void JSph::LoadCodeParticles(unsigned np,const unsigned *idp,typecode *code)const{$/;"	f	class:JSph	signature:(unsigned np,const unsigned *idp,typecode *code) const
JSph::LoadCodeParticles	JSph.h	/^  void LoadCodeParticles(unsigned np,const unsigned *idp,typecode *code)const;$/;"	p	class:JSph	access:protected	signature:(unsigned np,const unsigned *idp,typecode *code) const
JSph::LoadConfig	JSph.cpp	/^void JSph::LoadConfig(const JCfgRun *cfg){$/;"	f	class:JSph	signature:(const JCfgRun *cfg)
JSph::LoadConfig	JSph.h	/^  void LoadConfig(const JCfgRun *cfg);$/;"	p	class:JSph	access:protected	signature:(const JCfgRun *cfg)
JSph::LoadDcellParticles	JSph.cpp	/^void JSph::LoadDcellParticles(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell)const{$/;"	f	class:JSph	signature:(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell) const
JSph::LoadDcellParticles	JSph.h	/^  void LoadDcellParticles(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell)const;$/;"	p	class:JSph	access:protected	signature:(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell) const
JSph::LoadDemData	JSph.cpp	/^StDemData JSph::LoadDemData(bool basicdata,bool extradata,const JSpacePartBlock* block)const{$/;"	f	class:JSph	signature:(bool basicdata,bool extradata,const JSpacePartBlock* block) const
JSph::LoadDemData	JSph.h	/^  StDemData LoadDemData(bool basicdata,bool extradata,const JSpacePartBlock* block)const;$/;"	p	class:JSph	access:protected	signature:(bool basicdata,bool extradata,const JSpacePartBlock* block) const
JSph::Log	JSph.h	/^  JLog2 *Log;$/;"	m	class:JSph	access:protected
JSph::MapRealPosMax	JSph.h	/^  tdouble3 MapRealPosMax;  \/\/\/<Real upper limit of simulation (without the periodic condition borders). MapRealPosMax=CasePosMax+(H*BORDER_MAP) | Limite superior real de simulacion (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
JSph::MapRealPosMin	JSph.h	/^  tdouble3 MapRealPosMin;  \/\/\/<Real lower limit of simulation (without the periodic condition borders). MapRealPosMin=CasePosMin-(H*BORDER_MAP) | Limite inferior real de simulacion (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
JSph::MapRealSize	JSph.h	/^  tdouble3 MapRealSize;    \/\/\/<Result of MapRealSize = MapRealPosMax - MapRealPosMin$/;"	m	class:JSph	access:protected
JSph::Map_Cells	JSph.h	/^  tuint3 Map_Cells;        \/\/\/<Maximum number of cells within case limits. Map_Cells=TUint3(unsigned(ceil(Map_Size.xyz\/Scell))             | Numero de celdas maximo segun los limites del caso.$/;"	m	class:JSph	access:protected
JSph::Map_PosMax	JSph.h	/^  tdouble3 Map_PosMax;     \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. Map_PosMax=MapRealPosMax+dosh(in periodic axis) | Limite superior de simulacion + borde 2h si hay condiciones periodicas.$/;"	m	class:JSph	access:protected
JSph::Map_PosMin	JSph.h	/^  tdouble3 Map_PosMin;     \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. Map_PosMin=MapRealPosMin-dosh(in periodic axis) | Limite inferior de simulacion + borde 2h si hay condiciones periodicas.$/;"	m	class:JSph	access:protected
JSph::Map_Size	JSph.h	/^  tdouble3 Map_Size;       \/\/\/<Result of Map_Size = Map_PosMax - Map_PosMin$/;"	m	class:JSph	access:protected
JSph::MassBound	JSph.h	/^  float MassFluid,MassBound;  $/;"	m	class:JSph	access:protected
JSph::MassFluid	JSph.h	/^  float MassFluid,MassBound;  $/;"	m	class:JSph	access:protected
JSph::MaxCells	JSph.h	/^  unsigned MaxCells;      \/\/\/<Maximum number of cells.       | Numero maximo de celdas.                   $/;"	m	class:JSph	access:protected
JSph::MaxMemoryCpu	JSph.h	/^  llong MaxMemoryCpu;     \/\/\/<Amount of reserved CPU memory. | Cantidad de memoria Cpu reservada.            $/;"	m	class:JSph	access:protected
JSph::MaxMemoryGpu	JSph.h	/^  llong MaxMemoryGpu;     \/\/\/<Amount of reserved GPU memory. | Cantidad de memoria Gpu reservada.$/;"	m	class:JSph	access:protected
JSph::MaxParticles	JSph.h	/^  unsigned MaxParticles;  \/\/\/<Maximum number of particles.   | Numero maximo de particulas.$/;"	m	class:JSph	access:protected
JSph::MkInfo	JSph.h	/^  JSphMk *MkInfo;            \/\/\/<Stores information for the Mk of the particles.$/;"	m	class:JSph	access:protected
JSph::MovLimit	JSph.h	/^  float MovLimit;          \/\/\/<Maximum distance a particle is allowed to move in one step (Scell*0.9) | Distancia maxima que se permite recorrer a una particula en un paso (Scell*0.9).$/;"	m	class:JSph	access:protected
JSph::NpDynamic	JSph.h	/^  bool NpDynamic;          \/\/\/<CaseNp can increase.$/;"	m	class:JSph	access:protected
JSph::NpMinimum	JSph.h	/^  unsigned NpMinimum;        \/\/\/<Minimum number of particles allowed.                     | Numero minimo de particulas permitidas.                                                $/;"	m	class:JSph	access:protected
JSph::Nstep	JSph.h	/^  int Nstep;              \/\/\/<Number of step in execution.             | Numero de paso en ejecucion.$/;"	m	class:JSph	access:protected
JSph::OutMoveCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
JSph::OutPosCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
JSph::OutRhopCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
JSph::Part	JSph.h	/^  int Part;               \/\/\/<Saves subsequent PART. | Siguiente PART a guardar.                                          $/;"	m	class:JSph	access:protected
JSph::PartBegin	JSph.h	/^  unsigned PartBegin;         \/\/\/<Indicates the start (0: no resumption).                 | Indica el PART de arranque (0:Sin reanudacion).$/;"	m	class:JSph	access:protected
JSph::PartBeginDir	JSph.h	/^  std::string PartBeginDir;   \/\/\/<Searches directory for starting PART.                   | Directorio donde busca el PART de arranque.$/;"	m	class:JSph	access:protected
JSph::PartBeginFirst	JSph.h	/^  unsigned PartBeginFirst;    \/\/\/<Indicates the number of the first PART to be generated. | Indica el numero del primer PART a generar.                                    $/;"	m	class:JSph	access:protected
JSph::PartBeginTimeStep	JSph.h	/^  double PartBeginTimeStep;   \/\/\/<initial instant of the simulation                       | Instante de inicio de la simulaciÃ³n.                                          $/;"	m	class:JSph	access:protected
JSph::PartBeginTotalNp	JSph.h	/^  ullong PartBeginTotalNp;    \/\/\/<Total number of simulated particles.$/;"	m	class:JSph	access:protected
JSph::PartDtMax	JSph.h	/^  double PartDtMax;       \/\/\/<Maximum value of dt in the current PART. | Valor maximo de dt en el PART actual.$/;"	m	class:JSph	access:protected
JSph::PartDtMin	JSph.h	/^  double PartDtMin;       \/\/\/<Minimum value of dt in the current PART. | Valor minimo de dt en el PART actual.$/;"	m	class:JSph	access:protected
JSph::PartIni	JSph.h	/^  int PartIni;            \/\/\/<First generated PART.  | Primer PART generado. $/;"	m	class:JSph	access:protected
JSph::PartNstep	JSph.h	/^  int PartNstep;          \/\/\/<Number of step when last PART was saved. | Numero de paso en el que se guardo el ultimo PART.$/;"	m	class:JSph	access:protected
JSph::PartOut	JSph.h	/^  unsigned PartOut;       \/\/\/<Total number of excluded particles to be recorded to the last PART. | Numero total de particulas excluidas al grabar el ultimo PART.$/;"	m	class:JSph	access:protected
JSph::PartsInit	JSph.h	/^  JSphPartsInit *PartsInit;  \/\/\/<Stores initial particles data for automatic configurations.$/;"	m	class:JSph	access:protected
JSph::PartsLoaded	JSph.h	/^  JPartsLoad4 *PartsLoaded;$/;"	m	class:JSph	access:protected
JSph::PartsOut	JSph.h	/^  JPartsOut *PartsOut;              \/\/\/<Stores excluded particles until they are saved. | Almacena las particulas excluidas hasta su grabacion.$/;"	m	class:JSph	access:private
JSph::PartsOutMax	JSph.h	/^  float PartsOutMax;         \/\/\/<Allowed percentage of fluid particles out of the domain. | Porcentaje maximo de particulas excluidas permitidas.                                  $/;"	m	class:JSph	access:protected
JSph::PartsOutTotWrn	JSph.h	/^  unsigned PartsOutTotWrn;   \/\/\/<Limit percentage for warning generation about total excluded particles.$/;"	m	class:JSph	access:protected
JSph::PartsOutWrn	JSph.h	/^  unsigned PartsOutWrn;      \/\/\/<Limit percentage for warning generation about number of excluded particles in one PART.$/;"	m	class:JSph	access:protected
JSph::PeriActive	JSph.h	/^  byte PeriActive;$/;"	m	class:JSph	access:protected
JSph::PeriX	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
JSph::PeriXinc	JSph.h	/^  tdouble3 PeriXinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
JSph::PeriY	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
JSph::PeriYinc	JSph.h	/^  tdouble3 PeriYinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
JSph::PeriZ	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
JSph::PeriZinc	JSph.h	/^  tdouble3 PeriZinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
JSph::PrepareCfgDomainValues	JSph.cpp	/^void JSph::PrepareCfgDomainValues(tdouble3 &v,tdouble3 vdef)const{$/;"	f	class:JSph	signature:(tdouble3 &v,tdouble3 vdef) const
JSph::PrepareCfgDomainValues	JSph.h	/^  void PrepareCfgDomainValues(tdouble3 &v,tdouble3 vdef=TDouble3(0))const;$/;"	p	class:JSph	access:protected	signature:(tdouble3 &v,tdouble3 vdef=TDouble3(0)) const
JSph::PrintHeadPart	JSph.cpp	/^void JSph::PrintHeadPart(){$/;"	f	class:JSph	signature:()
JSph::PrintHeadPart	JSph.h	/^  void PrintHeadPart();$/;"	p	class:JSph	access:protected	signature:()
JSph::PrintSizeNp	JSph.cpp	/^void JSph::PrintSizeNp(unsigned np,llong size)const{$/;"	f	class:JSph	signature:(unsigned np,llong size) const
JSph::PrintSizeNp	JSph.h	/^  void PrintSizeNp(unsigned np,llong size)const;$/;"	p	class:JSph	access:protected	signature:(unsigned np,llong size) const
JSph::Psingle	JSph.h	/^  bool Psingle;$/;"	m	class:JSph	access:protected
JSph::ResizeMapLimits	JSph.cpp	/^void JSph::ResizeMapLimits(){$/;"	f	class:JSph	signature:()
JSph::ResizeMapLimits	JSph.h	/^  void ResizeMapLimits();$/;"	p	class:JSph	access:protected	signature:()
JSph::RestartCheckData	JSph.cpp	/^void JSph::RestartCheckData(){$/;"	f	class:JSph	signature:()
JSph::RestartCheckData	JSph.h	/^  void RestartCheckData();$/;"	p	class:JSph	access:protected	signature:()
JSph::ReuseIds	JSph.h	/^  bool ReuseIds;           \/\/\/<Id of particles excluded values ââare reused.$/;"	m	class:JSph	access:protected
JSph::RhopOut	JSph.h	/^  bool RhopOut;               \/\/\/<Indicates whether the RhopOut density correction is active or not.    | Indica si activa la correccion de densidad RhopOut o no.                       $/;"	m	class:JSph	access:protected
JSph::RhopOutMax	JSph.h	/^  float RhopOutMax;           \/\/\/<Maximum limit for Rhopout correction.                                 | Limite maximo para la correccion de RhopOut.$/;"	m	class:JSph	access:protected
JSph::RhopOutMin	JSph.h	/^  float RhopOutMin;           \/\/\/<Minimum limit for Rhopout correction.                                 | Limite minimo para la correccion de RhopOut.$/;"	m	class:JSph	access:protected
JSph::RhopZero	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
JSph::RunCode	JSph.h	/^  std::string RunCode;$/;"	m	class:JSph	access:protected
JSph::RunInitialize	JSph.cpp	/^void JSph::RunInitialize(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop){$/;"	f	class:JSph	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop)
JSph::RunInitialize	JSph.h	/^  void RunInitialize(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop);$/;"	p	class:JSph	access:protected	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop)
JSph::RunName	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
JSph::RunTimeDate	JSph.h	/^  std::string RunTimeDate;$/;"	m	class:JSph	access:protected
JSph::SaveData	JSph.cpp	/^void JSph::SaveData(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop$/;"	f	class:JSph	signature:(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop ,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
JSph::SaveData	JSph.h	/^  void SaveData(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus);$/;"	p	class:JSph	access:protected	signature:(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
JSph::SaveDomainVtk	JSph.cpp	/^void JSph::SaveDomainVtk(unsigned ndom,const tdouble3 *vdom)const{ $/;"	f	class:JSph	signature:(unsigned ndom,const tdouble3 *vdom) const
JSph::SaveDomainVtk	JSph.h	/^  void SaveDomainVtk(unsigned ndom,const tdouble3 *vdom)const;$/;"	p	class:JSph	access:protected	signature:(unsigned ndom,const tdouble3 *vdom) const
JSph::SaveDt	JSph.h	/^  JSaveDt *SaveDt;$/;"	m	class:JSph	access:protected
JSph::SaveInitialDomainVtk	JSph.cpp	/^void JSph::SaveInitialDomainVtk()const{$/;"	f	class:JSph	signature:() const
JSph::SaveInitialDomainVtk	JSph.h	/^  void SaveInitialDomainVtk()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::SaveMapCellsVtk	JSph.cpp	/^void JSph::SaveMapCellsVtk(float scell)const{$/;"	f	class:JSph	signature:(float scell) const
JSph::SaveMapCellsVtk	JSph.h	/^  void SaveMapCellsVtk(float scell)const;$/;"	p	class:JSph	access:protected	signature:(float scell) const
JSph::SaveMapCellsVtkSize	JSph.cpp	/^unsigned JSph::SaveMapCellsVtkSize()const{$/;"	f	class:JSph	signature:() const
JSph::SaveMapCellsVtkSize	JSph.h	/^  unsigned SaveMapCellsVtkSize()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::SavePartData	JSph.cpp	/^void JSph::SavePartData(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus){$/;"	f	class:JSph	signature:(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
JSph::SavePartData	JSph.h	/^  void SavePartData(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus);$/;"	p	class:JSph	access:protected	signature:(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
JSph::SaveRes	JSph.cpp	/^void JSph::SaveRes(float tsim,float ttot,const std::string &headplus,const std::string &detplus){$/;"	f	class:JSph	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus)
JSph::SaveRes	JSph.h	/^  void SaveRes(float tsim,float ttot,const std::string &headplus="",const std::string &detplus="");$/;"	p	class:JSph	access:protected	signature:(float tsim,float ttot,const std::string &headplus=Ó,const std::string &detplus=Ó)
JSph::Scell	JSph.h	/^  float Scell;             \/\/\/<Cell size: 2h or h. | TamaÃ±o de celda: 2h o h.$/;"	m	class:JSph	access:protected
JSph::SelecDomain	JSph.cpp	/^void JSph::SelecDomain(tuint3 celini,tuint3 celfin){$/;"	f	class:JSph	signature:(tuint3 celini,tuint3 celfin)
JSph::SelecDomain	JSph.h	/^  void SelecDomain(tuint3 celini,tuint3 celfin);$/;"	p	class:JSph	access:protected	signature:(tuint3 celini,tuint3 celfin)
JSph::ShiftCoef	JSph.h	/^  float ShiftCoef;            \/\/\/<Coefficient for shifting computation.$/;"	m	class:JSph	access:protected
JSph::ShiftTFS	JSph.h	/^  float ShiftTFS;             \/\/\/<Threshold to detect free surface. Typically 1.5 for 2D and 2.75 for 3D (def=0).$/;"	m	class:JSph	access:protected
JSph::ShowResume	JSph.cpp	/^void JSph::ShowResume(bool stop,float tsim,float ttot,bool all,std::string infoplus){$/;"	f	class:JSph	signature:(bool stop,float tsim,float ttot,bool all,std::string infoplus)
JSph::ShowResume	JSph.h	/^  void ShowResume(bool stop,float tsim,float ttot,bool all,std::string infoplus);$/;"	p	class:JSph	access:protected	signature:(bool stop,float tsim,float ttot,bool all,std::string infoplus)
JSph::Simulate2D	JSph.h	/^  bool Simulate2D;       \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JSph	access:protected
JSph::Simulate2DPosY	JSph.h	/^  double Simulate2DPosY; \/\/\/<Y value in 2D simulations.                        | Valor de Y en simulaciones 2D.$/;"	m	class:JSph	access:protected
JSph::SphMotion	JSph.h	/^  JSphMotion *SphMotion;      \/\/\/<Manages moving objects. It is NULL when there are not moving objects.$/;"	m	class:JSph	access:protected
JSph::SpsBlin	JSph.h	/^  float SpsBlin;             \/\/\/<Blin constant used in the SPS turbulence model.$/;"	m	class:JSph	access:protected
JSph::SpsSmag	JSph.h	/^  float SpsSmag;             \/\/\/<Smagorinsky constant used in SPS turbulence model.$/;"	m	class:JSph	access:protected
JSph::StCubicCte	JSph.h	/^  }StCubicCte;$/;"	t	class:JSph	typeref:struct:JSph::__anon29	access:public
JSph::StInfoPartPlus	JSph.h	/^  }StInfoPartPlus;$/;"	t	class:JSph	typeref:struct:JSph::__anon30	access:public
JSph::Stable	JSph.h	/^  bool Stable;$/;"	m	class:JSph	access:protected
JSph::SvData	JSph.h	/^  byte SvData;               \/\/\/<Combination of the TpSaveDat values.                            | Combinacion de valores TpSaveDat.                                                      $/;"	m	class:JSph	access:protected
JSph::SvDomainVtk	JSph.h	/^  bool SvDomainVtk;          \/\/\/<Stores VTK file with the domain of particles of each PART file. | Graba fichero vtk con el dominio de las particulas en cada Part. $/;"	m	class:JSph	access:protected
JSph::SvDouble	JSph.h	/^  bool SvDouble;     \/\/\/<Indicates whether Pos is saved as double in bi4 files. | Indica si en los ficheros bi4 se guarda Pos como double.$/;"	m	class:JSph	access:protected
JSph::SvRes	JSph.h	/^  bool SvRes;                \/\/\/<Creates file with execution summary.                            | Graba fichero con resumen de ejecucion.$/;"	m	class:JSph	access:protected
JSph::SvTimers	JSph.h	/^  bool SvTimers;             \/\/\/<Computes the time for each process.                             | Obtiene tiempo para cada proceso.$/;"	m	class:JSph	access:protected
JSph::SymplecticDtPre	JSph.h	/^  double SymplecticDtPre;  \/\/\/<Previous Dt to use with Symplectic.$/;"	m	class:JSph	access:protected
JSph::TDeltaSph	JSph.h	/^  TpDeltaSph TDeltaSph;       \/\/\/<Delta-SPH type: None, Basic or Dynamic.                                | Tipo de Delta-SPH: None, Basic o Dynamic. $/;"	m	class:JSph	access:protected
JSph::TKernel	JSph.h	/^  TpKernel TKernel;           \/\/\/<Kernel type: Cubic, Wendland or Gaussian.                              | Tipo de kernel: Cubic, Wendland o Gaussian.$/;"	m	class:JSph	access:protected
JSph::TShifting	JSph.h	/^  TpShifting TShifting;       \/\/\/<Type of Shifting: None, NoBound, NoFixed, Full.$/;"	m	class:JSph	access:protected
JSph::TStep	JSph.h	/^  TpStep TStep;               \/\/\/<Step Algorithm: Verlet or Symplectic.                                  | Algoritmo de paso: Verlet o Symplectic.$/;"	m	class:JSph	access:protected
JSph::TVisco	JSph.h	/^  TpVisco TVisco;             \/\/\/<Viscosity type: Artificial,...                                         | Tipo de viscosidad: Artificial,...$/;"	m	class:JSph	access:protected
JSph::TimeMax	JSph.h	/^  double TimeMax;$/;"	m	class:JSph	access:protected
JSph::TimeOut	JSph.h	/^  JTimeOut *TimeOut;$/;"	m	class:JSph	access:protected
JSph::TimePart	JSph.h	/^  double TimePart;$/;"	m	class:JSph	access:protected
JSph::TimePartNext	JSph.h	/^  double TimePartNext;    \/\/\/<Instant to store next PART file.   | Instante para grabar siguiente fichero PART.$/;"	m	class:JSph	access:protected
JSph::TimeStep	JSph.h	/^  double TimeStep;        \/\/\/<Current instant of the simulation. | Instante actual de la simulaciÃ³n.                                 $/;"	m	class:JSph	access:protected
JSph::TimeStepIni	JSph.h	/^  double TimeStepIni;     \/\/\/<Initial instant of the simulation. | Instante inicial de la simulaciÃ³n.$/;"	m	class:JSph	access:protected
JSph::TimeStepM1	JSph.h	/^  double TimeStepM1;      \/\/\/<Instant of the simulation when the last PART was stored. | Instante de la simulaciÃ³n en que se grabo el Ãºltimo PART.         $/;"	m	class:JSph	access:protected
JSph::TimerPart	JSph.h	/^  JTimer TimerPart;        \/\/\/<Measueres runtime since last PART.                | Mide el tiempo de ejecucion desde el ultimo PART.$/;"	m	class:JSph	access:protected
JSph::TimerSim	JSph.h	/^  JTimer TimerSim;         \/\/\/<Measueres runtime since first step of simulation. | Mide el tiempo de ejecucion desde el primer paso de calculo.$/;"	m	class:JSph	access:protected
JSph::TimerToText	JSph.cpp	/^std::string JSph::TimerToText(const std::string &name,float value){$/;"	f	class:JSph	signature:(const std::string &name,float value)
JSph::TimerToText	JSph.h	/^  static std::string TimerToText(const std::string &name,float value);$/;"	p	class:JSph	access:public	signature:(const std::string &name,float value)
JSph::TimerTot	JSph.h	/^  JTimer TimerTot;         \/\/\/<Measueres total runtime.                          | Mide el tiempo total de ejecucion.$/;"	m	class:JSph	access:protected
JSph::TotalNp	JSph.h	/^  ullong TotalNp;          \/\/\/<Total number of simulated particles (no cuenta las particulas inlet no validas).$/;"	m	class:JSph	access:protected
JSph::UpdatePeriodicPos	JSph.cpp	/^tdouble3 JSph::UpdatePeriodicPos(tdouble3 ps)const{$/;"	f	class:JSph	signature:(tdouble3 ps) const
JSph::UpdatePeriodicPos	JSph.h	/^  tdouble3 UpdatePeriodicPos(tdouble3 ps)const;$/;"	p	class:JSph	access:protected	signature:(tdouble3 ps) const
JSph::UseDEM	JSph.h	/^  bool UseDEM;         \/\/\/<Use DEM for boundary collisions.$/;"	m	class:JSph	access:protected
JSph::VerletStep	JSph.h	/^  int VerletStep;$/;"	m	class:JSph	access:protected
JSph::VerletSteps	JSph.h	/^  int VerletSteps;            \/\/\/<Number of steps to apply Eulerian equations.$/;"	m	class:JSph	access:protected
JSph::Visco	JSph.h	/^  float Visco;  $/;"	m	class:JSph	access:protected
JSph::ViscoBoundFactor	JSph.h	/^  float ViscoBoundFactor;     \/\/\/<For boundary interaction use Visco*ViscoBoundFactor.                  | Para interaccion con contorno usa Visco*ViscoBoundFactor.$/;"	m	class:JSph	access:protected
JSph::ViscoTime	JSph.h	/^  JSphVisco *ViscoTime;       \/\/\/<Provides a viscosity value as a function of simulation time.          | Proporciona un valor de viscosidad en funcion del instante de la simulacion.$/;"	m	class:JSph	access:protected
JSph::VisuConfig	JSph.cpp	/^void JSph::VisuConfig()const{$/;"	f	class:JSph	signature:() const
JSph::VisuConfig	JSph.h	/^  void VisuConfig()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::VisuDemCoefficients	JSph.cpp	/^void JSph::VisuDemCoefficients()const{$/;"	f	class:JSph	signature:() const
JSph::VisuDemCoefficients	JSph.h	/^  void VisuDemCoefficients()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::VisuParticleSummary	JSph.cpp	/^void JSph::VisuParticleSummary()const{$/;"	f	class:JSph	signature:() const
JSph::VisuParticleSummary	JSph.h	/^  void VisuParticleSummary()const;$/;"	p	class:JSph	access:protected	signature:() const
JSph::WaveGen	JSph.h	/^  JWaveGen *WaveGen;            \/\/\/<Object for wave generation.$/;"	m	class:JSph	access:protected
JSph::WithFloating	JSph.h	/^  bool WithFloating;$/;"	m	class:JSph	access:protected
JSph::WithMpi	JSph.h	/^  const bool WithMpi;$/;"	m	class:JSph	access:protected
JSph::__anon29::a1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::a2	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::a24	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::aa	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::c1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::c2	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::d1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
JSph::__anon29::od_wdeltap	JSph.h	/^    float od_wdeltap;        \/\/\/<Parameter for tensile instability correction.  $/;"	m	struct:JSph::__anon29	access:public
JSph::__anon30::gpudata	JSph.h	/^    bool gpudata;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::memorycpualloc	JSph.h	/^    llong memorycpualloc;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::memorynctalloc	JSph.h	/^    llong memorynctalloc;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::memorynctused	JSph.h	/^    llong memorynctused;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::memorynpalloc	JSph.h	/^    llong memorynpalloc;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::memorynpused	JSph.h	/^    llong memorynpused;$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::nct	JSph.h	/^    unsigned nct;        \/\/\/<Number of cells used in the divide.                                                           | Numero de celdas usadas en el divide.                                                    $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::newnp	JSph.h	/^    unsigned newnp;      \/\/\/<Number of new fluid particles (inlet conditions)                                              | Numero de nuevas particulas fluid (inlet conditions).                                    $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::npbin	JSph.h	/^    unsigned npbin;      \/\/\/<Number of boundary particles within the area of the divide (includes periodic particles).     | Numero de particulas bound dentro del area del divide (incluye particulas periodicas).$/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::npbout	JSph.h	/^    unsigned npbout;     \/\/\/<Number of boundary particles outside of the area of the divide (includes periodic particles). | Numero de particulas bound fuera del area del divide (incluye particulas periodicas).    $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::npbper	JSph.h	/^    unsigned npbper;     \/\/\/<Number of periodic boundary particles (inside and outside the area of the split).             | Numero de particulas bound periodicas (dentro y fuera del area del divide).              $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::npf	JSph.h	/^    unsigned npf;        \/\/\/<Number of fluid particles (includes periodic particles).                                      | Numero de particulas fluid (incluye particulas periodicas).                              $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::npfper	JSph.h	/^    unsigned npfper;     \/\/\/<Number of periodic fluid particles.                                                           | Numero de particulas fluid periodicas.                                                   $/;"	m	struct:JSph::__anon30	access:public
JSph::__anon30::timesim	JSph.h	/^    double timesim;      \/\/\/<Seconds from the start of the simulation (after loading the initial data).                    | Segundos desde el inicio de la simulacion (despues de cargar los datos iniciales).$/;"	m	struct:JSph::__anon30	access:public
JSph::~JSph	JSph.cpp	/^JSph::~JSph(){$/;"	f	class:JSph	signature:()
JSph::~JSph	JSph.h	/^  ~JSph();$/;"	p	class:JSph	access:public	signature:()
JSphAccInput	JSphAccInput.cpp	/^JSphAccInput::JSphAccInput(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place):Log(log),DirData(dirdata){$/;"	f	class:JSphAccInput	signature:(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place)
JSphAccInput	JSphAccInput.h	/^  JSphAccInput(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place);$/;"	p	class:JSphAccInput	access:public	signature:(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place)
JSphAccInput	JSphAccInput.h	/^class JSphAccInput : protected JObject$/;"	c	inherits:JObject
JSphAccInput::DirData	JSphAccInput.h	/^  std::string DirData;$/;"	m	class:JSphAccInput	access:protected
JSphAccInput::ExistMk	JSphAccInput.cpp	/^bool JSphAccInput::ExistMk(word mkfluid)const{$/;"	f	class:JSphAccInput	signature:(word mkfluid) const
JSphAccInput::ExistMk	JSphAccInput.h	/^  bool ExistMk(word mkfluid)const;$/;"	p	class:JSphAccInput	access:protected	signature:(word mkfluid) const
JSphAccInput::GetAccValues	JSphAccInput.cpp	/^void JSphAccInput::GetAccValues(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity){$/;"	f	class:JSphAccInput	signature:(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
JSphAccInput::GetAccValues	JSphAccInput.h	/^  void GetAccValues(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity); \/\/SL: Added linear and angular velocity and set gravity flag$/;"	p	class:JSphAccInput	access:public	signature:(unsigned cfile,double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
JSphAccInput::GetAllocMemory	JSphAccInput.h	/^  long long GetAllocMemory()const{ return(MemSize); }$/;"	f	class:JSphAccInput	access:public	signature:() const
JSphAccInput::GetCount	JSphAccInput.h	/^  unsigned GetCount()const{ return(unsigned(Inputs.size())); };$/;"	f	class:JSphAccInput	access:public	signature:() const
JSphAccInput::Init	JSphAccInput.cpp	/^void JSphAccInput::Init(double tmax){$/;"	f	class:JSphAccInput	signature:(double tmax)
JSphAccInput::Init	JSphAccInput.h	/^  void Init(double tmax);$/;"	p	class:JSphAccInput	access:public	signature:(double tmax)
JSphAccInput::Inputs	JSphAccInput.h	/^  std::vector<JSphAccInputMk*> Inputs;$/;"	m	class:JSphAccInput	access:protected
JSphAccInput::JSphAccInput	JSphAccInput.cpp	/^JSphAccInput::JSphAccInput(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place):Log(log),DirData(dirdata){$/;"	f	class:JSphAccInput	signature:(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place)
JSphAccInput::JSphAccInput	JSphAccInput.h	/^  JSphAccInput(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place);$/;"	p	class:JSphAccInput	access:public	signature:(JLog2* log,const std::string &dirdata,JXml *sxml,const std::string &place)
JSphAccInput::LoadXml	JSphAccInput.cpp	/^void JSphAccInput::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSphAccInput	signature:(JXml *sxml,const std::string &place)
JSphAccInput::LoadXml	JSphAccInput.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSphAccInput	access:protected	signature:(JXml *sxml,const std::string &place)
JSphAccInput::Log	JSphAccInput.h	/^  JLog2* Log;$/;"	m	class:JSphAccInput	access:protected
JSphAccInput::MemSize	JSphAccInput.h	/^  long long MemSize;$/;"	m	class:JSphAccInput	access:protected
JSphAccInput::ReadXml	JSphAccInput.cpp	/^void JSphAccInput::ReadXml(const JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSphAccInput	signature:(const JXml *sxml,TiXmlElement* lis)
JSphAccInput::ReadXml	JSphAccInput.h	/^  void ReadXml(const JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSphAccInput	access:protected	signature:(const JXml *sxml,TiXmlElement* lis)
JSphAccInput::Reset	JSphAccInput.cpp	/^void JSphAccInput::Reset(){$/;"	f	class:JSphAccInput	signature:()
JSphAccInput::Reset	JSphAccInput.h	/^  void Reset();$/;"	p	class:JSphAccInput	access:protected	signature:()
JSphAccInput::VisuConfig	JSphAccInput.cpp	/^void JSphAccInput::VisuConfig(std::string txhead,std::string txfoot)const{$/;"	f	class:JSphAccInput	signature:(std::string txhead,std::string txfoot) const
JSphAccInput::VisuConfig	JSphAccInput.h	/^  void VisuConfig(std::string txhead,std::string txfoot)const;$/;"	p	class:JSphAccInput	access:public	signature:(std::string txhead,std::string txfoot) const
JSphAccInput::~JSphAccInput	JSphAccInput.cpp	/^JSphAccInput::~JSphAccInput(){$/;"	f	class:JSphAccInput	signature:()
JSphAccInput::~JSphAccInput	JSphAccInput.h	/^  ~JSphAccInput();$/;"	p	class:JSphAccInput	access:public	signature:()
JSphAccInputMk	JSphAccInput.cpp	/^JSphAccInputMk::JSphAccInputMk(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file):Log(log){$/;"	f	class:JSphAccInputMk	signature:(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file)
JSphAccInputMk	JSphAccInput.h	/^  JSphAccInputMk(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file);$/;"	p	class:JSphAccInputMk	access:public	signature:(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file)
JSphAccInputMk	JSphAccInput.h	/^class JSphAccInputMk : protected JObject$/;"	c	inherits:JObject
JSphAccInputMk::AccAng	JSphAccInput.h	/^  tfloat3 *AccAng;           \/\/\/<Angular acceleration variable to store values as they are read from the input files.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccCoG	JSphAccInput.h	/^  tfloat3 AccCoG;            \/\/\/<The centre of gravity that will be used for angular acceleration calculations.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccCount	JSphAccInput.h	/^  unsigned AccCount;         \/\/\/<Number of acceleration values in each input file(s).$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccIndex	JSphAccInput.h	/^  unsigned AccIndex;         \/\/\/<Current index for variable acceleration interpolation.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccLin	JSphAccInput.h	/^  tfloat3 *AccLin;           \/\/\/<Linear acceleration variable to store values as they are read from the input files.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccSize	JSphAccInput.h	/^  unsigned AccSize;          \/\/\/<Number of acceleration values that were allocated.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::AccTime	JSphAccInput.h	/^  float *AccTime;            \/\/\/<Variable acceleration time evolution as detailed in the input file.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::CurrAccAng	JSphAccInput.h	/^  tdouble3 CurrAccAng;        \/\/\/<The current interpolated values for angular acceleration.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::CurrAccLin	JSphAccInput.h	/^  tdouble3 CurrAccLin;        \/\/\/<The current interpolated values for linear acceleration.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::CurrVelAng	JSphAccInput.h	/^  tdouble3 CurrVelAng;        \/\/\/<The current interpolated values for angular velocity. SL$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::CurrVelLin	JSphAccInput.h	/^  tdouble3 CurrVelLin;        \/\/\/<The current interpolated values for linear velocity. SL$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::File	JSphAccInput.h	/^  std::string File;          \/\/\/<File of data.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::GetAccValues	JSphAccInput.cpp	/^void JSphAccInputMk::GetAccValues(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity){$/;"	f	class:JSphAccInputMk	signature:(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
JSphAccInputMk::GetAccValues	JSphAccInput.h	/^  void GetAccValues(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity); \/\/SL: Added linear and angular velocity and set gravity flag$/;"	p	class:JSphAccInputMk	access:public	signature:(double timestep,unsigned &mkfluid,tdouble3 &acclin,tdouble3 &accang,tdouble3 &centre,tdouble3 &velang,tdouble3 &vellin,bool &setgravity)
JSphAccInputMk::GetAllocMemory	JSphAccInput.cpp	/^long long JSphAccInputMk::GetAllocMemory()const{$/;"	f	class:JSphAccInputMk	signature:() const
JSphAccInputMk::GetAllocMemory	JSphAccInput.h	/^  long long GetAllocMemory()const;$/;"	p	class:JSphAccInputMk	access:public	signature:() const
JSphAccInputMk::GetConfig	JSphAccInput.cpp	/^void JSphAccInputMk::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphAccInputMk	signature:(std::vector<std::string> &lines) const
JSphAccInputMk::GetConfig	JSphAccInput.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphAccInputMk	access:public	signature:(std::vector<std::string> &lines) const
JSphAccInputMk::GetMkFluid	JSphAccInput.h	/^  word GetMkFluid()const{ return(MkFluid); }$/;"	f	class:JSphAccInputMk	access:public	signature:() const
JSphAccInputMk::GravityEnabled	JSphAccInput.h	/^  bool GravityEnabled;       \/\/\/<Determines whether global gravity is enabled or disabled for this particle set SL$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::Init	JSphAccInput.cpp	/^void JSphAccInputMk::Init(double tmax){$/;"	f	class:JSphAccInputMk	signature:(double tmax)
JSphAccInputMk::Init	JSphAccInput.h	/^  void Init(double tmax);$/;"	p	class:JSphAccInputMk	access:public	signature:(double tmax)
JSphAccInputMk::JSphAccInputMk	JSphAccInput.cpp	/^JSphAccInputMk::JSphAccInputMk(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file):Log(log){$/;"	f	class:JSphAccInputMk	signature:(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file)
JSphAccInputMk::JSphAccInputMk	JSphAccInput.h	/^  JSphAccInputMk(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file);$/;"	p	class:JSphAccInputMk	access:public	signature:(JLog2* log,word mkfluid,bool genabled,tfloat3 acccentre,std::string file)
JSphAccInputMk::LoadFile	JSphAccInput.cpp	/^void JSphAccInputMk::LoadFile(std::string file,double tmax){$/;"	f	class:JSphAccInputMk	signature:(std::string file,double tmax)
JSphAccInputMk::LoadFile	JSphAccInput.h	/^  void LoadFile(std::string file,double tmax);$/;"	p	class:JSphAccInputMk	access:protected	signature:(std::string file,double tmax)
JSphAccInputMk::Log	JSphAccInput.h	/^  JLog2* Log;$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::MkFluid	JSphAccInput.h	/^  word MkFluid;              \/\/\/<The MK values stored in the acceleration input file.$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::Reset	JSphAccInput.cpp	/^void JSphAccInputMk::Reset(){$/;"	f	class:JSphAccInputMk	signature:()
JSphAccInputMk::Reset	JSphAccInput.h	/^  void Reset();$/;"	p	class:JSphAccInputMk	access:protected	signature:()
JSphAccInputMk::Resize	JSphAccInput.cpp	/^void JSphAccInputMk::Resize(unsigned size){$/;"	f	class:JSphAccInputMk	signature:(unsigned size)
JSphAccInputMk::Resize	JSphAccInput.h	/^  void Resize(unsigned size);$/;"	p	class:JSphAccInputMk	access:protected	signature:(unsigned size)
JSphAccInputMk::SIZEINITIAL	JSphAccInput.h	/^  static const unsigned SIZEINITIAL=100;$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::SIZEMAX	JSphAccInput.h	/^  static const unsigned SIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::VelAng	JSphAccInput.h	/^  tfloat3 *VelAng;           \/\/\/<Angular velocity variable to store values as the angular acceleration values are read from the input files. SL$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::VelLin	JSphAccInput.h	/^  tfloat3 *VelLin;           \/\/\/<Linear velocity variable to store values as the linear acceleration values are read from the input files. SL$/;"	m	class:JSphAccInputMk	access:protected
JSphAccInputMk::~JSphAccInputMk	JSphAccInput.cpp	/^JSphAccInputMk::~JSphAccInputMk(){$/;"	f	class:JSphAccInputMk	signature:()
JSphAccInputMk::~JSphAccInputMk	JSphAccInput.h	/^  ~JSphAccInputMk();$/;"	p	class:JSphAccInputMk	access:public	signature:()
JSphCpu	JSphCpu.cpp	/^JSphCpu::JSphCpu(bool withmpi):JSph(true,withmpi){$/;"	f	class:JSphCpu	signature:(bool withmpi)
JSphCpu	JSphCpu.h	/^  JSphCpu(bool withmpi);$/;"	p	class:JSphCpu	access:public	signature:(bool withmpi)
JSphCpu	JSphCpu.h	/^class JSphCpu : public JSph$/;"	c	inherits:JSph
JSphCpu::AceMax	JSphCpu.h	/^  double AceMax;        \/\/\/<Maximum value of Ace[] sqrt(ace.x^2 + ace.y^2 + ace.z^2) computed in Interaction_Forces().$/;"	m	class:JSphCpu	access:protected
JSphCpu::Acec	JSphCpu.h	/^  tfloat3 *Acec;         \/\/\/<Sum of interaction forces | Acumula fuerzas de interaccion$/;"	m	class:JSphCpu	access:protected
JSphCpu::AddAccInput	JSphCpu.cpp	/^void JSphCpu::AddAccInput(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::AddAccInput	JSphCpu.h	/^  void AddAccInput();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::AllocCpuMemoryFixed	JSphCpu.cpp	/^void JSphCpu::AllocCpuMemoryFixed(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::AllocCpuMemoryFixed	JSphCpu.h	/^  void AllocCpuMemoryFixed();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::AllocCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::AllocCpuMemoryParticles(unsigned np,float over){$/;"	f	class:JSphCpu	signature:(unsigned np,float over)
JSphCpu::AllocCpuMemoryParticles	JSphCpu.h	/^  void AllocCpuMemoryParticles(unsigned np,float over);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,float over)
JSphCpu::Arc	JSphCpu.h	/^  float *Arc; $/;"	m	class:JSphCpu	access:protected
JSphCpu::ArraysCpu	JSphCpu.h	/^  JArraysCpu* ArraysCpu;$/;"	m	class:JSphCpu	access:protected
JSphCpu::BoundChanged	JSphCpu.h	/^  bool BoundChanged;  \/\/\/<Indicates if selected boundary has changed since last call of divide. | Indica si el contorno seleccionado a cambiado desde el ultimo divide.$/;"	m	class:JSphCpu	access:protected
JSphCpu::CalcMotion	JSphCpu.cpp	/^void JSphCpu::CalcMotion(double stepdt){$/;"	f	class:JSphCpu	signature:(double stepdt)
JSphCpu::CalcMotion	JSphCpu.h	/^  void CalcMotion(double stepdt);$/;"	p	class:JSphCpu	access:protected	signature:(double stepdt)
JSphCpu::CalcRidp	JSphCpu.cpp	/^void JSphCpu::CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)const{$/;"	f	class:JSphCpu	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp) const
JSphCpu::CalcRidp	JSphCpu.h	/^  void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)const;$/;"	p	class:JSphCpu	access:protected	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp) const
JSphCpu::CalcVelMaxOmp	JSphCpu.cpp	/^float JSphCpu::CalcVelMaxOmp(unsigned np,const tfloat4* velrhop)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const tfloat4* velrhop) const
JSphCpu::CalcVelMaxOmp	JSphCpu.h	/^  float CalcVelMaxOmp(unsigned np,const tfloat4* velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4* velrhop) const
JSphCpu::CalcVelMaxSeq	JSphCpu.cpp	/^float JSphCpu::CalcVelMaxSeq(unsigned np,const tfloat4* velrhop)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const tfloat4* velrhop) const
JSphCpu::CalcVelMaxSeq	JSphCpu.h	/^  float CalcVelMaxSeq(unsigned np,const tfloat4* velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4* velrhop) const
JSphCpu::CellDiv	JSphCpu.h	/^  JCellDivCpu* CellDiv;$/;"	m	class:JSphCpu	access:private
JSphCpu::CheckCpuParticlesSize	JSphCpu.h	/^  bool CheckCpuParticlesSize(unsigned requirednp){ return(requirednp+PARTICLES_OVERMEMORY_MIN<=CpuParticlesSize); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned requirednp)
JSphCpu::Codec	JSphCpu.h	/^  typecode *Codec;   \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphCpu	access:protected
JSphCpu::ComputeSpsTau	JSphCpu.cpp	/^void JSphCpu::ComputeSpsTau(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau)const{$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau) const
JSphCpu::ComputeSpsTau	JSphCpu.h	/^  void ComputeSpsTau(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,const tfloat4 *velrhop,const tsymatrix3f *gradvel,tsymatrix3f *tau) const
JSphCpu::ComputeSymplecticCorr	JSphCpu.cpp	/^void JSphCpu::ComputeSymplecticCorr(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::ComputeSymplecticCorr	JSphCpu.h	/^  void ComputeSymplecticCorr(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::ComputeSymplecticCorrT	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeSymplecticCorrT(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::ComputeSymplecticCorrT	JSphCpu.h	/^  template<bool shift> void ComputeSymplecticCorrT(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::ComputeSymplecticPre	JSphCpu.cpp	/^void JSphCpu::ComputeSymplecticPre(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::ComputeSymplecticPre	JSphCpu.h	/^  void ComputeSymplecticPre(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::ComputeSymplecticPreT	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeSymplecticPreT(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::ComputeSymplecticPreT	JSphCpu.h	/^  template<bool shift> void ComputeSymplecticPreT(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::ComputeVelrhopBound	JSphCpu.cpp	/^void JSphCpu::ComputeVelrhopBound(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew)const{$/;"	f	class:JSphCpu	signature:(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew) const
JSphCpu::ComputeVelrhopBound	JSphCpu.h	/^  void ComputeVelrhopBound(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew)const;$/;"	p	class:JSphCpu	access:protected	signature:(const tfloat4* velrhopold,double armul,tfloat4* velrhopnew) const
JSphCpu::ComputeVerlet	JSphCpu.cpp	/^void JSphCpu::ComputeVerlet(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::ComputeVerlet	JSphCpu.h	/^  void ComputeVerlet(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::ComputeVerletVarsFluid	JSphCpu.cpp	/^template<bool shift> void JSphCpu::ComputeVerletVarsFluid($/;"	f	class:JSphCpu	signature:( const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2 ,tdouble3 *pos,unsigned *dcell,typecode *code,tfloat4 *velrhopnew) const
JSphCpu::ComputeVerletVarsFluid	JSphCpu.h	/^  template<bool shift> void ComputeVerletVarsFluid(const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2,tdouble3 *pos,unsigned *cell,typecode *code,tfloat4 *velrhopnew)const;$/;"	p	class:JSphCpu	access:protected	signature:(const tfloat4 *velrhop1,const tfloat4 *velrhop2,double dt,double dt2,tdouble3 *pos,unsigned *cell,typecode *code,tfloat4 *velrhopnew) const
JSphCpu::ConfigCellDiv	JSphCpu.h	/^  void ConfigCellDiv(JCellDivCpu* celldiv){ CellDiv=celldiv; }$/;"	f	class:JSphCpu	access:protected	signature:(JCellDivCpu* celldiv)
JSphCpu::ConfigOmp	JSphCpu.cpp	/^void JSphCpu::ConfigOmp(const JCfgRun *cfg){$/;"	f	class:JSphCpu	signature:(const JCfgRun *cfg)
JSphCpu::ConfigOmp	JSphCpu.h	/^  void ConfigOmp(const JCfgRun *cfg);$/;"	p	class:JSphCpu	access:protected	signature:(const JCfgRun *cfg)
JSphCpu::ConfigRunMode	JSphCpu.cpp	/^void JSphCpu::ConfigRunMode(const JCfgRun *cfg,std::string preinfo){$/;"	f	class:JSphCpu	signature:(const JCfgRun *cfg,std::string preinfo)
JSphCpu::ConfigRunMode	JSphCpu.h	/^  void ConfigRunMode(const JCfgRun *cfg,std::string preinfo="");$/;"	p	class:JSphCpu	access:protected	signature:(const JCfgRun *cfg,std::string preinfo=Ó)
JSphCpu::CpuParticlesSize	JSphCpu.h	/^  unsigned CpuParticlesSize;  \/\/\/<Number of particles with reserved memory on the CPU. | Numero de particulas para las cuales se reservo memoria en cpu.$/;"	m	class:JSphCpu	access:protected
JSphCpu::Dcellc	JSphCpu.h	/^  unsigned *Dcellc;  \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphCpu	access:protected
JSphCpu::Deltac	JSphCpu.h	/^  float *Deltac;         \/\/\/<Adjusted sum with Delta-SPH with DELTA_DynamicExt | Acumula ajuste de Delta-SPH con DELTA_DynamicExt$/;"	m	class:JSphCpu	access:protected
JSphCpu::DtVariable	JSphCpu.cpp	/^double JSphCpu::DtVariable(bool final){$/;"	f	class:JSphCpu	signature:(bool final)
JSphCpu::DtVariable	JSphCpu.h	/^  double DtVariable(bool final);$/;"	p	class:JSphCpu	access:protected	signature:(bool final)
JSphCpu::FreeCpuMemoryFixed	JSphCpu.cpp	/^void JSphCpu::FreeCpuMemoryFixed(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::FreeCpuMemoryFixed	JSphCpu.h	/^  void FreeCpuMemoryFixed();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::FreeCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::FreeCpuMemoryParticles(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::FreeCpuMemoryParticles	JSphCpu.h	/^  void FreeCpuMemoryParticles();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::FtRidp	JSphCpu.h	/^  unsigned *FtRidp;             \/\/\/<Identifier to access to the particles of the floating object [CaseNfloat].$/;"	m	class:JSphCpu	access:protected
JSphCpu::FtoForces	JSphCpu.h	/^  StFtoForces *FtoForces;       \/\/\/<Stores forces of floatings [FtCount].$/;"	m	class:JSphCpu	access:protected
JSphCpu::FtoForcesRes	JSphCpu.h	/^  StFtoForcesRes *FtoForcesRes; \/\/\/<Stores data to update floatings [FtCount].$/;"	m	class:JSphCpu	access:protected
JSphCpu::GetAllocMemoryCpu	JSphCpu.cpp	/^llong JSphCpu::GetAllocMemoryCpu()const{  $/;"	f	class:JSphCpu	signature:() const
JSphCpu::GetAllocMemoryCpu	JSphCpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphCpu	access:protected	signature:() const
JSphCpu::GetInteractionCells	JSphCpu.cpp	/^void JSphCpu::GetInteractionCells(unsigned rcell$/;"	f	class:JSphCpu	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JSphCpu::GetInteractionCells	JSphCpu.h	/^  inline void GetInteractionCells(unsigned rcell$/;"	p	class:JSphCpu	access:protected	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JSphCpu::GetKernelCubic	JSphCpu.cpp	/^void JSphCpu::GetKernelCubic(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
JSphCpu::GetKernelCubic	JSphCpu.h	/^  inline void GetKernelCubic(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
JSphCpu::GetKernelCubicTensil	JSphCpu.cpp	/^float JSphCpu::GetKernelCubicTensil(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2)const{$/;"	f	class:JSphCpu	signature:(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2) const
JSphCpu::GetKernelCubicTensil	JSphCpu.h	/^  inline float GetKernelCubicTensil(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float rhopp1,float pressp1,float rhopp2,float pressp2) const
JSphCpu::GetKernelGaussian	JSphCpu.cpp	/^void JSphCpu::GetKernelGaussian(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
JSphCpu::GetKernelGaussian	JSphCpu.h	/^  inline void GetKernelGaussian(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
JSphCpu::GetKernelWendland	JSphCpu.cpp	/^void JSphCpu::GetKernelWendland(float rr2,float drx,float dry,float drz$/;"	f	class:JSphCpu	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz) const
JSphCpu::GetKernelWendland	JSphCpu.h	/^  inline void GetKernelWendland(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz)const;$/;"	p	class:JSphCpu	access:protected	signature:(float rr2,float drx,float dry,float drz,float &frx,float &fry,float &frz) const
JSphCpu::GetParticlesData	JSphCpu.cpp	/^unsigned JSphCpu::GetParticlesData(unsigned n,unsigned pini,bool onlynormal$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pini,bool onlynormal ,unsigned *idp,tdouble3 *pos,tfloat3 *vel,float *rhop,typecode *code)
JSphCpu::GetParticlesData	JSphCpu.h	/^  unsigned GetParticlesData(unsigned n,unsigned pini,bool onlynormal$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,bool onlynormal ,unsigned *idp,tdouble3 *pos,tfloat3 *vel,float *rhop,typecode *code)
JSphCpu::GetTimersInfo	JSphCpu.cpp	/^void JSphCpu::GetTimersInfo(std::string &hinfo,std::string &dinfo)const{$/;"	f	class:JSphCpu	signature:(std::string &hinfo,std::string &dinfo) const
JSphCpu::GetTimersInfo	JSphCpu.h	/^  void GetTimersInfo(std::string &hinfo,std::string &dinfo)const;$/;"	p	class:JSphCpu	access:protected	signature:(std::string &hinfo,std::string &dinfo) const
JSphCpu::Idpc	JSphCpu.h	/^  unsigned *Idpc;    \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphCpu	access:protected
JSphCpu::InitFloating	JSphCpu.cpp	/^void JSphCpu::InitFloating(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::InitFloating	JSphCpu.h	/^  void InitFloating();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::InitRunCpu	JSphCpu.cpp	/^void JSphCpu::InitRunCpu(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::InitRunCpu	JSphCpu.h	/^  void InitRunCpu();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::InitVars	JSphCpu.cpp	/^void JSphCpu::InitVars(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::InitVars	JSphCpu.h	/^  void InitVars();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::InteractionForcesBound	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> void JSphCpu::InteractionForcesBound$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pinit,tint4 nc,int hdiv,unsigned cellinitial ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,float *ar) const
JSphCpu::InteractionForcesBound	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode> void InteractionForcesBound$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,tint4 nc,int hdiv,unsigned cellinitial ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhopp,const typecode *code,const unsigned *id ,float &viscdt,float *ar) const
JSphCpu::InteractionForcesDEM	JSphCpu.cpp	/^template<bool psingle> void JSphCpu::InteractionForcesDEM$/;"	f	class:JSphCpu	signature:(unsigned nfloat,tint4 nc,int hdiv,unsigned cellfluid ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const StDemData* demdata ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,tfloat3 *ace) const
JSphCpu::InteractionForcesDEM	JSphCpu.h	/^  template<bool psingle> void InteractionForcesDEM$/;"	p	class:JSphCpu	access:protected	signature:(unsigned nfloat,tint4 nc,int hdiv,unsigned cellfluid ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const StDemData* demobjs ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,float &viscdt,tfloat3 *ace) const
JSphCpu::InteractionForcesFluid	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void JSphCpu::InteractionForcesFluid$/;"	f	class:JSphCpu	signature:(unsigned n,unsigned pinit,tint4 nc,int hdiv,unsigned cellinitial,float visco ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tsymatrix3f* tau,tsymatrix3f* gradvel ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float *ar,tfloat3 *ace,float *delta ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::InteractionForcesFluid	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void InteractionForcesFluid$/;"	p	class:JSphCpu	access:protected	signature:(unsigned n,unsigned pini,tint4 nc,int hdiv,unsigned cellfluid,float visco ,const unsigned *beginendcell,tint3 cellzero,const unsigned *dcell ,const tsymatrix3f* tau,tsymatrix3f* gradvel ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float *ar,tfloat3 *ace,float *delta ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::InteractionSimple_Forces	JSphCpu.cpp	/^void JSphCpu::InteractionSimple_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tfloat3 *pspos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::InteractionSimple_Forces	JSphCpu.h	/^  void InteractionSimple_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tfloat3 *pspos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::Interaction_Forces	JSphCpu.cpp	/^void JSphCpu::Interaction_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::Interaction_Forces	JSphCpu.h	/^  void Interaction_Forces(unsigned np,unsigned npb,unsigned npbok$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat4 *velrhop,const unsigned *idp,const typecode *code ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::Interaction_ForcesT	JSphCpu.cpp	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void JSphCpu::Interaction_ForcesT$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::Interaction_ForcesT	JSphCpu.h	/^  template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb,unsigned npbok ,tuint3 ncells,const unsigned *begincell,tuint3 cellmin,const unsigned *dcell ,const tdouble3 *pos,const tfloat3 *pspos,const tfloat4 *velrhop,const typecode *code,const unsigned *idp ,const float *press ,float &viscdt,float* ar,tfloat3 *ace,float *delta ,tsymatrix3f *spstau,tsymatrix3f *spsgradvel ,TpShifting tshifting,tfloat3 *shiftpos,float *shiftdetect) const
JSphCpu::JSphCpu	JSphCpu.cpp	/^JSphCpu::JSphCpu(bool withmpi):JSph(true,withmpi){$/;"	f	class:JSphCpu	signature:(bool withmpi)
JSphCpu::JSphCpu	JSphCpu.h	/^  JSphCpu(bool withmpi);$/;"	p	class:JSphCpu	access:public	signature:(bool withmpi)
JSphCpu::MemCpuFixed	JSphCpu.h	/^  llong MemCpuFixed;          \/\/\/<Memory reserved in AllocMemoryFixed. | Mermoria reservada en AllocMemoryFixed.$/;"	m	class:JSphCpu	access:protected
JSphCpu::MemCpuParticles	JSphCpu.h	/^  llong MemCpuParticles;      \/\/\/<Memory reserved for particles' vectors. | Mermoria reservada para vectores de datos de particulas.$/;"	m	class:JSphCpu	access:protected
JSphCpu::MoveLinBound	JSphCpu.cpp	/^void JSphCpu::MoveLinBound(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel ,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
JSphCpu::MoveLinBound	JSphCpu.h	/^  void MoveLinBound(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
JSphCpu::MoveMatBound	JSphCpu.cpp	/^void JSphCpu::MoveMatBound(unsigned np,unsigned ini,tmatrix4d m,double dt$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
JSphCpu::MoveMatBound	JSphCpu.h	/^  void MoveMatBound(unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
JSphCpu::Np	JSphCpu.h	/^  unsigned Np;        \/\/\/<Total number of particles (including periodic duplicates). | Numero total de particulas (incluidas las duplicadas periodicas).$/;"	m	class:JSphCpu	access:protected
JSphCpu::Npb	JSphCpu.h	/^  unsigned Npb;       \/\/\/<Total number of boundary particles (including periodic boundaries). | Numero de particulas contorno (incluidas las contorno periodicas).$/;"	m	class:JSphCpu	access:protected
JSphCpu::NpbOk	JSphCpu.h	/^  unsigned NpbOk;     \/\/\/<Total number of boundary particles near fluid (including periodic duplicates). | Numero de particulas contorno cerca del fluido (incluidas las contorno periodicas).$/;"	m	class:JSphCpu	access:protected
JSphCpu::NpbPer	JSphCpu.h	/^  unsigned NpbPer;    \/\/\/<Number of periodic boundary particles. | Numero de particulas contorno periodicas.$/;"	m	class:JSphCpu	access:protected
JSphCpu::NpbPerM1	JSphCpu.h	/^  unsigned NpbPerM1;  \/\/\/<Number of periodic boundary particles (previous values). | Numero de particulas contorno periodicas (valores anteriores).$/;"	m	class:JSphCpu	access:protected
JSphCpu::NpfPer	JSphCpu.h	/^  unsigned NpfPer;    \/\/\/<Number of periodic floating-fluid particles. | Numero de particulas fluidas-floating periodicas.$/;"	m	class:JSphCpu	access:protected
JSphCpu::NpfPerM1	JSphCpu.h	/^  unsigned NpfPerM1;  \/\/\/<Number of periodic floating-fluid particles (previous values). | Numero de particulas fluidas-floating periodicas (valores anteriores).$/;"	m	class:JSphCpu	access:protected
JSphCpu::OmpThreads	JSphCpu.h	/^  int OmpThreads;        \/\/\/<Max number of OpenMP threads in execution on CPU host (minimum 1). | Numero maximo de hilos OpenMP en ejecucion por host en CPU (minimo 1).$/;"	m	class:JSphCpu	access:protected
JSphCpu::PosInteraction_Forces	JSphCpu.cpp	/^void JSphCpu::PosInteraction_Forces(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::PosInteraction_Forces	JSphCpu.h	/^  void PosInteraction_Forces();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::PosPrec	JSphCpu.h	/^  tdouble3 *PosPrec;    \/\/\/<Sympletic: in order to keep previous values. | Sympletic: para guardar valores en predictor.$/;"	m	class:JSphCpu	access:protected
JSphCpu::Posc	JSphCpu.h	/^  tdouble3 *Posc;$/;"	m	class:JSphCpu	access:protected
JSphCpu::PreInteractionVars_Forces	JSphCpu.cpp	/^void JSphCpu::PreInteractionVars_Forces(unsigned np,unsigned npb){$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb)
JSphCpu::PreInteractionVars_Forces	JSphCpu.h	/^  void PreInteractionVars_Forces(unsigned np,unsigned npb);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb)
JSphCpu::PreInteraction_Forces	JSphCpu.cpp	/^void JSphCpu::PreInteraction_Forces(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::PreInteraction_Forces	JSphCpu.h	/^  void PreInteraction_Forces();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::Pressc	JSphCpu.h	/^  float *Pressc;       \/\/\/< Press[]=B*((Rhop\/Rhop0)^gamma-1)$/;"	m	class:JSphCpu	access:protected
JSphCpu::PrintAllocMemory	JSphCpu.cpp	/^void JSphCpu::PrintAllocMemory(llong mcpu)const{$/;"	f	class:JSphCpu	signature:(llong mcpu) const
JSphCpu::PrintAllocMemory	JSphCpu.h	/^  void PrintAllocMemory(llong mcpu)const;$/;"	p	class:JSphCpu	access:protected	signature:(llong mcpu) const
JSphCpu::PsPosc	JSphCpu.h	/^  tfloat3 *PsPosc;       \/\/\/<Position and prrhop for Pos-Single interaction | Posicion y prrhop para interaccion Pos-Single.$/;"	m	class:JSphCpu	access:protected
JSphCpu::ReserveBasicArraysCpu	JSphCpu.cpp	/^void JSphCpu::ReserveBasicArraysCpu(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::ReserveBasicArraysCpu	JSphCpu.h	/^  void ReserveBasicArraysCpu();$/;"	p	class:JSphCpu	access:protected	signature:()
JSphCpu::ResizeCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::ResizeCpuMemoryParticles(unsigned npnew){$/;"	f	class:JSphCpu	signature:(unsigned npnew)
JSphCpu::ResizeCpuMemoryParticles	JSphCpu.h	/^  void ResizeCpuMemoryParticles(unsigned np);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np)
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,double      *data,double      *datanew)const{ TRestoreArrayCpu<double>     (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,double *data,double *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,float       *data,float       *datanew)const{ TRestoreArrayCpu<float>      (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,float *data,float *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,int         *data,int         *datanew)const{ TRestoreArrayCpu<int>        (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,int *data,int *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tdouble3    *data,tdouble3    *datanew)const{ TRestoreArrayCpu<tdouble3>   (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tdouble3 *data,tdouble3 *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tfloat4     *data,tfloat4     *datanew)const{ TRestoreArrayCpu<tfloat4>    (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tfloat4 *data,tfloat4 *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew)const{ TRestoreArrayCpu<tsymatrix3f>(np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,unsigned    *data,unsigned    *datanew)const{ TRestoreArrayCpu<unsigned>   (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,unsigned *data,unsigned *datanew) const
JSphCpu::RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,word        *data,word        *datanew)const{ TRestoreArrayCpu<word>       (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,word *data,word *datanew) const
JSphCpu::RidpMove	JSphCpu.h	/^  unsigned *RidpMove; \/\/\/<Only for moving boundary particles [CaseNmoving] and when CaseNmoving!=0 | Solo para boundary moving particles [CaseNmoving] y cuando CaseNmoving!=0 $/;"	m	class:JSphCpu	access:protected
JSphCpu::RunDamping	JSphCpu.cpp	/^void JSphCpu::RunDamping(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const{$/;"	f	class:JSphCpu	signature:(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JSphCpu::RunDamping	JSphCpu.h	/^  void RunDamping(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
JSphCpu::RunMode	JSphCpu.h	/^  std::string RunMode;   \/\/\/<Overall mode of execution (symmetry, openmp, load balancing). |  Almacena modo de ejecucion (simetria,openmp,balanceo,...).$/;"	m	class:JSphCpu	access:protected
JSphCpu::RunMotion	JSphCpu.cpp	/^void JSphCpu::RunMotion(double stepdt){$/;"	f	class:JSphCpu	signature:(double stepdt)
JSphCpu::RunMotion	JSphCpu.h	/^  void RunMotion(double stepdt);$/;"	p	class:JSphCpu	access:protected	signature:(double stepdt)
JSphCpu::RunShifting	JSphCpu.cpp	/^void JSphCpu::RunShifting(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
JSphCpu::RunShifting	JSphCpu.h	/^  void RunShifting(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  double*      SaveArrayCpu(unsigned np,const double      *datasrc)const{ return(TSaveArrayCpu<double>     (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const double *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  float*       SaveArrayCpu(unsigned np,const float       *datasrc)const{ return(TSaveArrayCpu<float>      (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const float *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  int*         SaveArrayCpu(unsigned np,const int         *datasrc)const{ return(TSaveArrayCpu<int>        (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const int *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  tdouble3*    SaveArrayCpu(unsigned np,const tdouble3    *datasrc)const{ return(TSaveArrayCpu<tdouble3>   (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tdouble3 *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  tfloat4*     SaveArrayCpu(unsigned np,const tfloat4     *datasrc)const{ return(TSaveArrayCpu<tfloat4>    (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4 *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  tsymatrix3f* SaveArrayCpu(unsigned np,const tsymatrix3f *datasrc)const{ return(TSaveArrayCpu<tsymatrix3f>(np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tsymatrix3f *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  unsigned*    SaveArrayCpu(unsigned np,const unsigned    *datasrc)const{ return(TSaveArrayCpu<unsigned>   (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const unsigned *datasrc) const
JSphCpu::SaveArrayCpu	JSphCpu.h	/^  word*        SaveArrayCpu(unsigned np,const word        *datasrc)const{ return(TSaveArrayCpu<word>       (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const word *datasrc) const
JSphCpu::ShiftDetectc	JSphCpu.h	/^  float *ShiftDetectc;   \/\/\/<Used to detect free surface with Shifting.$/;"	m	class:JSphCpu	access:protected
JSphCpu::ShiftPosc	JSphCpu.h	/^  tfloat3 *ShiftPosc;    \/\/\/<Particle displacement using Shifting.$/;"	m	class:JSphCpu	access:protected
JSphCpu::ShowTimers	JSphCpu.cpp	/^void JSphCpu::ShowTimers(bool onlyfile){$/;"	f	class:JSphCpu	signature:(bool onlyfile)
JSphCpu::ShowTimers	JSphCpu.h	/^  void ShowTimers(bool onlyfile=false);$/;"	p	class:JSphCpu	access:protected	signature:(bool onlyfile=false)
JSphCpu::SpsGradvelc	JSphCpu.h	/^  tsymatrix3f *SpsGradvelc;   \/\/\/<Velocity gradients.$/;"	m	class:JSphCpu	access:protected
JSphCpu::SpsTauc	JSphCpu.h	/^  tsymatrix3f *SpsTauc;       \/\/\/<SPS sub-particle stress tensor.$/;"	m	class:JSphCpu	access:protected
JSphCpu::TRestoreArrayCpu	JSphCpu.cpp	/^template<class T> void JSphCpu::TRestoreArrayCpu(unsigned np,T *data,T *datanew)const{$/;"	f	class:JSphCpu	signature:(unsigned np,T *data,T *datanew) const
JSphCpu::TRestoreArrayCpu	JSphCpu.h	/^  template<class T> void TRestoreArrayCpu(unsigned np,T *data,T *datanew)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,T *data,T *datanew) const
JSphCpu::TSaveArrayCpu	JSphCpu.cpp	/^template<class T> T* JSphCpu::TSaveArrayCpu(unsigned np,const T *datasrc)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const T *datasrc) const
JSphCpu::TSaveArrayCpu	JSphCpu.h	/^  template<class T> T* TSaveArrayCpu(unsigned np,const T *datasrc)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const T *datasrc) const
JSphCpu::TimerGetCount	JSphCpu.h	/^  unsigned TimerGetCount()const{ return(TmcGetCount()); }$/;"	f	class:JSphCpu	access:protected	signature:() const
JSphCpu::TimerGetName	JSphCpu.h	/^  std::string TimerGetName(unsigned ct)const{ return(TmcGetName((CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
JSphCpu::TimerGetPtrValue	JSphCpu.h	/^  const double* TimerGetPtrValue(unsigned ct)const{ return(TmcGetPtrValue(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
JSphCpu::TimerGetValue	JSphCpu.h	/^  float TimerGetValue(unsigned ct)const{ return(TmcGetValue(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
JSphCpu::TimerIsActive	JSphCpu.h	/^  bool TimerIsActive(unsigned ct)const{ return(TmcIsActive(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
JSphCpu::TimerToText	JSphCpu.h	/^  std::string TimerToText(unsigned ct)const{ return(JSph::TimerToText(TimerGetName(ct),TimerGetValue(ct))); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
JSphCpu::Timers	JSphCpu.h	/^  TimersCpu Timers;$/;"	m	class:JSphCpu	access:protected
JSphCpu::UpdatePos	JSphCpu.cpp	/^void JSphCpu::UpdatePos(tdouble3 rpos,double movx,double movy,double movz$/;"	f	class:JSphCpu	signature:(tdouble3 rpos,double movx,double movy,double movz ,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code) const
JSphCpu::UpdatePos	JSphCpu.h	/^  void UpdatePos(tdouble3 pos0,double dx,double dy,double dz,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code)const;$/;"	p	class:JSphCpu	access:public	signature:(tdouble3 pos0,double dx,double dy,double dz,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code) const
JSphCpu::VelMax	JSphCpu.h	/^  double VelMax;        \/\/\/<Maximum value of Vel[] sqrt(vel.x^2 + vel.y^2 + vel.z^2) computed in PreInteraction_Forces().$/;"	m	class:JSphCpu	access:protected
JSphCpu::VelrhopM1c	JSphCpu.h	/^  tfloat4 *VelrhopM1c;  \/\/\/<Verlet: in order to keep previous values. | Verlet: para guardar valores anteriores.$/;"	m	class:JSphCpu	access:protected
JSphCpu::VelrhopPrec	JSphCpu.h	/^  tfloat4 *VelrhopPrec;$/;"	m	class:JSphCpu	access:protected
JSphCpu::Velrhopc	JSphCpu.h	/^  tfloat4 *Velrhopc;$/;"	m	class:JSphCpu	access:protected
JSphCpu::ViscDtMax	JSphCpu.h	/^  float ViscDtMax;      \/\/\/<Max value of ViscDt calculated in Interaction_Forces() \/ Valor maximo de ViscDt calculado en Interaction_Forces().$/;"	m	class:JSphCpu	access:protected
JSphCpu::~JSphCpu	JSphCpu.cpp	/^JSphCpu::~JSphCpu(){$/;"	f	class:JSphCpu	signature:()
JSphCpu::~JSphCpu	JSphCpu.h	/^  ~JSphCpu();$/;"	p	class:JSphCpu	access:public	signature:()
JSphCpuSingle	JSphCpuSingle.cpp	/^JSphCpuSingle::JSphCpuSingle():JSphCpu(false){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle	JSphCpuSingle.h	/^  JSphCpuSingle();$/;"	p	class:JSphCpuSingle	access:public	signature:()
JSphCpuSingle	JSphCpuSingle.h	/^class JSphCpuSingle : public JSphCpu$/;"	c	inherits:JSphCpu
JSphCpuSingle::AbortBoundOut	JSphCpuSingle.cpp	/^void JSphCpuSingle::AbortBoundOut(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::AbortBoundOut	JSphCpuSingle.h	/^  void AbortBoundOut();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::CellDivSingle	JSphCpuSingle.h	/^  JCellDivCpuSingle* CellDivSingle;$/;"	m	class:JSphCpuSingle	access:protected
JSphCpuSingle::ComputeAceMax	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeAceMax(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeAceMax	JSphCpuSingle.h	/^  double ComputeAceMax(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeAceMaxOmp	JSphCpuSingle.cpp	/^template<bool checkperiodic> double JSphCpuSingle::ComputeAceMaxOmp(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeAceMaxOmp	JSphCpuSingle.h	/^  template<bool checkperiodic> double ComputeAceMaxOmp(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeAceMaxSeq	JSphCpuSingle.cpp	/^template<bool checkperiodic> double JSphCpuSingle::ComputeAceMaxSeq(unsigned np,const tfloat3* ace,const typecode *code)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeAceMaxSeq	JSphCpuSingle.h	/^  template<bool checkperiodic> double ComputeAceMaxSeq(unsigned np,const tfloat3* ace,const typecode *code)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,const tfloat3* ace,const typecode *code) const
JSphCpuSingle::ComputeStep	JSphCpuSingle.h	/^  double ComputeStep(){ return(TStep==STEP_Verlet? ComputeStep_Ver(): ComputeStep_Sym()); }$/;"	f	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::ComputeStep_Sym	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeStep_Sym(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::ComputeStep_Sym	JSphCpuSingle.h	/^  double ComputeStep_Sym();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::ComputeStep_Ver	JSphCpuSingle.cpp	/^double JSphCpuSingle::ComputeStep_Ver(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::ComputeStep_Ver	JSphCpuSingle.h	/^  double ComputeStep_Ver();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::ConfigDomain	JSphCpuSingle.cpp	/^void JSphCpuSingle::ConfigDomain(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::ConfigDomain	JSphCpuSingle.h	/^  void ConfigDomain();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::FinishRun	JSphCpuSingle.cpp	/^void JSphCpuSingle::FinishRun(bool stop){$/;"	f	class:JSphCpuSingle	signature:(bool stop)
JSphCpuSingle::FinishRun	JSphCpuSingle.h	/^  void FinishRun(bool stop);$/;"	p	class:JSphCpuSingle	access:protected	signature:(bool stop)
JSphCpuSingle::FtCalcForces	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForces(StFtoForces *ftoforces)const{$/;"	f	class:JSphCpuSingle	signature:(StFtoForces *ftoforces) const
JSphCpuSingle::FtCalcForces	JSphCpuSingle.h	/^  void FtCalcForces(StFtoForces *ftoforces)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(StFtoForces *ftoforces) const
JSphCpuSingle::FtCalcForcesRes	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForcesRes(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres)const{$/;"	f	class:JSphCpuSingle	signature:(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres) const
JSphCpuSingle::FtCalcForcesRes	JSphCpuSingle.h	/^  void FtCalcForcesRes(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(double dt,const StFtoForces *ftoforces,StFtoForcesRes *ftoforcesres) const
JSphCpuSingle::FtCalcForcesSum	JSphCpuSingle.cpp	/^void JSphCpuSingle::FtCalcForcesSum(unsigned cf,tfloat3 &face,tfloat3 &fomegaace)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned cf,tfloat3 &face,tfloat3 &fomegaace) const
JSphCpuSingle::FtCalcForcesSum	JSphCpuSingle.h	/^  void FtCalcForcesSum(unsigned cf,tfloat3 &face,tfloat3 &fomegaace)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned cf,tfloat3 &face,tfloat3 &fomegaace) const
JSphCpuSingle::FtPeriodicDist	JSphCpuSingle.cpp	/^tfloat3 JSphCpuSingle::FtPeriodicDist(const tdouble3 &pos,const tdouble3 &center,float radius)const{$/;"	f	class:JSphCpuSingle	signature:(const tdouble3 &pos,const tdouble3 &center,float radius) const
JSphCpuSingle::FtPeriodicDist	JSphCpuSingle.h	/^  inline tfloat3 FtPeriodicDist(const tdouble3 &pos,const tdouble3 &center,float radius)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(const tdouble3 &pos,const tdouble3 &center,float radius) const
JSphCpuSingle::GetAllocMemoryCpu	JSphCpuSingle.cpp	/^llong JSphCpuSingle::GetAllocMemoryCpu()const{  $/;"	f	class:JSphCpuSingle	signature:() const
JSphCpuSingle::GetAllocMemoryCpu	JSphCpuSingle.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphCpuSingle	access:protected	signature:() const
JSphCpuSingle::GetInteractionCells	JSphCpuSingle.cpp	/^void JSphCpuSingle::GetInteractionCells(unsigned rcell$/;"	f	class:JSphCpuSingle	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JSphCpuSingle::GetInteractionCells	JSphCpuSingle.h	/^  inline void GetInteractionCells(unsigned rcell$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned rcell ,int hdiv,const tint4 &nc,const tint3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin) const
JSphCpuSingle::Interaction_Forces	JSphCpuSingle.cpp	/^void JSphCpuSingle::Interaction_Forces(TpInterStep interstep){$/;"	f	class:JSphCpuSingle	signature:(TpInterStep interstep)
JSphCpuSingle::Interaction_Forces	JSphCpuSingle.h	/^  void Interaction_Forces(TpInterStep tinterstep);$/;"	p	class:JSphCpuSingle	access:protected	signature:(TpInterStep tinterstep)
JSphCpuSingle::JSphCpuSingle	JSphCpuSingle.cpp	/^JSphCpuSingle::JSphCpuSingle():JSphCpu(false){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::JSphCpuSingle	JSphCpuSingle.h	/^  JSphCpuSingle();$/;"	p	class:JSphCpuSingle	access:public	signature:()
JSphCpuSingle::LoadConfig	JSphCpuSingle.cpp	/^void JSphCpuSingle::LoadConfig(JCfgRun *cfg){$/;"	f	class:JSphCpuSingle	signature:(JCfgRun *cfg)
JSphCpuSingle::LoadConfig	JSphCpuSingle.h	/^  void LoadConfig(JCfgRun *cfg);$/;"	p	class:JSphCpuSingle	access:protected	signature:(JCfgRun *cfg)
JSphCpuSingle::PeriodicDuplicatePos	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicatePos(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell) const
JSphCpuSingle::PeriodicDuplicatePos	JSphCpuSingle.h	/^  void PeriodicDuplicatePos(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell) const
JSphCpuSingle::PeriodicDuplicateSymplectic	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicateSymplectic(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	f	class:JSphCpuSingle	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tdouble3 *pospre,tfloat4 *velrhoppre) const
JSphCpuSingle::PeriodicDuplicateSymplectic	JSphCpuSingle.h	/^  void PeriodicDuplicateSymplectic(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tdouble3 *pospre,tfloat4 *velrhoppre) const
JSphCpuSingle::PeriodicDuplicateVerlet	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicateVerlet(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	f	class:JSphCpuSingle	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tfloat4 *velrhopm1) const
JSphCpuSingle::PeriodicDuplicateVerlet	JSphCpuSingle.h	/^  void PeriodicDuplicateVerlet(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tfloat4 *velrhopm1) const
JSphCpuSingle::PeriodicMakeList	JSphCpuSingle.cpp	/^unsigned JSphCpuSingle::PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp) const
JSphCpuSingle::PeriodicMakeList	JSphCpuSingle.h	/^  unsigned PeriodicMakeList(unsigned np,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp) const
JSphCpuSingle::ResizeParticlesSize	JSphCpuSingle.cpp	/^void JSphCpuSingle::ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide){$/;"	f	class:JSphCpuSingle	signature:(unsigned newsize,float oversize,bool updatedivide)
JSphCpuSingle::ResizeParticlesSize	JSphCpuSingle.h	/^  void ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide);$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned newsize,float oversize,bool updatedivide)
JSphCpuSingle::Run	JSphCpuSingle.cpp	/^void JSphCpuSingle::Run(std::string appname,JCfgRun *cfg,JLog2 *log){$/;"	f	class:JSphCpuSingle	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
JSphCpuSingle::Run	JSphCpuSingle.h	/^  void Run(std::string appname,JCfgRun *cfg,JLog2 *log);$/;"	p	class:JSphCpuSingle	access:public	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
JSphCpuSingle::RunCellDivide	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunCellDivide(bool updateperiodic){$/;"	f	class:JSphCpuSingle	signature:(bool updateperiodic)
JSphCpuSingle::RunCellDivide	JSphCpuSingle.h	/^  void RunCellDivide(bool updateperiodic);$/;"	p	class:JSphCpuSingle	access:protected	signature:(bool updateperiodic)
JSphCpuSingle::RunFloating	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunFloating(double dt,bool predictor){$/;"	f	class:JSphCpuSingle	signature:(double dt,bool predictor)
JSphCpuSingle::RunFloating	JSphCpuSingle.h	/^  void RunFloating(double dt,bool predictor);$/;"	p	class:JSphCpuSingle	access:protected	signature:(double dt,bool predictor)
JSphCpuSingle::RunGaugeSystem	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunGaugeSystem(double timestep){$/;"	f	class:JSphCpuSingle	signature:(double timestep)
JSphCpuSingle::RunGaugeSystem	JSphCpuSingle.h	/^  void RunGaugeSystem(double timestep);$/;"	p	class:JSphCpuSingle	access:protected	signature:(double timestep)
JSphCpuSingle::RunPeriodic	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunPeriodic(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::RunPeriodic	JSphCpuSingle.h	/^  void RunPeriodic();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::SaveData	JSphCpuSingle.cpp	/^void JSphCpuSingle::SaveData(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::SaveData	JSphCpuSingle.h	/^  void SaveData();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::UpdateMaxValues	JSphCpuSingle.cpp	/^void JSphCpuSingle::UpdateMaxValues(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::UpdateMaxValues	JSphCpuSingle.h	/^  void UpdateMaxValues();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
JSphCpuSingle::~JSphCpuSingle	JSphCpuSingle.cpp	/^JSphCpuSingle::~JSphCpuSingle(){$/;"	f	class:JSphCpuSingle	signature:()
JSphCpuSingle::~JSphCpuSingle	JSphCpuSingle.h	/^  ~JSphCpuSingle();$/;"	p	class:JSphCpuSingle	access:public	signature:()
JSphDtFixed	JSphDtFixed.cpp	/^JSphDtFixed::JSphDtFixed(){$/;"	f	class:JSphDtFixed	signature:()
JSphDtFixed	JSphDtFixed.h	/^  JSphDtFixed();$/;"	p	class:JSphDtFixed	access:public	signature:()
JSphDtFixed	JSphDtFixed.h	/^class JSphDtFixed : protected JObject$/;"	c	inherits:JObject
JSphDtFixed::Count	JSphDtFixed.h	/^  unsigned Count;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::DtError	JSphDtFixed.h	/^  double DtError; \/\/- max(DtFixed-DtVariable)$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::FILESIZEMAX	JSphDtFixed.h	/^  static const unsigned FILESIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::File	JSphDtFixed.h	/^  std::string File;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::GetAllocMemory	JSphDtFixed.cpp	/^unsigned JSphDtFixed::GetAllocMemory()const{$/;"	f	class:JSphDtFixed	signature:() const
JSphDtFixed::GetAllocMemory	JSphDtFixed.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JSphDtFixed	access:public	signature:() const
JSphDtFixed::GetDt	JSphDtFixed.cpp	/^double JSphDtFixed::GetDt(double timestep,double dtvar){$/;"	f	class:JSphDtFixed	signature:(double timestep,double dtvar)
JSphDtFixed::GetDt	JSphDtFixed.h	/^  double GetDt(double timestep,double dtvar);$/;"	p	class:JSphDtFixed	access:public	signature:(double timestep,double dtvar)
JSphDtFixed::GetDtError	JSphDtFixed.cpp	/^double JSphDtFixed::GetDtError(bool reset){$/;"	f	class:JSphDtFixed	signature:(bool reset)
JSphDtFixed::GetDtError	JSphDtFixed.h	/^  double GetDtError(bool reset);$/;"	p	class:JSphDtFixed	access:public	signature:(bool reset)
JSphDtFixed::GetFile	JSphDtFixed.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JSphDtFixed	access:public	signature:() const
JSphDtFixed::JSphDtFixed	JSphDtFixed.cpp	/^JSphDtFixed::JSphDtFixed(){$/;"	f	class:JSphDtFixed	signature:()
JSphDtFixed::JSphDtFixed	JSphDtFixed.h	/^  JSphDtFixed();$/;"	p	class:JSphDtFixed	access:public	signature:()
JSphDtFixed::LoadFile	JSphDtFixed.cpp	/^void JSphDtFixed::LoadFile(std::string file){$/;"	f	class:JSphDtFixed	signature:(std::string file)
JSphDtFixed::LoadFile	JSphDtFixed.h	/^  void LoadFile(std::string file);$/;"	p	class:JSphDtFixed	access:public	signature:(std::string file)
JSphDtFixed::Position	JSphDtFixed.h	/^  unsigned Position;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::Reset	JSphDtFixed.cpp	/^void JSphDtFixed::Reset(){$/;"	f	class:JSphDtFixed	signature:()
JSphDtFixed::Reset	JSphDtFixed.h	/^  void Reset();$/;"	p	class:JSphDtFixed	access:public	signature:()
JSphDtFixed::Resize	JSphDtFixed.cpp	/^void JSphDtFixed::Resize(unsigned size){$/;"	f	class:JSphDtFixed	signature:(unsigned size)
JSphDtFixed::Resize	JSphDtFixed.h	/^  void Resize(unsigned size);$/;"	p	class:JSphDtFixed	access:protected	signature:(unsigned size)
JSphDtFixed::Size	JSphDtFixed.h	/^  unsigned Size;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::Times	JSphDtFixed.h	/^  double *Times;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::Values	JSphDtFixed.h	/^  double *Values;$/;"	m	class:JSphDtFixed	access:protected
JSphDtFixed::~JSphDtFixed	JSphDtFixed.cpp	/^JSphDtFixed::~JSphDtFixed(){$/;"	f	class:JSphDtFixed	signature:()
JSphDtFixed::~JSphDtFixed	JSphDtFixed.h	/^  ~JSphDtFixed();$/;"	p	class:JSphDtFixed	access:public	signature:()
JSphGpu	JSphGpu.cpp	/^JSphGpu::JSphGpu(bool withmpi):JSph(false,withmpi){$/;"	f	class:JSphGpu	signature:(bool withmpi)
JSphGpu	JSphGpu.h	/^  JSphGpu(bool withmpi);$/;"	p	class:JSphGpu	access:public	signature:(bool withmpi)
JSphGpu	JSphGpu.h	/^class JSphGpu : public JSph$/;"	c	inherits:JSph
JSphGpu::AceMax	JSphGpu.h	/^  double AceMax;      \/\/\/<Maximum value of Ace[] (ace.x^2 + ace.y^2 + ace.z^2) computed in Interaction_Forces().$/;"	m	class:JSphGpu	access:protected
JSphGpu::Aceg	JSphGpu.h	/^  float3 *Aceg;      \/\/\/<Accumulates acceleration of the particles. | Acumula fuerzas de interaccion.$/;"	m	class:JSphGpu	access:protected
JSphGpu::AddAccInput	JSphGpu.cpp	/^void JSphGpu::AddAccInput(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::AddAccInput	JSphGpu.h	/^  void AddAccInput();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::AllocCpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::AllocCpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::AllocCpuMemoryFixed	JSphGpu.h	/^  void AllocCpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::AllocCpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::AllocCpuMemoryParticles(unsigned np){$/;"	f	class:JSphGpu	signature:(unsigned np)
JSphGpu::AllocCpuMemoryParticles	JSphGpu.h	/^  void AllocCpuMemoryParticles(unsigned np);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np)
JSphGpu::AllocGpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::AllocGpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::AllocGpuMemoryFixed	JSphGpu.h	/^  void AllocGpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::AllocGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::AllocGpuMemoryParticles(unsigned np,float over){$/;"	f	class:JSphGpu	signature:(unsigned np,float over)
JSphGpu::AllocGpuMemoryParticles	JSphGpu.h	/^  void AllocGpuMemoryParticles(unsigned np,float over);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,float over)
JSphGpu::Arg	JSphGpu.h	/^  float *Arg; $/;"	m	class:JSphGpu	access:protected
JSphGpu::ArraysGpu	JSphGpu.h	/^  JArraysGpu* ArraysGpu;$/;"	m	class:JSphGpu	access:protected
JSphGpu::AuxPos	JSphGpu.h	/^  tdouble3 *AuxPos;$/;"	m	class:JSphGpu	access:protected
JSphGpu::AuxRhop	JSphGpu.h	/^  float *AuxRhop;$/;"	m	class:JSphGpu	access:protected
JSphGpu::AuxVel	JSphGpu.h	/^  tfloat3 *AuxVel; $/;"	m	class:JSphGpu	access:protected
JSphGpu::BlockSizeMode	JSphGpu.h	/^  TpBlockSizeMode BlockSizeMode;  \/\/\/<Modes for BlockSize selection.$/;"	m	class:JSphGpu	access:protected
JSphGpu::BlockSizes	JSphGpu.h	/^  StBlockSizes BlockSizes;        \/\/\/<Stores configuration of BlockSizes. | Almacena configuracion de BlockSizes.$/;"	m	class:JSphGpu	access:protected
JSphGpu::BlockSizesStr	JSphGpu.h	/^  std::string BlockSizesStr;      \/\/\/<Stores configuration of BlockSizes in text form. | Almacena configuracion de BlockSizes en texto.$/;"	m	class:JSphGpu	access:protected
JSphGpu::BoundChanged	JSphGpu.h	/^  bool BoundChanged;  \/\/\/<Indicates if a selected boundary particle has changed since the last time step. | Indica si el contorno seleccionado a cambiado desde el ultimo divide.$/;"	m	class:JSphGpu	access:protected
JSphGpu::BsAuto	JSphGpu.h	/^  JBlockSizeAuto *BsAuto;         \/\/\/<Object to calculate the optimum BlockSize for particle interactions.$/;"	m	class:JSphGpu	access:protected
JSphGpu::CalcMotion	JSphGpu.cpp	/^void JSphGpu::CalcMotion(double stepdt){$/;"	f	class:JSphGpu	signature:(double stepdt)
JSphGpu::CalcMotion	JSphGpu.h	/^  void CalcMotion(double stepdt);$/;"	p	class:JSphGpu	access:protected	signature:(double stepdt)
JSphGpu::CellDiv	JSphGpu.h	/^  JCellDivGpu* CellDiv;$/;"	m	class:JSphGpu	access:private
JSphGpu::CheckCudaError	JSphGpu.cpp	/^void JSphGpu::CheckCudaError(const std::string &method,const std::string &msg){$/;"	f	class:JSphGpu	signature:(const std::string &method,const std::string &msg)
JSphGpu::CheckCudaError	JSphGpu.h	/^  void CheckCudaError(const std::string &method,const std::string &msg);$/;"	p	class:JSphGpu	access:protected	signature:(const std::string &method,const std::string &msg)
JSphGpu::CheckGpuParticlesSize	JSphGpu.h	/^  bool CheckGpuParticlesSize(unsigned requirednp){ return(requirednp+PARTICLES_OVERMEMORY_MIN<=GpuParticlesSize); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned requirednp)
JSphGpu::Code	JSphGpu.h	/^  typecode *Code;     \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Codeg	JSphGpu.h	/^  typecode *Codeg;  \/\/\/<Indicator of group of particles & other special markers. | Indica el grupo de las particulas y otras marcas especiales.$/;"	m	class:JSphGpu	access:protected
JSphGpu::ComputeSymplecticCorr	JSphGpu.cpp	/^void JSphGpu::ComputeSymplecticCorr(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
JSphGpu::ComputeSymplecticCorr	JSphGpu.h	/^  void ComputeSymplecticCorr(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
JSphGpu::ComputeSymplecticPre	JSphGpu.cpp	/^void JSphGpu::ComputeSymplecticPre(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
JSphGpu::ComputeSymplecticPre	JSphGpu.h	/^  void ComputeSymplecticPre(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
JSphGpu::ComputeVerlet	JSphGpu.cpp	/^void JSphGpu::ComputeVerlet(double dt){  \/\/pdtedom$/;"	f	class:JSphGpu	signature:(double dt)
JSphGpu::ComputeVerlet	JSphGpu.h	/^  void ComputeVerlet(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
JSphGpu::ConfigBlockSizes	JSphGpu.cpp	/^void JSphGpu::ConfigBlockSizes(bool usezone,bool useperi){$/;"	f	class:JSphGpu	signature:(bool usezone,bool useperi)
JSphGpu::ConfigBlockSizes	JSphGpu.h	/^  void ConfigBlockSizes(bool usezone,bool useperi);$/;"	p	class:JSphGpu	access:protected	signature:(bool usezone,bool useperi)
JSphGpu::ConfigCellDiv	JSphGpu.h	/^  void ConfigCellDiv(JCellDivGpu* celldiv){ CellDiv=celldiv; }$/;"	f	class:JSphGpu	access:protected	signature:(JCellDivGpu* celldiv)
JSphGpu::ConfigRunMode	JSphGpu.cpp	/^void JSphGpu::ConfigRunMode(std::string preinfo){$/;"	f	class:JSphGpu	signature:(std::string preinfo)
JSphGpu::ConfigRunMode	JSphGpu.h	/^  void ConfigRunMode(std::string preinfo);$/;"	p	class:JSphGpu	access:protected	signature:(std::string preinfo)
JSphGpu::ConstantDataUp	JSphGpu.cpp	/^void JSphGpu::ConstantDataUp(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::ConstantDataUp	JSphGpu.h	/^  void ConstantDataUp();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::CpuParticlesSize	JSphGpu.h	/^  unsigned CpuParticlesSize; \/\/\/<Number of particles for which CPU memory was allocated. | Numero de particulas para las cuales se reservo memoria en cpu. $/;"	m	class:JSphGpu	access:protected
JSphGpu::Dcell	JSphGpu.h	/^  unsigned *Dcell;    \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Dcellg	JSphGpu.h	/^  unsigned *Dcellg; \/\/\/<Cells inside DomCells coded with DomCellCode. | Celda dentro de DomCells codificada con DomCellCode.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Deltag	JSphGpu.h	/^  float *Deltag;     \/\/\/<Accumulates adjustment of Delta-SPH with DELTA_DynamicExt. | Acumula ajuste de Delta-SPH con DELTA_DynamicExt.$/;"	m	class:JSphGpu	access:protected
JSphGpu::DemDatag	JSphGpu.h	/^  float4 *DemDatag;       \/\/\/<Data of the object {mass, (1-poisson^2)\/young, kfric, restitu} in GPU [DemObjsSize].$/;"	m	class:JSphGpu	access:protected
JSphGpu::DgSaveCsvParticles2	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticles2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const tfloat4 *pospres,const tfloat4 *velrhop){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos,const unsigned *idp,const tfloat3 *vel,const float *rhop,const tfloat4 *pospres,const tfloat4 *velrhop)
JSphGpu::DgSaveCsvParticles2	JSphGpu.h	/^  void DgSaveCsvParticles2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos=NULL,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const tfloat4 *pospres=NULL,const tfloat4 *velrhop=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const tfloat3 *pos=NULL,const unsigned *idp=NULL,const tfloat3 *vel=NULL,const float *rhop=NULL,const tfloat4 *pospres=NULL,const tfloat4 *velrhop=NULL)
JSphGpu::DgSaveCsvParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float *arg,const float3 *aceg,const float3 *vcorrg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float *arg,const float3 *aceg,const float3 *vcorrg)
JSphGpu::DgSaveCsvParticlesGpu	JSphGpu.h	/^  void DgSaveCsvParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float *arg=NULL,const float3 *aceg=NULL,const float3 *vcorrg=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float *arg=NULL,const float3 *aceg=NULL,const float3 *vcorrg=NULL)
JSphGpu::DgSaveCsvParticlesGpu2	JSphGpu.cpp	/^void JSphGpu::DgSaveCsvParticlesGpu2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float4 *pospresg,const float4 *velrhopg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg,const unsigned *idpg,const float3 *velg,const float *rhopg,const float4 *pospresg,const float4 *velrhopg)
JSphGpu::DgSaveCsvParticlesGpu2	JSphGpu.h	/^  void DgSaveCsvParticlesGpu2(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float4 *pospres=NULL,const float4 *velrhop=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,std::string head,const float3 *posg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL,const float4 *pospres=NULL,const float4 *velrhop=NULL)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin ,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg ,const float4 *velrhopg) const
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg,const unsigned *idpg,const float3 *velg,const float *rhopg){$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg,const unsigned *idpg,const float3 *velg,const float *rhopg)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.cpp	/^void JSphGpu::DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode$/;"	f	class:JSphGpu	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode ,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg ,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,bool idp,bool vel,bool rhop,bool code)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg,const float4 *velrhopg)const;$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const double2 *posxyg,const double *poszg,const typecode *codeg,const unsigned *idpg,const float4 *velrhopg) const
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,const float3 *posg,const byte *checkg=NULL,const unsigned *idpg=NULL,const float3 *velg=NULL,const float *rhopg=NULL)
JSphGpu::DgSaveVtkParticlesGpu	JSphGpu.h	/^  void DgSaveVtkParticlesGpu(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg);$/;"	p	class:JSphGpu	access:public	signature:(std::string filename,int numfile,unsigned pini,unsigned pfin,unsigned cellcode,const double2 *posxyg,const double *poszg,const unsigned *idpg,const unsigned *dcelg,const typecode *codeg,const float4 *velrhopg,const float4 *velrhopm1g,const float3 *aceg)
JSphGpu::DtVariable	JSphGpu.cpp	/^double JSphGpu::DtVariable(bool final){$/;"	f	class:JSphGpu	signature:(bool final)
JSphGpu::DtVariable	JSphGpu.h	/^  double DtVariable(bool final);$/;"	p	class:JSphGpu	access:protected	signature:(bool final)
JSphGpu::FreeCpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::FreeCpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::FreeCpuMemoryFixed	JSphGpu.h	/^  void FreeCpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::FreeCpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::FreeCpuMemoryParticles(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::FreeCpuMemoryParticles	JSphGpu.h	/^  void FreeCpuMemoryParticles();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::FreeGpuMemoryFixed	JSphGpu.cpp	/^void JSphGpu::FreeGpuMemoryFixed(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::FreeGpuMemoryFixed	JSphGpu.h	/^  void FreeGpuMemoryFixed();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::FreeGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::FreeGpuMemoryParticles(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::FreeGpuMemoryParticles	JSphGpu.h	/^  void FreeGpuMemoryParticles();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::FtRidpg	JSphGpu.h	/^  unsigned *FtRidpg;      \/\/\/<Identifier to access to the particles of the floating object [CaseNfloat].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoAnglesg	JSphGpu.h	/^  float3  *FtoAnglesg;      \/\/\/<Maintains rotation angles from center (angle xz, angle yz, angle xy) (units:Rad) [FtCount].   $/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoAuxDouble6	JSphGpu.h	/^  tdouble3 *FtoAuxDouble6; \/\/\/<Memory to swap floating data with GPU. [2*FtCount]. | Memoria para intercambiar datos de floatings con GPU. [2*FtCount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoAuxFloat9	JSphGpu.h	/^  tfloat3  *FtoAuxFloat9;  \/\/\/<Memory to swap floating data with GPU. [3*FtCount]. | Memoria para intercambiar datos de floatings con GPU. [3*FtCount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoCenterResg	JSphGpu.h	/^  double3 *FtoCenterResg; \/\/\/<Stores centre to update floatings. [Ftcount]. | Almacena centro para actualizar floatings. [FtCount]. $/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoCenterg	JSphGpu.h	/^  double3 *FtoCenterg;      \/\/\/<Maintains centre of floating bodies [Ftcount].   | Mantiene centro de floating. [FtCount].   $/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoDatag	JSphGpu.h	/^  float4 *FtoDatag;       \/\/\/<Constant data of floatings {pini_u,np_u,radius_f,mass_f} [FtCount] \/\/__device__ int __float_as_int(float x) \/\/__device__ float __int_as_float(int x).$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoForcesResg	JSphGpu.h	/^  float3 *FtoForcesResg;  \/\/\/<Stores data to update floatings {fomegares_f3,fvelres_f3} equivalent to JSphCpu::FtoForcesRes. [FtCount]. | Almacena datos para actualizar floatings {fomegares_f3,fvelres_f3} equivalente a JSphCpu::FtoForcesRes. [FtCount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoForcesSumg	JSphGpu.h	/^  float3 *FtoForcesSumg;  \/\/\/<Stores forces summation for the floating bodies {sumface_f3,sumfomegaace_f3}[FtCount]. | Almacena sumatorio de fuerzas de floatings {sumface_f3,sumfomegaace_f3} [FtCount]. $/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoForcesg	JSphGpu.h	/^  float3 *FtoForcesg;     \/\/\/<Stores forces for the floating bodies {face_f3,fomegaace_f3} equivalent to JSphCpu::FtoForces [FtCount]. | Almacena fuerzas de floatings {face_f3,fomegaace_f3} equivalente a JSphCpu::FtoForces [FtCount]. $/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoInertiaini1g	JSphGpu.h	/^  float   *FtoInertiaini1g; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given) (a33) [Ftcount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoInertiaini8g	JSphGpu.h	/^  float4  *FtoInertiaini8g; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given) (a11,...,a21,a22,...,a32) [Ftcount*2].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoMasspg	JSphGpu.h	/^  float *FtoMasspg;       \/\/\/<Mass of the particle for each floating body [FtCount] in GPU (used in interaction forces).$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoOmegag	JSphGpu.h	/^  float3  *FtoOmegag;       \/\/\/<Maintains omega of floating bodies [FtCount].    | Mantiene omega de floating. [FtCount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::FtoVelg	JSphGpu.h	/^  float3  *FtoVelg;         \/\/\/<Maintains velocity of floating bodies [FtCount]. | Mantiene vel de floating. [FtCount].$/;"	m	class:JSphGpu	access:protected
JSphGpu::GetAllocMemoryCpu	JSphGpu.cpp	/^llong JSphGpu::GetAllocMemoryCpu()const{  $/;"	f	class:JSphGpu	signature:() const
JSphGpu::GetAllocMemoryCpu	JSphGpu.h	/^  llong GetAllocMemoryCpu()const;$/;"	p	class:JSphGpu	access:protected	signature:() const
JSphGpu::GetAllocMemoryGpu	JSphGpu.cpp	/^llong JSphGpu::GetAllocMemoryGpu()const{  $/;"	f	class:JSphGpu	signature:() const
JSphGpu::GetAllocMemoryGpu	JSphGpu.h	/^  llong GetAllocMemoryGpu()const;$/;"	p	class:JSphGpu	access:protected	signature:() const
JSphGpu::GetTimersInfo	JSphGpu.cpp	/^void JSphGpu::GetTimersInfo(std::string &hinfo,std::string &dinfo)const{$/;"	f	class:JSphGpu	signature:(std::string &hinfo,std::string &dinfo) const
JSphGpu::GetTimersInfo	JSphGpu.h	/^  void GetTimersInfo(std::string &hinfo,std::string &dinfo)const;$/;"	p	class:JSphGpu	access:protected	signature:(std::string &hinfo,std::string &dinfo) const
JSphGpu::GpuCompute	JSphGpu.h	/^  unsigned GpuCompute;    \/\/\/<Compute capability: 10,11,12,20... $/;"	m	class:JSphGpu	access:protected
JSphGpu::GpuGlobalMem	JSphGpu.h	/^  size_t GpuGlobalMem;    \/\/\/<Size of global memory in bytes.$/;"	m	class:JSphGpu	access:protected
JSphGpu::GpuName	JSphGpu.h	/^  std::string GpuName;    \/\/\/<Name of the selected GPU.$/;"	m	class:JSphGpu	access:protected
JSphGpu::GpuParticlesSize	JSphGpu.h	/^  unsigned GpuParticlesSize;  \/\/\/<Number of particles for which GPU memory was allocated. | Numero de particulas para las cuales se reservo memoria en gpu.$/;"	m	class:JSphGpu	access:protected
JSphGpu::GpuSelect	JSphGpu.h	/^  int GpuSelect;          \/\/\/<GPU Selection (-1:no selection). | Gpu seleccionada (-1:sin seleccion).$/;"	m	class:JSphGpu	access:protected
JSphGpu::GpuSharedMem	JSphGpu.h	/^  unsigned GpuSharedMem;  \/\/\/<Size of shared memory for each block in bytes.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Idp	JSphGpu.h	/^  unsigned *Idp;      \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Idpg	JSphGpu.h	/^  unsigned *Idpg;   \/\/\/<Identifier of particle | Identificador de particula.$/;"	m	class:JSphGpu	access:protected
JSphGpu::InitFloating	JSphGpu.cpp	/^void JSphGpu::InitFloating(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::InitFloating	JSphGpu.h	/^  void InitFloating();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::InitRunGpu	JSphGpu.cpp	/^void JSphGpu::InitRunGpu(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::InitRunGpu	JSphGpu.h	/^  void InitRunGpu();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::InitVars	JSphGpu.cpp	/^void JSphGpu::InitVars(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::InitVars	JSphGpu.h	/^  void InitVars();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::JSphGpu	JSphGpu.cpp	/^JSphGpu::JSphGpu(bool withmpi):JSph(false,withmpi){$/;"	f	class:JSphGpu	signature:(bool withmpi)
JSphGpu::JSphGpu	JSphGpu.h	/^  JSphGpu(bool withmpi);$/;"	p	class:JSphGpu	access:public	signature:(bool withmpi)
JSphGpu::MemCpuFixed	JSphGpu.h	/^  llong MemCpuFixed;         \/\/\/<Allocated memory in AllocCpuMemoryFixed. | Mermoria reservada en AllocCpuMemoryFixed. $/;"	m	class:JSphGpu	access:protected
JSphGpu::MemCpuParticles	JSphGpu.h	/^  llong MemCpuParticles;     \/\/\/<Allocated CPU memory for arrays with particle data. | Mermoria reservada para vectores de datos de particulas. $/;"	m	class:JSphGpu	access:protected
JSphGpu::MemGpuFixed	JSphGpu.h	/^  llong MemGpuFixed;          \/\/\/<Allocated memory in AllocGpuMemoryFixed. | Memoria reservada en AllocGpuMemoryFixed. $/;"	m	class:JSphGpu	access:protected
JSphGpu::MemGpuParticles	JSphGpu.h	/^  llong MemGpuParticles;      \/\/\/<Allocated GPU memory for arrays with particle data. | Mermoria reservada para vectores de datos de particulas.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Np	JSphGpu.h	/^  unsigned Np;        \/\/\/<Total number of particles (including duplicate periodic particles). | Numero total de particulas (incluidas las duplicadas periodicas). $/;"	m	class:JSphGpu	access:protected
JSphGpu::Npb	JSphGpu.h	/^  unsigned Npb;       \/\/\/<Number of boundary particles (including periodic boundaries). | Numero de particulas contorno (incluidas las contorno periodicas). $/;"	m	class:JSphGpu	access:protected
JSphGpu::NpbOk	JSphGpu.h	/^  unsigned NpbOk;     \/\/\/<Number of boundary particles interacting the fluid (including the periodic bounaries). | Numero de particulas contorno cerca del fluido (incluidas las contorno periodicas). $/;"	m	class:JSphGpu	access:protected
JSphGpu::NpbPer	JSphGpu.h	/^  unsigned NpbPer;    \/\/\/<Number of periodic boundary particles. | Numero de particulas contorno periodicas. $/;"	m	class:JSphGpu	access:protected
JSphGpu::NpbPerM1	JSphGpu.h	/^  unsigned NpbPerM1;  \/\/\/<Number of periodic boundary particles (previous values). | Numero de particulas contorno periodicas (valores anteriores).$/;"	m	class:JSphGpu	access:protected
JSphGpu::NpfPer	JSphGpu.h	/^  unsigned NpfPer;    \/\/\/<Number of periodic particles (fluid-floating). | Numero de particulas fluidas-floating periodicas. $/;"	m	class:JSphGpu	access:protected
JSphGpu::NpfPerM1	JSphGpu.h	/^  unsigned NpfPerM1;  \/\/\/<Number of fluid-floating periodic particles (previous values). | Numero de particulas fluidas-floating periodicas (valores anteriores). $/;"	m	class:JSphGpu	access:protected
JSphGpu::ParticlesDataDown	JSphGpu.cpp	/^unsigned JSphGpu::ParticlesDataDown(unsigned n,unsigned pini,bool code,bool onlynormal){$/;"	f	class:JSphGpu	signature:(unsigned n,unsigned pini,bool code,bool onlynormal)
JSphGpu::ParticlesDataDown	JSphGpu.h	/^  unsigned ParticlesDataDown(unsigned n,unsigned pini,bool code,bool onlynormal);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned n,unsigned pini,bool code,bool onlynormal)
JSphGpu::ParticlesDataUp	JSphGpu.cpp	/^void JSphGpu::ParticlesDataUp(unsigned n){$/;"	f	class:JSphGpu	signature:(unsigned n)
JSphGpu::ParticlesDataUp	JSphGpu.h	/^  void ParticlesDataUp(unsigned n);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned n)
JSphGpu::PosInteraction_Forces	JSphGpu.cpp	/^void JSphGpu::PosInteraction_Forces(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::PosInteraction_Forces	JSphGpu.h	/^  void PosInteraction_Forces();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::Posxy	JSphGpu.h	/^  tdouble2 *Posxy;$/;"	m	class:JSphGpu	access:protected
JSphGpu::PosxyPreg	JSphGpu.h	/^  double2 *PosxyPreg;  \/\/\/<Sympletic: in order to keep previous values. | Sympletic: para guardar valores en predictor.$/;"	m	class:JSphGpu	access:protected
JSphGpu::Posxyg	JSphGpu.h	/^  double2 *Posxyg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::Posz	JSphGpu.h	/^  double *Posz;$/;"	m	class:JSphGpu	access:protected
JSphGpu::PoszPreg	JSphGpu.h	/^  double *PoszPreg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::Poszg	JSphGpu.h	/^  double *Poszg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::PreInteractionVars_Forces	JSphGpu.cpp	/^void JSphGpu::PreInteractionVars_Forces(unsigned np,unsigned npb){$/;"	f	class:JSphGpu	signature:(unsigned np,unsigned npb)
JSphGpu::PreInteractionVars_Forces	JSphGpu.h	/^  void PreInteractionVars_Forces(unsigned np,unsigned npb);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,unsigned npb)
JSphGpu::PreInteraction_Forces	JSphGpu.cpp	/^void JSphGpu::PreInteraction_Forces(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::PreInteraction_Forces	JSphGpu.h	/^  void PreInteraction_Forces();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::PrintAllocMemory	JSphGpu.cpp	/^void JSphGpu::PrintAllocMemory(llong mcpu,llong mgpu)const{$/;"	f	class:JSphGpu	signature:(llong mcpu,llong mgpu) const
JSphGpu::PrintAllocMemory	JSphGpu.h	/^  void PrintAllocMemory(llong mcpu,llong mgpu)const;$/;"	p	class:JSphGpu	access:protected	signature:(llong mcpu,llong mgpu) const
JSphGpu::PsPospressg	JSphGpu.h	/^  float4 *PsPospressg; \/\/\/<Position and pressure for the interaction Pos-Single press=cteb*(powf(rhop\/rhopzero,gamma)-1.0f); | Posicion y press para interaccion Pos-Single. press=cteb*(powf(rhop\/rhopzero,gamma)-1.0f); $/;"	m	class:JSphGpu	access:protected
JSphGpu::ReserveBasicArraysGpu	JSphGpu.cpp	/^void JSphGpu::ReserveBasicArraysGpu(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::ReserveBasicArraysGpu	JSphGpu.h	/^  void ReserveBasicArraysGpu();$/;"	p	class:JSphGpu	access:protected	signature:()
JSphGpu::ResizeGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::ResizeGpuMemoryParticles(unsigned npnew){$/;"	f	class:JSphGpu	signature:(unsigned npnew)
JSphGpu::ResizeGpuMemoryParticles	JSphGpu.h	/^  void ResizeGpuMemoryParticles(unsigned np);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np)
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,double      *data,double      *datanew)const{ TRestoreArrayGpu<double>     (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,double *data,double *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,double2     *data,double2     *datanew)const{ TRestoreArrayGpu<double2>    (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,double2 *data,double2 *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,float       *data,float       *datanew)const{ TRestoreArrayGpu<float>      (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,float *data,float *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,float4      *data,float4      *datanew)const{ TRestoreArrayGpu<float4>     (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,float4 *data,float4 *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,int         *data,int         *datanew)const{ TRestoreArrayGpu<int>        (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,int *data,int *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew)const{ TRestoreArrayGpu<tsymatrix3f>(np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,unsigned    *data,unsigned    *datanew)const{ TRestoreArrayGpu<unsigned>   (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,unsigned *data,unsigned *datanew) const
JSphGpu::RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,word        *data,word        *datanew)const{ TRestoreArrayGpu<word>       (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,word *data,word *datanew) const
JSphGpu::RidpMoveg	JSphGpu.h	/^  unsigned *RidpMoveg;  \/\/\/<Only for moving boundary particles [CaseNmoving] and when CaseNmoving!=0 | Solo para boundary moving particles [CaseNmoving] y cuando CaseNmoving!=0 $/;"	m	class:JSphGpu	access:protected
JSphGpu::RunDamping	JSphGpu.cpp	/^void JSphGpu::RunDamping(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop){$/;"	f	class:JSphGpu	signature:(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop)
JSphGpu::RunDamping	JSphGpu.h	/^  void RunDamping(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop);$/;"	p	class:JSphGpu	access:protected	signature:(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop)
JSphGpu::RunExceptionCuda	JSphGpu.cpp	/^void JSphGpu::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error){$/;"	f	class:JSphGpu	signature:(const std::string &method,const std::string &msg,cudaError_t error)
JSphGpu::RunExceptionCuda	JSphGpu.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error);$/;"	p	class:JSphGpu	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error)
JSphGpu::RunMode	JSphGpu.h	/^  std::string RunMode;    \/\/\/<Stores execution mode (symmetry,OpenMP,balance...).$/;"	m	class:JSphGpu	access:protected
JSphGpu::RunMotion	JSphGpu.cpp	/^void JSphGpu::RunMotion(double stepdt){$/;"	f	class:JSphGpu	signature:(double stepdt)
JSphGpu::RunMotion	JSphGpu.h	/^  void RunMotion(double stepdt);$/;"	p	class:JSphGpu	access:protected	signature:(double stepdt)
JSphGpu::RunShifting	JSphGpu.cpp	/^void JSphGpu::RunShifting(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
JSphGpu::RunShifting	JSphGpu.h	/^  void RunShifting(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  double*      SaveArrayGpu(unsigned np,const double      *datasrc)const{ return(TSaveArrayGpu<double>     (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const double *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  double2*     SaveArrayGpu(unsigned np,const double2     *datasrc)const{ return(TSaveArrayGpu<double2>    (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const double2 *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  float*       SaveArrayGpu(unsigned np,const float       *datasrc)const{ return(TSaveArrayGpu<float>      (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const float *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  float4*      SaveArrayGpu(unsigned np,const float4      *datasrc)const{ return(TSaveArrayGpu<float4>     (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const float4 *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  int*         SaveArrayGpu(unsigned np,const int         *datasrc)const{ return(TSaveArrayGpu<int>        (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const int *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  tsymatrix3f* SaveArrayGpu(unsigned np,const tsymatrix3f *datasrc)const{ return(TSaveArrayGpu<tsymatrix3f>(np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const tsymatrix3f *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  unsigned*    SaveArrayGpu(unsigned np,const unsigned    *datasrc)const{ return(TSaveArrayGpu<unsigned>   (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const unsigned *datasrc) const
JSphGpu::SaveArrayGpu	JSphGpu.h	/^  word*        SaveArrayGpu(unsigned np,const word        *datasrc)const{ return(TSaveArrayGpu<word>       (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const word *datasrc) const
JSphGpu::SelecDevice	JSphGpu.cpp	/^void JSphGpu::SelecDevice(int gpuid){$/;"	f	class:JSphGpu	signature:(int gpuid)
JSphGpu::SelecDevice	JSphGpu.h	/^  void SelecDevice(int gpuid);$/;"	p	class:JSphGpu	access:protected	signature:(int gpuid)
JSphGpu::ShiftDetectg	JSphGpu.h	/^  float *ShiftDetectg;  \/\/\/<Used to detect free surface with Shifting.$/;"	m	class:JSphGpu	access:protected
JSphGpu::ShiftPosg	JSphGpu.h	/^  float3 *ShiftPosg;    \/\/\/<Particle displacement using Shifting.$/;"	m	class:JSphGpu	access:protected
JSphGpu::ShowTimers	JSphGpu.cpp	/^void JSphGpu::ShowTimers(bool onlyfile){$/;"	f	class:JSphGpu	signature:(bool onlyfile)
JSphGpu::ShowTimers	JSphGpu.h	/^  void ShowTimers(bool onlyfile=false);$/;"	p	class:JSphGpu	access:protected	signature:(bool onlyfile=false)
JSphGpu::SpsGradvelg	JSphGpu.h	/^  tsymatrix3f *SpsGradvelg;   \/\/\/<Velocity gradients.$/;"	m	class:JSphGpu	access:protected
JSphGpu::SpsTaug	JSphGpu.h	/^  tsymatrix3f *SpsTaug;       \/\/\/<SPS sub-particle stress tensor.$/;"	m	class:JSphGpu	access:protected
JSphGpu::StBlockSizes	JSphGpu.h	/^  }StBlockSizes;$/;"	t	class:JSphGpu	typeref:struct:JSphGpu::__anon31	access:public
JSphGpu::TRestoreArrayGpu	JSphGpu.cpp	/^template<class T> void JSphGpu::TRestoreArrayGpu(unsigned np,T *data,T *datanew)const{$/;"	f	class:JSphGpu	signature:(unsigned np,T *data,T *datanew) const
JSphGpu::TRestoreArrayGpu	JSphGpu.h	/^  template<class T> void TRestoreArrayGpu(unsigned np,T *data,T *datanew)const;$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,T *data,T *datanew) const
JSphGpu::TSaveArrayGpu	JSphGpu.cpp	/^template<class T> T* JSphGpu::TSaveArrayGpu(unsigned np,const T *datasrc)const{$/;"	f	class:JSphGpu	signature:(unsigned np,const T *datasrc) const
JSphGpu::TSaveArrayGpu	JSphGpu.h	/^  template<class T> T* TSaveArrayGpu(unsigned np,const T *datasrc)const;$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,const T *datasrc) const
JSphGpu::TimerGetCount	JSphGpu.h	/^  unsigned TimerGetCount()const{ return(TmgGetCount()); }$/;"	f	class:JSphGpu	access:protected	signature:() const
JSphGpu::TimerGetName	JSphGpu.h	/^  std::string TimerGetName(unsigned ct)const{ return(TmgGetName((CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
JSphGpu::TimerGetPtrValue	JSphGpu.h	/^  const double* TimerGetPtrValue(unsigned ct)const{ return(TmgGetPtrValue(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
JSphGpu::TimerGetValue	JSphGpu.h	/^  float TimerGetValue(unsigned ct)const{ return(TmgGetValue(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
JSphGpu::TimerIsActive	JSphGpu.h	/^  bool TimerIsActive(unsigned ct)const{ return(TmgIsActive(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
JSphGpu::TimerToText	JSphGpu.h	/^  std::string TimerToText(unsigned ct)const{ return(JSph::TimerToText(TimerGetName(ct),TimerGetValue(ct))); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
JSphGpu::Timers	JSphGpu.h	/^  TimersGpu Timers;  \/\/\/<Declares an array with timers for CPU (type structure \\ref StSphTimerGpu).$/;"	m	class:JSphGpu	access:protected
JSphGpu::VelMax	JSphGpu.h	/^  double VelMax;      \/\/\/<Maximum value of Vel[] sqrt(vel.x^2 + vel.y^2 + vel.z^2) computed in PreInteraction_Forces().$/;"	m	class:JSphGpu	access:protected
JSphGpu::Velrhop	JSphGpu.h	/^  tfloat4 *Velrhop;$/;"	m	class:JSphGpu	access:protected
JSphGpu::VelrhopM1g	JSphGpu.h	/^  float4 *VelrhopM1g;  \/\/\/<Verlet: in order to keep previous values. | Verlet: para guardar valores anteriores.$/;"	m	class:JSphGpu	access:protected
JSphGpu::VelrhopPreg	JSphGpu.h	/^  float4 *VelrhopPreg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::Velrhopg	JSphGpu.h	/^  float4 *Velrhopg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::ViscDtMax	JSphGpu.h	/^  float ViscDtMax;    \/\/\/<Maximum value of ViscDt computed in Interaction_Forces().$/;"	m	class:JSphGpu	access:protected
JSphGpu::ViscDtg	JSphGpu.h	/^  float *ViscDtg;$/;"	m	class:JSphGpu	access:protected
JSphGpu::__anon31::forcesbound	JSphGpu.h	/^    unsigned forcesbound;$/;"	m	struct:JSphGpu::__anon31	access:public
JSphGpu::__anon31::forcesdem	JSphGpu.h	/^    unsigned forcesdem;$/;"	m	struct:JSphGpu::__anon31	access:public
JSphGpu::__anon31::forcesfluid	JSphGpu.h	/^    unsigned forcesfluid;$/;"	m	struct:JSphGpu::__anon31	access:public
JSphGpu::~JSphGpu	JSphGpu.cpp	/^JSphGpu::~JSphGpu(){$/;"	f	class:JSphGpu	signature:()
JSphGpu::~JSphGpu	JSphGpu.h	/^  ~JSphGpu();$/;"	p	class:JSphGpu	access:public	signature:()
JSphGpuSingle	JSphGpuSingle.cpp	/^JSphGpuSingle::JSphGpuSingle():JSphGpu(false){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle	JSphGpuSingle.h	/^  JSphGpuSingle();$/;"	p	class:JSphGpuSingle	access:public	signature:()
JSphGpuSingle	JSphGpuSingle.h	/^class JSphGpuSingle : public JSphGpu$/;"	c	inherits:JSphGpu
JSphGpuSingle::AbortBoundOut	JSphGpuSingle.cpp	/^void JSphGpuSingle::AbortBoundOut(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::AbortBoundOut	JSphGpuSingle.h	/^  void AbortBoundOut();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::CellDivSingle	JSphGpuSingle.h	/^  JCellDivGpuSingle* CellDivSingle;$/;"	m	class:JSphGpuSingle	access:protected
JSphGpuSingle::ComputeAceMax	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeAceMax(float *auxmem){$/;"	f	class:JSphGpuSingle	signature:(float *auxmem)
JSphGpuSingle::ComputeAceMax	JSphGpuSingle.h	/^  double ComputeAceMax(float *auxmem);$/;"	p	class:JSphGpuSingle	access:protected	signature:(float *auxmem)
JSphGpuSingle::ComputeStep	JSphGpuSingle.h	/^  double ComputeStep(){ return(TStep==STEP_Verlet? ComputeStep_Ver(): ComputeStep_Sym()); }$/;"	f	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::ComputeStep_Sym	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeStep_Sym(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::ComputeStep_Sym	JSphGpuSingle.h	/^  double ComputeStep_Sym();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::ComputeStep_Ver	JSphGpuSingle.cpp	/^double JSphGpuSingle::ComputeStep_Ver(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::ComputeStep_Ver	JSphGpuSingle.h	/^  double ComputeStep_Ver();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::ConfigDomain	JSphGpuSingle.cpp	/^void JSphGpuSingle::ConfigDomain(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::ConfigDomain	JSphGpuSingle.h	/^  void ConfigDomain();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::FinishRun	JSphGpuSingle.cpp	/^void JSphGpuSingle::FinishRun(bool stop){$/;"	f	class:JSphGpuSingle	signature:(bool stop)
JSphGpuSingle::FinishRun	JSphGpuSingle.h	/^  void FinishRun(bool stop);$/;"	p	class:JSphGpuSingle	access:protected	signature:(bool stop)
JSphGpuSingle::GetAllocMemoryCpu	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetAllocMemoryCpu()const{  $/;"	f	class:JSphGpuSingle	signature:() const
JSphGpuSingle::GetAllocMemoryCpu	JSphGpuSingle.h	/^  llong GetAllocMemoryCpu()const;  $/;"	p	class:JSphGpuSingle	access:protected	signature:() const
JSphGpuSingle::GetAllocMemoryGpu	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetAllocMemoryGpu()const{  $/;"	f	class:JSphGpuSingle	signature:() const
JSphGpuSingle::GetAllocMemoryGpu	JSphGpuSingle.h	/^  llong GetAllocMemoryGpu()const;  $/;"	p	class:JSphGpuSingle	access:protected	signature:() const
JSphGpuSingle::GetMemoryGpuNct	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetMemoryGpuNct()const{$/;"	f	class:JSphGpuSingle	signature:() const
JSphGpuSingle::GetMemoryGpuNct	JSphGpuSingle.h	/^  llong GetMemoryGpuNct()const;$/;"	p	class:JSphGpuSingle	access:protected	signature:() const
JSphGpuSingle::GetMemoryGpuNp	JSphGpuSingle.cpp	/^llong JSphGpuSingle::GetMemoryGpuNp()const{$/;"	f	class:JSphGpuSingle	signature:() const
JSphGpuSingle::GetMemoryGpuNp	JSphGpuSingle.h	/^  llong GetMemoryGpuNp()const;$/;"	p	class:JSphGpuSingle	access:protected	signature:() const
JSphGpuSingle::Interaction_Forces	JSphGpuSingle.cpp	/^void JSphGpuSingle::Interaction_Forces(TpInterStep interstep){$/;"	f	class:JSphGpuSingle	signature:(TpInterStep interstep)
JSphGpuSingle::Interaction_Forces	JSphGpuSingle.h	/^  void Interaction_Forces(TpInterStep interstep);$/;"	p	class:JSphGpuSingle	access:protected	signature:(TpInterStep interstep)
JSphGpuSingle::JSphGpuSingle	JSphGpuSingle.cpp	/^JSphGpuSingle::JSphGpuSingle():JSphGpu(false){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::JSphGpuSingle	JSphGpuSingle.h	/^  JSphGpuSingle();$/;"	p	class:JSphGpuSingle	access:public	signature:()
JSphGpuSingle::LoadConfig	JSphGpuSingle.cpp	/^void JSphGpuSingle::LoadConfig(JCfgRun *cfg){$/;"	f	class:JSphGpuSingle	signature:(JCfgRun *cfg)
JSphGpuSingle::LoadConfig	JSphGpuSingle.h	/^  void LoadConfig(JCfgRun *cfg);$/;"	p	class:JSphGpuSingle	access:protected	signature:(JCfgRun *cfg)
JSphGpuSingle::ResizeParticlesSize	JSphGpuSingle.cpp	/^void JSphGpuSingle::ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide){$/;"	f	class:JSphGpuSingle	signature:(unsigned newsize,float oversize,bool updatedivide)
JSphGpuSingle::ResizeParticlesSize	JSphGpuSingle.h	/^  void ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide);$/;"	p	class:JSphGpuSingle	access:protected	signature:(unsigned newsize,float oversize,bool updatedivide)
JSphGpuSingle::Run	JSphGpuSingle.cpp	/^void JSphGpuSingle::Run(std::string appname,JCfgRun *cfg,JLog2 *log){$/;"	f	class:JSphGpuSingle	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
JSphGpuSingle::Run	JSphGpuSingle.h	/^  void Run(std::string appname,JCfgRun *cfg,JLog2 *log);$/;"	p	class:JSphGpuSingle	access:public	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
JSphGpuSingle::RunCellDivide	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunCellDivide(bool updateperiodic){$/;"	f	class:JSphGpuSingle	signature:(bool updateperiodic)
JSphGpuSingle::RunCellDivide	JSphGpuSingle.h	/^  void RunCellDivide(bool updateperiodic);$/;"	p	class:JSphGpuSingle	access:protected	signature:(bool updateperiodic)
JSphGpuSingle::RunFloating	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunFloating(double dt,bool predictor){$/;"	f	class:JSphGpuSingle	signature:(double dt,bool predictor)
JSphGpuSingle::RunFloating	JSphGpuSingle.h	/^  void RunFloating(double dt,bool predictor);$/;"	p	class:JSphGpuSingle	access:protected	signature:(double dt,bool predictor)
JSphGpuSingle::RunGaugeSystem	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunGaugeSystem(double timestep){$/;"	f	class:JSphGpuSingle	signature:(double timestep)
JSphGpuSingle::RunGaugeSystem	JSphGpuSingle.h	/^  void RunGaugeSystem(double timestep);$/;"	p	class:JSphGpuSingle	access:protected	signature:(double timestep)
JSphGpuSingle::RunPeriodic	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunPeriodic(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::RunPeriodic	JSphGpuSingle.h	/^  void RunPeriodic();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::SaveData	JSphGpuSingle.cpp	/^void JSphGpuSingle::SaveData(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::SaveData	JSphGpuSingle.h	/^  void SaveData();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::UpdateFtObjs	JSphGpuSingle.cpp	/^void JSphGpuSingle::UpdateFtObjs(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::UpdateFtObjs	JSphGpuSingle.h	/^  void UpdateFtObjs();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::UpdateMaxValues	JSphGpuSingle.cpp	/^void JSphGpuSingle::UpdateMaxValues(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::UpdateMaxValues	JSphGpuSingle.h	/^  void UpdateMaxValues();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
JSphGpuSingle::~JSphGpuSingle	JSphGpuSingle.cpp	/^JSphGpuSingle::~JSphGpuSingle(){$/;"	f	class:JSphGpuSingle	signature:()
JSphGpuSingle::~JSphGpuSingle	JSphGpuSingle.h	/^  ~JSphGpuSingle();$/;"	p	class:JSphGpuSingle	access:public	signature:()
JSphInitialize	JSphInitialize.cpp	/^JSphInitialize::JSphInitialize(const std::string &file){$/;"	f	class:JSphInitialize	signature:(const std::string &file)
JSphInitialize	JSphInitialize.h	/^  JSphInitialize(const std::string &file);$/;"	p	class:JSphInitialize	access:public	signature:(const std::string &file)
JSphInitialize	JSphInitialize.h	/^class JSphInitialize  : protected JObject$/;"	c	inherits:JObject
JSphInitialize::Count	JSphInitialize.h	/^  unsigned Count()const{ return(unsigned(Opes.size())); }$/;"	f	class:JSphInitialize	access:public	signature:() const
JSphInitialize::GetConfig	JSphInitialize.cpp	/^void JSphInitialize::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphInitialize	signature:(std::vector<std::string> &lines) const
JSphInitialize::GetConfig	JSphInitialize.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphInitialize	access:public	signature:(std::vector<std::string> &lines) const
JSphInitialize::JSphInitialize	JSphInitialize.cpp	/^JSphInitialize::JSphInitialize(const std::string &file){$/;"	f	class:JSphInitialize	signature:(const std::string &file)
JSphInitialize::JSphInitialize	JSphInitialize.h	/^  JSphInitialize(const std::string &file);$/;"	p	class:JSphInitialize	access:public	signature:(const std::string &file)
JSphInitialize::LoadFileXml	JSphInitialize.cpp	/^void JSphInitialize::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSphInitialize	signature:(const std::string &file,const std::string &path)
JSphInitialize::LoadFileXml	JSphInitialize.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSphInitialize	access:private	signature:(const std::string &file,const std::string &path)
JSphInitialize::LoadXml	JSphInitialize.cpp	/^void JSphInitialize::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSphInitialize	signature:(JXml *sxml,const std::string &place)
JSphInitialize::LoadXml	JSphInitialize.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSphInitialize	access:private	signature:(JXml *sxml,const std::string &place)
JSphInitialize::Opes	JSphInitialize.h	/^  std::vector<JSphInitializeOp*> Opes;$/;"	m	class:JSphInitialize	access:private
JSphInitialize::ReadXml	JSphInitialize.cpp	/^void JSphInitialize::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSphInitialize	signature:(JXml *sxml,TiXmlElement* lis)
JSphInitialize::ReadXml	JSphInitialize.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSphInitialize	access:private	signature:(JXml *sxml,TiXmlElement* lis)
JSphInitialize::Reset	JSphInitialize.cpp	/^void JSphInitialize::Reset(){$/;"	f	class:JSphInitialize	signature:()
JSphInitialize::Reset	JSphInitialize.h	/^  void Reset();$/;"	p	class:JSphInitialize	access:public	signature:()
JSphInitialize::Run	JSphInitialize.cpp	/^void JSphInitialize::Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop){$/;"	f	class:JSphInitialize	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
JSphInitialize::Run	JSphInitialize.h	/^  void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop);$/;"	p	class:JSphInitialize	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
JSphInitialize::~JSphInitialize	JSphInitialize.cpp	/^JSphInitialize::~JSphInitialize(){$/;"	f	class:JSphInitialize	signature:()
JSphInitialize::~JSphInitialize	JSphInitialize.h	/^  ~JSphInitialize();$/;"	p	class:JSphInitialize	access:public	signature:()
JSphInitializeOp	JSphInitialize.h	/^  JSphInitializeOp(TpInitialize type,const char* name):Type(type){ $/;"	f	class:JSphInitializeOp	access:public	signature:(TpInitialize type,const char* name)
JSphInitializeOp	JSphInitialize.h	/^class JSphInitializeOp : public JObject$/;"	c	inherits:JObject
JSphInitializeOp::GetConfig	JSphInitialize.h	/^  virtual void GetConfig(std::vector<std::string> &lines)const=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(std::vector<std::string> &lines) const
JSphInitializeOp::IT_FluidVel	JSphInitialize.h	/^  typedef enum{ IT_FluidVel=1 }TpInitialize; $/;"	e	enum:JSphInitializeOp::__anon34
JSphInitializeOp::JSphInitializeOp	JSphInitialize.h	/^  JSphInitializeOp(TpInitialize type,const char* name):Type(type){ $/;"	f	class:JSphInitializeOp	access:public	signature:(TpInitialize type,const char* name)
JSphInitializeOp::ReadXml	JSphInitialize.h	/^  virtual void ReadXml(JXml *sxml,TiXmlElement* ele)=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSphInitializeOp::Run	JSphInitialize.h	/^  virtual void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
JSphInitializeOp::TpInitialize	JSphInitialize.h	/^  typedef enum{ IT_FluidVel=1 }TpInitialize; $/;"	t	class:JSphInitializeOp	typeref:enum:JSphInitializeOp::__anon34	access:public
JSphInitializeOp::Type	JSphInitialize.h	/^  const TpInitialize Type;   \/\/\/<Type of particle.$/;"	m	class:JSphInitializeOp	access:public
JSphInitializeOp::~JSphInitializeOp	JSphInitialize.h	/^  virtual ~JSphInitializeOp(){ DestructorActive=true; }$/;"	f	class:JSphInitializeOp	access:public	signature:()
JSphInitializeOp_FluidVel	JSphInitialize.h	/^  JSphInitializeOp_FluidVel(JXml *sxml,TiXmlElement* ele):JSphInitializeOp(IT_FluidVel,"FluidVel"){ $/;"	f	class:JSphInitializeOp_FluidVel	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSphInitializeOp_FluidVel	JSphInitialize.h	/^class JSphInitializeOp_FluidVel : public JSphInitializeOp$/;"	c	inherits:JSphInitializeOp
JSphInitializeOp_FluidVel::Direction	JSphInitialize.h	/^  tfloat3 Direction;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::GetConfig	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::GetConfig(std::vector<std::string> &lines)const{$/;"	f	class:JSphInitializeOp_FluidVel	signature:(std::vector<std::string> &lines) const
JSphInitializeOp_FluidVel::GetConfig	JSphInitialize.h	/^  void GetConfig(std::vector<std::string> &lines)const;$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(std::vector<std::string> &lines) const
JSphInitializeOp_FluidVel::JSphInitializeOp_FluidVel	JSphInitialize.h	/^  JSphInitializeOp_FluidVel(JXml *sxml,TiXmlElement* ele):JSphInitializeOp(IT_FluidVel,"FluidVel"){ $/;"	f	class:JSphInitializeOp_FluidVel	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSphInitializeOp_FluidVel::MkFluid	JSphInitialize.h	/^  std::string MkFluid;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::Posz1	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::Posz2	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::Posz3	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::ReadXml	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::ReadXml(JXml *sxml,TiXmlElement* xele){$/;"	f	class:JSphInitializeOp_FluidVel	signature:(JXml *sxml,TiXmlElement* xele)
JSphInitializeOp_FluidVel::ReadXml	JSphInitialize.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(JXml *sxml,TiXmlElement* ele)
JSphInitializeOp_FluidVel::Reset	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::Reset(){$/;"	f	class:JSphInitializeOp_FluidVel	signature:()
JSphInitializeOp_FluidVel::Reset	JSphInitialize.h	/^  void Reset();$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:()
JSphInitializeOp_FluidVel::Run	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop){$/;"	f	class:JSphInitializeOp_FluidVel	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
JSphInitializeOp_FluidVel::Run	JSphInitialize.h	/^  void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop);$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
JSphInitializeOp_FluidVel::TVEL_Constant	JSphInitialize.h	/^    TVEL_Constant=0,    \/\/\/<Velocity profile uniform.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
JSphInitializeOp_FluidVel::TVEL_Linear	JSphInitialize.h	/^    TVEL_Linear=1,      \/\/\/<Velocity profile linear.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
JSphInitializeOp_FluidVel::TVEL_Parabolic	JSphInitialize.h	/^    TVEL_Parabolic=2    \/\/\/<Velocity profile parabolic.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
JSphInitializeOp_FluidVel::TpVelocity	JSphInitialize.h	/^  }TpVelocity;$/;"	t	class:JSphInitializeOp_FluidVel	typeref:enum:JSphInitializeOp_FluidVel::__anon35	access:private
JSphInitializeOp_FluidVel::Vel1	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::Vel2	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::Vel3	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphInitializeOp_FluidVel::VelType	JSphInitialize.h	/^  TpVelocity VelType;  \/\/\/<Type of velocity.$/;"	m	class:JSphInitializeOp_FluidVel	access:private
JSphMk	JSphMk.cpp	/^JSphMk::JSphMk(){$/;"	f	class:JSphMk	signature:()
JSphMk	JSphMk.h	/^  JSphMk();$/;"	p	class:JSphMk	access:public	signature:()
JSphMk	JSphMk.h	/^class JSphMk : protected JObject$/;"	c	inherits:JObject
JSphMk::CodeNewFluid	JSphMk.h	/^  typecode CodeNewFluid;     \/\/\/<Code for new fluid particles created during the simulation.$/;"	m	class:JSphMk	access:private
JSphMk::CodeSetType	JSphMk.cpp	/^typecode JSphMk::CodeSetType(typecode code,TpParticles type,unsigned value)const{$/;"	f	class:JSphMk	signature:(typecode code,TpParticles type,unsigned value) const
JSphMk::CodeSetType	JSphMk.h	/^  typecode CodeSetType(typecode code,TpParticles type,unsigned value)const;$/;"	p	class:JSphMk	access:public	signature:(typecode code,TpParticles type,unsigned value) const
JSphMk::ComputeMkDomains	JSphMk.cpp	/^void JSphMk::ComputeMkDomains(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSphMk	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSphMk::ComputeMkDomains	JSphMk.h	/^  void ComputeMkDomains(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSphMk	access:public	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSphMk::Config	JSphMk.cpp	/^void JSphMk::Config(const JSpaceParts *parts){$/;"	f	class:JSphMk	signature:(const JSpaceParts *parts)
JSphMk::Config	JSphMk.h	/^  void Config(const JSpaceParts *parts);$/;"	p	class:JSphMk	access:public	signature:(const JSpaceParts *parts)
JSphMk::ConfigPartDataHead	JSphMk.cpp	/^void JSphMk::ConfigPartDataHead(JPartDataHead *parthead)const{$/;"	f	class:JSphMk	signature:(JPartDataHead *parthead) const
JSphMk::ConfigPartDataHead	JSphMk.h	/^  void ConfigPartDataHead(JPartDataHead *parthead)const;$/;"	p	class:JSphMk	access:public	signature:(JPartDataHead *parthead) const
JSphMk::CountBlockType	JSphMk.cpp	/^unsigned JSphMk::CountBlockType(TpParticles type)const{$/;"	f	class:JSphMk	signature:(TpParticles type) const
JSphMk::CountBlockType	JSphMk.h	/^  unsigned CountBlockType(TpParticles type)const;$/;"	p	class:JSphMk	access:public	signature:(TpParticles type) const
JSphMk::GetCodeById	JSphMk.cpp	/^typecode JSphMk::GetCodeById(unsigned id)const{$/;"	f	class:JSphMk	signature:(unsigned id) const
JSphMk::GetCodeById	JSphMk.h	/^  typecode GetCodeById(unsigned id)const;$/;"	p	class:JSphMk	access:public	signature:(unsigned id) const
JSphMk::GetCodeNewFluid	JSphMk.h	/^  typecode GetCodeNewFluid()const{ return(CodeNewFluid); }$/;"	f	class:JSphMk	access:public	signature:() const
JSphMk::GetFirstBlockType	JSphMk.cpp	/^unsigned JSphMk::GetFirstBlockType(TpParticles type)const{$/;"	f	class:JSphMk	signature:(TpParticles type) const
JSphMk::GetFirstBlockType	JSphMk.h	/^  unsigned GetFirstBlockType(TpParticles type)const;$/;"	p	class:JSphMk	access:public	signature:(TpParticles type) const
JSphMk::GetMkBlockByCode	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByCode(typecode code)const{$/;"	f	class:JSphMk	signature:(typecode code) const
JSphMk::GetMkBlockByCode	JSphMk.h	/^  unsigned GetMkBlockByCode(typecode code)const;$/;"	p	class:JSphMk	access:public	signature:(typecode code) const
JSphMk::GetMkBlockById	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockById(unsigned id)const{$/;"	f	class:JSphMk	signature:(unsigned id) const
JSphMk::GetMkBlockById	JSphMk.h	/^  unsigned GetMkBlockById(unsigned id)const;$/;"	p	class:JSphMk	access:public	signature:(unsigned id) const
JSphMk::GetMkBlockByMk	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMk(word mk)const{$/;"	f	class:JSphMk	signature:(word mk) const
JSphMk::GetMkBlockByMk	JSphMk.h	/^  unsigned GetMkBlockByMk(word mk)const;$/;"	p	class:JSphMk	access:public	signature:(word mk) const
JSphMk::GetMkBlockByMkBound	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMkBound(word mkbound)const{$/;"	f	class:JSphMk	signature:(word mkbound) const
JSphMk::GetMkBlockByMkBound	JSphMk.h	/^  unsigned GetMkBlockByMkBound(word mkbound)const;$/;"	p	class:JSphMk	access:public	signature:(word mkbound) const
JSphMk::GetMkBlockByMkFluid	JSphMk.cpp	/^unsigned JSphMk::GetMkBlockByMkFluid(word mkfluid)const{$/;"	f	class:JSphMk	signature:(word mkfluid) const
JSphMk::GetMkBlockByMkFluid	JSphMk.h	/^  unsigned GetMkBlockByMkFluid(word mkfluid)const;$/;"	p	class:JSphMk	access:public	signature:(word mkfluid) const
JSphMk::GetMkBoundFirst	JSphMk.h	/^  word GetMkBoundFirst()const{ return(MkBoundFirst); }$/;"	f	class:JSphMk	access:public	signature:() const
JSphMk::GetMkFluidFirst	JSphMk.h	/^  word GetMkFluidFirst()const{ return(MkFluidFirst); }$/;"	f	class:JSphMk	access:public	signature:() const
JSphMk::JSphMk	JSphMk.cpp	/^JSphMk::JSphMk(){$/;"	f	class:JSphMk	signature:()
JSphMk::JSphMk	JSphMk.h	/^  JSphMk();$/;"	p	class:JSphMk	access:public	signature:()
JSphMk::MkBoundFirst	JSphMk.h	/^  word MkBoundFirst;     \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JSphMk	access:private
JSphMk::MkFluidFirst	JSphMk.h	/^  word MkFluidFirst;     \/\/\/<First Mk for fluid blocks (Mk=MkFluid+MkFluidFirst).$/;"	m	class:JSphMk	access:private
JSphMk::MkList	JSphMk.h	/^  std::vector<JSphMkBlock*> MkList;$/;"	m	class:JSphMk	access:private
JSphMk::MkListBound	JSphMk.h	/^  unsigned MkListBound;      \/\/\/<Number of Mk blocks of boundary types. MkListBound=MkListFixed+MkListMoving+MkListFloat$/;"	m	class:JSphMk	access:private
JSphMk::MkListFixed	JSphMk.h	/^  unsigned MkListFixed;      \/\/\/<Number of Mk blocks of fixed type.$/;"	m	class:JSphMk	access:private
JSphMk::MkListFloat	JSphMk.h	/^  unsigned MkListFloat;      \/\/\/<Number of Mk blocks of floating type.$/;"	m	class:JSphMk	access:private
JSphMk::MkListFluid	JSphMk.h	/^  unsigned MkListFluid;      \/\/\/<Number of Mk blocks of fluid type.$/;"	m	class:JSphMk	access:private
JSphMk::MkListMoving	JSphMk.h	/^  unsigned MkListMoving;     \/\/\/<Number of Mk blocks of moving type.$/;"	m	class:JSphMk	access:private
JSphMk::MkListSize	JSphMk.h	/^  unsigned MkListSize;       \/\/\/<Total number of Mk blocks.$/;"	m	class:JSphMk	access:private
JSphMk::Mkblock	JSphMk.h	/^  const JSphMkBlock* Mkblock(unsigned c)const{ return(MkList[c]); }$/;"	f	class:JSphMk	access:public	signature:(unsigned c) const
JSphMk::Reset	JSphMk.cpp	/^void JSphMk::Reset(){$/;"	f	class:JSphMk	signature:()
JSphMk::Reset	JSphMk.h	/^  void Reset();$/;"	p	class:JSphMk	access:public	signature:()
JSphMk::Size	JSphMk.h	/^  unsigned Size()const{ return(MkListSize); }$/;"	f	class:JSphMk	access:public	signature:() const
JSphMk::~JSphMk	JSphMk.cpp	/^JSphMk::~JSphMk(){$/;"	f	class:JSphMk	signature:()
JSphMk::~JSphMk	JSphMk.h	/^  ~JSphMk();$/;"	p	class:JSphMk	access:public	signature:()
JSphMkBlock	JSphMk.cpp	/^JSphMkBlock::JSphMkBlock(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)$/;"	f	class:JSphMkBlock	signature:(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)
JSphMkBlock	JSphMk.h	/^  JSphMkBlock(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count);$/;"	p	class:JSphMkBlock	access:public	signature:(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)
JSphMkBlock	JSphMk.h	/^class JSphMkBlock : public JObject$/;"	c	inherits:JObject
JSphMkBlock::Begin	JSphMk.h	/^  const unsigned Begin;   \/\/\/<Id of the first particle of the block.$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::Bound	JSphMk.h	/^  const bool Bound;       \/\/\/<Indicates whether a particle is boundary or not.$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::Code	JSphMk.h	/^  const typecode Code;$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::Count	JSphMk.h	/^  const unsigned Count;   \/\/\/<Number of particles.$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::GetPosDefined	JSphMk.h	/^  bool GetPosDefined()const{ return(PosDefined); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
JSphMkBlock::GetPosMax	JSphMk.h	/^  tdouble3 GetPosMax()const{ return(PosMax); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
JSphMkBlock::GetPosMin	JSphMk.h	/^  tdouble3 GetPosMin()const{ return(PosMin); }$/;"	f	class:JSphMkBlock	access:public	signature:() const
JSphMkBlock::JSphMkBlock	JSphMk.cpp	/^JSphMkBlock::JSphMkBlock(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)$/;"	f	class:JSphMkBlock	signature:(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)
JSphMkBlock::JSphMkBlock	JSphMk.h	/^  JSphMkBlock(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count);$/;"	p	class:JSphMkBlock	access:public	signature:(TpParticles type,unsigned mktype,unsigned mk,typecode code,unsigned begin,unsigned count)
JSphMkBlock::Mk	JSphMk.h	/^  const unsigned Mk;      \/\/\/<Absolute label.$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::MkType	JSphMk.h	/^  const unsigned MkType;  \/\/\/<Label of block fluid or bound.$/;"	m	class:JSphMkBlock	access:public
JSphMkBlock::PosDefined	JSphMk.h	/^  bool PosDefined;$/;"	m	class:JSphMkBlock	access:private
JSphMkBlock::PosMax	JSphMk.h	/^  tdouble3 PosMax;$/;"	m	class:JSphMkBlock	access:private
JSphMkBlock::PosMin	JSphMk.h	/^  tdouble3 PosMin;$/;"	m	class:JSphMkBlock	access:private
JSphMkBlock::Reset	JSphMk.cpp	/^void JSphMkBlock::Reset(){$/;"	f	class:JSphMkBlock	signature:()
JSphMkBlock::Reset	JSphMk.h	/^  void Reset();$/;"	p	class:JSphMkBlock	access:public	signature:()
JSphMkBlock::SetPosMinMax	JSphMk.h	/^  void SetPosMinMax(const tdouble3 &pmin,const tdouble3 &pmax){ PosDefined=true; PosMin=pmin; PosMax=pmax; }$/;"	f	class:JSphMkBlock	access:public	signature:(const tdouble3 &pmin,const tdouble3 &pmax)
JSphMkBlock::Type	JSphMk.h	/^  const TpParticles Type; \/\/\/<Type of particle.$/;"	m	class:JSphMkBlock	access:public
JSphMotion	JSphMotion.cpp	/^JSphMotion::JSphMotion(){$/;"	f	class:JSphMotion	signature:()
JSphMotion	JSphMotion.h	/^  JSphMotion();$/;"	p	class:JSphMotion	access:public	signature:()
JSphMotion	JSphMotion.h	/^class JSphMotion : protected JObject$/;"	c	inherits:JObject
JSphMotion::ActiveMotion	JSphMotion.h	/^  bool ActiveMotion;    \/\/\/<Indicates active motions after executing ProcesTime().$/;"	m	class:JSphMotion	access:private
JSphMotion::ConfigObjects	JSphMotion.cpp	/^void JSphMotion::ConfigObjects(const JSpaceParts *parts){$/;"	f	class:JSphMotion	signature:(const JSpaceParts *parts)
JSphMotion::ConfigObjects	JSphMotion.h	/^  void ConfigObjects(const JSpaceParts *parts);$/;"	p	class:JSphMotion	access:private	signature:(const JSpaceParts *parts)
JSphMotion::GetActiveMotion	JSphMotion.h	/^  bool GetActiveMotion()const{ return(ActiveMotion); }$/;"	f	class:JSphMotion	access:public	signature:() const
JSphMotion::GetNumObjects	JSphMotion.h	/^  unsigned GetNumObjects()const{ return(ObjCount); };$/;"	f	class:JSphMotion	access:public	signature:() const
JSphMotion::GetObjBegin	JSphMotion.cpp	/^unsigned JSphMotion::GetObjBegin(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
JSphMotion::GetObjBegin	JSphMotion.h	/^  unsigned GetObjBegin(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
JSphMotion::GetObjIdxByMkBound	JSphMotion.cpp	/^unsigned JSphMotion::GetObjIdxByMkBound(word mkbound)const{$/;"	f	class:JSphMotion	signature:(word mkbound) const
JSphMotion::GetObjIdxByMkBound	JSphMotion.h	/^  unsigned GetObjIdxByMkBound(word mkbound)const;$/;"	p	class:JSphMotion	access:public	signature:(word mkbound) const
JSphMotion::GetObjMkBound	JSphMotion.cpp	/^word JSphMotion::GetObjMkBound(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
JSphMotion::GetObjMkBound	JSphMotion.h	/^  word GetObjMkBound(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
JSphMotion::GetObjSize	JSphMotion.cpp	/^unsigned JSphMotion::GetObjSize(unsigned idx)const{$/;"	f	class:JSphMotion	signature:(unsigned idx) const
JSphMotion::GetObjSize	JSphMotion.h	/^  unsigned GetObjSize(unsigned idx)const;$/;"	p	class:JSphMotion	access:public	signature:(unsigned idx) const
JSphMotion::Init	JSphMotion.cpp	/^void JSphMotion::Init(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata){$/;"	f	class:JSphMotion	signature:(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata)
JSphMotion::Init	JSphMotion.h	/^  void Init(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata);$/;"	p	class:JSphMotion	access:public	signature:(const JSpaceParts *parts,JXml *jxml,const std::string &path,const std::string &dirdata)
JSphMotion::JSphMotion	JSphMotion.cpp	/^JSphMotion::JSphMotion(){$/;"	f	class:JSphMotion	signature:()
JSphMotion::JSphMotion	JSphMotion.h	/^  JSphMotion();$/;"	p	class:JSphMotion	access:public	signature:()
JSphMotion::MOMT_Ace2dt	JSphMotion.h	/^    MOMT_Ace2dt=1,  \/\/\/<Calculates acceleration using one dt in the future (always from the beginning).$/;"	e	enum:JSphMotion::__anon36
JSphMotion::MOMT_Simple	JSphMotion.h	/^    MOMT_Simple=0,  \/\/\/<Simple mode for only forward.$/;"	e	enum:JSphMotion::__anon36
JSphMotion::Mot	JSphMotion.h	/^  JMotion *Mot;$/;"	m	class:JSphMotion	access:private
JSphMotion::ObjBegin	JSphMotion.h	/^  unsigned *ObjBegin;   \/\/\/<Initial particle of each moving object. [ObjCount+1]$/;"	m	class:JSphMotion	access:private
JSphMotion::ObjCount	JSphMotion.h	/^  unsigned ObjCount;    \/\/\/<Number of moving objects.$/;"	m	class:JSphMotion	access:private
JSphMotion::ObjMkBound	JSphMotion.h	/^  word     *ObjMkBound; \/\/\/<MkBound of each moving object. [ObjCount]$/;"	m	class:JSphMotion	access:private
JSphMotion::ProcesTime	JSphMotion.cpp	/^bool JSphMotion::ProcesTime(TpMotionMode mode,double timestep,double dt){$/;"	f	class:JSphMotion	signature:(TpMotionMode mode,double timestep,double dt)
JSphMotion::ProcesTime	JSphMotion.h	/^  bool ProcesTime(TpMotionMode mode,double timestep,double dt);$/;"	p	class:JSphMotion	access:public	signature:(TpMotionMode mode,double timestep,double dt)
JSphMotion::ProcesTimeGetData	JSphMotion.cpp	/^bool JSphMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JSphMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2 ,unsigned &nparts,unsigned &idbegin) const
JSphMotion::ProcesTimeGetData	JSphMotion.cpp	/^bool JSphMotion::ProcesTimeGetData(unsigned ref,word &mkbound$/;"	f	class:JSphMotion	signature:(unsigned ref,word &mkbound ,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JSphMotion::ProcesTimeGetData	JSphMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	p	class:JSphMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2 ,unsigned &nparts,unsigned &idbegin) const
JSphMotion::ProcesTimeGetData	JSphMotion.h	/^  bool ProcesTimeGetData(unsigned ref,word &mkbound$/;"	p	class:JSphMotion	access:public	signature:(unsigned ref,word &mkbound ,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
JSphMotion::Reset	JSphMotion.cpp	/^void JSphMotion::Reset(){$/;"	f	class:JSphMotion	signature:()
JSphMotion::Reset	JSphMotion.h	/^  void Reset();$/;"	p	class:JSphMotion	access:public	signature:()
JSphMotion::SetTimeMod	JSphMotion.h	/^  void SetTimeMod(double timemod){ TimeMod=timemod; };$/;"	f	class:JSphMotion	access:public	signature:(double timemod)
JSphMotion::TimeMod	JSphMotion.h	/^  double TimeMod;       \/\/\/<Modifies the timestep for motion | Modificador del TimeStep para Motion.$/;"	m	class:JSphMotion	access:private
JSphMotion::TpMotionMode	JSphMotion.h	/^  }TpMotionMode;   $/;"	t	class:JSphMotion	typeref:enum:JSphMotion::__anon36	access:public
JSphMotion::~JSphMotion	JSphMotion.cpp	/^JSphMotion::~JSphMotion(){$/;"	f	class:JSphMotion	signature:()
JSphMotion::~JSphMotion	JSphMotion.h	/^  ~JSphMotion();$/;"	p	class:JSphMotion	access:public	signature:()
JSphPartsInit	JSphPartsInit.cpp	/^JSphPartsInit::JSphPartsInit(bool simulate2d,double simulate2dposy,double dp$/;"	f	class:JSphPartsInit	signature:(bool simulate2d,double simulate2dposy,double dp ,const JSphMk* mkinfo,unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit	JSphPartsInit.h	/^  JSphPartsInit(bool simulate2d,double simulate2dposy,double dp$/;"	p	class:JSphPartsInit	access:public	signature:(bool simulate2d,double simulate2dposy,double dp ,const JSphMk* mkinfo,unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit	JSphPartsInit.h	/^class JSphPartsInit : protected JObject$/;"	c	inherits:JObject
JSphPartsInit::Code	JSphPartsInit.h	/^  typecode *Code;$/;"	m	class:JSphPartsInit	access:private
JSphPartsInit::Dp	JSphPartsInit.h	/^  const double Dp;               \/\/\/<Distance between particles.$/;"	m	class:JSphPartsInit	access:public
JSphPartsInit::FreeParticleData	JSphPartsInit.cpp	/^void JSphPartsInit::FreeParticleData(){$/;"	f	class:JSphPartsInit	signature:()
JSphPartsInit::FreeParticleData	JSphPartsInit.h	/^  void FreeParticleData();$/;"	p	class:JSphPartsInit	access:private	signature:()
JSphPartsInit::GetCode	JSphPartsInit.h	/^  const typecode* GetCode()const{ return(Code); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
JSphPartsInit::GetMkInfo	JSphPartsInit.h	/^  const JSphMk* GetMkInfo()const{ return(MkInfo); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
JSphPartsInit::GetNp	JSphPartsInit.h	/^  unsigned GetNp()const{ return(Np); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
JSphPartsInit::GetPos	JSphPartsInit.h	/^  const tdouble3* GetPos()const{ return(Pos); }$/;"	f	class:JSphPartsInit	access:public	signature:() const
JSphPartsInit::JSphPartsInit	JSphPartsInit.cpp	/^JSphPartsInit::JSphPartsInit(bool simulate2d,double simulate2dposy,double dp$/;"	f	class:JSphPartsInit	signature:(bool simulate2d,double simulate2dposy,double dp ,const JSphMk* mkinfo,unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit::JSphPartsInit	JSphPartsInit.h	/^  JSphPartsInit(bool simulate2d,double simulate2dposy,double dp$/;"	p	class:JSphPartsInit	access:public	signature:(bool simulate2d,double simulate2dposy,double dp ,const JSphMk* mkinfo,unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit::LoadParticleData	JSphPartsInit.cpp	/^void JSphPartsInit::LoadParticleData(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSphPartsInit	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit::LoadParticleData	JSphPartsInit.h	/^  void LoadParticleData(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSphPartsInit	access:private	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
JSphPartsInit::MkInfo	JSphPartsInit.h	/^  const JSphMk* MkInfo;$/;"	m	class:JSphPartsInit	access:private
JSphPartsInit::Np	JSphPartsInit.h	/^  unsigned Np;$/;"	m	class:JSphPartsInit	access:private
JSphPartsInit::Pos	JSphPartsInit.h	/^  tdouble3 *Pos;$/;"	m	class:JSphPartsInit	access:private
JSphPartsInit::Reset	JSphPartsInit.cpp	/^void JSphPartsInit::Reset(){$/;"	f	class:JSphPartsInit	signature:()
JSphPartsInit::Reset	JSphPartsInit.h	/^  void Reset();$/;"	p	class:JSphPartsInit	access:public	signature:()
JSphPartsInit::Simulate2D	JSphPartsInit.h	/^  const bool Simulate2D;         \/\/\/<Indicates 2D simulation.$/;"	m	class:JSphPartsInit	access:public
JSphPartsInit::Simulate2DPosY	JSphPartsInit.h	/^  const double Simulate2DPosY;   \/\/\/<Y value in 2D simulations.$/;"	m	class:JSphPartsInit	access:public
JSphPartsInit::~JSphPartsInit	JSphPartsInit.cpp	/^JSphPartsInit::~JSphPartsInit(){$/;"	f	class:JSphPartsInit	signature:()
JSphPartsInit::~JSphPartsInit	JSphPartsInit.h	/^  ~JSphPartsInit();$/;"	p	class:JSphPartsInit	access:public	signature:()
JSphVisco	JSphVisco.cpp	/^JSphVisco::JSphVisco(){$/;"	f	class:JSphVisco	signature:()
JSphVisco	JSphVisco.h	/^  JSphVisco();$/;"	p	class:JSphVisco	access:public	signature:()
JSphVisco	JSphVisco.h	/^class JSphVisco : protected JObject$/;"	c	inherits:JObject
JSphVisco::Count	JSphVisco.h	/^  unsigned Count;$/;"	m	class:JSphVisco	access:protected
JSphVisco::FILESIZEMAX	JSphVisco.h	/^  static const unsigned FILESIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphVisco	access:protected
JSphVisco::File	JSphVisco.h	/^  std::string File;$/;"	m	class:JSphVisco	access:protected
JSphVisco::GetAllocMemory	JSphVisco.cpp	/^unsigned JSphVisco::GetAllocMemory()const{$/;"	f	class:JSphVisco	signature:() const
JSphVisco::GetAllocMemory	JSphVisco.h	/^  unsigned GetAllocMemory()const;$/;"	p	class:JSphVisco	access:public	signature:() const
JSphVisco::GetFile	JSphVisco.h	/^  std::string GetFile()const{ return(File); };$/;"	f	class:JSphVisco	access:public	signature:() const
JSphVisco::GetVisco	JSphVisco.cpp	/^float JSphVisco::GetVisco(float timestep){$/;"	f	class:JSphVisco	signature:(float timestep)
JSphVisco::GetVisco	JSphVisco.h	/^  float GetVisco(float timestep);$/;"	p	class:JSphVisco	access:public	signature:(float timestep)
JSphVisco::JSphVisco	JSphVisco.cpp	/^JSphVisco::JSphVisco(){$/;"	f	class:JSphVisco	signature:()
JSphVisco::JSphVisco	JSphVisco.h	/^  JSphVisco();$/;"	p	class:JSphVisco	access:public	signature:()
JSphVisco::LoadFile	JSphVisco.cpp	/^void JSphVisco::LoadFile(std::string file){$/;"	f	class:JSphVisco	signature:(std::string file)
JSphVisco::LoadFile	JSphVisco.h	/^  void LoadFile(std::string file);$/;"	p	class:JSphVisco	access:public	signature:(std::string file)
JSphVisco::Position	JSphVisco.h	/^  unsigned Position;$/;"	m	class:JSphVisco	access:protected
JSphVisco::Reset	JSphVisco.cpp	/^void JSphVisco::Reset(){$/;"	f	class:JSphVisco	signature:()
JSphVisco::Reset	JSphVisco.h	/^  void Reset();$/;"	p	class:JSphVisco	access:public	signature:()
JSphVisco::Resize	JSphVisco.cpp	/^void JSphVisco::Resize(unsigned size){$/;"	f	class:JSphVisco	signature:(unsigned size)
JSphVisco::Resize	JSphVisco.h	/^  void Resize(unsigned size);$/;"	p	class:JSphVisco	access:protected	signature:(unsigned size)
JSphVisco::Size	JSphVisco.h	/^  unsigned Size;$/;"	m	class:JSphVisco	access:protected
JSphVisco::Times	JSphVisco.h	/^  float *Times;$/;"	m	class:JSphVisco	access:protected
JSphVisco::Values	JSphVisco.h	/^  float *Values;$/;"	m	class:JSphVisco	access:protected
JSphVisco::~JSphVisco	JSphVisco.cpp	/^JSphVisco::~JSphVisco(){$/;"	f	class:JSphVisco	signature:()
JSphVisco::~JSphVisco	JSphVisco.h	/^  ~JSphVisco();$/;"	p	class:JSphVisco	access:public	signature:()
JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(const std::string &times){$/;"	f	class:JTimeControl	signature:(const std::string &times)
JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(double tfirst,double tout){$/;"	f	class:JTimeControl	signature:(double tfirst,double tout)
JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(double tout){$/;"	f	class:JTimeControl	signature:(double tout)
JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(unsigned ntimes,const double *vtimes){$/;"	f	class:JTimeControl	signature:(unsigned ntimes,const double *vtimes)
JTimeControl	JTimeControl.h	/^  JTimeControl(const std::string &times);$/;"	p	class:JTimeControl	access:public	signature:(const std::string &times)
JTimeControl	JTimeControl.h	/^  JTimeControl(double tfirst,double tout);$/;"	p	class:JTimeControl	access:public	signature:(double tfirst,double tout)
JTimeControl	JTimeControl.h	/^  JTimeControl(double tout);$/;"	p	class:JTimeControl	access:public	signature:(double tout)
JTimeControl	JTimeControl.h	/^  JTimeControl(unsigned ntimes,const double *vtimes);$/;"	p	class:JTimeControl	access:public	signature:(unsigned ntimes,const double *vtimes)
JTimeControl	JTimeControl.h	/^class JTimeControl : protected JObject$/;"	c	inherits:JObject
JTimeControl::Active	JTimeControl.h	/^  bool Active;$/;"	m	class:JTimeControl	access:protected
JTimeControl::CalcNextTime	JTimeControl.cpp	/^double JTimeControl::CalcNextTime(){$/;"	f	class:JTimeControl	signature:()
JTimeControl::CalcNextTime	JTimeControl.h	/^  double CalcNextTime();$/;"	p	class:JTimeControl	access:protected	signature:()
JTimeControl::CheckRealTime	JTimeControl.cpp	/^bool JTimeControl::CheckRealTime(){$/;"	f	class:JTimeControl	signature:()
JTimeControl::CheckRealTime	JTimeControl.h	/^  bool CheckRealTime();$/;"	p	class:JTimeControl	access:protected	signature:()
JTimeControl::CheckTime	JTimeControl.h	/^  bool CheckTime(){$/;"	f	class:JTimeControl	access:public	signature:()
JTimeControl::ConfigPeriodic	JTimeControl.cpp	/^void JTimeControl::ConfigPeriodic(double tfirst,double tout){$/;"	f	class:JTimeControl	signature:(double tfirst,double tout)
JTimeControl::ConfigPeriodic	JTimeControl.h	/^  void ConfigPeriodic(double tfirst,double tout);$/;"	p	class:JTimeControl	access:protected	signature:(double tfirst,double tout)
JTimeControl::ConfigTimes	JTimeControl.cpp	/^void JTimeControl::ConfigTimes(std::string times){$/;"	f	class:JTimeControl	signature:(std::string times)
JTimeControl::ConfigTimes	JTimeControl.cpp	/^void JTimeControl::ConfigTimes(unsigned ntimes,const double *vtimes){$/;"	f	class:JTimeControl	signature:(unsigned ntimes,const double *vtimes)
JTimeControl::ConfigTimes	JTimeControl.h	/^  void ConfigTimes(std::string times);$/;"	p	class:JTimeControl	access:protected	signature:(std::string times)
JTimeControl::ConfigTimes	JTimeControl.h	/^  void ConfigTimes(unsigned ntimes,const double *vtimes);$/;"	p	class:JTimeControl	access:protected	signature:(unsigned ntimes,const double *vtimes)
JTimeControl::FirstTime	JTimeControl.h	/^  double FirstTime;     \/\/\/<First time to evaluate (when it is less than timeout and not zero). | Primer instante a evaluar (cuando es menor que timeout y no es cero).$/;"	m	class:JTimeControl	access:protected
JTimeControl::GetInfoFinish	JTimeControl.cpp	/^std::string JTimeControl::GetInfoFinish(double done){$/;"	f	class:JTimeControl	signature:(double done)
JTimeControl::GetInfoFinish	JTimeControl.h	/^  std::string GetInfoFinish(double done);$/;"	p	class:JTimeControl	access:public	signature:(double done)
JTimeControl::GetLastTime	JTimeControl.h	/^  double GetLastTime()const{ return(LastTime); }$/;"	f	class:JTimeControl	access:public	signature:() const
JTimeControl::IteNum	JTimeControl.h	/^  unsigned IteNum;  \/\/\/<Number of iterations. | Numero de iteraciones.$/;"	m	class:JTimeControl	access:protected
JTimeControl::IteStart	JTimeControl.h	/^  double IteStart;  \/\/\/<Instant to start (IteNum is initialized). | Instante en que empieza (se inicializa IteNum).$/;"	m	class:JTimeControl	access:protected
JTimeControl::JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(const std::string &times){$/;"	f	class:JTimeControl	signature:(const std::string &times)
JTimeControl::JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(double tfirst,double tout){$/;"	f	class:JTimeControl	signature:(double tfirst,double tout)
JTimeControl::JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(double tout){$/;"	f	class:JTimeControl	signature:(double tout)
JTimeControl::JTimeControl	JTimeControl.cpp	/^JTimeControl::JTimeControl(unsigned ntimes,const double *vtimes){$/;"	f	class:JTimeControl	signature:(unsigned ntimes,const double *vtimes)
JTimeControl::JTimeControl	JTimeControl.h	/^  JTimeControl(const std::string &times);$/;"	p	class:JTimeControl	access:public	signature:(const std::string &times)
JTimeControl::JTimeControl	JTimeControl.h	/^  JTimeControl(double tfirst,double tout);$/;"	p	class:JTimeControl	access:public	signature:(double tfirst,double tout)
JTimeControl::JTimeControl	JTimeControl.h	/^  JTimeControl(double tout);$/;"	p	class:JTimeControl	access:public	signature:(double tout)
JTimeControl::JTimeControl	JTimeControl.h	/^  JTimeControl(unsigned ntimes,const double *vtimes);$/;"	p	class:JTimeControl	access:public	signature:(unsigned ntimes,const double *vtimes)
JTimeControl::LastTime	JTimeControl.h	/^  double LastTime;$/;"	m	class:JTimeControl	access:protected
JTimeControl::NextIte	JTimeControl.h	/^  unsigned NextIte; \/\/\/<Next iteration to check. | Siguiente iteracion a comprobar.$/;"	m	class:JTimeControl	access:protected
JTimeControl::NextTime	JTimeControl.h	/^  double NextTime;$/;"	m	class:JTimeControl	access:protected
JTimeControl::Periodic	JTimeControl.h	/^  bool Periodic;        \/\/\/<For periodic intervals of TimeOut. | Para intervalos periodicos de TimeOut.$/;"	m	class:JTimeControl	access:protected
JTimeControl::PrepareTimes	JTimeControl.cpp	/^void JTimeControl::PrepareTimes(){$/;"	f	class:JTimeControl	signature:()
JTimeControl::PrepareTimes	JTimeControl.h	/^  void PrepareTimes();$/;"	p	class:JTimeControl	access:protected	signature:()
JTimeControl::Reset	JTimeControl.cpp	/^void JTimeControl::Reset(){$/;"	f	class:JTimeControl	signature:()
JTimeControl::Reset	JTimeControl.h	/^  void Reset();$/;"	p	class:JTimeControl	access:public	signature:()
JTimeControl::TimeOut	JTimeControl.h	/^  double TimeOut;       \/\/\/<Periodic interval duration (in seconds). | Duracion de intervalo periodico (en segundos).$/;"	m	class:JTimeControl	access:protected
JTimeControl::TimeOutNum	JTimeControl.h	/^  unsigned TimeOutNum;  \/\/<Number of intervals processed with Periodic or Times. | Numero de intervalos procesados con Periodic o Times.$/;"	m	class:JTimeControl	access:protected
JTimeControl::Timer	JTimeControl.h	/^  JTimer Timer;$/;"	m	class:JTimeControl	access:protected
JTimeControl::Times	JTimeControl.h	/^  std::vector<double> Times; \/\/\/<List of times when it is not periodic. | Lista de tiempos cuando no es Periodic.$/;"	m	class:JTimeControl	access:protected
JTimeControl::TimesSize	JTimeControl.h	/^  unsigned TimesSize;        \/\/\/<Number of elements of Times. | Numero de elementos de Times. $/;"	m	class:JTimeControl	access:protected
JTimeOut	JTimeOut.cpp	/^JTimeOut::JTimeOut(){$/;"	f	class:JTimeOut	signature:()
JTimeOut	JTimeOut.h	/^  JTimeOut();$/;"	p	class:JTimeOut	access:public	signature:()
JTimeOut	JTimeOut.h	/^class JTimeOut : protected JObject$/;"	c	inherits:JObject
JTimeOut::AddTimeOut	JTimeOut.cpp	/^bool JTimeOut::AddTimeOut(double t,double tout){$/;"	f	class:JTimeOut	signature:(double t,double tout)
JTimeOut::AddTimeOut	JTimeOut.h	/^  bool AddTimeOut(double t,double tout);$/;"	p	class:JTimeOut	access:protected	signature:(double t,double tout)
JTimeOut::Config	JTimeOut.cpp	/^void JTimeOut::Config(double timeoutdef){$/;"	f	class:JTimeOut	signature:(double timeoutdef)
JTimeOut::Config	JTimeOut.cpp	/^void JTimeOut::Config(std::string filexml,const std::string &place,double timeoutdef){$/;"	f	class:JTimeOut	signature:(std::string filexml,const std::string &place,double timeoutdef)
JTimeOut::Config	JTimeOut.h	/^  void Config(double timeoutdef);$/;"	p	class:JTimeOut	access:public	signature:(double timeoutdef)
JTimeOut::Config	JTimeOut.h	/^  void Config(std::string filexml,const std::string &place,double timeoutdef);$/;"	p	class:JTimeOut	access:public	signature:(std::string filexml,const std::string &place,double timeoutdef)
JTimeOut::GetCount	JTimeOut.h	/^  unsigned GetCount()const{ return(unsigned(Times.size())); }$/;"	f	class:JTimeOut	access:protected	signature:() const
JTimeOut::GetNextTime	JTimeOut.cpp	/^double JTimeOut::GetNextTime(double t){$/;"	f	class:JTimeOut	signature:(double t)
JTimeOut::GetNextTime	JTimeOut.h	/^  double GetNextTime(double t);$/;"	p	class:JTimeOut	access:public	signature:(double t)
JTimeOut::JTimeOut	JTimeOut.cpp	/^JTimeOut::JTimeOut(){$/;"	f	class:JTimeOut	signature:()
JTimeOut::JTimeOut	JTimeOut.h	/^  JTimeOut();$/;"	p	class:JTimeOut	access:public	signature:()
JTimeOut::LoadXml	JTimeOut.cpp	/^void JTimeOut::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JTimeOut	signature:(JXml *sxml,const std::string &place)
JTimeOut::LoadXml	JTimeOut.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JTimeOut	access:protected	signature:(JXml *sxml,const std::string &place)
JTimeOut::ReadXml	JTimeOut.cpp	/^void JTimeOut::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JTimeOut	signature:(JXml *sxml,TiXmlElement* ele)
JTimeOut::ReadXml	JTimeOut.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JTimeOut	access:protected	signature:(JXml *sxml,TiXmlElement* ele)
JTimeOut::Reset	JTimeOut.cpp	/^void JTimeOut::Reset(){$/;"	f	class:JTimeOut	signature:()
JTimeOut::Reset	JTimeOut.h	/^  void Reset();$/;"	p	class:JTimeOut	access:public	signature:()
JTimeOut::SpecialConfig	JTimeOut.h	/^  bool SpecialConfig; \/\/\/<Configuration loaded from XML file in special section.$/;"	m	class:JTimeOut	access:protected
JTimeOut::StTimeOut	JTimeOut.h	/^  }StTimeOut;$/;"	t	class:JTimeOut	typeref:struct:JTimeOut::__anon41	access:protected
JTimeOut::TimeBase	JTimeOut.h	/^  unsigned TimeBase;$/;"	m	class:JTimeOut	access:protected
JTimeOut::Times	JTimeOut.h	/^  std::vector<StTimeOut> Times;  \/\/\/<List values for timeout.$/;"	m	class:JTimeOut	access:protected
JTimeOut::UseSpecialConfig	JTimeOut.h	/^  bool UseSpecialConfig()const{ return(SpecialConfig); }$/;"	f	class:JTimeOut	access:public	signature:() const
JTimeOut::VisuConfig	JTimeOut.cpp	/^void JTimeOut::VisuConfig(JLog2 *log,std::string txhead,std::string txfoot){$/;"	f	class:JTimeOut	signature:(JLog2 *log,std::string txhead,std::string txfoot)
JTimeOut::VisuConfig	JTimeOut.h	/^  void VisuConfig(JLog2 *log,std::string txhead,std::string txfoot);$/;"	p	class:JTimeOut	access:public	signature:(JLog2 *log,std::string txhead,std::string txfoot)
JTimeOut::__anon41::time	JTimeOut.h	/^    double time;$/;"	m	struct:JTimeOut::__anon41	access:public
JTimeOut::__anon41::tout	JTimeOut.h	/^    double tout;$/;"	m	struct:JTimeOut::__anon41	access:public
JTimeOut::~JTimeOut	JTimeOut.cpp	/^JTimeOut::~JTimeOut(){$/;"	f	class:JTimeOut	signature:()
JTimeOut::~JTimeOut	JTimeOut.h	/^  ~JTimeOut();$/;"	p	class:JTimeOut	access:public	signature:()
JTimer	JTimer.h	/^  JTimer(){ QueryPerformanceFrequency(&Freq); Reset(); }$/;"	f	class:JTimer	access:public	signature:()
JTimer	JTimer.h	/^  JTimer(){ Reset(); }$/;"	f	class:JTimer	access:public	signature:()
JTimer	JTimer.h	/^class JTimer$/;"	c
JTimer::CounterEnd	JTimer.h	/^  LARGE_INTEGER CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
JTimer::CounterEnd	JTimer.h	/^  timeval CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
JTimer::CounterIni	JTimer.h	/^  LARGE_INTEGER CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
JTimer::CounterIni	JTimer.h	/^  timeval CounterIni,CounterEnd;$/;"	m	class:JTimer	access:private
JTimer::Freq	JTimer.h	/^  LARGE_INTEGER Freq;$/;"	m	class:JTimer	access:private
JTimer::GetElapsed	JTimer.h	/^  LARGE_INTEGER GetElapsed(){ $/;"	f	class:JTimer	access:private	signature:()
JTimer::GetElapsedTimeD	JTimer.h	/^  double GetElapsedTimeD(){ return((double(GetElapsed().QuadPart)*double(1000))\/double(Freq.QuadPart)); }$/;"	f	class:JTimer	access:public	signature:()
JTimer::GetElapsedTimeD	JTimer.h	/^  double GetElapsedTimeD(){$/;"	f	class:JTimer	access:public	signature:()
JTimer::GetElapsedTimeF	JTimer.h	/^  float GetElapsedTimeF(){ $/;"	f	class:JTimer	access:public	signature:()
JTimer::GetElapsedTimeF	JTimer.h	/^  float GetElapsedTimeF(){ return((float(GetElapsed().QuadPart)*float(1000))\/float(Freq.QuadPart)); }$/;"	f	class:JTimer	access:public	signature:()
JTimer::JTimer	JTimer.h	/^  JTimer(){ QueryPerformanceFrequency(&Freq); Reset(); }$/;"	f	class:JTimer	access:public	signature:()
JTimer::JTimer	JTimer.h	/^  JTimer(){ Reset(); }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Reset	JTimer.h	/^  void Reset(){ Started=Stopped=false; CounterIni.QuadPart=0; CounterEnd.QuadPart=0; }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Reset	JTimer.h	/^  void Reset(){ Started=Stopped=false; CounterIni.tv_sec=0; CounterIni.tv_usec=0; CounterEnd.tv_sec=0; CounterEnd.tv_usec=0; }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Start	JTimer.h	/^  void Start(){ Stopped=false; QueryPerformanceCounter(&CounterIni); Started=true; }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Start	JTimer.h	/^  void Start(){ Stopped=false; gettimeofday(&CounterIni,NULL); Started=true; }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Started	JTimer.h	/^  bool Started,Stopped;$/;"	m	class:JTimer	access:private
JTimer::Stop	JTimer.h	/^  void Stop(){ if(Started){ QueryPerformanceCounter(&CounterEnd); Stopped=true; } }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Stop	JTimer.h	/^  void Stop(){if(Started){ gettimeofday(&CounterEnd,NULL); Stopped=true; } }$/;"	f	class:JTimer	access:public	signature:()
JTimer::Stopped	JTimer.h	/^  bool Started,Stopped;$/;"	m	class:JTimer	access:private
JTimerClock	JTimerClock.h	/^  JTimerClock(){ Reset(); }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock	JTimerClock.h	/^class JTimerClock$/;"	c
JTimerClock::CounterEnd	JTimerClock.h	/^  clock_t CounterIni,CounterEnd;$/;"	m	class:JTimerClock	access:private
JTimerClock::CounterIni	JTimerClock.h	/^  clock_t CounterIni,CounterEnd;$/;"	m	class:JTimerClock	access:private
JTimerClock::GetElapsedTimeD	JTimerClock.h	/^  double GetElapsedTimeD(){ return((double(Stopped? CounterEnd-CounterIni: 0)*double(1000))\/double(CLOCKS_PER_SEC)); }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::GetElapsedTimeF	JTimerClock.h	/^  float GetElapsedTimeF(){ return((float(Stopped? CounterEnd-CounterIni: 0)*float(1000))\/float(CLOCKS_PER_SEC)); }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::JTimerClock	JTimerClock.h	/^  JTimerClock(){ Reset(); }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::Reset	JTimerClock.h	/^  void Reset(){ Stopped=false; CounterIni=0; CounterEnd=0; }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::Start	JTimerClock.h	/^  void Start(){ Stopped=false; CounterIni=clock(); }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::Stop	JTimerClock.h	/^  void Stop(){ CounterEnd=clock(); Stopped=true; }$/;"	f	class:JTimerClock	access:public	signature:()
JTimerClock::Stopped	JTimerClock.h	/^  bool Stopped;$/;"	m	class:JTimerClock	access:private
JTimerCuda	JTimerCuda.h	/^  JTimerCuda(){ EventIni=NULL; EventEnd=NULL; Stopped=false; }$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda	JTimerCuda.h	/^class JTimerCuda$/;"	c
JTimerCuda::EventEnd	JTimerCuda.h	/^  cudaEvent_t EventIni,EventEnd;$/;"	m	class:JTimerCuda	access:private
JTimerCuda::EventIni	JTimerCuda.h	/^  cudaEvent_t EventIni,EventEnd;$/;"	m	class:JTimerCuda	access:private
JTimerCuda::GetElapsedTimeD	JTimerCuda.h	/^  double GetElapsedTimeD(){ return(GetElapsedTimeF()); }$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::GetElapsedTimeF	JTimerCuda.h	/^  float GetElapsedTimeF(){ $/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::JTimerCuda	JTimerCuda.h	/^  JTimerCuda(){ EventIni=NULL; EventEnd=NULL; Stopped=false; }$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::Reset	JTimerCuda.h	/^  void Reset(){$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::Start	JTimerCuda.h	/^  void Start(){$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::Stop	JTimerCuda.h	/^  void Stop(){$/;"	f	class:JTimerCuda	access:public	signature:()
JTimerCuda::Stopped	JTimerCuda.h	/^  bool Stopped;$/;"	m	class:JTimerCuda	access:private
JTimerCuda::~JTimerCuda	JTimerCuda.h	/^  ~JTimerCuda(){ Reset(); }$/;"	f	class:JTimerCuda	access:public	signature:()
JWaveGen	JWaveGen.h	/^  JWaveGen(bool useomp,bool usegpu,JLog2* log,std::string dirdata,JXml *sxml,const std::string &place);$/;"	p	class:JWaveGen	access:public	signature:(bool useomp,bool usegpu,JLog2* log,std::string dirdata,JXml *sxml,const std::string &place)
JWaveGen	JWaveGen.h	/^class JWaveGen$/;"	c
JWaveGen::ConfigPaddle	JWaveGen.h	/^  bool ConfigPaddle(word mkbound,word paddleid,unsigned idbegin,unsigned np);$/;"	p	class:JWaveGen	access:public	signature:(word mkbound,word paddleid,unsigned idbegin,unsigned np)
JWaveGen::Count	JWaveGen.h	/^  unsigned Count;$/;"	m	class:JWaveGen	access:private
JWaveGen::GetCount	JWaveGen.h	/^  unsigned GetCount()const{ return(Count); }$/;"	f	class:JWaveGen	access:public	signature:() const
JWaveGen::GetMotion	JWaveGen.h	/^  bool GetMotion(bool svdata,unsigned cp,double timestep,double dt$/;"	p	class:JWaveGen	access:public	signature:(bool svdata,unsigned cp,double timestep,double dt ,tdouble3 &simplemov,tdouble3 &simplevel,tmatrix4d &matmov ,unsigned &np,unsigned &idbegin)
JWaveGen::GetMotionAce	JWaveGen.h	/^  bool GetMotionAce(bool svdata,unsigned cp,double timestep,double dt$/;"	p	class:JWaveGen	access:public	signature:(bool svdata,unsigned cp,double timestep,double dt ,tdouble3 &simplemov,tdouble3 &simplevel,tdouble3 &simpleace ,tmatrix4d &matmov,tmatrix4d &matmov2,unsigned &np,unsigned &idbegin)
JWaveGen::GetPaddleMkbound	JWaveGen.h	/^  word GetPaddleMkbound(unsigned cp)const;$/;"	p	class:JWaveGen	access:public	signature:(unsigned cp) const
JWaveGen::Init	JWaveGen.h	/^  void Init(JGaugeSystem *gaugesystem,const JSphMk *mkinfo,double timemax,tfloat3 gravity);$/;"	p	class:JWaveGen	access:public	signature:(JGaugeSystem *gaugesystem,const JSphMk *mkinfo,double timemax,tfloat3 gravity)
JWaveGen::JWaveGen	JWaveGen.h	/^  JWaveGen(bool useomp,bool usegpu,JLog2* log,std::string dirdata,JXml *sxml,const std::string &place);$/;"	p	class:JWaveGen	access:public	signature:(bool useomp,bool usegpu,JLog2* log,std::string dirdata,JXml *sxml,const std::string &place)
JWaveGen::SetTimeMod	JWaveGen.h	/^  void SetTimeMod(double timemod){ TimeMod=timemod; };$/;"	f	class:JWaveGen	access:public	signature:(double timemod)
JWaveGen::TimeMod	JWaveGen.h	/^  double TimeMod;       \/\/\/<Modifies the timestep for paddle motion.$/;"	m	class:JWaveGen	access:private
JWaveGen::UseAwas	JWaveGen.h	/^  bool UseAwas()const{ return(Use_Awas); } $/;"	f	class:JWaveGen	access:public	signature:() const
JWaveGen::UseGpu	JWaveGen.h	/^  const bool UseGpu;$/;"	m	class:JWaveGen	access:private
JWaveGen::UseOmp	JWaveGen.h	/^  const bool UseOmp;$/;"	m	class:JWaveGen	access:private
JWaveGen::Use_Awas	JWaveGen.h	/^  bool Use_Awas;    \/\/-Use of AWAS-Zsurf.$/;"	m	class:JWaveGen	access:private
JWaveGen::VisuConfig	JWaveGen.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JWaveGen	access:public	signature:(std::string txhead,std::string txfoot)
JWaveGen::WavPad	JWaveGen.h	/^  JWavePaddles* WavPad; $/;"	m	class:JWaveGen	access:private
JWaveGen::~JWaveGen	JWaveGen.h	/^  ~JWaveGen();$/;"	p	class:JWaveGen	access:public	signature:()
JWaveSpectrumGpu	JWaveSpectrumGpu.cpp	/^JWaveSpectrumGpu::JWaveSpectrumGpu(){$/;"	f	class:JWaveSpectrumGpu	signature:()
JWaveSpectrumGpu	JWaveSpectrumGpu.h	/^  JWaveSpectrumGpu();$/;"	p	class:JWaveSpectrumGpu	access:public	signature:()
JWaveSpectrumGpu	JWaveSpectrumGpu.h	/^class JWaveSpectrumGpu : protected JObject$/;"	c	inherits:JObject
JWaveSpectrumGpu::AllocMemoryGpu	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::AllocMemoryGpu(unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(unsigned sizewavecoefs)
JWaveSpectrumGpu::AllocMemoryGpu	JWaveSpectrumGpu.h	/^  void AllocMemoryGpu(unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(unsigned sizewavecoefs)
JWaveSpectrumGpu::CalcElevation	JWaveSpectrumGpu.cpp	/^double JWaveSpectrumGpu::CalcElevation(double time,double x,unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(double time,double x,unsigned sizewavecoefs)
JWaveSpectrumGpu::CalcElevation	JWaveSpectrumGpu.h	/^  double CalcElevation(double time,double x,unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(double time,double x,unsigned sizewavecoefs)
JWaveSpectrumGpu::CalcPosition	JWaveSpectrumGpu.cpp	/^double JWaveSpectrumGpu::CalcPosition(double time,unsigned sizewavecoefs){$/;"	f	class:JWaveSpectrumGpu	signature:(double time,unsigned sizewavecoefs)
JWaveSpectrumGpu::CalcPosition	JWaveSpectrumGpu.h	/^  double CalcPosition(double time,unsigned sizewavecoefs);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(double time,unsigned sizewavecoefs)
JWaveSpectrumGpu::CopyCoefs	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::CopyCoefs(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2){$/;"	f	class:JWaveSpectrumGpu	signature:(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2)
JWaveSpectrumGpu::CopyCoefs	JWaveSpectrumGpu.h	/^  void CopyCoefs(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2);$/;"	p	class:JWaveSpectrumGpu	access:public	signature:(unsigned sizewavecoefs,const tdouble4 *d4,const double *d1,const tdouble2 *d2)
JWaveSpectrumGpu::FreeMemoryGpu	JWaveSpectrumGpu.cpp	/^void JWaveSpectrumGpu::FreeMemoryGpu(){$/;"	f	class:JWaveSpectrumGpu	signature:()
JWaveSpectrumGpu::FreeMemoryGpu	JWaveSpectrumGpu.h	/^  void FreeMemoryGpu();$/;"	p	class:JWaveSpectrumGpu	access:public	signature:()
JWaveSpectrumGpu::GetMemGpuFixed	JWaveSpectrumGpu.h	/^  llong GetMemGpuFixed()const{ return(MemGpuFixed); }$/;"	f	class:JWaveSpectrumGpu	access:public	signature:() const
JWaveSpectrumGpu::JWaveSpectrumGpu	JWaveSpectrumGpu.cpp	/^JWaveSpectrumGpu::JWaveSpectrumGpu(){$/;"	f	class:JWaveSpectrumGpu	signature:()
JWaveSpectrumGpu::JWaveSpectrumGpu	JWaveSpectrumGpu.h	/^  JWaveSpectrumGpu();$/;"	p	class:JWaveSpectrumGpu	access:public	signature:()
JWaveSpectrumGpu::MemGpuFixed	JWaveSpectrumGpu.h	/^  llong MemGpuFixed;$/;"	m	class:JWaveSpectrumGpu	access:private
JWaveSpectrumGpu::Order2Auxg	JWaveSpectrumGpu.h	/^  double *Order2Auxg;         \/\/\/<Auxiliary memory for reductions. [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
JWaveSpectrumGpu::Order2CoefsDnmg	JWaveSpectrumGpu.h	/^  double *Order2CoefsDnmg;    \/\/\/<Coefficients on GPU for position of each wave combination {dnm} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
JWaveSpectrumGpu::Order2CoefsEtag	JWaveSpectrumGpu.h	/^  tdouble4 *Order2CoefsEtag;  \/\/\/<Coefficients on GPU for elevation of each wave combination {dnm,dkl,aagnm,bbgnm} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
JWaveSpectrumGpu::Order2CoefsPosg	JWaveSpectrumGpu.h	/^  tdouble2 *Order2CoefsPosg;  \/\/\/<Coefficients on GPU for position of each wave combination {aaf1,bbf1} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
JWaveSpectrumGpu::~JWaveSpectrumGpu	JWaveSpectrumGpu.h	/^  ~JWaveSpectrumGpu(){ DestructorActive=true; FreeMemoryGpu(); }$/;"	f	class:JWaveSpectrumGpu	access:public	signature:()
JXml	JXml.cpp	/^JXml::JXml(){$/;"	f	class:JXml	signature:()
JXml	JXml.h	/^  JXml();$/;"	p	class:JXml	access:public	signature:()
JXml	JXml.h	/^class JXml : protected JObject$/;"	c	inherits:JObject
JXml::AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,bool v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,bool v)
JXml::AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,const std::string &v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,const std::string &v)
JXml::AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt)
JXml::AddAttribute	JXml.cpp	/^void JXml::AddAttribute(TiXmlElement* ele,const std::string &attrib,int v){$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &attrib,int v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const char *attrib,const char *v){ AddAttribute(ele,std::string(attrib),std::string(v)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char *attrib,const char *v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,bool v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,bool v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,const std::string &v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,const std::string &v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt="%g");$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,double v,const char* fmt=Ó)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,int v);$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,int v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,const std::string &attrib,unsigned v){ AddAttribute(ele,attrib,int(v)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &attrib,unsigned v)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,tdouble3 v,const char* name1="x",const char* name2="y",const char* name3="z",const char* fmt="%g"){ AddAttribute(ele,name1,v.x,fmt); AddAttribute(ele,name2,v.y,fmt); AddAttribute(ele,name3,v.z,fmt); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,tdouble3 v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó,const char* fmt=Ó)
JXml::AddAttribute	JXml.h	/^  static void AddAttribute(TiXmlElement* ele,tfloat3 v,const char* name1="x",const char* name2="y",const char* name3="z",const char* fmt="%g"){ AddAttribute(ele,TDouble3(v.x,v.y,v.z),name1,name2,name3,fmt); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,tfloat3 v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó,const char* fmt=Ó)
JXml::AddElement	JXml.h	/^  static TiXmlElement* AddElement(TiXmlNode* node,const std::string &name){ TiXmlElement item(name.c_str()); return(node->InsertEndChild(item)->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name)
JXml::AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,const std::string &v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,const std::string &v)
JXml::AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,double v,const char* fmt="%g"){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v,fmt))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,double v,const char* fmt=Ó)
JXml::AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,int v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,int v)
JXml::AddElementAttrib	JXml.h	/^  static TiXmlElement* AddElementAttrib(TiXmlNode* node,const std::string &name,const std::string &attrib,unsigned v){ return(node->InsertEndChild(MakeElementAttrib(name,attrib,v))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,unsigned v)
JXml::AddElementDouble3	JXml.h	/^  static TiXmlElement* AddElementDouble3(TiXmlNode* node,const std::string &name,const tdouble3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(node->InsertEndChild(MakeElementDouble3(name,v,name1,name2,name3))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tdouble3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::AddElementFloat3	JXml.h	/^  static TiXmlElement* AddElementFloat3(TiXmlNode* node,const std::string &name,const tfloat3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(AddElementDouble3(node,name,TDouble3(v.x,v.y,v.z),name1,name2,name3)); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tfloat3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::AddElementInt3	JXml.h	/^  static TiXmlElement* AddElementInt3(TiXmlNode* node,const std::string &name,const tint3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(node->InsertEndChild(MakeElementInt3(name,v,name1,name2,name3))->ToElement()); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tint3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::AddElementMatrix3d	JXml.h	/^  static TiXmlElement* AddElementMatrix3d(TiXmlNode* node,const std::string &name,const tmatrix3d &v){ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const tmatrix3d &v)
JXml::AddElementMatrixDouble	JXml.h	/^  static TiXmlElement* AddElementMatrixDouble(TiXmlNode* node,const std::string &name$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name ,unsigned nrows,unsigned ncols,const double* values)
JXml::CheckAttributes	JXml.cpp	/^int JXml::CheckAttributes(const TiXmlElement* ele,std::string names,bool checkmanyatt)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,std::string names,bool checkmanyatt) const
JXml::CheckAttributes	JXml.h	/^  int CheckAttributes(const TiXmlElement* ele,std::string names,bool checkmanyatt)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,std::string names,bool checkmanyatt) const
JXml::CheckElementAttributes	JXml.cpp	/^int JXml::CheckElementAttributes(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele) const
JXml::CheckElementAttributes	JXml.h	/^  int CheckElementAttributes(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,std::string attnames,bool checkmanyatt,bool checkmanyele) const
JXml::CheckElementNames	JXml.cpp	/^void JXml::CheckElementNames(TiXmlElement* lis,bool checkrepeated,std::string names)const{$/;"	f	class:JXml	signature:(TiXmlElement* lis,bool checkrepeated,std::string names) const
JXml::CheckElementNames	JXml.h	/^  void CheckElementNames(TiXmlElement* lis,bool checkrepeated,std::string names)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* lis,bool checkrepeated,std::string names) const
JXml::CorrectFile	JXml.cpp	/^void JXml::CorrectFile(const std::string &fname){$/;"	f	class:JXml	signature:(const std::string &fname)
JXml::CorrectFile	JXml.h	/^  void CorrectFile(const std::string &fname);$/;"	p	class:JXml	access:public	signature:(const std::string &fname)
JXml::CountElements	JXml.cpp	/^unsigned JXml::CountElements(const TiXmlNode* node,const std::string &name)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &name) const
JXml::CountElements	JXml.h	/^  unsigned CountElements(const TiXmlNode* node,const std::string &name)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &name) const
JXml::Doc	JXml.h	/^  TiXmlDocument* Doc;       \/\/\/<Pointer at the xml document.$/;"	m	class:JXml	access:public
JXml::ErrGetFileRow	JXml.cpp	/^std::string JXml::ErrGetFileRow(const TiXmlNode* node)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node) const
JXml::ErrGetFileRow	JXml.h	/^  std::string ErrGetFileRow(const TiXmlNode* node)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node) const
JXml::ErrReadAtrib	JXml.cpp	/^void JXml::ErrReadAtrib(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext) const
JXml::ErrReadAtrib	JXml.h	/^  void ErrReadAtrib(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &atrib,bool missing,std::string errortext=Ó) const
JXml::ErrReadElement	JXml.cpp	/^void JXml::ErrReadElement(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext) const
JXml::ErrReadElement	JXml.h	/^  void ErrReadElement(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &element,bool missing,std::string errortext=Ó) const
JXml::ExistsAttribute	JXml.cpp	/^bool JXml::ExistsAttribute(const TiXmlElement* ele,const std::string &name)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name) const
JXml::ExistsAttribute	JXml.h	/^  bool ExistsAttribute(const TiXmlElement* ele,const std::string &name)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name) const
JXml::ExistsElement	JXml.h	/^  bool ExistsElement(const TiXmlElement* ele,const std::string &name)const{ return(ele->FirstChildElement(name.c_str())!=NULL); }$/;"	f	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name) const
JXml::FileReading	JXml.h	/^  std::string FileReading;  \/\/\/<File to read the xml docuemnt.$/;"	m	class:JXml	access:public
JXml::GetAttributeBool	JXml.cpp	/^bool JXml::GetAttributeBool(const TiXmlElement* ele,const std::string &name,bool optional,bool valdef)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,bool optional,bool valdef) const
JXml::GetAttributeBool	JXml.h	/^  bool GetAttributeBool(const TiXmlElement* ele,const std::string &name,bool optional=false,bool valdef=false)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,bool optional=false,bool valdef=false) const
JXml::GetAttributeByte	JXml.cpp	/^byte JXml::GetAttributeByte(TiXmlElement* ele,const std::string &name,bool optional,byte valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,byte valdef) const
JXml::GetAttributeByte	JXml.h	/^  byte GetAttributeByte(TiXmlElement* ele,const std::string &name,bool optional=false,byte valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,byte valdef=0) const
JXml::GetAttributeDouble	JXml.cpp	/^double JXml::GetAttributeDouble(TiXmlElement* ele,const std::string &name,bool optional,double valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,double valdef) const
JXml::GetAttributeDouble	JXml.h	/^  double GetAttributeDouble(TiXmlElement* ele,const std::string &name,bool optional=false,double valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,double valdef=0) const
JXml::GetAttributeDouble3	JXml.h	/^  tdouble3 GetAttributeDouble3(TiXmlElement* ele,const char* name1="x",const char* name2="y",const char* name3="z")const{ return(TDouble3(GetAttributeDouble(ele,name1),GetAttributeDouble(ele,name2),GetAttributeDouble(ele,name3))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó) const
JXml::GetAttributeFloat	JXml.h	/^  float GetAttributeFloat(TiXmlElement* ele,const std::string &name,bool optional=false,float valdef=0)const{ return(float(GetAttributeDouble(ele,name,optional,valdef))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,float valdef=0) const
JXml::GetAttributeFloat3	JXml.h	/^  tfloat3 GetAttributeFloat3(TiXmlElement* ele,const char* name1="x",const char* name2="y",const char* name3="z")const{ tdouble3 v=GetAttributeDouble3(ele,name1,name2,name3); return(TFloat3(float(v.x),float(v.y),float(v.z))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó) const
JXml::GetAttributeInt	JXml.cpp	/^int JXml::GetAttributeInt(TiXmlElement* ele,const std::string &name,bool optional,int valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,int valdef) const
JXml::GetAttributeInt	JXml.h	/^  int GetAttributeInt(TiXmlElement* ele,const std::string &name,bool optional=false,int valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,int valdef=0) const
JXml::GetAttributeInt3	JXml.h	/^  tint3 GetAttributeInt3(TiXmlElement* ele)const{ return(TInt3(GetAttributeInt(ele,"x"),GetAttributeInt(ele,"y"),GetAttributeInt(ele,"z"))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele) const
JXml::GetAttributeStr	JXml.cpp	/^std::string JXml::GetAttributeStr(const TiXmlElement* ele,const std::string &name,bool optional,const std::string &valdef)const{$/;"	f	class:JXml	signature:(const TiXmlElement* ele,const std::string &name,bool optional,const std::string &valdef) const
JXml::GetAttributeStr	JXml.h	/^  std::string GetAttributeStr(const TiXmlElement* ele,const std::string &name,bool optional=false,const std::string &valdef="")const;$/;"	p	class:JXml	access:public	signature:(const TiXmlElement* ele,const std::string &name,bool optional=false,const std::string &valdef=Ó) const
JXml::GetAttributeUint	JXml.h	/^  unsigned GetAttributeUint(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0)const{ return(GetAttributeUnsigned(ele,name,optional,valdef)); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0) const
JXml::GetAttributeUint3	JXml.h	/^  tuint3 GetAttributeUint3(TiXmlElement* ele)const{ return(TUint3(GetAttributeUint(ele,"x"),GetAttributeUint(ele,"y"),GetAttributeUint(ele,"z"))); }$/;"	f	class:JXml	access:public	signature:(TiXmlElement* ele) const
JXml::GetAttributeUnsigned	JXml.cpp	/^unsigned JXml::GetAttributeUnsigned(TiXmlElement* ele,const std::string &name,bool optional,unsigned valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,unsigned valdef) const
JXml::GetAttributeUnsigned	JXml.h	/^  unsigned GetAttributeUnsigned(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,unsigned valdef=0) const
JXml::GetAttributeWord	JXml.cpp	/^word JXml::GetAttributeWord(TiXmlElement* ele,const std::string &name,bool optional,word valdef)const{$/;"	f	class:JXml	signature:(TiXmlElement* ele,const std::string &name,bool optional,word valdef) const
JXml::GetAttributeWord	JXml.h	/^  word GetAttributeWord(TiXmlElement* ele,const std::string &name,bool optional=false,word valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlElement* ele,const std::string &name,bool optional=false,word valdef=0) const
JXml::GetDateTime	JXml.cpp	/^std::string JXml::GetDateTime(){$/;"	f	class:JXml	signature:()
JXml::GetDateTime	JXml.h	/^  static std::string GetDateTime();$/;"	p	class:JXml	access:public	signature:()
JXml::GetFirstElement	JXml.cpp	/^TiXmlElement* JXml::GetFirstElement(const TiXmlNode* node,const std::string &name,bool optional)const{$/;"	f	class:JXml	signature:(const TiXmlNode* node,const std::string &name,bool optional) const
JXml::GetFirstElement	JXml.h	/^  TiXmlElement* GetFirstElement(const TiXmlNode* node,const std::string &name,bool optional=false)const;$/;"	p	class:JXml	access:public	signature:(const TiXmlNode* node,const std::string &name,bool optional=false) const
JXml::GetNextElement	JXml.cpp	/^TiXmlElement* JXml::GetNextElement(TiXmlNode* node,const std::string &name,bool optional)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,bool optional) const
JXml::GetNextElement	JXml.h	/^  TiXmlElement* GetNextElement(TiXmlNode* node,const std::string &name,bool optional=false)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,bool optional=false) const
JXml::GetNode	JXml.cpp	/^TiXmlNode* JXml::GetNode(const std::string &path,bool createpath){$/;"	f	class:JXml	signature:(const std::string &path,bool createpath)
JXml::GetNode	JXml.h	/^  TiXmlNode* GetNode(const std::string &path,bool createpath=false);$/;"	p	class:JXml	access:public	signature:(const std::string &path,bool createpath=false)
JXml::GetNodeError	JXml.cpp	/^TiXmlNode* JXml::GetNodeError(const std::string &path){$/;"	f	class:JXml	signature:(const std::string &path)
JXml::GetNodeError	JXml.h	/^  TiXmlNode* GetNodeError(const std::string &path);$/;"	p	class:JXml	access:public	signature:(const std::string &path)
JXml::GetNodeRoot	JXml.h	/^  TiXmlNode* GetNodeRoot(){ return(Doc); }$/;"	f	class:JXml	access:public	signature:()
JXml::GetNodeSimple	JXml.cpp	/^TiXmlNode* JXml::GetNodeSimple(const std::string &path)const{$/;"	f	class:JXml	signature:(const std::string &path) const
JXml::GetNodeSimple	JXml.h	/^  TiXmlNode* GetNodeSimple(const std::string &path)const;$/;"	p	class:JXml	access:public	signature:(const std::string &path) const
JXml::JXml	JXml.cpp	/^JXml::JXml(){$/;"	f	class:JXml	signature:()
JXml::JXml	JXml.h	/^  JXml();$/;"	p	class:JXml	access:public	signature:()
JXml::LoadFile	JXml.cpp	/^void JXml::LoadFile(const std::string &fname){$/;"	f	class:JXml	signature:(const std::string &fname)
JXml::LoadFile	JXml.h	/^  void LoadFile(const std::string &fname);$/;"	p	class:JXml	access:public	signature:(const std::string &fname)
JXml::MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,const std::string &v){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,const std::string &v)
JXml::MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,double v,const char* fmt){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,double v,const char* fmt)
JXml::MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,int v){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,int v)
JXml::MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,const std::string &v);$/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,const std::string &v)
JXml::MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,double v,const char* fmt="%g"); $/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,double v,const char* fmt=Ó)
JXml::MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,int v);$/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,int v)
JXml::MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,unsigned v){ return(MakeElementAttrib(name,attrib,v));}$/;"	f	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,unsigned v)
JXml::MakeElementDouble3	JXml.cpp	/^TiXmlElement JXml::MakeElementDouble3(const std::string &name,const tdouble3 &v,const char* name1,const char* name2,const char* name3){$/;"	f	class:JXml	signature:(const std::string &name,const tdouble3 &v,const char* name1,const char* name2,const char* name3)
JXml::MakeElementDouble3	JXml.h	/^  static TiXmlElement MakeElementDouble3(const std::string &name,const tdouble3 &v,const char* name1="x",const char* name2="y",const char* name3="z");$/;"	p	class:JXml	access:public	signature:(const std::string &name,const tdouble3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::MakeElementFloat3	JXml.h	/^  static TiXmlElement MakeElementFloat3(const std::string &name,const tfloat3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(MakeElementDouble3(name,TDouble3(v.x,v.y,v.z),name1,name2,name3)); }$/;"	f	class:JXml	access:public	signature:(const std::string &name,const tfloat3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::MakeElementInt3	JXml.cpp	/^TiXmlElement JXml::MakeElementInt3(const std::string &name,const tint3 &v,const char* name1,const char* name2,const char* name3){$/;"	f	class:JXml	signature:(const std::string &name,const tint3 &v,const char* name1,const char* name2,const char* name3)
JXml::MakeElementInt3	JXml.h	/^  static TiXmlElement MakeElementInt3(const std::string &name,const tint3 &v,const char* name1="x",const char* name2="y",const char* name3="z");$/;"	p	class:JXml	access:public	signature:(const std::string &name,const tint3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
JXml::MakeElementMatrixDouble	JXml.cpp	/^TiXmlElement JXml::MakeElementMatrixDouble(const std::string &name$/;"	f	class:JXml	signature:(const std::string &name ,unsigned nrows,unsigned ncols,const double* values)
JXml::MakeElementMatrixDouble	JXml.h	/^  static TiXmlElement MakeElementMatrixDouble(const std::string &name,unsigned nrows,unsigned ncols,const double* values);$/;"	p	class:JXml	access:public	signature:(const std::string &name,unsigned nrows,unsigned ncols,const double* values)
JXml::ReadArrayDouble3	JXml.cpp	/^unsigned JXml::ReadArrayDouble3(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount) const
JXml::ReadArrayDouble3	JXml.h	/^  unsigned ReadArrayDouble3(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount=true) const
JXml::ReadArrayFloat3	JXml.cpp	/^unsigned JXml::ReadArrayFloat3(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount) const
JXml::ReadArrayFloat3	JXml.h	/^  unsigned ReadArrayFloat3(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount=true) const
JXml::ReadArrayInt3	JXml.cpp	/^unsigned JXml::ReadArrayInt3(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount) const
JXml::ReadArrayInt3	JXml.h	/^  unsigned ReadArrayInt3(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount=true) const
JXml::ReadElementBool	JXml.h	/^  bool ReadElementBool(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,bool valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,bool valdef=0) const
JXml::ReadElementDouble	JXml.h	/^  double ReadElementDouble(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,double valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,double valdef=0) const
JXml::ReadElementDouble3	JXml.h	/^  tdouble3 ReadElementDouble3(TiXmlNode* node,const std::string &name)const{ return(GetAttributeDouble3(GetFirstElement(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
JXml::ReadElementFloat	JXml.h	/^  float ReadElementFloat(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,float valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,float valdef=0) const
JXml::ReadElementFloat3	JXml.h	/^  tfloat3 ReadElementFloat3(TiXmlNode* node,const std::string &name)const{ return(ToTFloat3(ReadElementDouble3(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
JXml::ReadElementInt	JXml.h	/^  int ReadElementInt(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,int valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,int valdef=0) const
JXml::ReadElementInt3	JXml.h	/^  tint3 ReadElementInt3(TiXmlNode* node,const std::string &name)const{ return(GetAttributeInt3(GetFirstElement(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
JXml::ReadElementMatrix3d	JXml.h	/^  tmatrix3d ReadElementMatrix3d(TiXmlNode* node,const std::string &name,bool optionalvalues=false,double valdef=0)const{$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,bool optionalvalues=false,double valdef=0) const
JXml::ReadElementStr	JXml.h	/^  std::string ReadElementStr(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,const std::string &valdef="")const{$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,const std::string &valdef=Ó) const
JXml::ReadElementUnsigned	JXml.h	/^  unsigned ReadElementUnsigned(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,unsigned valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,unsigned valdef=0) const
JXml::ReadMatrixDouble	JXml.cpp	/^unsigned JXml::ReadMatrixDouble(TiXmlNode* node,const std::string &name$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name ,unsigned nrows,unsigned ncols,unsigned ndata,double *data ,bool optionalvalues,double valdef) const
JXml::ReadMatrixDouble	JXml.h	/^  unsigned ReadMatrixDouble(TiXmlNode* node,const std::string &name,unsigned nrows,unsigned ncols,unsigned ndata,double *data,bool optionalvalues=false,double valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,unsigned nrows,unsigned ncols,unsigned ndata,double *data,bool optionalvalues=false,double valdef=0) const
JXml::RemoveNode	JXml.cpp	/^void JXml::RemoveNode(const std::string &path){$/;"	f	class:JXml	signature:(const std::string &path)
JXml::RemoveNode	JXml.h	/^  void RemoveNode(const std::string &path);$/;"	p	class:JXml	access:public	signature:(const std::string &path)
JXml::Reset	JXml.cpp	/^void JXml::Reset(){$/;"	f	class:JXml	signature:()
JXml::Reset	JXml.h	/^  void Reset();$/;"	p	class:JXml	access:public	signature:()
JXml::SaveFile	JXml.cpp	/^void JXml::SaveFile(const std::string &fname,const std::string &app,bool date){$/;"	f	class:JXml	signature:(const std::string &fname,const std::string &app,bool date)
JXml::SaveFile	JXml.h	/^  void SaveFile(const std::string &fname,const std::string &app="",bool date=false);$/;"	p	class:JXml	access:public	signature:(const std::string &fname,const std::string &app=Ó,bool date=false)
JXml::ToStr	JXml.cpp	/^std::string JXml::ToStr(double v,const char* fmt){$/;"	f	class:JXml	signature:(double v,const char* fmt)
JXml::ToStr	JXml.h	/^  static std::string ToStr(bool v){ return(v? "true": "false"); }$/;"	f	class:JXml	access:public	signature:(bool v)
JXml::ToStr	JXml.h	/^  static std::string ToStr(double v,const char* fmt="%g");$/;"	p	class:JXml	access:public	signature:(double v,const char* fmt=Ó)
JXml::~JXml	JXml.cpp	/^JXml::~JXml(){$/;"	f	class:JXml	signature:()
JXml::~JXml	JXml.h	/^  ~JXml();$/;"	p	class:JXml	access:public	signature:()
JoinRanges	JRangeFilter.cpp	/^void JRangeFilter::JoinRanges(){$/;"	f	class:JRangeFilter	signature:()
JoinRanges	JRangeFilter.h	/^  void JoinRanges();$/;"	p	class:JRangeFilter	access:private	signature:()
KERNEL_Cubic	Types.h	/^  KERNEL_Cubic=1,     \/\/\/<Cubic Spline kernel.$/;"	e	enum:__anon49
KERNEL_Gaussian	Types.h	/^  KERNEL_Gaussian=3,  \/\/\/<Gaussian kernel.$/;"	e	enum:__anon49
KERNEL_None	Types.h	/^  KERNEL_None=0 $/;"	e	enum:__anon49
KERNEL_Wendland	Types.h	/^  KERNEL_Wendland=2,  \/\/\/<Wendland kernel.$/;"	e	enum:__anon49
KEYSBITS	JRadixSort.h	/^  static const int KEYSBITS=8;$/;"	m	class:JRadixSort	access:private
KEYSMASK	JRadixSort.h	/^  static const int KEYSMASK=0xff;$/;"	m	class:JRadixSort	access:private
KEYSRANGE	JRadixSort.h	/^  static const int KEYSRANGE=256;$/;"	m	class:JRadixSort	access:private
KerAddAccInputAng	JSphGpu_ker.cu	/^__global__ void KerAddAccInputAng(unsigned n,unsigned pini,typecode codesel,float3 gravity$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel,float3 gravity ,bool setgravity,double3 acclin,double3 accang,double3 centre,double3 velang,double3 vellin ,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
KerAddAccInputLin	JSphGpu_ker.cu	/^__global__ void KerAddAccInputLin(unsigned n,unsigned pini,typecode codesel,float3 gravity$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel,float3 gravity ,bool setgravity,double3 acclin,const typecode *code,float3 *ace)
KerAddDelta	JSphGpu_ker.cu	/^__global__ void KerAddDelta(unsigned n,const float *delta,float *ar)$/;"	f	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
KerCalcBeginEndCell	JCellDivGpu_ker.cu	/^__global__ void KerCalcBeginEndCell(unsigned n,unsigned pini,const unsigned *cellpart,int2 *begcell)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *cellpart,int2 *begcell)
KerCalcElevation	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __global__ void KerCalcElevation(unsigned n,double time$/;"	f	namespace:cuwave2	signature:(unsigned n,double time ,double x,const double4 *coefe,double *res)
KerCalcPosition	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __global__ void KerCalcPosition(unsigned n,double time$/;"	f	namespace:cuwave2	signature:(unsigned n,double time ,const double *dnm,const double2 *coefx,double *res)
KerCalcRidp	JSphGpu_ker.cu	/^__global__ void KerCalcRidp(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
KerCalcRidp	JSphGpu_ker.cu	/^__global__ void KerCalcRidp(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const unsigned *idp,unsigned *ridp)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const unsigned *idp,unsigned *ridp)
KerCalculeMass	JGauge_ker.cu	/^__device__ float KerCalculeMass(double px,double py,double pz,float awen$/;"	f	namespace:cugauge	signature:(double px,double py,double pz,float awen ,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,double3 domposmin,float scell,float fourh2,float h,float massf)
KerComputeAceMod	JSphGpu_ker.cu	/^__global__ void KerComputeAceMod(unsigned n,const float3 *ace,float *acemod)$/;"	f	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
KerComputeAceMod	JSphGpu_ker.cu	/^__global__ void KerComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod)$/;"	f	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
KerComputeDamping	JSphGpu_ker.cu	/^__global__ void KerComputeDamping(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,double dt,double4 plane,float dist,float over,float3 factorxyz,float redumax ,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
KerComputeDampingPla	JSphGpu_ker.cu	/^__global__ void KerComputeDampingPla(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,double dt,double4 plane,float dist,float over,float3 factorxyz,float redumax ,double zmin,double zmax,double4 pla0,double4 pla1,double4 pla2,double4 pla3 ,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
KerComputeSpsTau	JSphGpu_ker.cu	/^__global__ void KerComputeSpsTau(unsigned n,unsigned pini,float smag,float blin$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,float smag,float blin ,const float4 *velrhop,const float2 *gradvelff,float2 *tauff)
KerComputeStepPos	JSphGpu_ker.cu	/^template<bool periactive,bool floatings> __global__ void KerComputeStepPos(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
KerComputeStepPos2	JSphGpu_ker.cu	/^template<bool periactive,bool floatings> __global__ void KerComputeStepPos2(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
KerComputeStepSymplecticCor	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepSymplecticCor$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
KerComputeStepSymplecticPre	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepSymplecticPre$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
KerComputeStepVerlet	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepVerlet$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb,float rhopoutmin,float rhopoutmax ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt205,double dt2 ,double2 *movxy,double *movz,typecode *code,float4 *velrhopnew)
KerComputeVelMod	JSphGpu_ker.cu	/^__global__ void KerComputeVelMod(unsigned n,const float4 *vel,float *velmod)$/;"	f	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
KerDistPlaneSign	FunctionsMath_ker.cu	/^__device__ float KerDistPlaneSign(const float4 &pla,float px,float py,float pz){ $/;"	f	namespace:cumath	signature:(const float4 &pla,float px,float py,float pz)
KerFtCalcForces	JSphGpu_ker.cu	/^__global__ void KerFtCalcForces(unsigned ftcount,float3 gravity,const float4 *ftodata$/;"	f	namespace:cusph	signature:(unsigned ftcount,float3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
KerFtCalcForcesRes	JSphGpu_ker.cu	/^__global__ void KerFtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	f	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
KerFtCalcForcesSum	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerFtCalcForcesSum( \/\/fdata={pini,np,radius,mass}$/;"	f	namespace:cusph	signature:( float3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
KerFtPeriodicDist	JSphGpu_ker.cu	/^template<bool periactive> __device__ void KerFtPeriodicDist(double px,double py,double pz,double cenx,double ceny,double cenz,float radius,float &dx,float &dy,float &dz){$/;"	f	namespace:cusph	signature:(double px,double py,double pz,double cenx,double ceny,double cenz,float radius,float &dx,float &dy,float &dz)
KerFtUpdate	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerFtUpdate(bool predictor,double dt \/\/fdata={pini,np,radius,mass}$/;"	f	namespace:cusph	signature:(bool predictor,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
KerGetInteractionCells	JGauge_ker.cu	/^__device__ void KerGetInteractionCells(double px,double py,double pz$/;"	f	namespace:cugauge	signature:(double px,double py,double pz ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin ,const double3 &domposmin,float scell)
KerGetInteractionCells	JSphGpu_ker.cu	/^__device__ void KerGetInteractionCells(double px,double py,double pz$/;"	f	namespace:cusph	signature:(double px,double py,double pz ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin)
KerGetInteractionCells	JSphGpu_ker.cu	/^__device__ void KerGetInteractionCells(unsigned rcell$/;"	f	namespace:cusph	signature:(unsigned rcell ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin)
KerGetKernelCubic	JSphGpu_ker.cu	/^__device__ void KerGetKernelCubic(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
KerGetKernelCubicTensil	JSphGpu_ker.cu	/^__device__ float KerGetKernelCubicTensil(float rr2$/;"	f	namespace:cusph	signature:(float rr2 ,float rhopp1,float pressp1,float rhopp2,float pressp2)
KerGetKernelGaussian	JSphGpu_ker.cu	/^__device__ void KerGetKernelGaussian(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
KerGetKernelWendland	JSphGpu_ker.cu	/^__device__ void KerGetKernelWendland(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress ,double3 &posdp1,float3 &posp1)
KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,float3 &velp1,double3 &posdp1,float3 &posp1)
KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,float3 &velp1,float &rhopp1,double3 &posdp1,float3 &posp1,float &pressp1)
KerGetParticlesDr	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticlesDr(int p2$/;"	f	namespace:cusph	signature:(int p2 ,const double2 *posxy,const double *posz,const float4 *pospress ,const double3 &posdp1,const float3 &posp1 ,float &drx,float &dry,float &drz)
KerGetParticlesDr	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticlesDr(int p2$/;"	f	namespace:cusph	signature:(int p2 ,const double2 *posxy,const double *posz,const float4 *pospress ,const double3 &posdp1,const float3 &posp1 ,float &drx,float &dry,float &drz,float &pressp2)
KerInitArray	JSphGpu_ker.cu	/^__global__ void KerInitArray(unsigned n,float3 *v,float3 value)$/;"	f	namespace:cusph	signature:(unsigned n,float3 *v,float3 value)
KerInteractionForcesBound	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> __global__ void KerInteractionForcesBound$/;"	f	namespace:cusph	signature:(unsigned n,int hdiv,int4 nc,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const float *ftomassp ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float *ar)
KerInteractionForcesBoundBox	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> __device__ void KerInteractionForcesBoundBox$/;"	f	namespace:cusph	signature:(unsigned p1,const unsigned &pini,const unsigned &pfin ,const float *ftomassp ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned* idp ,float massf,double3 posdp1,float3 posp1,float3 velp1,float &arp1,float &visc)
KerInteractionForcesDem	JSphGpu_ker.cu	/^template<bool psingle> __global__ void KerInteractionForcesDem$/;"	f	namespace:cusph	signature:(unsigned nfloat,int hdiv,int4 nc,unsigned cellfluid ,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float3 *ace)
KerInteractionForcesDemBox	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerInteractionForcesDemBox $/;"	f	namespace:cusph	signature:(bool boundp2,const unsigned &pini,const unsigned &pfin ,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,double3 posdp1,float3 posp1,float3 velp1,typecode tavp1,float masstotp1,float taup1,float kfricp1,float restitup1 ,float3 &acep1,float &demdtp1)
KerInteractionForcesFluid	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> __global__ void KerInteractionForcesFluid$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pinit,int hdiv,int4 nc,unsigned cellfluid,float viscob,float viscof ,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const float *ftomassp,const float2 *tauff,float2 *gradvelff ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float *ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect)
KerInteractionForcesFluidBox	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> __device__ void KerInteractionForcesFluidBox$/;"	f	namespace:cusph	signature:(bool boundp2,unsigned p1,const unsigned &pini,const unsigned &pfin,float visco ,const float *ftomassp,const float2 *tauff ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float massp2,float ftmassp1,bool ftp1 ,double3 posdp1,float3 posp1,float3 velp1,float pressp1,float rhopp1 ,const float2 &taup1_xx_xy,const float2 &taup1_xz_yy,const float2 &taup1_yz_zz ,float2 &grap1_xx_xy,float2 &grap1_xz_yy,float2 &grap1_yz_zz ,float3 &acep1,float &arp1,float &visc,float &deltap1 ,TpShifting tshifting,float3 &shiftposp1,float &shiftdetectp1)
KerInteractionGaugeForce	JGauge_ker.cu	/^__global__ void KerInteractionGaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell,double3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
KerInteractionGaugeMaxz	JGauge_ker.cu	/^__global__ void KerInteractionGaugeMaxz(double p0x,double p0y,float maxdist2$/;"	f	namespace:cugauge	signature:(double p0x,double p0y,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
KerInteractionGaugeSwl	JGauge_ker.cu	/^__global__ void KerInteractionGaugeSwl(double p0x,double p0y,double p0z$/;"	f	namespace:cugauge	signature:(double p0x,double p0y,double p0z ,double pdirx,double pdiry,double pdirz,unsigned pointnp,float masslimit ,float awen,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,double3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
KerInteractionGaugeVel	JGauge_ker.cu	/^__global__ void KerInteractionGaugeVel(double3 ptpos$/;"	f	namespace:cugauge	signature:(double3 ptpos ,float awen,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,double3 domposmin,float scell,float fourh2,float h,float massf)
KerIsNormalFluid	JSphGpu_ker.cu	/^__device__ bool KerIsNormalFluid(const typecode *code,unsigned p){$/;"	f	namespace:cusph	signature:(const typecode *code,unsigned p)
KerLimitsCell	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerLimitsCell(unsigned n,unsigned pini$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini ,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *results)
KerLimitsCellRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerLimitsCellRedu(unsigned cellcode,unsigned* spx1,unsigned* spy1,unsigned* spz1,unsigned* spx2,unsigned* spy2,unsigned* spz2,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned* spx1,unsigned* spy1,unsigned* spz1,unsigned* spx2,unsigned* spy2,unsigned* spz2,const unsigned &tid,unsigned* results)
KerLimitsCellReduBase	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerLimitsCellReduBase(unsigned cellcode,unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned n,unsigned* data,unsigned *results)
KerLimitsCellWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerLimitsCellWarpRedu(volatile unsigned* spx1,volatile unsigned* spy1,volatile unsigned* spz1,volatile unsigned* spx2,volatile unsigned* spy2,volatile unsigned* spz2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* spx1,volatile unsigned* spy1,volatile unsigned* spz1,volatile unsigned* spx2,volatile unsigned* spy2,volatile unsigned* spz2,const unsigned &tid)
KerLoadMatrix3f	JSphGpu_ker.cu	/^__device__ void KerLoadMatrix3f(unsigned c,const float4 *data8,const float *data1,tmatrix3f &v)$/;"	f	namespace:cusph	signature:(unsigned c,const float4 *data8,const float *data1,tmatrix3f &v)
KerMoveLinBound	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerMoveLinBound(unsigned n,unsigned ini,double3 mvpos,float3 mvvel$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,double3 mvpos,float3 mvvel ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
KerMoveMatBound	JSphGpu_ker.cu	/^template<bool periactive,bool simulate2d> __global__ void KerMoveMatBound(unsigned n,unsigned ini,tmatrix4d m,double dt$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
KerPeriodicDuplicatePos	JSphGpu_ker.cu	/^__device__ void KerPeriodicDuplicatePos(unsigned pnew,unsigned pcopy$/;"	f	namespace:cusph	signature:(unsigned pnew,unsigned pcopy ,bool inverse,double dx,double dy,double dz,uint3 cellmax ,double2 *posxy,double *posz,unsigned *dcell)
KerPeriodicDuplicateSymplectic	JSphGpu_ker.cu	/^template<bool varspre> __global__ void KerPeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,uint3 cellmax,double3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
KerPeriodicDuplicateVerlet	JSphGpu_ker.cu	/^__global__ void KerPeriodicDuplicateVerlet(unsigned n,unsigned pini,uint3 cellmax,double3 perinc$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,uint3 cellmax,double3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
KerPeriodicIgnore	JSphGpu_ker.cu	/^__global__ void KerPeriodicIgnore(unsigned n,typecode *code)$/;"	f	namespace:cusph	signature:(unsigned n,typecode *code)
KerPeriodicMakeList	JSphGpu_ker.cu	/^__global__ void KerPeriodicMakeList(unsigned n,unsigned pini,unsigned nmax$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,unsigned nmax ,double3 mapposmin,double3 mapposmax,double3 perinc ,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
KerPointPlane	JSphGpu_ker.cu	/^__device__ double KerPointPlane(const double4 &pla,const double3 &pt)$/;"	f	namespace:cusph	signature:(const double4 &pla,const double3 &pt)
KerPointPlane	JSphGpu_ker.cu	/^__device__ double KerPointPlane(const double4 &pla,double px,double py,double pz)$/;"	f	namespace:cusph	signature:(const double4 &pla,double px,double py,double pz)
KerPosLimitsRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerPosLimitsRedu(float* spx1,float* spy1,float* spz1,float* spx2,float* spy2,float* spz2,const unsigned &tid,float* results){$/;"	f	namespace:cudiv	signature:(float* spx1,float* spy1,float* spz1,float* spx2,float* spy2,float* spz2,const unsigned &tid,float* results)
KerPosLimitsWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerPosLimitsWarpRedu(volatile float* spx1,volatile float* spy1,volatile float* spz1,volatile float* spx2,volatile float* spy2,volatile float* spz2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile float* spx1,volatile float* spy1,volatile float* spz1,volatile float* spx2,volatile float* spy2,volatile float* spz2,const unsigned &tid)
KerPreInteractionSingle	JSphGpu_ker.cu	/^__global__ void KerPreInteractionSingle(unsigned n,const double2 *posxy,const double *posz$/;"	f	namespace:cusph	signature:(unsigned n,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float gamma)
KerPreSortFluid	JCellDivGpuSingle_ker.cu	/^__global__ void KerPreSortFluid(unsigned n,unsigned pini,unsigned cellcode$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,unsigned cellcode ,const unsigned *dcell,const typecode *code,uint3 cellzero,uint3 ncells ,unsigned *cellpart,unsigned *sortpart)
KerPreSortFull	JCellDivGpuSingle_ker.cu	/^__global__ void KerPreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell ,const typecode *code,uint3 cellzero,uint3 ncells,unsigned *cellpart,unsigned *sortpart)
KerReduMaxFloat	JSphGpu_ker.cu	/^template <unsigned blockSize> __global__ void KerReduMaxFloat(unsigned n,unsigned ini,const float *dat,float *res){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,const float *dat,float *res)
KerReduMaxFloatWarp	JSphGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerReduMaxFloatWarp(volatile float* sdat,unsigned tid){$/;"	f	namespace:cusph	signature:(volatile float* sdat,unsigned tid)
KerReduMaxFloat_w	JSphGpu_ker.cu	/^template <unsigned blockSize> __global__ void KerReduMaxFloat_w(unsigned n,unsigned ini,const float4 *dat,float *res){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,const float4 *dat,float *res)
KerReduPosLimits	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduPosLimits(unsigned n,float* data,float *results)$/;"	f	namespace:cudiv	signature:(unsigned n,float* data,float *results)
KerReduSumDouble	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumDouble(unsigned n,unsigned ini,const double *dat,double *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const double *dat,double *res)
KerReduSumDoubleWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumDoubleWarp(volatile double* sddat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile double* sddat,unsigned tid)
KerReduSumDoubleWarp	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumDoubleWarp(volatile double* sdat,unsigned tid){$/;"	f	namespace:cuwave2	signature:(volatile double* sdat,unsigned tid)
KerReduSumFloat	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumFloat(unsigned n,unsigned ini,const float *dat,float *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const float *dat,float *res)
KerReduSumFloat3	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumFloat3(unsigned n,unsigned ini,const float3 *dat,float3 *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const float3 *dat,float3 *res)
KerReduSumFloatWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumFloatWarp(volatile float* sfdat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile float* sfdat,unsigned tid)
KerReduSumUint	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumUint(unsigned n,unsigned ini,const unsigned *dat,unsigned *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const unsigned *dat,unsigned *res)
KerReduSumUintWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumUintWarp(volatile unsigned* sudat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile unsigned* sudat,unsigned tid)
KerReduUintLimits	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduUintLimits(unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned* data,unsigned *results)
KerReduUintSum	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduUintSum(unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned* data,unsigned *results)
KerResety	JSphGpu_ker.cu	/^__global__ void KerResety(unsigned n,unsigned ini,float3 *v)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
KerRunShifting	JSphGpu_ker.cu	/^__global__ void KerRunShifting(unsigned n,unsigned pini,double dt$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,double dt ,float shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart ,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
KerUintLimitsRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintLimitsRedu(unsigned* sp1,unsigned* sp2,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned* sp1,unsigned* sp2,const unsigned &tid,unsigned* results)
KerUintLimitsWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintLimitsWarpRedu(volatile unsigned* sp1,volatile unsigned* sp2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* sp1,volatile unsigned* sp2,const unsigned &tid)
KerUintSumRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintSumRedu(unsigned* sp1,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned* sp1,const unsigned &tid,unsigned* results)
KerUintSumWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintSumWarpRedu(volatile unsigned* sp1,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* sp1,const unsigned &tid)
KerUpdatePeriodicPos	JSphGpu_ker.cu	/^__device__ double3 KerUpdatePeriodicPos(double3 ps)$/;"	f	namespace:cusph	signature:(double3 ps)
KerUpdatePos	JSphGpu_ker.cu	/^template<bool periactive> __device__ void KerUpdatePos$/;"	f	namespace:cusph	signature:(double2 rxy,double rz,double movx,double movy,double movz ,bool outrhop,unsigned p,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
Kernels	JBlockSizeAuto.h	/^  std::vector<JBlockSizeAutoKer*> Kernels;$/;"	m	class:JBlockSizeAuto	access:protected
LINK_Mk	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
LINK_MkBound	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
LINK_MkFluid	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	e	enum:JSpacePropLink::__anon27
Last	tinyxml.h	/^    TiXmlAttribute* Last()                  { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
Last	tinyxml.h	/^    const TiXmlAttribute* Last() const      { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
LastAceMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
LastAttribute	tinyxml.h	/^    TiXmlAttribute* LastAttribute()                 { return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
LastAttribute	tinyxml.h	/^    const TiXmlAttribute* LastAttribute()   const   { return attributeSet.Last(); }     \/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
LastChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
LastChild	tinyxml.h	/^    TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
LastChild	tinyxml.h	/^    TiXmlNode* LastChild( const std::string& _value )               {   return LastChild (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
LastChild	tinyxml.h	/^    TiXmlNode* LastChild()  { return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
LastChild	tinyxml.h	/^    const TiXmlNode* LastChild( const char * value ) const;         \/\/\/ The last child of this node matching 'value'. Will be null if there are no children.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
LastChild	tinyxml.h	/^    const TiXmlNode* LastChild( const std::string& _value ) const   {   return LastChild (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
LastChild	tinyxml.h	/^    const TiXmlNode* LastChild() const  { return lastChild; }       \/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
LastDt1	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
LastDt2	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
LastDtf	JSaveDt.h	/^  StValue LastDtf,LastDt1,LastDt2;$/;"	m	class:JSaveDt	access:private
LastInterval	JSaveDt.h	/^  unsigned LastInterval;$/;"	m	class:JSaveDt	access:private
LastInterval	randomc.h	/^   uint32_t LastInterval;              \/\/ Last interval length for IRandomX$/;"	m	class:CRandomMersenne	access:private
LastTime	JTimeControl.h	/^  double LastTime;$/;"	m	class:JTimeControl	access:protected
LastType	JSpaceParts.h	/^  TpParticles LastType;$/;"	m	class:JSpaceParts	access:private
LastVelMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
LastViscDtMax	JSaveDt.h	/^  StValue LastAceMax,LastViscDtMax,LastVelMax;$/;"	m	class:JSaveDt	access:private
LatticeBound	JSpaceCtes.h	/^  int LatticeBound;       \/\/\/<Lattice to create boundary particles on its nodes.$/;"	m	class:JSpaceCtes	access:private
LatticeFluid	JSpaceCtes.h	/^  int LatticeFluid;       \/\/\/<Lattice to create fluid particles on its nodes.$/;"	m	class:JSpaceCtes	access:private
LimitsCell	JCellDivGpu_ker.cu	/^void LimitsCell(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
LimitsCell	JCellDivGpu_ker.h	/^void LimitsCell(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
LimitsCellBound	JCellDivCpu.cpp	/^void JCellDivCpu::LimitsCellBound(unsigned n,unsigned pini,const unsigned* dcellc$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,const unsigned* dcellc ,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
LimitsCellBound	JCellDivCpu.h	/^  void LimitsCellBound(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)const;$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
LimitsCellFluid	JCellDivCpu.cpp	/^void JCellDivCpu::LimitsCellFluid(unsigned n,unsigned pini,const unsigned* dcellc$/;"	f	class:JCellDivCpu	signature:(unsigned n,unsigned pini,const unsigned* dcellc ,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
LimitsCellFluid	JCellDivCpu.h	/^  void LimitsCellFluid(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax)const;$/;"	p	class:JCellDivCpu	access:protected	signature:(unsigned n,unsigned pini,const unsigned* dcellc,const typecode *codec,tuint3 &cellmin,tuint3 &cellmax) const
LimitsCellRedu	JCellDivGpu_ker.cu	/^void LimitsCellRedu(unsigned cellcode,unsigned nblocks,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned nblocks,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
LimitsPosSize	JCellDivGpu_ker.h	/^inline unsigned LimitsPosSize(unsigned ndata){ ndata=(ndata>DIVBSIZE? ndata: DIVBSIZE); unsigned n=6,s=((ndata\/DIVBSIZE)+1); return((s*n + ((s\/DIVBSIZE)+1)*n) + DIVBSIZE); }$/;"	f	namespace:cudiv	signature:(unsigned ndata)
LineBegin	JReadDatafile.h	/^  unsigned *LineBegin;   \/\/\/< Inicio de cada linea [LineCount+1].$/;"	m	class:JReadDatafile	access:private
LineBreak	tinyxml.h	/^    const char* LineBreak()                         { return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
LineCount	JReadDatafile.h	/^  int LineCount;         \/\/\/< Number of lines.$/;"	m	class:JReadDatafile	access:private
Lines	JReadDatafile.h	/^  unsigned Lines()const{ return(LineCount); }$/;"	f	class:JReadDatafile	access:public	signature:() const
LinkEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
LinkEndChild	tinyxml.h	/^    TiXmlNode* LinkEndChild( TiXmlNode* addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* addThis )
LinkMovs	JMotionObj.cpp	/^void JMotionObj::LinkMovs(){$/;"	f	class:JMotionObj	signature:()
LinkMovs	JMotionObj.h	/^  void LinkMovs();$/;"	p	class:JMotionObj	access:public	signature:()
Links	JSpaceProperties.h	/^  JSpacePropLinks* Links;                   \/\/\/<Object to manage the links.$/;"	m	class:JSpaceProperties	access:private
Links	JSpaceProperties.h	/^  std::vector<JSpacePropLink*> Links;  \/\/\/<List of links.$/;"	m	class:JSpacePropLinks	access:private
LisMov	JMotion.h	/^  JMotionObj** LisMov;    \/\/-Objects that move in the last ProcesTime()$/;"	m	class:JMotion	access:private
LisMovCount	JMotion.h	/^  unsigned LisMovCount;$/;"	m	class:JMotion	access:private
LisStop	JMotion.h	/^  JMotionObj** LisStop;   \/\/-Objetos that stop in the last ProcesTime()$/;"	m	class:JMotion	access:private
LisStopCount	JMotion.h	/^  unsigned LisStopCount;$/;"	m	class:JMotion	access:private
List	JDamping.h	/^  std::vector<StDamping> List;$/;"	m	class:JDamping	access:private
List	JSpaceEParms.h	/^  VecList List;$/;"	m	class:JSpaceEParms	access:private
ListMk	JSpaceVtkOut.h	/^  std::string ListMk;$/;"	m	class:JSpaceVtkOutFile	access:protected
LittleEndian	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	e	enum:fun::__anon1
Llong64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
LoadArgv	JCfgRun.cpp	/^void JCfgRun::LoadArgv(int argc,char** argv){$/;"	f	class:JCfgRun	signature:(int argc,char** argv)
LoadArgv	JCfgRun.h	/^  void LoadArgv(int argc,char** argv);$/;"	p	class:JCfgRun	access:public	signature:(int argc,char** argv)
LoadBeginKeys	JRadixSort.cpp	/^template<class T> void JRadixSort::LoadBeginKeys(const T* data){$/;"	f	class:JRadixSort	signature:(const T* data)
LoadBeginKeys	JRadixSort.h	/^  template<class T> void LoadBeginKeys(const T* data);$/;"	p	class:JRadixSort	access:private	signature:(const T* data)
LoadCaseConfig	JSph.cpp	/^void JSph::LoadCaseConfig(){$/;"	f	class:JSph	signature:()
LoadCaseConfig	JSph.h	/^  void LoadCaseConfig();$/;"	p	class:JSph	access:protected	signature:()
LoadCaseParticles	JSph.cpp	/^void JSph::LoadCaseParticles(){$/;"	f	class:JSph	signature:()
LoadCaseParticles	JSph.h	/^  void LoadCaseParticles();$/;"	p	class:JSph	access:protected	signature:()
LoadCodeParticles	JSph.cpp	/^void JSph::LoadCodeParticles(unsigned np,const unsigned *idp,typecode *code)const{$/;"	f	class:JSph	signature:(unsigned np,const unsigned *idp,typecode *code) const
LoadCodeParticles	JSph.h	/^  void LoadCodeParticles(unsigned np,const unsigned *idp,typecode *code)const;$/;"	p	class:JSph	access:protected	signature:(unsigned np,const unsigned *idp,typecode *code) const
LoadConfig	JSph.cpp	/^void JSph::LoadConfig(const JCfgRun *cfg){$/;"	f	class:JSph	signature:(const JCfgRun *cfg)
LoadConfig	JSph.h	/^  void LoadConfig(const JCfgRun *cfg);$/;"	p	class:JSph	access:protected	signature:(const JCfgRun *cfg)
LoadConfig	JSphCpuSingle.cpp	/^void JSphCpuSingle::LoadConfig(JCfgRun *cfg){$/;"	f	class:JSphCpuSingle	signature:(JCfgRun *cfg)
LoadConfig	JSphCpuSingle.h	/^  void LoadConfig(JCfgRun *cfg);$/;"	p	class:JSphCpuSingle	access:protected	signature:(JCfgRun *cfg)
LoadConfig	JSphGpuSingle.cpp	/^void JSphGpuSingle::LoadConfig(JCfgRun *cfg){$/;"	f	class:JSphGpuSingle	signature:(JCfgRun *cfg)
LoadConfig	JSphGpuSingle.h	/^  void LoadConfig(JCfgRun *cfg);$/;"	p	class:JSphGpuSingle	access:protected	signature:(JCfgRun *cfg)
LoadData	JBinaryData.cpp	/^void JBinaryData::LoadData(unsigned size,const byte* ptr){$/;"	f	class:JBinaryData	signature:(unsigned size,const byte* ptr)
LoadData	JBinaryData.h	/^  void LoadData(unsigned size,const byte* ptr);$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,const byte* ptr)
LoadDcellParticles	JSph.cpp	/^void JSph::LoadDcellParticles(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell)const{$/;"	f	class:JSph	signature:(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell) const
LoadDcellParticles	JSph.h	/^  void LoadDcellParticles(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell)const;$/;"	p	class:JSph	access:protected	signature:(unsigned n,const typecode *code,const tdouble3 *pos,unsigned *dcell) const
LoadDefault	JSpaceCtes.cpp	/^void JSpaceCtes::LoadDefault(){$/;"	f	class:JSpaceCtes	signature:()
LoadDefault	JSpaceCtes.h	/^  void LoadDefault();$/;"	p	class:JSpaceCtes	access:public	signature:()
LoadDemData	JSph.cpp	/^StDemData JSph::LoadDemData(bool basicdata,bool extradata,const JSpacePartBlock* block)const{$/;"	f	class:JSph	signature:(bool basicdata,bool extradata,const JSpacePartBlock* block) const
LoadDemData	JSph.h	/^  StDemData LoadDemData(bool basicdata,bool extradata,const JSpacePartBlock* block)const;$/;"	p	class:JSph	access:protected	signature:(bool basicdata,bool extradata,const JSpacePartBlock* block) const
LoadDouble3	JCfgRun.cpp	/^void JCfgRun::LoadDouble3(std::string txopt,double def,tdouble3 &v1){$/;"	f	class:JCfgRun	signature:(std::string txopt,double def,tdouble3 &v1)
LoadDouble3	JCfgRun.h	/^  static void LoadDouble3(std::string txopt,double def,tdouble3 &v1);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,double def,tdouble3 &v1)
LoadDouble6	JCfgRun.cpp	/^void JCfgRun::LoadDouble6(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2){$/;"	f	class:JCfgRun	signature:(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2)
LoadDouble6	JCfgRun.h	/^  static void LoadDouble6(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,double def,tdouble3 &v1,tdouble3 &v2)
LoadDsphConfig	JCfgRun.cpp	/^void JCfgRun::LoadDsphConfig(std::string path){$/;"	f	class:JCfgRun	signature:(std::string path)
LoadDsphConfig	JCfgRun.h	/^  void LoadDsphConfig(std::string path);$/;"	p	class:JCfgRun	access:protected	signature:(std::string path)
LoadFile	JBinaryData.cpp	/^void JBinaryData::LoadFile(const std::string &file,const std::string &filecode,bool memory){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory)
LoadFile	JBinaryData.h	/^  void LoadFile(const std::string &file,const std::string &filecode="",bool memory=false);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode=Ó,bool memory=false)
LoadFile	JCfgRun.cpp	/^void JCfgRun::LoadFile(string fname,int lv){$/;"	f	class:JCfgRun	signature:(string fname,int lv)
LoadFile	JCfgRun.h	/^  void LoadFile(std::string fname,int lv);$/;"	p	class:JCfgRun	access:public	signature:(std::string fname,int lv)
LoadFile	JLinearValue.cpp	/^void JLinearValue::LoadFile(std::string file){$/;"	f	class:JLinearValue	signature:(std::string file)
LoadFile	JLinearValue.h	/^  void LoadFile(std::string file);$/;"	p	class:JLinearValue	access:public	signature:(std::string file)
LoadFile	JPartDataHead.cpp	/^void JPartDataHead::LoadFile(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
LoadFile	JPartDataHead.h	/^  void LoadFile(std::string dir);$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir)
LoadFile	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::LoadFile(const std::string &dir){$/;"	f	class:JPartFloatBi4Load	signature:(const std::string &dir)
LoadFile	JPartFloatBi4.h	/^  void LoadFile(const std::string &dir);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(const std::string &dir)
LoadFile	JReadDatafile.cpp	/^void JReadDatafile::LoadFile(const std::string &file,unsigned maxsize){$/;"	f	class:JReadDatafile	signature:(const std::string &file,unsigned maxsize)
LoadFile	JReadDatafile.h	/^  void LoadFile(const std::string &file,unsigned maxsize=1048576000);$/;"	p	class:JReadDatafile	access:public	signature:(const std::string &file,unsigned maxsize=1048576000)
LoadFile	JSphAccInput.cpp	/^void JSphAccInputMk::LoadFile(std::string file,double tmax){$/;"	f	class:JSphAccInputMk	signature:(std::string file,double tmax)
LoadFile	JSphAccInput.h	/^  void LoadFile(std::string file,double tmax);$/;"	p	class:JSphAccInputMk	access:protected	signature:(std::string file,double tmax)
LoadFile	JSphDtFixed.cpp	/^void JSphDtFixed::LoadFile(std::string file){$/;"	f	class:JSphDtFixed	signature:(std::string file)
LoadFile	JSphDtFixed.h	/^  void LoadFile(std::string file);$/;"	p	class:JSphDtFixed	access:public	signature:(std::string file)
LoadFile	JSphVisco.cpp	/^void JSphVisco::LoadFile(std::string file){$/;"	f	class:JSphVisco	signature:(std::string file)
LoadFile	JSphVisco.h	/^  void LoadFile(std::string file);$/;"	p	class:JSphVisco	access:public	signature:(std::string file)
LoadFile	JXml.cpp	/^void JXml::LoadFile(const std::string &fname){$/;"	f	class:JXml	signature:(const std::string &fname)
LoadFile	JXml.h	/^  void LoadFile(const std::string &fname);$/;"	p	class:JXml	access:public	signature:(const std::string &fname)
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
LoadFile	tinyxml.h	/^    bool LoadFile( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	tinyxml.h	/^    bool LoadFile( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	tinyxml.h	/^    bool LoadFile( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFile	tinyxml.h	/^    bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )           \/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LoadFileAng	JMotionMov.cpp	/^void JMotionDataFile::LoadFileAng(std::string dirdata,std::string file,bool angdegrees){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,bool angdegrees)
LoadFileAng	JMotionMov.h	/^  void LoadFileAng(std::string dirdata,std::string file,bool angdegrees);$/;"	p	class:JMotionDataFile	access:private	signature:(std::string dirdata,std::string file,bool angdegrees)
LoadFileCase	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFileCase(std::string dir,std::string casename,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string dir,std::string casename,unsigned piece,unsigned npiece)
LoadFileCase	JPartDataBi4.h	/^  void LoadFileCase(std::string dir,std::string casename,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,std::string casename,unsigned piece=0,unsigned npiece=1)
LoadFileData	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFileData(std::string file,unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string file,unsigned cpart,unsigned piece,unsigned npiece)
LoadFileData	JPartDataBi4.h	/^  void LoadFileData(std::string file,unsigned cpart,unsigned piece,unsigned npiece);$/;"	p	class:JPartDataBi4	access:private	signature:(std::string file,unsigned cpart,unsigned piece,unsigned npiece)
LoadFileListApp	JBinaryData.cpp	/^void JBinaryData::LoadFileListApp(const std::string &file,const std::string &filecode,bool memory){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory)
LoadFileListApp	JBinaryData.h	/^  void LoadFileListApp(const std::string &file,const std::string &filecode,bool memory=false);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode,bool memory=false)
LoadFilePart	JPartDataBi4.cpp	/^void JPartDataBi4::LoadFilePart(std::string dir,unsigned cpart,unsigned piece,unsigned npiece){$/;"	f	class:JPartDataBi4	signature:(std::string dir,unsigned cpart,unsigned piece,unsigned npiece)
LoadFilePart	JPartDataBi4.h	/^  void LoadFilePart(std::string dir,unsigned cpart,unsigned piece=0,unsigned npiece=1);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string dir,unsigned cpart,unsigned piece=0,unsigned npiece=1)
LoadFilePos	JMotionMov.cpp	/^void JMotionDataFile::LoadFilePos(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz){$/;"	f	class:JMotionDataFile	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
LoadFilePos	JMotionMov.h	/^  void LoadFilePos(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz);$/;"	p	class:JMotionDataFile	access:private	signature:(std::string dirdata,std::string file,const int fields,const int fieldtime,const int fieldx,const int fieldy,const int fieldz)
LoadFileXml	JMotion.cpp	/^void JMotion::LoadFileXml(const std::string &dirdata,const std::string &file,const string &path){$/;"	f	class:JMotion	signature:(const std::string &dirdata,const std::string &file,const string &path)
LoadFileXml	JMotion.h	/^  void LoadFileXml(const std::string &dirdata,const std::string &file,const std::string &path);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata,const std::string &file,const std::string &path)
LoadFileXml	JSpaceEParms.cpp	/^void JSpaceEParms::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceEParms	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSpaceEParms.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSpaceParts.cpp	/^void JSpaceParts::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceParts	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSpaceParts.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceParts	access:public	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSpaceProperties.cpp	/^void JSpaceProperties::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSpaceProperties	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSpaceProperties.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSpaceProperties	access:public	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSphInitialize.cpp	/^void JSphInitialize::LoadFileXml(const std::string &file,const std::string &path){$/;"	f	class:JSphInitialize	signature:(const std::string &file,const std::string &path)
LoadFileXml	JSphInitialize.h	/^  void LoadFileXml(const std::string &file,const std::string &path);$/;"	p	class:JSphInitialize	access:private	signature:(const std::string &file,const std::string &path)
LoadFloat3	JCfgRun.cpp	/^void JCfgRun::LoadFloat3(std::string txopt,float def,tfloat3 &v1){$/;"	f	class:JCfgRun	signature:(std::string txopt,float def,tfloat3 &v1)
LoadFloat3	JCfgRun.h	/^  static void LoadFloat3(std::string txopt,float def,tfloat3 &v1);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,float def,tfloat3 &v1)
LoadFloat6	JCfgRun.cpp	/^void JCfgRun::LoadFloat6(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2){$/;"	f	class:JCfgRun	signature:(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2)
LoadFloat6	JCfgRun.h	/^  static void LoadFloat6(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2);$/;"	p	class:JCfgRun	access:protected	signature:(std::string txopt,float def,tfloat3 &v1,tfloat3 &v2)
LoadLinePoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2$/;"	f	class:JGaugeSystem	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2 ,std::vector<tdouble3> &points,const std::string &ref) const
LoadLinePoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2$/;"	f	class:JGaugeSystem	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2 ,std::vector<tdouble3> &points,const std::string &ref) const
LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points)const{ LoadLinePoints(coefdp,point1,point2,points,""); }$/;"	f	class:JGaugeSystem	access:public	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points) const
LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref)const;$/;"	p	class:JGaugeSystem	access:private	signature:(double coefdp,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref) const
LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points)const{ LoadLinePoints(count,point1,point2,points,""); }$/;"	f	class:JGaugeSystem	access:public	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points) const
LoadLinePoints	JGaugeSystem.h	/^  void LoadLinePoints(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref)const;$/;"	p	class:JGaugeSystem	access:private	signature:(unsigned count,const tdouble3 &point1,const tdouble3 &point2,std::vector<tdouble3> &points,const std::string &ref) const
LoadOpts	JCfgRun.cpp	/^void JCfgRun::LoadOpts(string *optlis,int optn,int lv,string file){$/;"	f	class:JCfgRun	signature:(string *optlis,int optn,int lv,string file)
LoadOpts	JCfgRun.h	/^  void LoadOpts(std::string *optlis,int optn,int lv,std::string file);$/;"	p	class:JCfgRun	access:public	signature:(std::string *optlis,int optn,int lv,std::string file)
LoadPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::LoadPart(unsigned cpart){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned cpart)
LoadPart	JPartFloatBi4.h	/^  void LoadPart(unsigned cpart);$/;"	p	class:JPartFloatBi4Load	access:public	signature:(unsigned cpart)
LoadParticleData	JSphPartsInit.cpp	/^void JSphPartsInit::LoadParticleData(unsigned np,const tdouble3 *pos,const typecode *code){$/;"	f	class:JSphPartsInit	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
LoadParticleData	JSphPartsInit.h	/^  void LoadParticleData(unsigned np,const tdouble3 *pos,const typecode *code);$/;"	p	class:JSphPartsInit	access:private	signature:(unsigned np,const tdouble3 *pos,const typecode *code)
LoadParticles	JPartsLoad4.cpp	/^void JPartsLoad4::LoadParticles(const std::string &casedir,const std::string &casename$/;"	f	class:JPartsLoad4	signature:(const std::string &casedir,const std::string &casename ,unsigned partbegin,const std::string &casedirbegin)
LoadParticles	JPartsLoad4.h	/^  void LoadParticles(const std::string &casedir,const std::string &casename,unsigned partbegin,const std::string &casedirbegin);$/;"	p	class:JPartsLoad4	access:public	signature:(const std::string &casedir,const std::string &casename,unsigned partbegin,const std::string &casedirbegin)
LoadPoints	JGaugeSystem.cpp	/^void JGaugeSystem::LoadPoints(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points)const{$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points) const
LoadPoints	JGaugeSystem.h	/^  void LoadPoints(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points)const;$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* lis,std::vector<tdouble3> &points) const
LoadProperties	JSpaceParts.cpp	/^void JSpaceParts::LoadProperties(const JSpaceProperties *props){$/;"	f	class:JSpaceParts	signature:(const JSpaceProperties *props)
LoadProperties	JSpaceParts.h	/^  void LoadProperties(const JSpaceProperties *props);$/;"	p	class:JSpaceParts	access:public	signature:(const JSpaceProperties *props)
LoadXml	JDamping.cpp	/^void JDamping::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JDamping	signature:(JXml *sxml,const std::string &place)
LoadXml	JDamping.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JDamping	access:public	signature:(JXml *sxml,const std::string &place)
LoadXml	JGaugeSystem.cpp	/^void JGaugeSystem::LoadXml(JXml *sxml,const std::string &place,const JSphMk* mkinfo){$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,const std::string &place,const JSphMk* mkinfo)
LoadXml	JGaugeSystem.h	/^  void LoadXml(JXml *sxml,const std::string &place,const JSphMk* mkinfo);$/;"	p	class:JGaugeSystem	access:public	signature:(JXml *sxml,const std::string &place,const JSphMk* mkinfo)
LoadXml	JSaveDt.cpp	/^void JSaveDt::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSaveDt	signature:(JXml *sxml,const std::string &place)
LoadXml	JSaveDt.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSaveDt	access:private	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceEParms.cpp	/^void JSpaceEParms::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceEParms.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceEParms	access:public	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceParts.cpp	/^void JSpaceParts::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceParts	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceParts.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceParts	access:public	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceProperties.cpp	/^void JSpaceProperties::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceProperties.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,const std::string &place)
LoadXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::LoadXml(const JXml *sxml,const std::string &place,bool optional){$/;"	f	class:JSpaceVtkOut	signature:(const JXml *sxml,const std::string &place,bool optional)
LoadXml	JSpaceVtkOut.h	/^  void LoadXml(const JXml *sxml,const std::string &place,bool optional);$/;"	p	class:JSpaceVtkOut	access:public	signature:(const JXml *sxml,const std::string &place,bool optional)
LoadXml	JSphAccInput.cpp	/^void JSphAccInput::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSphAccInput	signature:(JXml *sxml,const std::string &place)
LoadXml	JSphAccInput.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSphAccInput	access:protected	signature:(JXml *sxml,const std::string &place)
LoadXml	JSphInitialize.cpp	/^void JSphInitialize::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JSphInitialize	signature:(JXml *sxml,const std::string &place)
LoadXml	JSphInitialize.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JSphInitialize	access:private	signature:(JXml *sxml,const std::string &place)
LoadXml	JTimeOut.cpp	/^void JTimeOut::LoadXml(JXml *sxml,const std::string &place){$/;"	f	class:JTimeOut	signature:(JXml *sxml,const std::string &place)
LoadXml	JTimeOut.h	/^  void LoadXml(JXml *sxml,const std::string &place);$/;"	p	class:JTimeOut	access:protected	signature:(JXml *sxml,const std::string &place)
LoadXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::LoadXmlDef(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place)
LoadXmlDef	JSpaceCtes.h	/^  void LoadXmlDef(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place)
LoadXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::LoadXmlRun(JXml *sxml,const std::string &place){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place)
LoadXmlRun	JSpaceCtes.h	/^  void LoadXmlRun(JXml *sxml,const std::string &place);$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place)
Log	JAppInfo.h	/^  JLog2* Log;$/;"	m	class:JAppInfo	access:private
Log	JBlockSizeAuto.h	/^  JLog2 *Log;$/;"	m	class:JBlockSizeAuto	access:protected
Log	JBlockSizeAuto.h	/^  JLog2 *Log;$/;"	m	class:JBlockSizeAutoKer	access:protected
Log	JCellDivCpu.h	/^  JLog2 *Log;$/;"	m	class:JCellDivCpu	access:protected
Log	JCellDivGpu.h	/^  JLog2 *Log;$/;"	m	class:JCellDivGpu	access:protected
Log	JDamping.h	/^  JLog2* Log;$/;"	m	class:JDamping	access:private
Log	JGaugeItem.h	/^  JLog2* Log;$/;"	m	class:JGaugeItem	access:protected
Log	JGaugeSystem.h	/^  JLog2* Log;$/;"	m	class:JGaugeSystem	access:private
Log	JSaveDt.h	/^  JLog2* Log;$/;"	m	class:JSaveDt	access:private
Log	JSph.h	/^  JLog2 *Log;$/;"	m	class:JSph	access:protected
Log	JSphAccInput.h	/^  JLog2* Log;$/;"	m	class:JSphAccInput	access:protected
Log	JSphAccInput.h	/^  JLog2* Log;$/;"	m	class:JSphAccInputMk	access:protected
LogDefined	JAppInfo.h	/^  bool LogDefined()const{ return(Log!=NULL); }$/;"	f	class:JAppInfo	access:public	signature:() const
LogDefined	JAppInfo.h	/^  bool LogDefined()const{ return(false); }$/;"	f	class:JAppInfo	access:public	signature:() const
LogInit	JAppInfo.cpp	/^void JAppInfo::LogInit(std::string fname,bool mpirun,int mpirank,int mpilaunch){$/;"	f	class:JAppInfo	signature:(std::string fname,bool mpirun,int mpirank,int mpilaunch)
LogInit	JAppInfo.h	/^  void LogInit(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0);$/;"	p	class:JAppInfo	access:public	signature:(std::string fname,bool mpirun=false,int mpirank=0,int mpilaunch=0)
LogPtr	JAppInfo.h	/^  JLog2* LogPtr(){ return(Log); }$/;"	f	class:JAppInfo	access:public	signature:()
LongStr	Functions.cpp	/^std::string LongStr(llong v){$/;"	f	namespace:fun	signature:(llong v)
LongStr	Functions.h	/^std::string LongStr(llong v);$/;"	p	namespace:fun	signature:(llong v)
MAXPOINTERS	JArraysCpu.h	/^  static const unsigned MAXPOINTERS=30;$/;"	m	class:JArraysCpuSize	access:protected
MAXPOINTERS	JArraysGpu.h	/^  static const unsigned MAXPOINTERS=30;$/;"	m	class:JArraysGpuSize	access:protected
MAX_ENTITY_LENGTH	tinyxml.h	/^        MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon77
MEANDEPTH	JBlockSizeAuto.h	/^  static const int MEANDEPTH=10;$/;"	m	class:JBlockSizeAutoKer	access:protected
MERS_A	randomc.h	162;"	d
MERS_B	randomc.h	163;"	d
MERS_C	randomc.h	164;"	d
MERS_L	randomc.h	161;"	d
MERS_M	randomc.h	156;"	d
MERS_N	randomc.h	155;"	d
MERS_R	randomc.h	157;"	d
MERS_S	randomc.h	159;"	d
MERS_T	randomc.h	160;"	d
MERS_U	randomc.h	158;"	d
MOMT_Ace2dt	JSphMotion.h	/^    MOMT_Ace2dt=1,  \/\/\/<Calculates acceleration using one dt in the future (always from the beginning).$/;"	e	enum:JSphMotion::__anon36
MOMT_Simple	JSphMotion.h	/^    MOMT_Simple=0,  \/\/\/<Simple mode for only forward.$/;"	e	enum:JSphMotion::__anon36
MOUT_File	Types.h	/^  MOUT_File=2,     \/\/\/<Output in the log.$/;"	e	enum:__anon46
MOUT_None	Types.h	/^  MOUT_None=0      \/\/\/<No output.$/;"	e	enum:__anon46
MOUT_ScrFile	Types.h	/^  MOUT_ScrFile=3,  \/\/\/<Output on the screen and log.$/;"	e	enum:__anon46
MOUT_Screen	Types.h	/^  MOUT_Screen=1,   \/\/\/<Output on the screen.$/;"	e	enum:__anon46
MainName	JAppInfo.h	/^  std::string MainName;$/;"	m	class:JAppInfo	access:private
MainNameExtra	JAppInfo.h	/^  std::string MainNameExtra;$/;"	m	class:JAppInfo	access:private
MainVer	JAppInfo.h	/^  std::string MainVer;$/;"	m	class:JAppInfo	access:private
MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,const std::string &v){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,const std::string &v)
MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,double v,const char* fmt){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,double v,const char* fmt)
MakeElementAttrib	JXml.cpp	/^TiXmlElement JXml::MakeElementAttrib(const std::string &name,const std::string &attrib,int v){$/;"	f	class:JXml	signature:(const std::string &name,const std::string &attrib,int v)
MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,const std::string &v);$/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,const std::string &v)
MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,double v,const char* fmt="%g"); $/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,double v,const char* fmt=Ó)
MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,int v);$/;"	p	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,int v)
MakeElementAttrib	JXml.h	/^  static TiXmlElement MakeElementAttrib(const std::string &name,const std::string &attrib,unsigned v){ return(MakeElementAttrib(name,attrib,v));}$/;"	f	class:JXml	access:public	signature:(const std::string &name,const std::string &attrib,unsigned v)
MakeElementDouble3	JXml.cpp	/^TiXmlElement JXml::MakeElementDouble3(const std::string &name,const tdouble3 &v,const char* name1,const char* name2,const char* name3){$/;"	f	class:JXml	signature:(const std::string &name,const tdouble3 &v,const char* name1,const char* name2,const char* name3)
MakeElementDouble3	JXml.h	/^  static TiXmlElement MakeElementDouble3(const std::string &name,const tdouble3 &v,const char* name1="x",const char* name2="y",const char* name3="z");$/;"	p	class:JXml	access:public	signature:(const std::string &name,const tdouble3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
MakeElementFloat3	JXml.h	/^  static TiXmlElement MakeElementFloat3(const std::string &name,const tfloat3 &v,const char* name1="x",const char* name2="y",const char* name3="z"){ return(MakeElementDouble3(name,TDouble3(v.x,v.y,v.z),name1,name2,name3)); }$/;"	f	class:JXml	access:public	signature:(const std::string &name,const tfloat3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
MakeElementInt3	JXml.cpp	/^TiXmlElement JXml::MakeElementInt3(const std::string &name,const tint3 &v,const char* name1,const char* name2,const char* name3){$/;"	f	class:JXml	signature:(const std::string &name,const tint3 &v,const char* name1,const char* name2,const char* name3)
MakeElementInt3	JXml.h	/^  static TiXmlElement MakeElementInt3(const std::string &name,const tint3 &v,const char* name1="x",const char* name2="y",const char* name3="z");$/;"	p	class:JXml	access:public	signature:(const std::string &name,const tint3 &v,const char* name1=Ó,const char* name2=Ó,const char* name3=Ó)
MakeElementMatrixDouble	JXml.cpp	/^TiXmlElement JXml::MakeElementMatrixDouble(const std::string &name$/;"	f	class:JXml	signature:(const std::string &name ,unsigned nrows,unsigned ncols,const double* values)
MakeElementMatrixDouble	JXml.h	/^  static TiXmlElement MakeElementMatrixDouble(const std::string &name,unsigned nrows,unsigned ncols,const double* values);$/;"	p	class:JXml	access:public	signature:(const std::string &name,unsigned nrows,unsigned ncols,const double* values)
MakeFileHead	JBinaryData.cpp	/^JBinaryData::StHeadFmtBin JBinaryData::MakeFileHead(const std::string &filecode)const{$/;"	f	class:JBinaryData	signature:(const std::string &filecode) const
MakeFileHead	JBinaryData.h	/^  JBinaryData::StHeadFmtBin MakeFileHead(const std::string &filecode)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &filecode) const
MakeIndex	JRadixSort.cpp	/^void JRadixSort::MakeIndex(unsigned size,const ullong *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(unsigned size,const ullong *data,unsigned nbits)
MakeIndex	JRadixSort.cpp	/^void JRadixSort::MakeIndex(unsigned size,const unsigned *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data,unsigned nbits)
MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const ullong *data){ MakeIndex(size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data)
MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const ullong *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const ullong *data,unsigned nbits)
MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const unsigned *data){ MakeIndex(size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data)
MakeIndex	JRadixSort.h	/^  void MakeIndex(unsigned size,const unsigned *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data,unsigned nbits)
MakeSortFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MakeSortFluid(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const{$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
MakeSortFluid	JCellDivCpuSingle.h	/^  void MakeSortFluid(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,unsigned pini,const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
MakeSortFull	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MakeSortFull(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const{$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
MakeSortFull	JCellDivCpuSingle.h	/^  void MakeSortFull(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned* cellpart,unsigned* begincell,unsigned* partsincell,unsigned* sortpart) const
Malloc	FunctionsCuda.cpp	/^size_t Malloc(byte **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(byte **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(double **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(double2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double2 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(double3 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double3 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(float **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(float2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float2 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(float3 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float3 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(float4 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float4 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(int **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(int2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int2 **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(unsigned **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(unsigned **ptr,unsigned count)
Malloc	FunctionsCuda.cpp	/^size_t Malloc(word **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(word **ptr,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(byte     **,unsigned count);$/;"	p	namespace:fcuda	signature:(byte **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(double   **,unsigned count);$/;"	p	namespace:fcuda	signature:(double **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(double2  **,unsigned count);$/;"	p	namespace:fcuda	signature:(double2 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(double3  **,unsigned count);$/;"	p	namespace:fcuda	signature:(double3 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(float    **,unsigned count);$/;"	p	namespace:fcuda	signature:(float **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(float2   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float2 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(float3   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float3 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(float4   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float4 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(int      **,unsigned count);$/;"	p	namespace:fcuda	signature:(int **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(int2     **,unsigned count);$/;"	p	namespace:fcuda	signature:(int2 **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(unsigned **,unsigned count);$/;"	p	namespace:fcuda	signature:(unsigned **,unsigned count)
Malloc	FunctionsCuda.h	/^size_t Malloc(word     **,unsigned count);$/;"	p	namespace:fcuda	signature:(word **,unsigned count)
MapPosMax	JPartDataHead.h	/^  tdouble3 MapPosMax;    \/\/\/<Upper limit of simulation + edge 2h if periodic conditions.$/;"	m	class:JPartDataHead	access:private
MapPosMax	JPartsLoad4.h	/^  tdouble3 MapPosMin,MapPosMax;  \/\/\/<Domain limits that already include the border. | Limites del dominio que ya incluyen el borde.$/;"	m	class:JPartsLoad4	access:protected
MapPosMin	JPartDataHead.h	/^  tdouble3 MapPosMin;    \/\/\/<Lower limit of simulation + edge 2h if periodic conditions.$/;"	m	class:JPartDataHead	access:private
MapPosMin	JPartsLoad4.h	/^  tdouble3 MapPosMin,MapPosMax;  \/\/\/<Domain limits that already include the border. | Limites del dominio que ya incluyen el borde.$/;"	m	class:JPartsLoad4	access:protected
MapRealPosMax	JSph.h	/^  tdouble3 MapRealPosMax;  \/\/\/<Real upper limit of simulation (without the periodic condition borders). MapRealPosMax=CasePosMax+(H*BORDER_MAP) | Limite superior real de simulacion (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
MapRealPosMin	JSph.h	/^  tdouble3 MapRealPosMin;  \/\/\/<Real lower limit of simulation (without the periodic condition borders). MapRealPosMin=CasePosMin-(H*BORDER_MAP) | Limite inferior real de simulacion (sin bordes de condiciones periodicas).$/;"	m	class:JSph	access:protected
MapRealSize	JSph.h	/^  tdouble3 MapRealSize;    \/\/\/<Result of MapRealSize = MapRealPosMax - MapRealPosMin$/;"	m	class:JSph	access:protected
MapSize	JPartsLoad4.h	/^  bool MapSize;                  \/\/\/<Indicates whether MapPosMin and MapPosMax are valid. | Indica si MapPosMin y MapPosMax son validos.$/;"	m	class:JPartsLoad4	access:protected
MapSizeLoaded	JPartsLoad4.h	/^  bool MapSizeLoaded()const{ return(MapSize); }$/;"	f	class:JPartsLoad4	access:public	signature:() const
Map_Cells	JCellDivCpu.h	/^  const tuint3 Map_Cells;$/;"	m	class:JCellDivCpu	access:protected
Map_Cells	JCellDivGpu.h	/^  const tuint3 Map_Cells;$/;"	m	class:JCellDivGpu	access:protected
Map_Cells	JSph.h	/^  tuint3 Map_Cells;        \/\/\/<Maximum number of cells within case limits. Map_Cells=TUint3(unsigned(ceil(Map_Size.xyz\/Scell))             | Numero de celdas maximo segun los limites del caso.$/;"	m	class:JSph	access:protected
Map_PosDif	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
Map_PosDif	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
Map_PosMax	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
Map_PosMax	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
Map_PosMax	JSph.h	/^  tdouble3 Map_PosMax;     \/\/\/<Upper limit of simulation + edge 2h if periodic conditions. Map_PosMax=MapRealPosMax+dosh(in periodic axis) | Limite superior de simulacion + borde 2h si hay condiciones periodicas.$/;"	m	class:JSph	access:protected
Map_PosMin	JCellDivCpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivCpu	access:protected
Map_PosMin	JCellDivGpu.h	/^  const tdouble3 Map_PosMin,Map_PosMax,Map_PosDif;$/;"	m	class:JCellDivGpu	access:protected
Map_PosMin	JSph.h	/^  tdouble3 Map_PosMin;     \/\/\/<Lower limit of simulation + edge 2h if periodic conditions. Map_PosMin=MapRealPosMin-dosh(in periodic axis) | Limite inferior de simulacion + borde 2h si hay condiciones periodicas.$/;"	m	class:JSph	access:protected
Map_Size	JSph.h	/^  tdouble3 Map_Size;       \/\/\/<Result of Map_Size = Map_PosMax - Map_PosMin$/;"	m	class:JSph	access:protected
MassBound	JGaugeItem.h	/^  float MassBound;$/;"	m	class:JGaugeItem	access:protected
MassBound	JGaugeSystem.h	/^  float MassBound;$/;"	m	class:JGaugeSystem	access:private
MassBound	JPartDataHead.h	/^  double MassBound;  $/;"	m	class:JPartDataHead	access:private
MassBound	JSpaceCtes.h	/^  double MassBound;       \/\/\/<Mass of a boundary particle.$/;"	m	class:JSpaceCtes	access:private
MassBound	JSph.h	/^  float MassFluid,MassBound;  $/;"	m	class:JSph	access:protected
MassBoundAuto	JSpaceCtes.h	/^  bool MassBoundAuto;     \/\/\/<Activates the automatic computation of MassBound.$/;"	m	class:JSpaceCtes	access:private
MassFluid	JGaugeItem.h	/^  float MassFluid;$/;"	m	class:JGaugeItem	access:protected
MassFluid	JGaugeSystem.h	/^  float MassFluid;$/;"	m	class:JGaugeSystem	access:private
MassFluid	JPartDataHead.h	/^  double MassFluid;$/;"	m	class:JPartDataHead	access:private
MassFluid	JSpaceCtes.h	/^  double MassFluid;       \/\/\/<Mass of a fluid particle.$/;"	m	class:JSpaceCtes	access:private
MassFluid	JSph.h	/^  float MassFluid,MassBound;  $/;"	m	class:JSph	access:protected
MassFluidAuto	JSpaceCtes.h	/^  bool MassFluidAuto;     \/\/\/<Activates the automatic computation of MassFluid.$/;"	m	class:JSpaceCtes	access:private
MassLimit	JGaugeItem.h	/^  float MassLimit;$/;"	m	class:JGaugeSwl	access:protected
Massbody	JSpaceParts.h	/^  double Massbody;$/;"	m	class:JSpacePartBlock_Floating	access:private
MatrixMov	JMatrix4.h	/^  static JMatrix4 MatrixMov(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
MatrixMulPoint	TypesDef.h	/^inline tdouble3 MatrixMulPoint(const tmatrix4d &m,const tdouble3 &p){ return(TDouble3(m.a11*p.x + m.a12*p.y + m.a13*p.z + m.a14, m.a21*p.x + m.a22*p.y + m.a23*p.z + m.a24, m.a31*p.x + m.a32*p.y + m.a33*p.z + m.a34)); }$/;"	f	signature:(const tmatrix4d &m,const tdouble3 &p)
MatrixMulPoint	TypesDef.h	/^inline tfloat3 MatrixMulPoint(const tmatrix4f &m,const tfloat3 &p){ return(TFloat3(m.a11*p.x + m.a12*p.y + m.a13*p.z + m.a14, m.a21*p.x + m.a22*p.y + m.a23*p.z + m.a24, m.a31*p.x + m.a32*p.y + m.a33*p.z + m.a34)); }$/;"	f	signature:(const tmatrix4f &m,const tfloat3 &p)
MatrixMulPointNormal	TypesDef.h	/^inline tfloat3 MatrixMulPointNormal(const tmatrix4d &m,const tfloat3 &p){ return(ToTFloat3(TDouble3(m.a11*p.x + m.a12*p.y + m.a13*p.z, m.a21*p.x + m.a22*p.y + m.a23*p.z, m.a31*p.x + m.a32*p.y + m.a33*p.z))); }$/;"	f	signature:(const tmatrix4d &m,const tfloat3 &p)
MatrixRot	JMatrix4.h	/^  static JMatrix4 MatrixRot(T ang,const T3 &axisp1,const T3 &axisp2){$/;"	f	class:JMatrix4	access:public	signature:(T ang,const T3 &axisp1,const T3 &axisp2)
MatrixScale	JMatrix4.h	/^  static JMatrix4 MatrixScale(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
Max	JMeanValues.h	/^  double Max;$/;"	m	class:JMeanValue	access:public
MaxCells	JSph.h	/^  unsigned MaxCells;      \/\/\/<Maximum number of cells.       | Numero maximo de celdas.                   $/;"	m	class:JSph	access:protected
MaxMemoryCpu	JSph.h	/^  llong MaxMemoryCpu;     \/\/\/<Amount of reserved CPU memory. | Cantidad de memoria Cpu reservada.            $/;"	m	class:JSph	access:protected
MaxMemoryGpu	JSph.h	/^  llong MaxMemoryGpu;     \/\/\/<Amount of reserved GPU memory. | Cantidad de memoria Gpu reservada.$/;"	m	class:JSph	access:protected
MaxParticles	JSph.h	/^  unsigned MaxParticles;  \/\/\/<Maximum number of particles.   | Numero maximo de particulas.$/;"	m	class:JSph	access:protected
MaxValues	TypesDef.h	/^inline tdouble3 MaxValues(const tdouble3& a, const tdouble3& b){ return(TDouble3((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y),(a.z>=b.z? a.z: b.z))); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
MaxValues	TypesDef.h	/^inline tfloat2 MaxValues(const tfloat2& a, const tfloat2& b){ return(TFloat2((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y))); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
MaxValues	TypesDef.h	/^inline tfloat3 MaxValues(const tfloat3& a, const tfloat3& b){ return(TFloat3((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y),(a.z>=b.z? a.z: b.z))); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
MaxValues	TypesDef.h	/^inline tint2 MaxValues(const tint2& a,const tint2& b){ return(TInt2((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y))); }$/;"	f	signature:(const tint2& a,const tint2& b)
MaxValues	TypesDef.h	/^inline tint3 MaxValues(const tint3& a, const tint3& b){ return(TInt3((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y),(a.z>=b.z? a.z: b.z))); }$/;"	f	signature:(const tint3& a, const tint3& b)
MaxValues	TypesDef.h	/^inline tuint2 MaxValues(const tuint2& a,const tuint2& b){ return(TUint2((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y))); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
MaxValues	TypesDef.h	/^inline tuint3 MaxValues(const tuint3& a, const tuint3& b){ return(TUint3((a.x>=b.x? a.x: b.x),(a.y>=b.y? a.y: b.y),(a.z>=b.z? a.z: b.z))); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
Mean	JMeanValues.h	/^  double Mean;$/;"	m	class:JMeanValue	access:public
MeanExp	JBlockSizeAuto.h	/^  JMeanMoving *MeanExp;$/;"	m	class:JBlockSizeAutoKer	access:protected
MeanTot	JBlockSizeAuto.h	/^  JMeanValue *MeanTot;$/;"	m	class:JBlockSizeAutoKer	access:protected
MemAllocGpuNct	JCellDivGpu.h	/^  ullong MemAllocGpuNct; \/\/\/<GPU memory reserved for cells. | Mermoria GPU reservada para celdas.$/;"	m	class:JCellDivGpu	access:protected
MemAllocGpuNp	JCellDivGpu.h	/^  ullong MemAllocGpuNp;  \/\/\/<GPU memory reserved for particles. | Mermoria GPU reservada para particulas.$/;"	m	class:JCellDivGpu	access:protected
MemAllocNct	JCellDivCpu.h	/^  llong MemAllocNct; \/\/\/<Memory reserved for cells. | Mermoria reservada para celdas.$/;"	m	class:JCellDivCpu	access:protected
MemAllocNp	JCellDivCpu.h	/^  llong MemAllocNp;  \/\/\/<Memory reserved for particles. | Mermoria reservada para particulas.$/;"	m	class:JCellDivCpu	access:protected
MemCpuFixed	JSphCpu.h	/^  llong MemCpuFixed;          \/\/\/<Memory reserved in AllocMemoryFixed. | Mermoria reservada en AllocMemoryFixed.$/;"	m	class:JSphCpu	access:protected
MemCpuFixed	JSphGpu.h	/^  llong MemCpuFixed;         \/\/\/<Allocated memory in AllocCpuMemoryFixed. | Mermoria reservada en AllocCpuMemoryFixed. $/;"	m	class:JSphGpu	access:protected
MemCpuParticles	JSphCpu.h	/^  llong MemCpuParticles;      \/\/\/<Memory reserved for particles' vectors. | Mermoria reservada para vectores de datos de particulas.$/;"	m	class:JSphCpu	access:protected
MemCpuParticles	JSphGpu.h	/^  llong MemCpuParticles;     \/\/\/<Allocated CPU memory for arrays with particle data. | Mermoria reservada para vectores de datos de particulas. $/;"	m	class:JSphGpu	access:protected
MemGpuFixed	JSphGpu.h	/^  llong MemGpuFixed;          \/\/\/<Allocated memory in AllocGpuMemoryFixed. | Memoria reservada en AllocGpuMemoryFixed. $/;"	m	class:JSphGpu	access:protected
MemGpuFixed	JWaveSpectrumGpu.h	/^  llong MemGpuFixed;$/;"	m	class:JWaveSpectrumGpu	access:private
MemGpuParticles	JSphGpu.h	/^  llong MemGpuParticles;      \/\/\/<Allocated GPU memory for arrays with particle data. | Mermoria reservada para vectores de datos de particulas.$/;"	m	class:JSphGpu	access:protected
MemSize	JSphAccInput.h	/^  long long MemSize;$/;"	m	class:JSphAccInput	access:protected
MergeMapCellBoundFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const{$/;"	f	class:JCellDivCpuSingle	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
MergeMapCellBoundFluid	JCellDivCpuSingle.h	/^  void MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
MergeMapCellBoundFluid	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const{$/;"	f	class:JCellDivGpuSingle	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
MergeMapCellBoundFluid	JCellDivGpuSingle.h	/^  void MergeMapCellBoundFluid(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax)const;$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const tuint3 &celbmin,const tuint3 &celbmax,const tuint3 &celfmin,const tuint3 &celfmax,tuint3 &celmin,tuint3 &celmax) const
Method	JException.h	/^  std::string Method;    \/\/\/<Name of the method that generated an exception. $/;"	m	class:JException	access:protected
Min	JMeanValues.h	/^  double Min;$/;"	m	class:JMeanValue	access:public
MinValues	TypesDef.h	/^inline tdouble3 MinValues(const tdouble3& a, const tdouble3& b){ return(TDouble3((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y),(a.z<=b.z? a.z: b.z))); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
MinValues	TypesDef.h	/^inline tfloat2 MinValues(const tfloat2& a, const tfloat2& b){ return(TFloat2((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y))); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
MinValues	TypesDef.h	/^inline tfloat3 MinValues(const tfloat3& a, const tfloat3& b){ return(TFloat3((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y),(a.z<=b.z? a.z: b.z))); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
MinValues	TypesDef.h	/^inline tint2 MinValues(const tint2& a,const tint2& b){ return(TInt2((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y))); }$/;"	f	signature:(const tint2& a,const tint2& b)
MinValues	TypesDef.h	/^inline tint3 MinValues(const tint3& a, const tint3& b){ return(TInt3((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y),(a.z<=b.z? a.z: b.z))); }$/;"	f	signature:(const tint3& a, const tint3& b)
MinValues	TypesDef.h	/^inline tuint2 MinValues(const tuint2& a,const tuint2& b){ return(TUint2((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y))); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
MinValues	TypesDef.h	/^inline tuint3 MinValues(const tuint3& a, const tuint3& b){ return(TUint3((a.x<=b.x? a.x: b.x),(a.y<=b.y? a.y: b.y),(a.z<=b.z? a.z: b.z))); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
Mk	JPartDataHead.h	/^  unsigned Mk;        \/\/\/<Absolute label.$/;"	m	class:JPartDataHeadMkBlock	access:public
Mk	JSpaceParts.h	/^  word Mk;                              \/\/\/<Absolute label.$/;"	m	class:JSpacePartBlock	access:private
Mk	JSphMk.h	/^  const unsigned Mk;      \/\/\/<Absolute label.$/;"	m	class:JSphMkBlock	access:public
MkBlockCount	JPartDataHead.h	/^  unsigned MkBlockCount()const{ return(MkListSize); };$/;"	f	class:JPartDataHead	access:public	signature:() const
MkBound	JGaugeItem.h	/^  word MkBound;$/;"	m	class:JGaugeForce	access:protected
MkBoundFirst	JPartDataHead.h	/^  unsigned MkBoundFirst; \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartDataHead	access:private
MkBoundFirst	JPartFloatBi4.h	/^  word MkBoundFirst;      \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartFloatBi4Load	access:private
MkBoundFirst	JPartFloatBi4.h	/^  word MkBoundFirst;     \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JPartFloatBi4Save	access:private
MkBoundFirst	JSpaceParts.h	/^  word MkBoundFirst,MkFluidFirst;$/;"	m	class:JSpaceParts	access:private
MkBoundFirst	JSpaceVtkOut.h	/^  word MkBoundFirst;$/;"	m	class:JSpaceVtkOut	access:private
MkBoundFirst	JSphMk.h	/^  word MkBoundFirst;     \/\/\/<First Mk for boundary blocks (Mk=MkBound+MkBoundFirst).$/;"	m	class:JSphMk	access:private
MkCount	JSpaceParts.h	/^  unsigned MkCount;$/;"	m	class:JSpacePartsGetMk	access:private
MkFluid	JSphAccInput.h	/^  word MkFluid;              \/\/\/<The MK values stored in the acceleration input file.$/;"	m	class:JSphAccInputMk	access:protected
MkFluid	JSphInitialize.h	/^  std::string MkFluid;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
MkFluidFirst	JPartDataHead.h	/^  unsigned MkFluidFirst; \/\/\/<First Mk for fluid blocks (Mk=MkFluid+MkFluidFirst).$/;"	m	class:JPartDataHead	access:private
MkFluidFirst	JSpaceParts.h	/^  word MkBoundFirst,MkFluidFirst;$/;"	m	class:JSpaceParts	access:private
MkFluidFirst	JSpaceVtkOut.h	/^  word MkFluidFirst;$/;"	m	class:JSpaceVtkOut	access:private
MkFluidFirst	JSphMk.h	/^  word MkFluidFirst;     \/\/\/<First Mk for fluid blocks (Mk=MkFluid+MkFluidFirst).$/;"	m	class:JSphMk	access:private
MkInfo	JSph.h	/^  JSphMk *MkInfo;            \/\/\/<Stores information for the Mk of the particles.$/;"	m	class:JSph	access:protected
MkInfo	JSphPartsInit.h	/^  const JSphMk* MkInfo;$/;"	m	class:JSphPartsInit	access:private
MkList	JPartDataHead.h	/^  std::vector<JPartDataHeadMkBlock> MkList;$/;"	m	class:JPartDataHead	access:private
MkList	JSphMk.h	/^  std::vector<JSphMkBlock*> MkList;$/;"	m	class:JSphMk	access:private
MkListBound	JPartDataHead.h	/^  unsigned MkListBound;  \/\/\/<Number of Mk blocks of boundary types. MkListBound=MkListFixed+MkListMoving+MkListFloat$/;"	m	class:JPartDataHead	access:private
MkListBound	JSphMk.h	/^  unsigned MkListBound;      \/\/\/<Number of Mk blocks of boundary types. MkListBound=MkListFixed+MkListMoving+MkListFloat$/;"	m	class:JSphMk	access:private
MkListFixed	JPartDataHead.h	/^  unsigned MkListFixed;  \/\/\/<Number of Mk blocks of fixed type.$/;"	m	class:JPartDataHead	access:private
MkListFixed	JSphMk.h	/^  unsigned MkListFixed;      \/\/\/<Number of Mk blocks of fixed type.$/;"	m	class:JSphMk	access:private
MkListFloat	JPartDataHead.h	/^  unsigned MkListFloat;  \/\/\/<Number of Mk blocks of floating type.$/;"	m	class:JPartDataHead	access:private
MkListFloat	JSphMk.h	/^  unsigned MkListFloat;      \/\/\/<Number of Mk blocks of floating type.$/;"	m	class:JSphMk	access:private
MkListFluid	JPartDataHead.h	/^  unsigned MkListFluid;  \/\/\/<Number of Mk blocks of fluid type.$/;"	m	class:JPartDataHead	access:private
MkListFluid	JSphMk.h	/^  unsigned MkListFluid;      \/\/\/<Number of Mk blocks of fluid type.$/;"	m	class:JSphMk	access:private
MkListMoving	JPartDataHead.h	/^  unsigned MkListMoving; \/\/\/<Number of Mk blocks of moving type.$/;"	m	class:JPartDataHead	access:private
MkListMoving	JSphMk.h	/^  unsigned MkListMoving;     \/\/\/<Number of Mk blocks of moving type.$/;"	m	class:JSphMk	access:private
MkListSize	JPartDataHead.h	/^  unsigned MkListSize;   \/\/\/<Total number of Mk blocks.$/;"	m	class:JPartDataHead	access:private
MkListSize	JSphMk.h	/^  unsigned MkListSize;       \/\/\/<Total number of Mk blocks.$/;"	m	class:JSphMk	access:private
MkRange	JSpaceParts.h	/^  unsigned *MkRange;$/;"	m	class:JSpacePartsGetMk	access:private
MkSplitting	JSpaceParts.h	/^  word MkSplitting;$/;"	m	class:JSpacePartsGetMk	access:private
MkType	JPartDataHead.h	/^  unsigned MkType;    \/\/\/<Label of block fluid or bound.$/;"	m	class:JPartDataHeadMkBlock	access:public
MkType	JSpaceParts.h	/^  word MkType;                          \/\/\/<Label of block fluid or bound.$/;"	m	class:JSpacePartBlock	access:private
MkType	JSphMk.h	/^  const unsigned MkType;  \/\/\/<Label of block fluid or bound.$/;"	m	class:JSphMkBlock	access:public
MkValue	JSpaceParts.h	/^  word *MkValue;$/;"	m	class:JSpacePartsGetMk	access:private
Mkblock	JPartDataHead.h	/^  const JPartDataHeadMkBlock& Mkblock(unsigned c)const{ return(MkList[c]); }$/;"	f	class:JPartDataHead	access:public	signature:(unsigned c) const
Mkblock	JSphMk.h	/^  const JSphMkBlock* Mkblock(unsigned c)const{ return(MkList[c]); }$/;"	f	class:JSphMk	access:public	signature:(unsigned c) const
Mkdir	Functions.cpp	/^int Mkdir(const std::string &dirname){$/;"	f	namespace:fun	signature:(const std::string &dirname)
Mkdir	Functions.h	/^int Mkdir(const std::string &dirname);$/;"	p	namespace:fun	signature:(const std::string &dirname)
MkdirPath	Functions.cpp	/^int MkdirPath(std::string path){$/;"	f	namespace:fun	signature:(std::string path)
MkdirPath	Functions.h	/^int MkdirPath(std::string path);$/;"	p	namespace:fun	signature:(std::string path)
MkdirPath	JAppInfo.cpp	/^int JAppInfo::MkdirPath(const std::string &dir)const{$/;"	f	class:JAppInfo	signature:(const std::string &dir) const
MkdirPath	JAppInfo.h	/^  int MkdirPath(const std::string &dir)const;$/;"	p	class:JAppInfo	access:public	signature:(const std::string &dir) const
MkdirPathFile	JAppInfo.cpp	/^int JAppInfo::MkdirPathFile(const std::string &file)const{$/;"	f	class:JAppInfo	signature:(const std::string &file) const
MkdirPathFile	JAppInfo.h	/^  int MkdirPathFile(const std::string &file)const;$/;"	p	class:JAppInfo	access:public	signature:(const std::string &file) const
Mks	JSpaceProperties.h	/^  std::string Mks;                     \/\/\/<MK or list of MK values.$/;"	m	class:JSpacePropLink	access:private
ModPos	JMotionObj.h	/^  JMotionPos ModPos;$/;"	m	class:JMotionObj	access:private
ModeOutDef	JLog2.h	/^  TpMode_Out ModeOutDef;$/;"	m	class:JLog2	access:protected
Mot	JSphMotion.h	/^  JMotion *Mot;$/;"	m	class:JSphMotion	access:private
MotList	JMotion.h	/^  JMotionList *MotList; \/\/-Almacena info de movimiento de todos los objetos tras ejecutar ProcesTimes().$/;"	m	class:JMotion	access:private
MotionData	JMotionList.h	/^  JMotionListData* MotionData;$/;"	m	class:JMotionList	access:private
Motive	JPartsOut.h	/^  byte *Motive; \/\/\/<Motives for exclusion. 1:position, 2:rhop, 3:velocity.$/;"	m	class:JPartsOut	access:protected
Mov	JMotionEvent.h	/^  JMotionMov* const Mov;$/;"	m	class:JMotionEvent	access:public
Mov	JMotionObj.h	/^  JMotionMov* Mov;$/;"	m	class:JMotionMovActive	access:public
MovAdd	JMotion.cpp	/^void JMotion::MovAdd(unsigned objid,JMotionMov* mov){$/;"	f	class:JMotion	signature:(unsigned objid,JMotionMov* mov)
MovAdd	JMotion.h	/^  void MovAdd(unsigned objid,JMotionMov* mov);$/;"	p	class:JMotion	access:private	signature:(unsigned objid,JMotionMov* mov)
MovAddCirSinu	JMotion.cpp	/^void JMotion::MovAddCirSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees)
MovAddCirSinu	JMotion.h	/^  void MovAddCirSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true)
MovAddCircular	JMotion.cpp	/^void JMotion::MovAddCircular(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees)
MovAddCircular	JMotion.h	/^  void MovAddCircular(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double velang,bool useangdegrees=true)
MovAddCircularAce	JMotion.cpp	/^void JMotion::MovAddCircularAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees)
MovAddCircularAce	JMotion.h	/^  void MovAddCircularAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,const tdouble3 &ref,double aceang,double velang,bool velpre,bool useangdegrees=true)
MovAddCopy	JMotion.h	/^  void MovAddCopy(JMotionMov *mv)const;$/;"	p	class:JMotion	access:private	signature:(JMotionMov *mv) const
MovAddNull	JMotion.cpp	/^void JMotion::MovAddNull(unsigned objid,unsigned id){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id)
MovAddNull	JMotion.h	/^  void MovAddNull(unsigned objid,unsigned id);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id)
MovAddRecSinu	JMotion.cpp	/^void JMotion::MovAddRecSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees)
MovAddRecSinu	JMotion.h	/^  void MovAddRecSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &freq,const tdouble3 &ampl,tdouble3 phase,bool phaseprev,bool useangdegrees=true)
MovAddRectilinear	JMotion.cpp	/^void JMotion::MovAddRectilinear(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel)
MovAddRectilinear	JMotion.h	/^  void MovAddRectilinear(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &vel)
MovAddRectilinearAce	JMotion.cpp	/^void JMotion::MovAddRectilinearAce(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre)
MovAddRectilinearAce	JMotion.h	/^  void MovAddRectilinearAce(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const tdouble3 &ace,const tdouble3 &vel,bool velpre)
MovAddRectilinearFile	JMotion.cpp	/^void JMotion::MovAddRectilinearFile(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
MovAddRectilinearFile	JMotion.h	/^  void MovAddRectilinearFile(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,const std::string &file,int fields,int fieldtime,int fieldx,int fieldy,int fieldz)
MovAddRotSinu	JMotion.cpp	/^void JMotion::MovAddRotSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees)
MovAddRotSinu	JMotion.h	/^  void MovAddRotSinu(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double freq,double ampl,double phase,bool phaseprev,bool useangdegrees=true)
MovAddRotation	JMotion.cpp	/^void JMotion::MovAddRotation(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees)
MovAddRotation	JMotion.h	/^  void MovAddRotation(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double velang,bool useangdegrees=true)
MovAddRotationAce	JMotion.cpp	/^void JMotion::MovAddRotationAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees)
MovAddRotationAce	JMotion.h	/^  void MovAddRotationAce(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees=true);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees,const tdouble3 &axisp1,const tdouble3 &axisp2,double aceang,double velang,bool velpre,bool useangdegrees=true)
MovAddRotationFile	JMotion.cpp	/^void JMotion::MovAddRotationFile(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees ,const tdouble3 &axisp1,const tdouble3 &axisp2,const std::string &file)
MovAddRotationFile	JMotion.h	/^  void MovAddRotationFile(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time,bool angdegrees ,const tdouble3 &axisp1,const tdouble3 &axisp2,const std::string &file)
MovAddTeleport	JMotion.cpp	/^void JMotion::MovAddTeleport(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos)
MovAddTeleport	JMotion.h	/^  void MovAddTeleport(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,const tdouble3 &mpos)
MovAddWait	JMotion.cpp	/^void JMotion::MovAddWait(unsigned objid,unsigned id,unsigned nextid,double time){$/;"	f	class:JMotion	signature:(unsigned objid,unsigned id,unsigned nextid,double time)
MovAddWait	JMotion.h	/^  void MovAddWait(unsigned objid,unsigned id,unsigned nextid,double time);$/;"	p	class:JMotion	access:public	signature:(unsigned objid,unsigned id,unsigned nextid,double time)
MovGetPointer	JMotionObj.cpp	/^JMotionMov* JMotionObj::MovGetPointer(unsigned id)const{$/;"	f	class:JMotionObj	signature:(unsigned id) const
MovGetPointer	JMotionObj.h	/^  JMotionMov* MovGetPointer(unsigned id)const;$/;"	p	class:JMotionObj	access:public	signature:(unsigned id) const
MovLimit	JSph.h	/^  float MovLimit;          \/\/\/<Maximum distance a particle is allowed to move in one step (Scell*0.9) | Distancia maxima que se permite recorrer a una particula en un paso (Scell*0.9).$/;"	m	class:JSph	access:protected
Move	JMatrix4.h	/^  void Move(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
Move	JMotionPos.cpp	/^void JMotionPos::Move(const tdouble3 &dis){$/;"	f	class:JMotionPos	signature:(const tdouble3 &dis)
Move	JMotionPos.h	/^  void Move(const tdouble3 &dis);$/;"	p	class:JMotionPos	access:public	signature:(const tdouble3 &dis)
MoveLinBound	JSphCpu.cpp	/^void JSphCpu::MoveLinBound(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel ,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
MoveLinBound	JSphCpu.h	/^  void MoveLinBound(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned ini,const tdouble3 &mvpos,const tfloat3 &mvvel,const unsigned *ridp,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
MoveLinBound	JSphGpu_ker.cu	/^void MoveLinBound(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel$/;"	f	namespace:cusph	signature:(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel ,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
MoveLinBound	JSphGpu_ker.h	/^void MoveLinBound(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
MoveMatBound	JSphCpu.cpp	/^void JSphCpu::MoveMatBound(unsigned np,unsigned ini,tmatrix4d m,double dt$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
MoveMatBound	JSphCpu.h	/^  void MoveMatBound(unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,tdouble3 *pos,unsigned *dcell,tfloat4 *velrhop,typecode *code) const
MoveMatBound	JSphGpu_ker.cu	/^void MoveMatBound(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt$/;"	f	namespace:cusph	signature:(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
MoveMatBound	JSphGpu_ker.h	/^void MoveMatBound(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
MoveMix	JMotionPos.cpp	/^void JMotionPos::MoveMix(const JMotionPos &modpos){$/;"	f	class:JMotionPos	signature:(const JMotionPos &modpos)
MoveMix	JMotionPos.h	/^  void MoveMix(const JMotionPos &modpos);$/;"	p	class:JMotionPos	access:public	signature:(const JMotionPos &modpos)
Moving	JMotionObj.h	/^  bool Moving;$/;"	m	class:JMotionObj	access:private
Movs	JMotionObj.h	/^  std::vector<JMotionMov*> Movs;      \/\/-Movimientos asociados$/;"	m	class:JMotionObj	access:private
MpiLaunch	JLog2.h	/^  int MpiRank,MpiLaunch;$/;"	m	class:JLog2	access:protected
MpiRank	JLog2.h	/^  int MpiRank,MpiLaunch;$/;"	m	class:JLog2	access:protected
MpiRun	JLog2.h	/^  bool MpiRun;$/;"	m	class:JLog2	access:protected
Mul	JMatrix4.h	/^  void Mul(const JMatrix4 &m2){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m2)
MulArray	JMatrix4.h	/^  void MulArray(unsigned np,T3 *vp)const{$/;"	f	class:JMatrix4	access:public	signature:(unsigned np,T3 *vp) const
MulArray	JMatrix4.h	/^  void MulArray(unsigned np,const T3 *vp,T3 *vr)const{$/;"	f	class:JMatrix4	access:public	signature:(unsigned np,const T3 *vp,T3 *vr) const
MulMatrix3x3	FunctionsMath.h	/^inline tmatrix3f MulMatrix3x3(const tmatrix3f &a,const tmatrix3f &b){$/;"	f	namespace:fmath	signature:(const tmatrix3f &a,const tmatrix3f &b)
MulMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d MulMatrix3x3(const tmatrix3d &a,const tmatrix3d &b){$/;"	f	namespace:cumath	signature:(const tmatrix3d &a,const tmatrix3d &b)
MulMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f MulMatrix3x3(const tmatrix3f &a,const tmatrix3f &b){$/;"	f	namespace:cumath	signature:(const tmatrix3f &a,const tmatrix3f &b)
MulNormal	JMatrix4.h	/^  T3 MulNormal(const T3 &n)const{$/;"	f	class:JMatrix4	access:public	signature:(const T3 &n) const
MulPoint	JMatrix4.h	/^  T3 MulPoint(const T3 &p)const{$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p) const
MulPre	JMatrix4.h	/^  void MulPre(const JMatrix4 &m1){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m1)
MvMatrix1	JMotionList.h	/^  tmatrix4d MvMatrix1;$/;"	m	class:JMotionListData	access:private
MvMatrix2	JMotionList.h	/^  tmatrix4d MvMatrix2;$/;"	m	class:JMotionListData	access:private
MvSimple1	JMotionList.h	/^  tdouble3 MvSimple1;$/;"	m	class:JMotionListData	access:private
MvSimple2	JMotionList.h	/^  tdouble3 MvSimple2;$/;"	m	class:JMotionListData	access:private
NUM_ENTITY	tinyxml.h	/^        NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon77
Name	JBinaryData.h	/^  std::string Name;      \/\/\/<Nombre de item. Name of item.$/;"	m	class:JBinaryData	access:private
Name	JBinaryData.h	/^  std::string Name;$/;"	m	class:JBinaryDataArray	access:private
Name	JBlockSizeAuto.h	/^  const std::string Name; \/\/\/< Kernel name.$/;"	m	class:JBlockSizeAutoKer	access:public
Name	JGaugeItem.h	/^  const std::string Name;$/;"	m	class:JGaugeItem	access:public
Name	JSpaceProperties.h	/^  std::string Name;                    \/\/\/<Property name.$/;"	m	class:JSpacePropProperty	access:private
Name	JSpaceProperties.h	/^  std::string Name;                    \/\/\/<Value name.$/;"	m	class:JSpacePropValue	access:private
Name	tinyxml.h	/^    const char*     Name()  const       { return name.c_str(); }        \/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
NameOfValue	JBinaryData.cpp	/^std::string JBinaryData::NameOfValue(unsigned index)const{$/;"	f	class:JBinaryData	signature:(unsigned index) const
NameOfValue	JBinaryData.h	/^  std::string NameOfValue(unsigned index)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned index) const
NameTStr	tinyxml.h	/^    const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
Nbits	JRadixSort.h	/^  unsigned Nbits;$/;"	m	class:JRadixSort	access:private
Nct	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
Nct	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
Nctt	JCellDivCpu.h	/^  ullong Nctt;          \/\/\/<Total number of special cells included  Nctt=SizeBeginCell(). | Numero total de celdas incluyendo las especiales Nctt=SizeBeginCell().$/;"	m	class:JCellDivCpu	access:protected
Nctt	JCellDivGpu.h	/^  ullong Nctt;          \/\/\/<Total number of special cells included  Nctt=SizeBeginEndCell(). | Numero total de celdas incluyendo las especiales Nctt=SizeBeginEndCell().$/;"	m	class:JCellDivGpu	access:protected
Ncx	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
Ncx	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
Ncy	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
Ncy	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
Ncz	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
Ncz	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
Ndiv	JCellDivCpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivCpu	access:protected
Ndiv	JCellDivGpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivGpu	access:protected
NdivFull	JCellDivCpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivCpu	access:protected
NdivFull	JCellDivGpu.h	/^  unsigned Ndiv,NdivFull;$/;"	m	class:JCellDivGpu	access:protected
NewInterval	JLinearValue.h	/^  bool NewInterval;$/;"	m	class:JLinearValue	access:protected
Next	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
Next	tinyxml.h	/^    TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
Next	tinyxml.h	/^    const TiXmlAttribute* Next() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
NextId	JMotionMov.h	/^  const unsigned NextId;$/;"	m	class:JMotionMov	access:public
NextIte	JTimeControl.h	/^  unsigned NextIte; \/\/\/<Next iteration to check. | Siguiente iteracion a comprobar.$/;"	m	class:JTimeControl	access:protected
NextMov	JMotionMov.h	/^  JMotionMov* NextMov;$/;"	m	class:JMotionMov	access:public
NextMov	JMotionObj.cpp	/^void JMotionMovActive::NextMov(){$/;"	f	class:JMotionMovActive	signature:()
NextMov	JMotionObj.h	/^  void NextMov();$/;"	p	class:JMotionMovActive	access:public	signature:()
NextSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling( const std::string& _value)                  {   return NextSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling()                            { return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling( const std::string& _value) const      {   return NextSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling() const                { return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement( const std::string& _value)                {   return NextSiblingElement (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement( const std::string& _value) const    {   return NextSiblingElement (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
NextTime	JTimeControl.h	/^  double NextTime;$/;"	m	class:JTimeControl	access:protected
NextValue	JMeanValues.h	/^  unsigned NextValue;$/;"	m	class:JMeanMoving	access:protected
Nkeys	JRadixSort.h	/^  unsigned Nkeys;$/;"	m	class:JRadixSort	access:private
NoChildren	tinyxml.h	/^    bool NoChildren() const                     { return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Node	tinyxml.h	/^    TiXmlNode* Node() const         { return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
NodeType	tinyxml.h	/^    enum NodeType$/;"	g	class:TiXmlNode	access:public
NorInvert	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
NorNULL	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
NorOriginal	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
NorTwoFace	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	e	enum:JFormatFiles2::__anon10
NormalPlanes3Pt	FunctionsMath.cpp	/^void NormalPlanes3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3)
NormalPlanes3Pt	FunctionsMath.cpp	/^void NormalPlanes3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
NormalPlanes3Pt	FunctionsMath.h	/^void NormalPlanes3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3)
NormalPlanes3Pt	FunctionsMath.h	/^void NormalPlanes3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
NormalPlanes3Pt_dbl	FunctionsMath.h	/^inline void NormalPlanes3Pt_dbl(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
NormalTriangle	FunctionsMath.h	/^inline tdouble3 NormalTriangle(const tdouble3& p1,const tdouble3& p2,const tdouble3& p3){$/;"	f	namespace:fmath	signature:(const tdouble3& p1,const tdouble3& p2,const tdouble3& p3)
NormalTriangle	FunctionsMath.h	/^inline tfloat3 NormalTriangle(const tfloat3& p1,const tfloat3& p2,const tfloat3& p3){$/;"	f	namespace:fmath	signature:(const tfloat3& p1,const tfloat3& p2,const tfloat3& p3)
Np	JSphCpu.h	/^  unsigned Np;        \/\/\/<Total number of particles (including periodic duplicates). | Numero total de particulas (incluidas las duplicadas periodicas).$/;"	m	class:JSphCpu	access:protected
Np	JSphGpu.h	/^  unsigned Np;        \/\/\/<Total number of particles (including duplicate periodic particles). | Numero total de particulas (incluidas las duplicadas periodicas). $/;"	m	class:JSphGpu	access:protected
Np	JSphPartsInit.h	/^  unsigned Np;$/;"	m	class:JSphPartsInit	access:private
NpDynamic	JPartDataHead.h	/^  bool NpDynamic;        \/\/\/<CaseNp can increase.$/;"	m	class:JPartDataHead	access:private
NpDynamic	JPartsLoad4.h	/^  bool NpDynamic;          \/\/\/<CaseNp can increase.$/;"	m	class:JPartsLoad4	access:protected
NpDynamic	JSph.h	/^  bool NpDynamic;          \/\/\/<CaseNp can increase.$/;"	m	class:JSph	access:protected
NpFinal	JCellDivCpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivCpu	access:protected
NpFinal	JCellDivGpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivGpu	access:protected
NpMinimum	JSph.h	/^  unsigned NpMinimum;        \/\/\/<Minimum number of particles allowed.                     | Numero minimo de particulas permitidas.                                                $/;"	m	class:JSph	access:protected
Npb	JSphCpu.h	/^  unsigned Npb;       \/\/\/<Total number of boundary particles (including periodic boundaries). | Numero de particulas contorno (incluidas las contorno periodicas).$/;"	m	class:JSphCpu	access:protected
Npb	JSphGpu.h	/^  unsigned Npb;       \/\/\/<Number of boundary particles (including periodic boundaries). | Numero de particulas contorno (incluidas las contorno periodicas). $/;"	m	class:JSphGpu	access:protected
Npb1	JCellDivCpu.h	/^  unsigned Npb1;$/;"	m	class:JCellDivCpu	access:protected
Npb1	JCellDivGpu.h	/^  unsigned Npb1;$/;"	m	class:JCellDivGpu	access:protected
Npb2	JCellDivCpu.h	/^  unsigned Npb2;$/;"	m	class:JCellDivCpu	access:protected
Npb2	JCellDivGpu.h	/^  unsigned Npb2;$/;"	m	class:JCellDivGpu	access:protected
NpbFinal	JCellDivCpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivCpu	access:protected
NpbFinal	JCellDivGpu.h	/^  unsigned NpFinal,NpbFinal;$/;"	m	class:JCellDivGpu	access:protected
NpbIgnore	JCellDivCpu.h	/^  unsigned NpbIgnore;$/;"	m	class:JCellDivCpu	access:protected
NpbIgnore	JCellDivGpu.h	/^  unsigned NpbIgnore;$/;"	m	class:JCellDivGpu	access:protected
NpbOk	JSphCpu.h	/^  unsigned NpbOk;     \/\/\/<Total number of boundary particles near fluid (including periodic duplicates). | Numero de particulas contorno cerca del fluido (incluidas las contorno periodicas).$/;"	m	class:JSphCpu	access:protected
NpbOk	JSphGpu.h	/^  unsigned NpbOk;     \/\/\/<Number of boundary particles interacting the fluid (including the periodic bounaries). | Numero de particulas contorno cerca del fluido (incluidas las contorno periodicas). $/;"	m	class:JSphGpu	access:protected
NpbOut	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
NpbOut	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
NpbOutIgnore	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
NpbOutIgnore	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
NpbPer	JSphCpu.h	/^  unsigned NpbPer;    \/\/\/<Number of periodic boundary particles. | Numero de particulas contorno periodicas.$/;"	m	class:JSphCpu	access:protected
NpbPer	JSphGpu.h	/^  unsigned NpbPer;    \/\/\/<Number of periodic boundary particles. | Numero de particulas contorno periodicas. $/;"	m	class:JSphGpu	access:protected
NpbPerM1	JSphCpu.h	/^  unsigned NpbPerM1;  \/\/\/<Number of periodic boundary particles (previous values). | Numero de particulas contorno periodicas (valores anteriores).$/;"	m	class:JSphCpu	access:protected
NpbPerM1	JSphGpu.h	/^  unsigned NpbPerM1;  \/\/\/<Number of periodic boundary particles (previous values). | Numero de particulas contorno periodicas (valores anteriores).$/;"	m	class:JSphGpu	access:protected
Npf1	JCellDivCpu.h	/^  unsigned Npf1;$/;"	m	class:JCellDivCpu	access:protected
Npf1	JCellDivGpu.h	/^  unsigned Npf1;$/;"	m	class:JCellDivGpu	access:protected
Npf2	JCellDivCpu.h	/^  unsigned Npf2;$/;"	m	class:JCellDivCpu	access:protected
Npf2	JCellDivGpu.h	/^  unsigned Npf2;$/;"	m	class:JCellDivGpu	access:protected
NpfOut	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
NpfOut	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
NpfOutIgnore	JCellDivCpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivCpu	access:protected
NpfOutIgnore	JCellDivGpu.h	/^  unsigned NpbOut,NpfOut,NpbOutIgnore,NpfOutIgnore;$/;"	m	class:JCellDivGpu	access:protected
NpfPer	JSphCpu.h	/^  unsigned NpfPer;    \/\/\/<Number of periodic floating-fluid particles. | Numero de particulas fluidas-floating periodicas.$/;"	m	class:JSphCpu	access:protected
NpfPer	JSphGpu.h	/^  unsigned NpfPer;    \/\/\/<Number of periodic particles (fluid-floating). | Numero de particulas fluidas-floating periodicas. $/;"	m	class:JSphGpu	access:protected
NpfPerM1	JSphCpu.h	/^  unsigned NpfPerM1;  \/\/\/<Number of periodic floating-fluid particles (previous values). | Numero de particulas fluidas-floating periodicas (valores anteriores).$/;"	m	class:JSphCpu	access:protected
NpfPerM1	JSphGpu.h	/^  unsigned NpfPerM1;  \/\/\/<Number of fluid-floating periodic particles (previous values). | Numero de particulas fluidas-floating periodicas (valores anteriores). $/;"	m	class:JSphGpu	access:protected
Npiece	JPartDataBi4.h	/^  unsigned Npiece;   \/\/\/<Numero total de partes. Number of total parts.$/;"	m	class:JPartDataBi4	access:private
Npiece	JPartDataHead.h	/^  unsigned Npiece;       \/\/\/<Total number of file pieces.$/;"	m	class:JPartDataHead	access:private
Npiece	JPartOutBi4Save.h	/^  unsigned Npiece;   \/\/\/<Numero total de partes. Number total of parts.$/;"	m	class:JPartOutBi4Save	access:private
Npiece	JPartsLoad4.h	/^  unsigned Npiece;$/;"	m	class:JPartsLoad4	access:protected
Nptot	JCellDivCpu.h	/^  unsigned Nptot;  \/\/\/<Total number of particles included that are excluded at the end of divide | Numero total de particulas incluidas las que se excluyeron al terminar el divide.$/;"	m	class:JCellDivCpu	access:protected
Nptot	JCellDivGpu.h	/^  unsigned Nptot;  \/\/\/<Total number of particles included that are excluded at the end of divide. | Numero total de particulas incluidas las que se excluyeron al terminar el divide.$/;"	m	class:JCellDivGpu	access:protected
Nref	JMotionList.h	/^  const unsigned Nref;$/;"	m	class:JMotionList	access:public
Nrun	JBlockSizeAuto.h	/^  unsigned Nrun;   \/\/\/< Number of executions.$/;"	m	class:JBlockSizeAutoKer	access:protected
Nsheet	JCellDivCpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivCpu	access:protected
Nsheet	JCellDivGpu.h	/^  unsigned Ncx,Ncy,Ncz,Nsheet,Nct;$/;"	m	class:JCellDivGpu	access:protected
Nstep	JSph.h	/^  int Nstep;              \/\/\/<Number of step in execution.             | Numero de paso en ejecucion.$/;"	m	class:JSph	access:protected
Null	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
Nulo	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
NumActive	JBlockSizeAuto.h	/^  int NumActive;       \/\/\/< Number of active values.$/;"	m	class:JBlockSizeAutoKer	access:protected
Nvalues	JLinearValue.h	/^  const unsigned Nvalues;$/;"	m	class:JLinearValue	access:public
OMPSIZE	JRadixSort.h	/^  static const int OMPSIZE=1024;$/;"	m	class:JRadixSort	access:private
OMPSTRIDE	JRadixSort.h	/^  static const int OMPSTRIDE=200;$/;"	m	class:JRadixSort	access:private
OMP_LIMIT_COMPUTELIGHT	OmpDefs.h	43;"	d
OMP_LIMIT_COMPUTEMEDIUM	OmpDefs.h	42;"	d
OMP_LIMIT_COMPUTESTEP	OmpDefs.h	41;"	d
OMP_LIMIT_LIGHT	OmpDefs.h	46;"	d
OMP_LIMIT_PREINTERACTION	OmpDefs.h	44;"	d
OMP_LIMIT_TRIANGLESCELLS	OmpDefs.h	45;"	d
OMP_MAXTHREADS	OmpDefs.h	39;"	d
OMP_STRIDE	OmpDefs.h	40;"	d
OMP_USE	OmpDefs.h	26;"	d
OMP_USE_WAVEGEN	OmpDefs.h	29;"	d
Obj	JMotionEvent.h	/^  JMotionObj* const Obj;$/;"	m	class:JMotionEvent	access:public
ObjAdd	JMotion.cpp	/^void JMotion::ObjAdd(unsigned id,unsigned idparent,int ref){$/;"	f	class:JMotion	signature:(unsigned id,unsigned idparent,int ref)
ObjAdd	JMotion.h	/^  void ObjAdd(unsigned id,unsigned idparent,int ref);$/;"	p	class:JMotion	access:public	signature:(unsigned id,unsigned idparent,int ref)
ObjBegin	JSphMotion.h	/^  unsigned *ObjBegin;   \/\/\/<Initial particle of each moving object. [ObjCount+1]$/;"	m	class:JSphMotion	access:private
ObjCount	JMotion.h	/^  unsigned ObjCount;$/;"	m	class:JMotion	access:private
ObjCount	JSphMotion.h	/^  unsigned ObjCount;    \/\/\/<Number of moving objects.$/;"	m	class:JSphMotion	access:private
ObjGetPointer	JMotion.cpp	/^JMotionObj* JMotion::ObjGetPointer(unsigned id)const{$/;"	f	class:JMotion	signature:(unsigned id) const
ObjGetPointer	JMotion.h	/^  JMotionObj* ObjGetPointer(unsigned id)const;$/;"	p	class:JMotion	access:private	signature:(unsigned id) const
ObjGetPointer	JMotionObj.cpp	/^JMotionObj* JMotionObj::ObjGetPointer(unsigned id){$/;"	f	class:JMotionObj	signature:(unsigned id)
ObjGetPointer	JMotionObj.h	/^  JMotionObj* ObjGetPointer(unsigned id);$/;"	p	class:JMotionObj	access:public	signature:(unsigned id)
ObjGetPointerByRef	JMotion.cpp	/^JMotionObj* JMotion::ObjGetPointerByRef(int ref)const{$/;"	f	class:JMotion	signature:(int ref) const
ObjGetPointerByRef	JMotion.h	/^  JMotionObj* ObjGetPointerByRef(int ref)const;$/;"	p	class:JMotion	access:private	signature:(int ref) const
ObjGetPointerByRef	JMotionObj.cpp	/^JMotionObj* JMotionObj::ObjGetPointerByRef(int ref){$/;"	f	class:JMotionObj	signature:(int ref)
ObjGetPointerByRef	JMotionObj.h	/^  JMotionObj* ObjGetPointerByRef(int ref);$/;"	p	class:JMotionObj	access:public	signature:(int ref)
ObjMkBound	JSphMotion.h	/^  word     *ObjMkBound; \/\/\/<MkBound of each moving object. [ObjCount]$/;"	m	class:JSphMotion	access:private
Objs	JMotion.h	/^  std::vector<JMotionObj*> Objs;$/;"	m	class:JMotion	access:private
ObjsActive	JMotion.h	/^  bool ObjsActive;$/;"	m	class:JMotion	access:private
Ok	JLog2.h	/^  bool Ok;$/;"	m	class:JLog2	access:protected
Omegaini	JSpaceParts.h	/^  tdouble3 Omegaini;$/;"	m	class:JSpacePartBlock_Floating	access:private
OmpThreads	JCfgRun.h	/^  int OmpThreads;$/;"	m	class:JCfgRun	access:public
OmpThreads	JSphCpu.h	/^  int OmpThreads;        \/\/\/<Max number of OpenMP threads in execution on CPU host (minimum 1). | Numero maximo de hilos OpenMP en ejecucion por host en CPU (minimo 1).$/;"	m	class:JSphCpu	access:protected
OpenFile	JSaveCsv2.cpp	/^void JSaveCsv2::OpenFile(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
OpenFile	JSaveCsv2.h	/^  void OpenFile();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
OpenFileStructure	JBinaryData.cpp	/^void JBinaryData::OpenFileStructure(const std::string &file,const std::string &filecode){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode)
OpenFileStructure	JBinaryData.h	/^  void OpenFileStructure(const std::string &file,const std::string &filecode="");$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode=Ó)
OpenTriangle3Pt	FunctionsMath.cpp	/^void OpenTriangle3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3)
OpenTriangle3Pt	FunctionsMath.cpp	/^void OpenTriangle3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3)
OpenTriangle3Pt	FunctionsMath.h	/^void OpenTriangle3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3)
OpenTriangle3Pt	FunctionsMath.h	/^void OpenTriangle3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3)
Opes	JSphInitialize.h	/^  std::vector<JSphInitializeOp*> Opes;$/;"	m	class:JSphInitialize	access:private
Optimize	JMotion.cpp	/^void JMotion::Optimize(){$/;"	f	class:JMotion	signature:()
Optimize	JMotion.h	/^  void Optimize();$/;"	p	class:JMotion	access:public	signature:()
Optimize	JMotionObj.cpp	/^bool JMotionObj::Optimize(){$/;"	f	class:JMotionObj	signature:()
Optimize	JMotionObj.h	/^  bool Optimize();$/;"	p	class:JMotionObj	access:public	signature:()
Order2Auxg	JWaveSpectrumGpu.h	/^  double *Order2Auxg;         \/\/\/<Auxiliary memory for reductions. [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
Order2CoefsDnmg	JWaveSpectrumGpu.h	/^  double *Order2CoefsDnmg;    \/\/\/<Coefficients on GPU for position of each wave combination {dnm} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
Order2CoefsEtag	JWaveSpectrumGpu.h	/^  tdouble4 *Order2CoefsEtag;  \/\/\/<Coefficients on GPU for elevation of each wave combination {dnm,dkl,aagnm,bbgnm} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
Order2CoefsPosg	JWaveSpectrumGpu.h	/^  tdouble2 *Order2CoefsPosg;  \/\/\/<Coefficients on GPU for position of each wave combination {aaf1,bbf1} [SizeWaveCoefs].$/;"	m	class:JWaveSpectrumGpu	access:private
OutArray	JBinaryData.cpp	/^void JBinaryData::OutArray(unsigned &count,unsigned size,const byte *ptr){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr)
OutArray	JBinaryData.h	/^  void OutArray(unsigned &count,unsigned size,const byte *ptr);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr)
OutArrayBase	JBinaryData.cpp	/^JBinaryDataArray* JBinaryData::OutArrayBase(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata)
OutArrayBase	JBinaryData.h	/^  JBinaryDataArray* OutArrayBase(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,unsigned &countdata,unsigned &sizedata)
OutArrayData	JBinaryData.cpp	/^void JBinaryData::OutArrayData(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata)
OutArrayData	JBinaryData.h	/^  void OutArrayData(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata)
OutBool	JBinaryData.h	/^  bool           OutBool   (unsigned &count,unsigned size,const byte *ptr)const{  return(OutInt(count,size,ptr)!=0);  }  \/\/\/ Extrae bool de ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutBuff	JGaugeItem.h	/^  std::vector<StGaugeForceRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeForce	access:protected
OutBuff	JGaugeItem.h	/^  std::vector<StGaugeMaxzRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeMaxZ	access:protected
OutBuff	JGaugeItem.h	/^  std::vector<StGaugeSwlRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeSwl	access:protected
OutBuff	JGaugeItem.h	/^  std::vector<StGaugeVelRes> OutBuff; \/\/\/<Results in buffer.$/;"	m	class:JGaugeVelocity	access:protected
OutChar	JBinaryData.h	/^  char           OutChar   (unsigned &count,unsigned size,const byte *ptr)const{  char v;           OutData(count,size,ptr,(byte*)&v,sizeof(char));           return(v);  }  \/\/\/< Extrae char de ptr. Extracts char of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutCount	JGaugeItem.h	/^  unsigned OutCount;                 \/\/\/<Number of stored results in buffer.$/;"	m	class:JGaugeItem	access:protected
OutData	JBinaryData.cpp	/^void JBinaryData::OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
OutData	JBinaryData.cpp	/^void JBinaryDataArray::OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
OutData	JBinaryData.h	/^  void           OutData   (unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
OutData	JBinaryData.h	/^  void        OutData(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,byte *dat,unsigned sdat) const
OutDouble	JBinaryData.h	/^  double         OutDouble (unsigned &count,unsigned size,const byte *ptr)const{  double v;         OutData(count,size,ptr,(byte*)&v,sizeof(double));         return(v);  }  \/\/\/< Extrae double de ptr. Extracts double of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutDouble3	JBinaryData.h	/^  tdouble3       OutDouble3(unsigned &count,unsigned size,const byte *ptr)const{  tdouble3 v;       OutData(count,size,ptr,(byte*)&v,sizeof(tdouble3));       return(v);  }  \/\/\/ Extrae tdouble3 de ptr. Extracts tdouble3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutFile	JGaugeItem.h	/^  std::string OutFile;$/;"	m	class:JGaugeItem	access:protected
OutFloat	JBinaryData.h	/^  float          OutFloat  (unsigned &count,unsigned size,const byte *ptr)const{  float v;          OutData(count,size,ptr,(byte*)&v,sizeof(float));          return(v);  }  \/\/\/< Extrae float de ptr. Extracts float of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutFloat3	JBinaryData.h	/^  tfloat3        OutFloat3 (unsigned &count,unsigned size,const byte *ptr)const{  tfloat3 v;        OutData(count,size,ptr,(byte*)&v,sizeof(tfloat3));        return(v);  }  \/\/\/ Extrae tfloat3 de ptr. Extracts tfloat3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutInt	JBinaryData.h	/^  int            OutInt    (unsigned &count,unsigned size,const byte *ptr)const{  int v;            OutData(count,size,ptr,(byte*)&v,sizeof(int));            return(v);  }  \/\/\/< Extrae int de ptr. Extracts int of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutInt3	JBinaryData.h	/^  tint3          OutInt3   (unsigned &count,unsigned size,const byte *ptr)const{  tint3 v;          OutData(count,size,ptr,(byte*)&v,sizeof(tint3));          return(v);  }  \/\/\/< Extrae tint3 de ptr. Extracts tint3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutItem	JBinaryData.cpp	/^void JBinaryData::OutItem(unsigned &count,unsigned size,const byte *ptr,bool create){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,bool create)
OutItem	JBinaryData.h	/^  void OutItem(unsigned &count,unsigned size,const byte *ptr,bool create);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,bool create)
OutItemBase	JBinaryData.cpp	/^JBinaryData* JBinaryData::OutItemBase(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues)
OutItemBase	JBinaryData.h	/^  JBinaryData* OutItemBase(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr,bool create,unsigned &narrays,unsigned &nitems,unsigned &sizevalues)
OutLlong	JBinaryData.h	/^  llong          OutLlong  (unsigned &count,unsigned size,const byte *ptr)const{  llong v;          OutData(count,size,ptr,(byte*)&v,sizeof(llong));          return(v);  }  \/\/\/< Extrae long long de ptr. Extracts long long of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutMoveCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
OutMoveCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
OutPosCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
OutPosCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
OutRhopCount	JPartsOut.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JPartsOut	access:protected
OutRhopCount	JSph.h	/^  unsigned OutPosCount,OutRhopCount,OutMoveCount;$/;"	m	class:JSph	access:private
OutShort	JBinaryData.h	/^  short          OutShort  (unsigned &count,unsigned size,const byte *ptr)const{  short v;          OutData(count,size,ptr,(byte*)&v,sizeof(short));          return(v);  }  \/\/\/< Extrae short de ptr. Extracts short of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutSize	JGaugeItem.h	/^  static const unsigned OutSize=200; \/\/\/<Maximum number of results in buffer.$/;"	m	class:JGaugeItem	access:protected
OutStr	JBinaryData.cpp	/^std::string JBinaryData::OutStr(unsigned &count,unsigned size,const byte *ptr)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutStr	JBinaryData.cpp	/^std::string JBinaryDataArray::OutStr(unsigned &count,unsigned size,const byte *ptr)const{$/;"	f	class:JBinaryDataArray	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutStr	JBinaryData.h	/^  std::string    OutStr    (unsigned &count,unsigned size,const byte *ptr)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutStr	JBinaryData.h	/^  std::string OutStr (unsigned &count,unsigned size,const byte *ptr)const;$/;"	p	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUchar	JBinaryData.h	/^  unsigned char  OutUchar  (unsigned &count,unsigned size,const byte *ptr)const{  unsigned char v;  OutData(count,size,ptr,(byte*)&v,sizeof(unsigned char));  return(v);  }  \/\/\/< Extrae unsigned char de ptr. Extracts unsigned char of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUint	JBinaryData.h	/^  unsigned       OutUint   (unsigned &count,unsigned size,const byte *ptr)const{  unsigned v;       OutData(count,size,ptr,(byte*)&v,sizeof(unsigned));       return(v);  }  \/\/\/< Extrae unsigned de ptr. Extracts unsigned of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUint	JBinaryData.h	/^  unsigned    OutUint(unsigned &count,unsigned size,const byte *ptr)const{  unsigned v; OutData(count,size,ptr,(byte*)&v,sizeof(unsigned)); return(v);  }  \/\/\/ Extrae unsigned de ptr. Extract ptr unsigned.$/;"	f	class:JBinaryDataArray	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUint3	JBinaryData.h	/^  tuint3         OutUint3  (unsigned &count,unsigned size,const byte *ptr)const{  tuint3 v;         OutData(count,size,ptr,(byte*)&v,sizeof(tuint3));         return(v);  }  \/\/\/ Extrae tuint3 de ptr. Extracts tuint3 of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUllong	JBinaryData.h	/^  ullong         OutUllong (unsigned &count,unsigned size,const byte *ptr)const{  ullong v;         OutData(count,size,ptr,(byte*)&v,sizeof(ullong));         return(v);  }  \/\/\/< Extrae unsigned long long de ptr. Extracts unsigned long long of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutUshort	JBinaryData.h	/^  unsigned short OutUshort (unsigned &count,unsigned size,const byte *ptr)const{  unsigned short v; OutData(count,size,ptr,(byte*)&v,sizeof(unsigned short)); return(v);  }  \/\/\/< Extrae unsigned short de ptr. Extracts unsigned short of ptr.$/;"	f	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr) const
OutValue	JBinaryData.cpp	/^void JBinaryData::OutValue(unsigned &count,unsigned size,const byte *ptr){$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,const byte *ptr)
OutValue	JBinaryData.h	/^  void OutValue(unsigned &count,unsigned size,const byte *ptr);$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,const byte *ptr)
Out_Default	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
Out_File	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
Out_None	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
Out_ScrFile	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
Out_Screen	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	e	enum:JLog2::__anon17
Output	JGaugeItem.h	/^  bool Output(double timestep)const{ return(OutputSave && timestep>=OutputNext && OutputStart<=timestep && timestep<=OutputEnd); }$/;"	f	class:JGaugeItem	access:public	signature:(double timestep) const
OutputDt	JGaugeItem.h	/^  double OutputDt;$/;"	m	class:JGaugeItem	access:protected
OutputEnd	JGaugeItem.h	/^  double OutputEnd;$/;"	m	class:JGaugeItem	access:protected
OutputNext	JGaugeItem.h	/^  double OutputNext;$/;"	m	class:JGaugeItem	access:protected
OutputSave	JGaugeItem.h	/^  bool OutputSave;$/;"	m	class:JGaugeItem	access:protected
OutputStart	JGaugeItem.h	/^  double OutputStart;$/;"	m	class:JGaugeItem	access:protected
OvScell	JCellDivCpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivCpu	access:protected
OvScell	JCellDivGpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivGpu	access:protected
OverMean	JBlockSizeAuto.h	/^  float *OverMean;     \/\/\/< Stores exponential mean overhead [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
OverMemoryCells	JCellDivCpu.h	/^  word OverMemoryCells;  \/\/\/<Cell number that is incremented in each dimension to reserve memory. | Numero celdas que se incrementa en cada dimension reservar memoria. (def=0).$/;"	m	class:JCellDivCpu	access:protected
OverMemoryCells	JCellDivGpu.h	/^  word OverMemoryCells;  \/\/\/<Cell number that is incremented in each dimension to reserve memory. | Numero celdas que se incrementa en cada dimension reservar memoria. (def=0).$/;"	m	class:JCellDivGpu	access:protected
OverMemoryNp	JCellDivCpu.h	/^  float OverMemoryNp;    \/\/\/<Percentage that is added to the memory reserved for Np. (def=0) | Porcentaje que se añade a la reserva de memoria de Np. (def=0).$/;"	m	class:JCellDivCpu	access:protected
OverMemoryNp	JCellDivGpu.h	/^  float OverMemoryNp;    \/\/\/<Percentage that is added to the memory reserved for Np. (def=0) | Porcentaje que se añade a la reserva de memoria de Np. (def=0).$/;"	m	class:JCellDivGpu	access:protected
P1	JMotionMov.h	/^  tdouble3 P1;$/;"	m	class:JMotionAxis	access:public
P2	JMotionMov.h	/^  tdouble3 P2;$/;"	m	class:JMotionAxis	access:public
PARTICLES_OVERMEMORY_MIN	Types.h	39;"	d
PC__Cell	Types.h	276;"	d
PC__Cellx	Types.h	273;"	d
PC__Celly	Types.h	274;"	d
PC__Cellz	Types.h	275;"	d
PC__CodeOut	Types.h	268;"	d
PC__GetCode	Types.h	269;"	d
PC__GetSx	Types.h	270;"	d
PC__GetSy	Types.h	271;"	d
PC__GetSz	Types.h	272;"	d
PC__MaxCellx	Types.h	277;"	d
PC__MaxCelly	Types.h	278;"	d
PC__MaxCellz	Types.h	279;"	d
PERIODIC_OVERMEMORYNP	Types.h	38;"	d
PERI_AxisX	JPeriodicDef.h	60;"	d
PERI_AxisY	JPeriodicDef.h	61;"	d
PERI_AxisZ	JPeriodicDef.h	62;"	d
PERI_Axis_X	JPeriodicDef.h	64;"	d
PERI_Axis_Y	JPeriodicDef.h	65;"	d
PERI_Axis_Z	JPeriodicDef.h	66;"	d
PERI_None	JPeriodicDef.h	/^  PERI_None=0,      \/\/\/<No periodic conditions.$/;"	e	enum:__anon22
PERI_Unknown	JPeriodicDef.h	/^  PERI_Unknown=96   \/\/\/<Unknown periodic conditions.$/;"	e	enum:__anon22
PERI_X	JPeriodicDef.h	/^  PERI_X=1,         \/\/\/<Periodic conditions on axis X.$/;"	e	enum:__anon22
PERI_XY	JPeriodicDef.h	/^  PERI_XY=3,        \/\/\/<Periodic conditions on axis X and Y.$/;"	e	enum:__anon22
PERI_XZ	JPeriodicDef.h	/^  PERI_XZ=5,        \/\/\/<Periodic conditions on axis X and Z.$/;"	e	enum:__anon22
PERI_Y	JPeriodicDef.h	/^  PERI_Y=2,         \/\/\/<Periodic conditions on axis Y.$/;"	e	enum:__anon22
PERI_YZ	JPeriodicDef.h	/^  PERI_YZ=6,        \/\/\/<Periodic conditions on axis Y and Z.$/;"	e	enum:__anon22
PERI_Z	JPeriodicDef.h	/^  PERI_Z=4,         \/\/\/<Periodic conditions on axis Z.$/;"	e	enum:__anon22
PI	TypesDef.h	24;"	d
PIHALF	TypesDef.h	26;"	d
Parent	JBinaryData.h	/^  JBinaryData* Parent;$/;"	m	class:JBinaryData	access:private
Parent	JBinaryData.h	/^  JBinaryData* Parent;$/;"	m	class:JBinaryDataArray	access:private
Parent	JMotionObj.h	/^  const JMotionObj* Parent;$/;"	m	class:JMotionObj	access:public
Parent	tinyxml.h	/^    TiXmlNode* Parent()                         { return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
Parent	tinyxml.h	/^    const TiXmlNode* Parent() const             { return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Parse	tinyxml.h	/^    virtual const char* Parse(  const char* p, $/;"	p	class:TiXmlBase	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlAttribute	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlComment	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlText	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlUnknown	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Part	JPartDataBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de particulas). It belongs to Data, and stores information about a part (including data of particles).$/;"	m	class:JPartDataBi4	access:private
Part	JPartFloatBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de floatings). Belongs to data and stores information of a part (including data of floatings).$/;"	m	class:JPartFloatBi4Load	access:private
Part	JPartFloatBi4.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de floatings). Belongs to data and stores information of a part (including data of floatings).$/;"	m	class:JPartFloatBi4Save	access:private
Part	JPartOutBi4Save.h	/^  JBinaryData *Part;      \/\/\/<Pertenece a Data y almacena informacion de un part (incluyendo datos de particulas). Belongs to data and stores information of a part (including data for particles).$/;"	m	class:JPartOutBi4Save	access:private
Part	JSph.h	/^  int Part;               \/\/\/<Saves subsequent PART. | Siguiente PART a guardar.                                          $/;"	m	class:JSph	access:protected
PartAcec	JGaugeItem.h	/^  tfloat3 *PartAcec;$/;"	m	class:JGaugeForce	access:protected
PartAceg	JGaugeItem.h	/^  float3 *PartAceg;$/;"	m	class:JGaugeForce	access:protected
PartBegin	JCfgRun.h	/^  unsigned PartBegin,PartBeginFirst;$/;"	m	class:JCfgRun	access:public
PartBegin	JPartsLoad4.h	/^  unsigned PartBegin;$/;"	m	class:JPartsLoad4	access:protected
PartBegin	JSph.h	/^  unsigned PartBegin;         \/\/\/<Indicates the start (0: no resumption).                 | Indica el PART de arranque (0:Sin reanudacion).$/;"	m	class:JSph	access:protected
PartBeginDir	JCfgRun.h	/^  std::string PartBeginDir;$/;"	m	class:JCfgRun	access:public
PartBeginDir	JSph.h	/^  std::string PartBeginDir;   \/\/\/<Searches directory for starting PART.                   | Directorio donde busca el PART de arranque.$/;"	m	class:JSph	access:protected
PartBeginFirst	JCfgRun.h	/^  unsigned PartBegin,PartBeginFirst;$/;"	m	class:JCfgRun	access:public
PartBeginFirst	JSph.h	/^  unsigned PartBeginFirst;    \/\/\/<Indicates the number of the first PART to be generated. | Indica el numero del primer PART a generar.                                    $/;"	m	class:JSph	access:protected
PartBeginTimeStep	JPartsLoad4.h	/^  double PartBeginTimeStep;$/;"	m	class:JPartsLoad4	access:protected
PartBeginTimeStep	JSph.h	/^  double PartBeginTimeStep;   \/\/\/<initial instant of the simulation                       | Instante de inicio de la simulaciÃ³n.                                          $/;"	m	class:JSph	access:protected
PartBeginTotalNp	JPartsLoad4.h	/^  ullong PartBeginTotalNp;        \/\/\/<Total number of simulated particles.$/;"	m	class:JPartsLoad4	access:protected
PartBeginTotalNp	JSph.h	/^  ullong PartBeginTotalNp;    \/\/\/<Total number of simulated particles.$/;"	m	class:JSph	access:protected
PartCenter	JPartFloatBi4.h	/^  tdouble3 *PartCenter;$/;"	m	class:JPartFloatBi4Load	access:private
PartCenter	JPartFloatBi4.h	/^  tdouble3 *PartCenter;$/;"	m	class:JPartFloatBi4Save	access:private
PartCount	JPartFloatBi4.h	/^  unsigned PartCount;     \/\/\/<Numero de PARTs. PARTs number$/;"	m	class:JPartFloatBi4Load	access:private
PartDtMax	JSph.h	/^  double PartDtMax;       \/\/\/<Maximum value of dt in the current PART. | Valor maximo de dt en el PART actual.$/;"	m	class:JSph	access:protected
PartDtMin	JSph.h	/^  double PartDtMin;       \/\/\/<Minimum value of dt in the current PART. | Valor minimo de dt en el PART actual.$/;"	m	class:JSph	access:protected
PartFomega	JPartFloatBi4.h	/^  tfloat3 *PartFomega;$/;"	m	class:JPartFloatBi4Load	access:private
PartFomega	JPartFloatBi4.h	/^  tfloat3 *PartFomega;$/;"	m	class:JPartFloatBi4Save	access:private
PartFvel	JPartFloatBi4.h	/^  tfloat3 *PartFvel;$/;"	m	class:JPartFloatBi4Load	access:private
PartFvel	JPartFloatBi4.h	/^  tfloat3 *PartFvel;$/;"	m	class:JPartFloatBi4Save	access:private
PartIni	JSph.h	/^  int PartIni;            \/\/\/<First generated PART.  | Primer PART generado. $/;"	m	class:JSph	access:protected
PartNstep	JSph.h	/^  int PartNstep;          \/\/\/<Number of step when last PART was saved. | Numero de paso en el que se guardo el ultimo PART.$/;"	m	class:JSph	access:protected
PartOut	JSph.h	/^  unsigned PartOut;       \/\/\/<Total number of excluded particles to be recorded to the last PART. | Numero total de particulas excluidas al grabar el ultimo PART.$/;"	m	class:JSph	access:protected
ParticlesDataDown	JSphGpu.cpp	/^unsigned JSphGpu::ParticlesDataDown(unsigned n,unsigned pini,bool code,bool onlynormal){$/;"	f	class:JSphGpu	signature:(unsigned n,unsigned pini,bool code,bool onlynormal)
ParticlesDataDown	JSphGpu.h	/^  unsigned ParticlesDataDown(unsigned n,unsigned pini,bool code,bool onlynormal);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned n,unsigned pini,bool code,bool onlynormal)
ParticlesDataUp	JSphGpu.cpp	/^void JSphGpu::ParticlesDataUp(unsigned n){$/;"	f	class:JSphGpu	signature:(unsigned n)
ParticlesDataUp	JSphGpu.h	/^  void ParticlesDataUp(unsigned n);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned n)
ParticlesToAscii	JFormatFiles2.h	/^  static void ParticlesToAscii(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor)
ParticlesToAscii2	JFormatFiles2.h	/^  static void ParticlesToAscii2(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *acepos,const tfloat3 *aceneg,const tfloat3 *vor)
ParticlesToCsv	JFormatFiles2.h	/^  static void ParticlesToCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,unsigned nfixed,unsigned nmoving,unsigned nfloat,unsigned nfluid,unsigned nfluidout,float timestep ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press,const float *mass ,const unsigned *id,const byte *type,const byte *mk,const tfloat3 *ace,const tfloat3 *vor)
ParticlesToCsv2	JFormatFiles2.h	/^  static void ParticlesToCsv2(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,unsigned nfixed,unsigned nmoving,unsigned nfloat,unsigned nfluid,unsigned nfluidout,float timestep ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press,const float *mass ,const unsigned *id,const byte *type,const byte *mk,const tfloat3 *acepos,const tfloat3 *aceneg,const tfloat3 *vor)
ParticlesToVtk	JFormatFiles2.h	/^  static void ParticlesToVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor,int domain=0)
ParticlesToVtk	JFormatFiles2.h	/^  static void ParticlesToVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const unsigned *id,const byte *type,const byte *mk ,const tfloat3 *ace,const tfloat3 *vor,int domain=0)
ParticlesToVtkFloat	JFormatFiles2.h	/^  static void ParticlesToVtkFloat(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const tfloat3 *vel,const float *rhop,const float *press ,const float *mass,const float *id,const float *type,const float *mk ,const tfloat3 *ace,const tfloat3 *vor)
PartsInCell	JCellDivCpu.h	/^  unsigned *PartsInCell;$/;"	m	class:JCellDivCpu	access:protected
PartsInit	JSph.h	/^  JSphPartsInit *PartsInit;  \/\/\/<Stores initial particles data for automatic configurations.$/;"	m	class:JSph	access:protected
PartsLoaded	JSph.h	/^  JPartsLoad4 *PartsLoaded;$/;"	m	class:JSph	access:protected
PartsOut	JSph.h	/^  JPartsOut *PartsOut;              \/\/\/<Stores excluded particles until they are saved. | Almacena las particulas excluidas hasta su grabacion.$/;"	m	class:JSph	access:private
PartsOutMax	JSph.h	/^  float PartsOutMax;         \/\/\/<Allowed percentage of fluid particles out of the domain. | Porcentaje maximo de particulas excluidas permitidas.                                  $/;"	m	class:JSph	access:protected
PartsOutTotWrn	JSph.h	/^  unsigned PartsOutTotWrn;   \/\/\/<Limit percentage for warning generation about total excluded particles.$/;"	m	class:JSph	access:protected
PartsOutWrn	JSph.h	/^  unsigned PartsOutWrn;      \/\/\/<Limit percentage for warning generation about number of excluded particles in one PART.$/;"	m	class:JSph	access:protected
PeriActive	JCellDivCpu.h	/^  const byte PeriActive;$/;"	m	class:JCellDivCpu	access:protected
PeriActive	JCellDivGpu.h	/^  const byte PeriActive;$/;"	m	class:JCellDivGpu	access:protected
PeriActive	JSph.h	/^  byte PeriActive;$/;"	m	class:JSph	access:protected
PeriMode	JPartDataHead.h	/^  TpPeri PeriMode;$/;"	m	class:JPartDataHead	access:private
PeriMode	JPartsLoad4.h	/^  TpPeri PeriMode;$/;"	m	class:JPartsLoad4	access:protected
PeriMode	JPeriodicDef.h	/^  TpPeri PeriMode;$/;"	m	struct:StrPeriodic	access:public
PeriX	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
PeriXinc	JPartDataHead.h	/^  tdouble3 PeriXinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
PeriXinc	JPartsLoad4.h	/^  tdouble3 PeriXinc;$/;"	m	class:JPartsLoad4	access:protected
PeriXinc	JPeriodicDef.h	/^  tdouble3 PeriXinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
PeriXinc	JSph.h	/^  tdouble3 PeriXinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
PeriY	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
PeriYinc	JPartDataHead.h	/^  tdouble3 PeriYinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
PeriYinc	JPartsLoad4.h	/^  tdouble3 PeriYinc;$/;"	m	class:JPartsLoad4	access:protected
PeriYinc	JPeriodicDef.h	/^  tdouble3 PeriYinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
PeriYinc	JSph.h	/^  tdouble3 PeriYinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
PeriZ	JSph.h	/^  bool PeriX,PeriY,PeriZ;$/;"	m	class:JSph	access:protected
PeriZinc	JPartDataHead.h	/^  tdouble3 PeriZinc;     \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JPartDataHead	access:private
PeriZinc	JPartsLoad4.h	/^  tdouble3 PeriZinc;$/;"	m	class:JPartsLoad4	access:protected
PeriZinc	JPeriodicDef.h	/^  tdouble3 PeriZinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
PeriZinc	JSph.h	/^  tdouble3 PeriZinc;    \/\/\/<Value that is added at the outer limit to modify the position.$/;"	m	class:JSph	access:protected
Periodic	JTimeControl.h	/^  bool Periodic;        \/\/\/<For periodic intervals of TimeOut. | Para intervalos periodicos de TimeOut.$/;"	m	class:JTimeControl	access:protected
PeriodicDuplicatePos	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicatePos(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell) const
PeriodicDuplicatePos	JSphCpuSingle.h	/^  void PeriodicDuplicatePos(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned pnew,unsigned pcopy,bool inverse,double dx,double dy,double dz,tuint3 cellmax,tdouble3 *pos,unsigned *dcell) const
PeriodicDuplicateSymplectic	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicateSymplectic(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	f	class:JSphCpuSingle	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tdouble3 *pospre,tfloat4 *velrhoppre) const
PeriodicDuplicateSymplectic	JSphCpuSingle.h	/^  void PeriodicDuplicateSymplectic(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tdouble3 *pospre,tfloat4 *velrhoppre) const
PeriodicDuplicateSymplectic	JSphGpu_ker.cu	/^void PeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,tuint3 domcells,tdouble3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
PeriodicDuplicateSymplectic	JSphGpu_ker.h	/^void PeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini ,tuint3 domcells,tdouble3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
PeriodicDuplicateVerlet	JSphCpuSingle.cpp	/^void JSphCpuSingle::PeriodicDuplicateVerlet(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	f	class:JSphCpuSingle	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tfloat4 *velrhopm1) const
PeriodicDuplicateVerlet	JSphCpuSingle.h	/^  void PeriodicDuplicateVerlet(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,tuint3 cellmax,tdouble3 perinc,const unsigned *listp ,unsigned *idp,typecode *code,unsigned *dcell,tdouble3 *pos,tfloat4 *velrhop,tsymatrix3f *spstau,tfloat4 *velrhopm1) const
PeriodicDuplicateVerlet	JSphGpu_ker.cu	/^void PeriodicDuplicateVerlet(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
PeriodicDuplicateVerlet	JSphGpu_ker.h	/^void PeriodicDuplicateVerlet(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
PeriodicIgnore	JSphGpu_ker.cu	/^void PeriodicIgnore(unsigned n,typecode *code){$/;"	f	namespace:cusph	signature:(unsigned n,typecode *code)
PeriodicIgnore	JSphGpu_ker.h	/^void PeriodicIgnore(unsigned n,typecode *code);$/;"	p	namespace:cusph	signature:(unsigned n,typecode *code)
PeriodicMakeList	JSphCpuSingle.cpp	/^unsigned JSphCpuSingle::PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp)const{$/;"	f	class:JSphCpuSingle	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp) const
PeriodicMakeList	JSphCpuSingle.h	/^  unsigned PeriodicMakeList(unsigned np,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp)const;$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned np,unsigned pini,bool stable,unsigned nmax,tdouble3 perinc,const tdouble3 *pos,const typecode *code,unsigned *listp) const
PeriodicMakeList	JSphGpu_ker.cu	/^unsigned PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax ,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc ,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
PeriodicMakeList	JSphGpu_ker.h	/^unsigned PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
Pf	JLog2.h	/^  std::ofstream *Pf;$/;"	m	class:JLog2	access:protected
Pf	JSaveCsv2.h	/^  std::fstream *Pf;$/;"	m	class:jcsv::JSaveCsv2	access:private
Phase	JMotionMov.h	/^  const double Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovCirSinu	access:public
Phase	JMotionMov.h	/^  const double Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovRotSinu	access:public
Phase	JMotionMov.h	/^  const tdouble3 Phase; \/\/-Siempre en radianes.$/;"	m	class:JMotionMovRectSinu	access:public
Phase	JMotionObj.h	/^  tdouble3 Phase;  \/\/-Solo se usa para el RectilinearSinusoidal$/;"	m	class:JMotionMovActive	access:public
PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovCirSinu	access:public
PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovRectSinu	access:public
PhasePrev	JMotionMov.h	/^  const bool PhasePrev;$/;"	m	class:JMotionMovRotSinu	access:public
PhaseUni	JMotionObj.h	/^  double PhaseUni; \/\/-Solo se usa para el RotationSinusoidal y CircularSinusoidal$/;"	m	class:JMotionMovActive	access:public
Piece	JPartDataBi4.h	/^  unsigned Piece;    \/\/\/<Numero de parte. Part number.$/;"	m	class:JPartDataBi4	access:private
Piece	JPartOutBi4Save.h	/^  unsigned Piece;    \/\/\/<Numero de parte. Part number.$/;"	m	class:JPartOutBi4Save	access:private
Plane3Pt	FunctionsMath.cpp	/^tdouble4 Plane3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3){ $/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
Plane3Pt	FunctionsMath.cpp	/^tfloat4 Plane3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3){ $/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
Plane3Pt	FunctionsMath.h	/^tdouble4 Plane3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
Plane3Pt	FunctionsMath.h	/^tfloat4 Plane3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
PlanePtVec	FunctionsMath.h	/^inline tdouble4 PlanePtVec(const tdouble3 &pt,const tdouble3 &vec){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble3 &vec)
PlanePtVec	FunctionsMath.h	/^inline tfloat4 PlanePtVec(const tfloat3 &pt,const tfloat3 &vec){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat3 &vec)
Point	JGaugeItem.h	/^  tdouble3 Point;$/;"	m	class:JGaugeVelocity	access:protected
Point0	JGaugeItem.h	/^  tdouble3 Point0;$/;"	m	class:JGaugeMaxZ	access:protected
Point0	JGaugeItem.h	/^  tdouble3 Point0;$/;"	m	class:JGaugeSwl	access:protected
Point2	JGaugeItem.h	/^  tdouble3 Point2;$/;"	m	class:JGaugeSwl	access:protected
PointDir	JGaugeItem.h	/^  tdouble3 PointDir;$/;"	m	class:JGaugeSwl	access:protected
PointDp	JGaugeItem.h	/^  double PointDp;$/;"	m	class:JGaugeSwl	access:protected
PointIsOut	JGaugeItem.h	/^  bool PointIsOut(double px,double py)const{ return(px!=px || py!=py || px<DomPosMin.x || py<DomPosMin.y || px>=DomPosMax.x || py>=DomPosMax.y); }$/;"	f	class:JGaugeItem	access:protected	signature:(double px,double py) const
PointIsOut	JGaugeItem.h	/^  bool PointIsOut(double px,double py,double pz)const{ return(px!=px || py!=py || pz!=pz || px<DomPosMin.x || py<DomPosMin.y || pz<DomPosMin.z || px>=DomPosMax.x || py>=DomPosMax.y || pz>=DomPosMax.z); }$/;"	f	class:JGaugeItem	access:protected	signature:(double px,double py,double pz) const
PointMove	JMotionPos.cpp	/^tdouble3 JMotionPos::PointMove(const tdouble3 &p) const{$/;"	f	class:JMotionPos	signature:(const tdouble3 &p) const
PointMove	JMotionPos.h	/^  tdouble3 PointMove(const tdouble3 &p) const;$/;"	p	class:JMotionPos	access:public	signature:(const tdouble3 &p) const
PointNp	JGaugeItem.h	/^  unsigned PointNp;$/;"	m	class:JGaugeSwl	access:protected
PointPlane	FunctionsMath.h	/^inline double PointPlane(const tdouble4 &pla,const tdouble3 &pt){ $/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
PointPlane	FunctionsMath.h	/^inline float PointPlane(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
PointPlane	FunctionsMath_ker.cu	/^__device__ double PointPlane(const float4 &pla,const double3 &pt){ $/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
PointPlane	FunctionsMath_ker.cu	/^__device__ float PointPlane(const float4 &pla,float px,float py,float pz){ $/;"	f	namespace:cumath	signature:(const float4 &pla,float px,float py,float pz)
Pointer	JBinaryData.h	/^  void* Pointer;$/;"	m	class:JBinaryDataArray	access:private
PointerIsExternal	JBinaryData.h	/^  bool PointerIsExternal()const{ return(ExternalPointer); };$/;"	f	class:JBinaryDataArray	access:public	signature:() const
Pointers	JArraysCpu.h	/^  void* Pointers[MAXPOINTERS];$/;"	m	class:JArraysCpuSize	access:protected
Pointers	JArraysGpu.h	/^  void* Pointers[MAXPOINTERS];$/;"	m	class:JArraysGpuSize	access:protected
PointsMove	JMotionPos.h	/^  void PointsMove(tdouble3 &p1,tdouble3 &p2) const{ p1=PointMove(p1); p2=PointMove(p2); }$/;"	f	class:JMotionPos	access:public	signature:(tdouble3 &p1,tdouble3 &p2) const
Pos	JPartsLoad4.h	/^  tdouble3 *Pos;$/;"	m	class:JPartsLoad4	access:protected
Pos	JPartsOut.h	/^  tdouble3 *Pos;$/;"	m	class:JPartsOut	access:protected
Pos	JSphPartsInit.h	/^  tdouble3 *Pos;$/;"	m	class:JSphPartsInit	access:private
PosDefined	JSphMk.h	/^  bool PosDefined;$/;"	m	class:JSphMkBlock	access:private
PosDouble	JCfgRun.h	/^  int PosDouble;  \/\/\/<Precision in particle interaction. 0:Simple, 1:Double, 2:Uses and save double (default=0).$/;"	m	class:JCfgRun	access:public
PosInteraction_Forces	JSphCpu.cpp	/^void JSphCpu::PosInteraction_Forces(){$/;"	f	class:JSphCpu	signature:()
PosInteraction_Forces	JSphCpu.h	/^  void PosInteraction_Forces();$/;"	p	class:JSphCpu	access:protected	signature:()
PosInteraction_Forces	JSphGpu.cpp	/^void JSphGpu::PosInteraction_Forces(){$/;"	f	class:JSphGpu	signature:()
PosInteraction_Forces	JSphGpu.h	/^  void PosInteraction_Forces();$/;"	p	class:JSphGpu	access:protected	signature:()
PosMatrix	JMotionPos.h	/^  JMatrix4d PosMatrix;$/;"	m	class:JMotionPos	access:private
PosMax	JSphMk.h	/^  tdouble3 PosMax;$/;"	m	class:JSphMkBlock	access:private
PosMin	JSphMk.h	/^  tdouble3 PosMin;$/;"	m	class:JSphMkBlock	access:private
PosPrec	JSphCpu.h	/^  tdouble3 *PosPrec;    \/\/\/<Sympletic: in order to keep previous values. | Sympletic: para guardar valores en predictor.$/;"	m	class:JSphCpu	access:protected
PosSimple	JMotionPos.h	/^  tdouble3 PosSimple;$/;"	m	class:JMotionPos	access:private
PosType	JMotionMov.h	/^  const bool PosType;    \/\/-Indica que se almacenan posiciones.$/;"	m	class:JMotionDataFile	access:public
Posc	JSphCpu.h	/^  tdouble3 *Posc;$/;"	m	class:JSphCpu	access:protected
Position	JLinearValue.h	/^  unsigned Position;$/;"	m	class:JLinearValue	access:protected
Position	JSphDtFixed.h	/^  unsigned Position;$/;"	m	class:JSphDtFixed	access:protected
Position	JSphVisco.h	/^  unsigned Position;$/;"	m	class:JSphVisco	access:protected
PositionNext	JLinearValue.h	/^  unsigned PositionNext;$/;"	m	class:JLinearValue	access:protected
Posxy	JSphGpu.h	/^  tdouble2 *Posxy;$/;"	m	class:JSphGpu	access:protected
PosxyPreg	JSphGpu.h	/^  double2 *PosxyPreg;  \/\/\/<Sympletic: in order to keep previous values. | Sympletic: para guardar valores en predictor.$/;"	m	class:JSphGpu	access:protected
Posxyg	JSphGpu.h	/^  double2 *Posxyg;$/;"	m	class:JSphGpu	access:protected
Posz	JSphGpu.h	/^  double *Posz;$/;"	m	class:JSphGpu	access:protected
Posz1	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
Posz2	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
Posz3	JSphInitialize.h	/^  float Posz1,Posz2,Posz3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
PoszPreg	JSphGpu.h	/^  double *PoszPreg;$/;"	m	class:JSphGpu	access:protected
Poszg	JSphGpu.h	/^  double *Poszg;$/;"	m	class:JSphGpu	access:protected
PreInteractionSingle	JSphGpu_ker.cu	/^void PreInteractionSingle(unsigned np,const double2 *posxy,const double *posz$/;"	f	namespace:cusph	signature:(unsigned np,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float ctegamma)
PreInteractionSingle	JSphGpu_ker.h	/^void PreInteractionSingle(unsigned np,const double2 *posxy,const double *posz$/;"	p	namespace:cusph	signature:(unsigned np,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float ctegamma)
PreInteractionVars_Forces	JSphCpu.cpp	/^void JSphCpu::PreInteractionVars_Forces(unsigned np,unsigned npb){$/;"	f	class:JSphCpu	signature:(unsigned np,unsigned npb)
PreInteractionVars_Forces	JSphCpu.h	/^  void PreInteractionVars_Forces(unsigned np,unsigned npb);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,unsigned npb)
PreInteractionVars_Forces	JSphGpu.cpp	/^void JSphGpu::PreInteractionVars_Forces(unsigned np,unsigned npb){$/;"	f	class:JSphGpu	signature:(unsigned np,unsigned npb)
PreInteractionVars_Forces	JSphGpu.h	/^  void PreInteractionVars_Forces(unsigned np,unsigned npb);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,unsigned npb)
PreInteraction_Forces	JSphCpu.cpp	/^void JSphCpu::PreInteraction_Forces(){$/;"	f	class:JSphCpu	signature:()
PreInteraction_Forces	JSphCpu.h	/^  void PreInteraction_Forces();$/;"	p	class:JSphCpu	access:protected	signature:()
PreInteraction_Forces	JSphGpu.cpp	/^void JSphGpu::PreInteraction_Forces(){$/;"	f	class:JSphGpu	signature:()
PreInteraction_Forces	JSphGpu.h	/^  void PreInteraction_Forces();$/;"	p	class:JSphGpu	access:protected	signature:()
PreMotion	JMotionList.h	/^  void PreMotion(){  Active=false;  }$/;"	f	class:JMotionListData	access:public	signature:()
PreMotion	JMotionList.h	/^  void PreMotion(){ for(unsigned c=0;c<Nref;c++)MotionData[c].PreMotion(); }$/;"	f	class:JMotionList	access:public	signature:()
PreSort	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSort(const unsigned* dcellc,const typecode *codec){$/;"	f	class:JCellDivCpuSingle	signature:(const unsigned* dcellc,const typecode *codec)
PreSort	JCellDivCpuSingle.h	/^  void PreSort(const unsigned* dcellc,const typecode *codec);$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(const unsigned* dcellc,const typecode *codec)
PreSort	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::PreSort(const unsigned *dcellg,const typecode *codeg){$/;"	f	class:JCellDivGpuSingle	signature:(const unsigned *dcellg,const typecode *codeg)
PreSort	JCellDivGpuSingle.h	/^  void PreSort(const unsigned *dcellg,const typecode *codeg);$/;"	p	class:JCellDivGpuSingle	access:protected	signature:(const unsigned *dcellg,const typecode *codeg)
PreSortFluid	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSortFluid(unsigned np,unsigned pini,const unsigned *dcellc$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,unsigned pini,const unsigned *dcellc ,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
PreSortFluid	JCellDivCpuSingle.h	/^  void PreSortFluid(unsigned np,unsigned pini,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,unsigned pini,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
PreSortFluid	JCellDivGpuSingle_ker.cu	/^void PreSortFluid(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code$/;"	f	namespace:cudiv	signature:(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code ,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
PreSortFluid	JCellDivGpuSingle_ker.h	/^void PreSortFluid(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart);$/;"	p	namespace:cudiv	signature:(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
PreSortFull	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PreSortFull(unsigned np,const unsigned *dcellc,const typecode *codec$/;"	f	class:JCellDivCpuSingle	signature:(unsigned np,const unsigned *dcellc,const typecode *codec ,unsigned* cellpart,unsigned* partsincell) const
PreSortFull	JCellDivCpuSingle.h	/^  void PreSortFull(unsigned np,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell)const;$/;"	p	class:JCellDivCpuSingle	access:protected	signature:(unsigned np,const unsigned *dcellc,const typecode *codec,unsigned* cellpart,unsigned* partsincell) const
PreSortFull	JCellDivGpuSingle_ker.cu	/^void PreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code ,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
PreSortFull	JCellDivGpuSingle_ker.h	/^void PreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
Prepare	JMotion.cpp	/^void JMotion::Prepare(){$/;"	f	class:JMotion	signature:()
Prepare	JMotion.h	/^  void Prepare();$/;"	p	class:JMotion	access:public	signature:()
PrepareCfgDomainValues	JSph.cpp	/^void JSph::PrepareCfgDomainValues(tdouble3 &v,tdouble3 vdef)const{$/;"	f	class:JSph	signature:(tdouble3 &v,tdouble3 vdef) const
PrepareCfgDomainValues	JSph.h	/^  void PrepareCfgDomainValues(tdouble3 &v,tdouble3 vdef=TDouble3(0))const;$/;"	p	class:JSph	access:protected	signature:(tdouble3 &v,tdouble3 vdef=TDouble3(0)) const
PrepareData	JMotionMov.h	/^  void PrepareData(){  if(!DataFile)DataFile=new JMotionDataFile(*DirData,File,AngDegrees);  }$/;"	f	class:JMotionMovRotFile	access:public	signature:()
PrepareData	JMotionMov.h	/^  void PrepareData(){  if(!DataFile)DataFile=new JMotionDataFile(*DirData,File,Fields,FieldTime,FieldX,FieldY,FieldZ);  }$/;"	f	class:JMotionMovRectFile	access:public	signature:()
PrepareNct	JCellDivCpuSingle.cpp	/^void JCellDivCpuSingle::PrepareNct(){$/;"	f	class:JCellDivCpuSingle	signature:()
PrepareNct	JCellDivCpuSingle.h	/^  void PrepareNct();$/;"	p	class:JCellDivCpuSingle	access:protected	signature:()
PrepareNct	JCellDivGpuSingle.cpp	/^void JCellDivGpuSingle::PrepareNct(){$/;"	f	class:JCellDivGpuSingle	signature:()
PrepareNct	JCellDivGpuSingle.h	/^  void PrepareNct();$/;"	p	class:JCellDivGpuSingle	access:protected	signature:()
PrepareTimes	JTimeControl.cpp	/^void JTimeControl::PrepareTimes(){$/;"	f	class:JTimeControl	signature:()
PrepareTimes	JTimeControl.h	/^  void PrepareTimes();$/;"	p	class:JTimeControl	access:protected	signature:()
Prepared	JMotion.h	/^  bool Prepared;$/;"	m	class:JMotion	access:private
Pressc	JSphCpu.h	/^  float *Pressc;       \/\/\/< Press[]=B*((Rhop\/Rhop0)^gamma-1)$/;"	m	class:JSphCpu	access:protected
PrevData32	JRadixSort.h	/^  unsigned *PrevData32;$/;"	m	class:JRadixSort	access:private
PrevData64	JRadixSort.h	/^  ullong *PrevData64;$/;"	m	class:JRadixSort	access:private
PrevIndex	JRadixSort.h	/^  unsigned *PrevIndex;$/;"	m	class:JRadixSort	access:private
Previous	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
Previous	tinyxml.h	/^    TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
Previous	tinyxml.h	/^    const TiXmlAttribute* Previous() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
PreviousSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling( const std::string& _value )             {   return PreviousSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling()                        { return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling( const std::string& _value ) const {   return PreviousSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling() const            { return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Print	JException.cpp	/^void JException::Print()const{$/;"	f	class:JException	signature:() const
Print	JException.h	/^  void Print()const;$/;"	p	class:JException	access:public	signature:() const
Print	JLog2.cpp	/^void JLog2::Print(const std::string &tx,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &tx,TpMode_Out mode,bool flush)
Print	JLog2.cpp	/^void JLog2::Print(const std::vector<std::string> &lines,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::vector<std::string> &lines,TpMode_Out mode,bool flush)
Print	JLog2.h	/^  void Print(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
Print	JLog2.h	/^  void Print(const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false)
Print	JMatrix4.h	/^  void Print(const char* text,const char* fmt="[%8.5f,%8.5f,%8.5f,%8.5f]\\n")const{$/;"	f	class:JMatrix4	access:public	signature:(const char* text,const char* fmt=Ó) const
Print	tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
Print	tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const = 0;$/;"	p	class:TiXmlBase	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlComment	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlElement	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlText	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( FILE* cfile, int depth ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth = 0 ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* cfile, int depth = 0 ) const
Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
Print	tinyxml.h	/^    void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
Print	tinyxml.h	/^    void Print() const                      { Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
PrintAllocMemory	JSphCpu.cpp	/^void JSphCpu::PrintAllocMemory(llong mcpu)const{$/;"	f	class:JSphCpu	signature:(llong mcpu) const
PrintAllocMemory	JSphCpu.h	/^  void PrintAllocMemory(llong mcpu)const;$/;"	p	class:JSphCpu	access:protected	signature:(llong mcpu) const
PrintAllocMemory	JSphGpu.cpp	/^void JSphGpu::PrintAllocMemory(llong mcpu,llong mgpu)const{$/;"	f	class:JSphGpu	signature:(llong mcpu,llong mgpu) const
PrintAllocMemory	JSphGpu.h	/^  void PrintAllocMemory(llong mcpu,llong mgpu)const;$/;"	p	class:JSphGpu	access:protected	signature:(llong mcpu,llong mgpu) const
PrintDbg	JLog2.h	/^  void PrintDbg(const std::string &tx,TpMode_Out mode=Out_Default){ Print(tx,mode,true); }$/;"	f	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default)
PrintException	JObject.cpp	/^void JObject::PrintException(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
PrintException	JObject.h	/^  void PrintException(const std::string &method,const std::string &msg,const std::string &file="")const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file=Ó) const
PrintFilesList	JLog2.cpp	/^void JLog2::PrintFilesList(TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(TpMode_Out mode,bool flush)
PrintFilesList	JLog2.cpp	/^void JLog2::PrintFilesList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush)
PrintFilesList	JLog2.h	/^  void PrintFilesList(TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out mode=Out_Default,bool flush=false)
PrintFilesList	JLog2.h	/^  void PrintFilesList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false)
PrintHeadPart	JSph.cpp	/^void JSph::PrintHeadPart(){$/;"	f	class:JSph	signature:()
PrintHeadPart	JSph.h	/^  void PrintHeadPart();$/;"	p	class:JSph	access:protected	signature:()
PrintInfo	JCfgRun.h	/^  bool PrintInfo;$/;"	m	class:JCfgRun	access:public
PrintSizeNp	JSph.cpp	/^void JSph::PrintSizeNp(unsigned np,llong size)const{$/;"	f	class:JSph	signature:(unsigned np,llong size) const
PrintSizeNp	JSph.h	/^  void PrintSizeNp(unsigned np,llong size)const;$/;"	p	class:JSph	access:protected	signature:(unsigned np,llong size) const
PrintStr	Functions.cpp	/^std::string PrintStr(const char *format,...){$/;"	f	namespace:fun	signature:(const char *format,...)
PrintStr	Functions.h	/^std::string PrintStr(const char *format,...);$/;"	p	namespace:fun	signature:(const char *format,...)
PrintStrCsv	Functions.cpp	/^std::string PrintStrCsv(bool csvsepcoma,const char *format,...){$/;"	f	namespace:fun	signature:(bool csvsepcoma,const char *format,...)
PrintStrCsv	Functions.h	/^std::string PrintStrCsv(bool csvsepcoma,const char *format,...);$/;"	p	namespace:fun	signature:(bool csvsepcoma,const char *format,...)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,bool value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,bool value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,const char *value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,const char *value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,const std::string &value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,const std::string &value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,double value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,double value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,float value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,float value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,int value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,int value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,tdouble3 value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,tdouble3 value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,tfloat3 value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,tfloat3 value,const std::string &post)
PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,unsigned value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,unsigned value,const std::string &post)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,bool value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,bool value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,const char *value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,const char *value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,const std::string &value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,const std::string &value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,double value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,double value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,float value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,float value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,int value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,int value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,tdouble3 value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,tdouble3 value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,tfloat3 value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,tfloat3 value,const std::string &post=Ó)
PrintVar	Functions.h	/^void PrintVar(const std::string &name,unsigned value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned value,const std::string &post=Ó)
PrintWarning	JLog2.cpp	/^void JLog2::PrintWarning(const std::string &tx,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &tx,TpMode_Out mode,bool flush)
PrintWarning	JLog2.h	/^  void PrintWarning(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
PrintWarningList	JLog2.cpp	/^void JLog2::PrintWarningList(TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(TpMode_Out mode,bool flush)
PrintWarningList	JLog2.cpp	/^void JLog2::PrintWarningList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode,bool flush)
PrintWarningList	JLog2.h	/^  void PrintWarningList(TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(TpMode_Out mode=Out_Default,bool flush=false)
PrintWarningList	JLog2.h	/^  void PrintWarningList(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &txhead,const std::string &txfoot,TpMode_Out mode=Out_Default,bool flush=false)
Printf	JLog2.cpp	/^void JLog2::Printf(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
Printf	JLog2.h	/^  void Printf(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
PrintfDbg	JLog2.cpp	/^void JLog2::PrintfDbg(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
PrintfDbg	JLog2.h	/^  void PrintfDbg(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
PrintfWarning	JLog2.cpp	/^void JLog2::PrintfWarning(const char *format,...){$/;"	f	class:JLog2	signature:(const char *format,...)
PrintfWarning	JLog2.h	/^  void PrintfWarning(const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const char *format,...)
Printfp	JLog2.cpp	/^void JLog2::Printfp(const std::string &prefix,const char *format,...){$/;"	f	class:JLog2	signature:(const std::string &prefix,const char *format,...)
Printfp	JLog2.h	/^  void Printfp(const std::string &prefix,const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const char *format,...)
PrintfpDbg	JLog2.cpp	/^void JLog2::PrintfpDbg(const std::string &prefix,const char *format,...){$/;"	f	class:JLog2	signature:(const std::string &prefix,const char *format,...)
PrintfpDbg	JLog2.h	/^  void PrintfpDbg(const std::string &prefix,const char *format,...);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const char *format,...)
Printp	JLog2.cpp	/^void JLog2::Printp(const std::string &prefix,const std::vector<std::string> &lines,JLog2::TpMode_Out mode,bool flush){$/;"	f	class:JLog2	signature:(const std::string &prefix,const std::vector<std::string> &lines,JLog2::TpMode_Out mode,bool flush)
Printp	JLog2.h	/^  void Printp(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false){ Print(prefix+tx,mode,flush); }$/;"	f	class:JLog2	access:public	signature:(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default,bool flush=false)
Printp	JLog2.h	/^  void Printp(const std::string &prefix,const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false);$/;"	p	class:JLog2	access:public	signature:(const std::string &prefix,const std::vector<std::string> &lines,TpMode_Out mode=Out_Default,bool flush=false)
PrintpDbg	JLog2.h	/^  void PrintpDbg(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default){ Printp(prefix,tx,mode,true); }$/;"	f	class:JLog2	access:public	signature:(const std::string &prefix,const std::string &tx,TpMode_Out mode=Out_Default)
ProcesTime	JMotion.cpp	/^bool JMotion::ProcesTime(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
ProcesTime	JMotion.h	/^  bool ProcesTime(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
ProcesTime	JMotionObj.cpp	/^bool JMotionObj::ProcesTime(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount){$/;"	f	class:JMotionObj	signature:(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount)
ProcesTime	JMotionObj.h	/^  bool ProcesTime(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount);$/;"	p	class:JMotionObj	access:public	signature:(double timestep,double dt,JMotionObj** lismov,unsigned &lismovcount,JMotionObj** lisstop,unsigned &lisstopcount)
ProcesTime	JSphMotion.cpp	/^bool JSphMotion::ProcesTime(TpMotionMode mode,double timestep,double dt){$/;"	f	class:JSphMotion	signature:(TpMotionMode mode,double timestep,double dt)
ProcesTime	JSphMotion.h	/^  bool ProcesTime(TpMotionMode mode,double timestep,double dt);$/;"	p	class:JSphMotion	access:public	signature:(TpMotionMode mode,double timestep,double dt)
ProcesTimeAce	JMotion.cpp	/^bool JMotion::ProcesTimeAce(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
ProcesTimeAce	JMotion.h	/^  bool ProcesTimeAce(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
ProcesTimeGetData	JMotion.cpp	/^bool JMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
ProcesTimeGetData	JMotion.cpp	/^bool JMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const$/;"	f	class:JMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
ProcesTimeGetData	JMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	p	class:JMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2) const
ProcesTimeGetData	JMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov)const;$/;"	p	class:JMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
ProcesTimeGetData	JSphMotion.cpp	/^bool JSphMotion::ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	f	class:JSphMotion	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2 ,unsigned &nparts,unsigned &idbegin) const
ProcesTimeGetData	JSphMotion.cpp	/^bool JSphMotion::ProcesTimeGetData(unsigned ref,word &mkbound$/;"	f	class:JSphMotion	signature:(unsigned ref,word &mkbound ,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
ProcesTimeGetData	JSphMotion.h	/^  bool ProcesTimeGetData(unsigned ref,bool &typesimple,tdouble3 &simplemov$/;"	p	class:JSphMotion	access:public	signature:(unsigned ref,bool &typesimple,tdouble3 &simplemov ,tdouble3 &simplevel,tdouble3 &simpleace,tmatrix4d &matmov,tmatrix4d &matmov2 ,unsigned &nparts,unsigned &idbegin) const
ProcesTimeGetData	JSphMotion.h	/^  bool ProcesTimeGetData(unsigned ref,word &mkbound$/;"	p	class:JSphMotion	access:public	signature:(unsigned ref,word &mkbound ,bool &typesimple,tdouble3 &simplemov,tmatrix4d &matmov) const
ProcesTimeSimple	JMotion.cpp	/^bool JMotion::ProcesTimeSimple(double timestep,double dt){$/;"	f	class:JMotion	signature:(double timestep,double dt)
ProcesTimeSimple	JMotion.h	/^  bool ProcesTimeSimple(double timestep,double dt);$/;"	p	class:JMotion	access:public	signature:(double timestep,double dt)
ProcessLines	JReadDatafile.cpp	/^void JReadDatafile::ProcessLines(){$/;"	f	class:JReadDatafile	signature:()
ProcessLines	JReadDatafile.h	/^  void ProcessLines();$/;"	p	class:JReadDatafile	access:private	signature:()
ProcessSpaces	JReadDatafile.cpp	/^void JReadDatafile::ProcessSpaces(){$/;"	f	class:JReadDatafile	signature:()
ProcessSpaces	JReadDatafile.h	/^  void ProcessSpaces();$/;"	p	class:JReadDatafile	access:private	signature:()
ProcessTimes	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::ProcessTimes(double timestep,unsigned nstep){ $/;"	f	class:JBlockSizeAuto	signature:(double timestep,unsigned nstep)
ProcessTimes	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::ProcessTimes(double timestep,unsigned nstep){$/;"	f	class:JBlockSizeAutoKer	signature:(double timestep,unsigned nstep)
ProcessTimes	JBlockSizeAuto.h	/^  void ProcessTimes(double timestep,unsigned nstep);$/;"	p	class:JBlockSizeAuto	access:public	signature:(double timestep,unsigned nstep)
ProcessTimes	JBlockSizeAuto.h	/^  void ProcessTimes(double timestep,unsigned nstep);$/;"	p	class:JBlockSizeAutoKer	access:public	signature:(double timestep,unsigned nstep)
ProductScalar	FunctionsMath.h	/^inline double ProductScalar(tdouble3 v1,tdouble3 v2){$/;"	f	namespace:fmath	signature:(tdouble3 v1,tdouble3 v2)
ProductScalar	FunctionsMath.h	/^inline float ProductScalar(tfloat3 v1,tfloat3 v2){$/;"	f	namespace:fmath	signature:(tfloat3 v1,tfloat3 v2)
ProductVec	FunctionsMath.h	/^inline tdouble3 ProductVec(const tdouble3 &v1,const tdouble3 &v2){$/;"	f	namespace:fmath	signature:(const tdouble3 &v1,const tdouble3 &v2)
ProductVec	FunctionsMath.h	/^inline tfloat3 ProductVec(const tfloat3 &v1,const tfloat3 &v2){$/;"	f	namespace:fmath	signature:(const tfloat3 &v1,const tfloat3 &v2)
ProgramPath	JAppInfo.h	/^  std::string ProgramPath;$/;"	m	class:JAppInfo	access:private
Properties	JSpaceParts.h	/^  JSpaceProperties* Properties;$/;"	m	class:JSpaceParts	access:private
Properties	JSpaceParts.h	/^  const JSpaceProperties* Properties;   \/\/\/<Pointer to properties object.$/;"	m	class:JSpacePartBlock	access:private
Props	JSpaceParts.h	/^  std::string Props;                    \/\/\/<Assigned properties.$/;"	m	class:JSpacePartBlock	access:private
Props	JSpaceProperties.h	/^  std::string Props;                   \/\/\/<Property or list of properties.$/;"	m	class:JSpacePropLink	access:private
Props	JSpaceProperties.h	/^  std::vector<JSpacePropProperty*> Props;   \/\/\/<List of properties.$/;"	m	class:JSpaceProperties	access:private
PropsFile	JSpaceProperties.h	/^  std::vector<StPropertyFile> PropsFile;    \/\/\/<List of external files with properties (used only to write XML file).$/;"	m	class:JSpaceProperties	access:private
PsPosc	JSphCpu.h	/^  tfloat3 *PsPosc;       \/\/\/<Position and prrhop for Pos-Single interaction | Posicion y prrhop para interaccion Pos-Single.$/;"	m	class:JSphCpu	access:protected
PsPospressg	JSphGpu.h	/^  float4 *PsPospressg; \/\/\/<Position and pressure for the interaction Pos-Single press=cteb*(powf(rhop\/rhopzero,gamma)-1.0f); | Posicion y press para interaccion Pos-Single. press=cteb*(powf(rhop\/rhopzero,gamma)-1.0f); $/;"	m	class:JSphGpu	access:protected
Psingle	JSph.h	/^  bool Psingle;$/;"	m	class:JSph	access:protected
PtOrthogonal	FunctionsMath.h	/^inline tdouble3 PtOrthogonal(const tdouble3 &pt,const tdouble4 &pla){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble4 &pla)
PtOrthogonal	FunctionsMath.h	/^inline tfloat3 PtOrthogonal(const tfloat3 &pt,const tfloat4 &pla){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat4 &pla)
QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
QueryDoubleAttribute	tinyxml.h	/^    int QueryDoubleAttribute( const char* name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* _value ) const
QueryDoubleAttribute	tinyxml.h	/^    int QueryDoubleAttribute( const std::string& name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* _value ) const
QueryDoubleValue	tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
QueryDoubleValue	tinyxml.h	/^    int QueryDoubleValue( double* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( double* _value ) const
QueryFloatAttribute	tinyxml.h	/^    int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
QueryIntAttribute	tinyxml.h	/^    int QueryIntAttribute( const char* name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* _value ) const
QueryIntAttribute	tinyxml.h	/^    int QueryIntAttribute( const std::string& name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* _value ) const
QueryIntValue	tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
QueryIntValue	tinyxml.h	/^    int QueryIntValue( int* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( int* _value ) const
QueryValueAttribute	tinyxml.h	/^    template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
RANDOMC_H	randomc.h	97;"	d
REDUBSIZE	JReduSum_ker.h	34;"	d
REMOVELIMIT	JBlockSizeAuto.h	/^  static const int REMOVELIMIT=5; \/\/- Numero minimo de valores sin descartar.$/;"	m	class:JBlockSizeAutoKer	access:protected
REMOVEPRC	JBlockSizeAuto.h	/^  static const int REMOVEPRC=20;  \/\/- Porcentaje de descartes por ejecucion.$/;"	m	class:JBlockSizeAutoKer	access:protected
REMOVESTART	JBlockSizeAuto.h	/^  static const int REMOVESTART=5; \/\/- Despues de cuantas ejecuciones empieza a descartar valores.$/;"	m	class:JBlockSizeAutoKer	access:protected
RLimit	randomc.h	/^   uint32_t RLimit;                    \/\/ Rejection limit used by IRandomX$/;"	m	class:CRandomMersenne	access:private
Random	randomc.cpp	/^double CRandomMersenne::Random() {$/;"	f	class:CRandomMersenne	signature:()
Random	randomc.h	/^   double Random();                    \/\/ Get floating point random number$/;"	p	class:CRandomMother	access:public	signature:()
Random	randomc.h	/^   double Random();                    \/\/ Output random float$/;"	p	class:CRandomMersenne	access:public	signature:()
RandomInit	randomc.cpp	/^void CRandomMersenne::RandomInit(int seed) {$/;"	f	class:CRandomMersenne	signature:(int seed)
RandomInit	randomc.h	/^   void RandomInit(int seed);          \/\/ Initialization$/;"	p	class:CRandomMother	access:public	signature:(int seed)
RandomInit	randomc.h	/^   void RandomInit(int seed);          \/\/ Re-seed$/;"	p	class:CRandomMersenne	access:public	signature:(int seed)
RandomInitByArray	randomc.cpp	/^void CRandomMersenne::RandomInitByArray(int const seeds[], int NumSeeds) {$/;"	f	class:CRandomMersenne	signature:(int const seeds[], int NumSeeds)
RandomInitByArray	randomc.h	/^   void RandomInitByArray(int const seeds[], int NumSeeds); \/\/ Seed by more than 32 bits$/;"	p	class:CRandomMersenne	access:public	signature:(int const seeds[], int NumSeeds)
Ranges	JRangeFilter.h	/^  unsigned* Ranges;          \/\/\/<Stores intervals$/;"	m	class:JRangeFilter	access:private
ReadArray	JBinaryData.cpp	/^void JBinaryData::ReadArray(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata)
ReadArray	JBinaryData.h	/^  void ReadArray(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool loadarraysdata)
ReadArrayData	JBinaryData.cpp	/^void JBinaryData::ReadArrayData(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata)
ReadArrayData	JBinaryData.h	/^  void ReadArrayData(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,JBinaryDataArray *ar,unsigned countdata,unsigned sizedata,bool loadarraysdata)
ReadArrayDouble3	JXml.cpp	/^unsigned JXml::ReadArrayDouble3(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount) const
ReadArrayDouble3	JXml.h	/^  unsigned ReadArrayDouble3(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tdouble3 *vec,unsigned count,bool readcount=true) const
ReadArrayFloat3	JXml.cpp	/^unsigned JXml::ReadArrayFloat3(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount) const
ReadArrayFloat3	JXml.h	/^  unsigned ReadArrayFloat3(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tfloat3 *vec,unsigned count,bool readcount=true) const
ReadArrayInt3	JXml.cpp	/^unsigned JXml::ReadArrayInt3(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount)const{$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount) const
ReadArrayInt3	JXml.h	/^  unsigned ReadArrayInt3(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount=true)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,tint3 *vec,unsigned count,bool readcount=true) const
ReadData	JBinaryData.cpp	/^void JBinaryDataArray::ReadData(unsigned count,unsigned size,std::ifstream *pf,bool resize){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,unsigned size,std::ifstream *pf,bool resize)
ReadData	JBinaryData.h	/^  void ReadData(unsigned count,unsigned size,std::ifstream *pf,bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,unsigned size,std::ifstream *pf,bool resize)
ReadElementBool	JXml.h	/^  bool ReadElementBool(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,bool valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,bool valdef=0) const
ReadElementDouble	JXml.h	/^  double ReadElementDouble(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,double valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,double valdef=0) const
ReadElementDouble3	JXml.h	/^  tdouble3 ReadElementDouble3(TiXmlNode* node,const std::string &name)const{ return(GetAttributeDouble3(GetFirstElement(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
ReadElementFloat	JXml.h	/^  float ReadElementFloat(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,float valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,float valdef=0) const
ReadElementFloat3	JXml.h	/^  tfloat3 ReadElementFloat3(TiXmlNode* node,const std::string &name)const{ return(ToTFloat3(ReadElementDouble3(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
ReadElementInt	JXml.h	/^  int ReadElementInt(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,int valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,int valdef=0) const
ReadElementInt3	JXml.h	/^  tint3 ReadElementInt3(TiXmlNode* node,const std::string &name)const{ return(GetAttributeInt3(GetFirstElement(node,name))); }$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name) const
ReadElementMatrix3d	JXml.h	/^  tmatrix3d ReadElementMatrix3d(TiXmlNode* node,const std::string &name,bool optionalvalues=false,double valdef=0)const{$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,bool optionalvalues=false,double valdef=0) const
ReadElementStr	JXml.h	/^  std::string ReadElementStr(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,const std::string &valdef="")const{$/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,const std::string &valdef=Ó) const
ReadElementUnsigned	JXml.h	/^  unsigned ReadElementUnsigned(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,unsigned valdef=0)const{ $/;"	f	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,const std::string &attrib,bool optional=false,unsigned valdef=0) const
ReadFileData	JBinaryData.cpp	/^void JBinaryDataArray::ReadFileData(bool resize){$/;"	f	class:JBinaryDataArray	signature:(bool resize)
ReadFileData	JBinaryData.h	/^  void ReadFileData(bool resize);$/;"	p	class:JBinaryDataArray	access:public	signature:(bool resize)
ReadItem	JBinaryData.cpp	/^void JBinaryData::ReadItem(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata){$/;"	f	class:JBinaryData	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata)
ReadItem	JBinaryData.h	/^  void ReadItem(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata);$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf,unsigned sbuf,byte *buf,bool create,bool loadarraysdata)
ReadLin	JReadDatafile.h	/^  int ReadLin;$/;"	m	class:JReadDatafile	access:private
ReadLinValue	JReadDatafile.h	/^  int ReadLinValue;$/;"	m	class:JReadDatafile	access:private
ReadLine	JReadDatafile.h	/^  std::string ReadLine;$/;"	m	class:JReadDatafile	access:private
ReadMatrixDouble	JXml.cpp	/^unsigned JXml::ReadMatrixDouble(TiXmlNode* node,const std::string &name$/;"	f	class:JXml	signature:(TiXmlNode* node,const std::string &name ,unsigned nrows,unsigned ncols,unsigned ndata,double *data ,bool optionalvalues,double valdef) const
ReadMatrixDouble	JXml.h	/^  unsigned ReadMatrixDouble(TiXmlNode* node,const std::string &name,unsigned nrows,unsigned ncols,unsigned ndata,double *data,bool optionalvalues=false,double valdef=0)const;$/;"	p	class:JXml	access:public	signature:(TiXmlNode* node,const std::string &name,unsigned nrows,unsigned ncols,unsigned ndata,double *data,bool optionalvalues=false,double valdef=0) const
ReadName	tinyxml.h	/^    static const char* ReadName( const char* p, TIXML_STRING* name, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, TIXML_STRING* name, TiXmlEncoding encoding )
ReadName	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
ReadNextDouble	JReadDatafile.cpp	/^double JReadDatafile::ReadNextDouble(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextDouble	JReadDatafile.h	/^  double ReadNextDouble(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextDouble3	JReadDatafile.cpp	/^tdouble3 JReadDatafile::ReadNextDouble3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextDouble3	JReadDatafile.h	/^  tdouble3 ReadNextDouble3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextFloat	JReadDatafile.h	/^  float ReadNextFloat(bool in_line=false){    return(float(ReadNextDouble(in_line)));      }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextFloat3	JReadDatafile.h	/^  tfloat3 ReadNextFloat3(bool in_line=false){ return(ToTFloat3(ReadNextDouble3(in_line))); }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextInt	JReadDatafile.cpp	/^int JReadDatafile::ReadNextInt(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextInt	JReadDatafile.h	/^  int ReadNextInt(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextInt3	JReadDatafile.cpp	/^tint3 JReadDatafile::ReadNextInt3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextInt3	JReadDatafile.h	/^  tint3 ReadNextInt3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextUnsigned	JReadDatafile.h	/^  unsigned ReadNextUnsigned(bool in_line=false){ return(unsigned(ReadNextInt(in_line))); }$/;"	f	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextUnsigned3	JReadDatafile.cpp	/^tuint3 JReadDatafile::ReadNextUnsigned3(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextUnsigned3	JReadDatafile.h	/^  tuint3 ReadNextUnsigned3(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadNextValue	JReadDatafile.cpp	/^std::string JReadDatafile::ReadNextValue(bool in_line){$/;"	f	class:JReadDatafile	signature:(bool in_line)
ReadNextValue	JReadDatafile.h	/^  std::string ReadNextValue(bool in_line=false);$/;"	p	class:JReadDatafile	access:public	signature:(bool in_line=false)
ReadText	tinyxml.h	/^    static const char* ReadText(    const char* in,             \/\/ where to start$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, TIXML_STRING* text, bool ignoreWhiteSpace, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
ReadText	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(    const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
ReadUint	JBinaryData.cpp	/^unsigned JBinaryData::ReadUint(std::ifstream *pf)const{$/;"	f	class:JBinaryData	signature:(std::ifstream *pf) const
ReadUint	JBinaryData.h	/^  unsigned ReadUint(std::ifstream *pf)const;$/;"	p	class:JBinaryData	access:private	signature:(std::ifstream *pf) const
ReadValue	JReadDatafile.h	/^  std::string ReadValue;$/;"	m	class:JReadDatafile	access:private
ReadValue	tinyxml.h	/^    const char* ReadValue( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:protected	signature:( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding )
ReadValue	tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
ReadXml	JDamping.cpp	/^void JDamping::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JDamping	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JDamping.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JDamping	access:private	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JGaugeSystem.cpp	/^void JGaugeSystem::ReadXml(JXml *sxml,TiXmlElement* lis,const JSphMk* mkinfo){$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* lis,const JSphMk* mkinfo)
ReadXml	JGaugeSystem.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele,const JSphMk* mkinfo);$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* ele,const JSphMk* mkinfo)
ReadXml	JMotion.cpp	/^void JMotion::ReadXml(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp){$/;"	f	class:JMotion	signature:(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp)
ReadXml	JMotion.cpp	/^void JMotion::ReadXml(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists){$/;"	f	class:JMotion	signature:(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists)
ReadXml	JMotion.h	/^  void ReadXml(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp);$/;"	p	class:JMotion	access:private	signature:(const std::string &dirdata,JXml *jxml,TiXmlNode* node,unsigned &id,unsigned idp)
ReadXml	JMotion.h	/^  void ReadXml(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists=true);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata,JXml *jxml,const std::string &path,bool checkexists=true)
ReadXml	JSaveDt.cpp	/^void JSaveDt::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSaveDt	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSaveDt.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSaveDt	access:private	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceEParms.cpp	/^void JSpaceEParms::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JSpaceEParms.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceEParms	access:private	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock_Floating::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock_Floating	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.cpp	/^void JSpacePartBlock_Moving::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JSpacePartBlock_Moving	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.cpp	/^void JSpaceParts::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JSpaceParts.h	/^  virtual void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock	access:public	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock_Floating	access:public	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpacePartBlock_Moving	access:public	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSpaceParts.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JSpaceProperties.cpp	/^void JSpacePropLinks::ReadXml(JXml *sxml,TiXmlElement* eprops){$/;"	f	class:JSpacePropLinks	signature:(JXml *sxml,TiXmlElement* eprops)
ReadXml	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXml(JXml *sxml,TiXmlElement* eprops){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops)
ReadXml	JSpaceProperties.h	/^  void ReadXml(JXml *sxml,TiXmlElement* eprops);$/;"	p	class:JSpacePropLinks	access:public	signature:(JXml *sxml,TiXmlElement* eprops)
ReadXml	JSpaceProperties.h	/^  void ReadXml(JXml *sxml,TiXmlElement* eprops);$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,TiXmlElement* eprops)
ReadXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::ReadXml(const JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSpaceVtkOut	signature:(const JXml *sxml,TiXmlElement* lis)
ReadXml	JSpaceVtkOut.h	/^  void ReadXml(const JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSpaceVtkOut	access:private	signature:(const JXml *sxml,TiXmlElement* lis)
ReadXml	JSphAccInput.cpp	/^void JSphAccInput::ReadXml(const JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSphAccInput	signature:(const JXml *sxml,TiXmlElement* lis)
ReadXml	JSphAccInput.h	/^  void ReadXml(const JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSphAccInput	access:protected	signature:(const JXml *sxml,TiXmlElement* lis)
ReadXml	JSphInitialize.cpp	/^void JSphInitialize::ReadXml(JXml *sxml,TiXmlElement* lis){$/;"	f	class:JSphInitialize	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::ReadXml(JXml *sxml,TiXmlElement* xele){$/;"	f	class:JSphInitializeOp_FluidVel	signature:(JXml *sxml,TiXmlElement* xele)
ReadXml	JSphInitialize.h	/^  virtual void ReadXml(JXml *sxml,TiXmlElement* ele)=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSphInitialize.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JSphInitialize.h	/^  void ReadXml(JXml *sxml,TiXmlElement* lis);$/;"	p	class:JSphInitialize	access:private	signature:(JXml *sxml,TiXmlElement* lis)
ReadXml	JTimeOut.cpp	/^void JTimeOut::ReadXml(JXml *sxml,TiXmlElement* ele){$/;"	f	class:JTimeOut	signature:(JXml *sxml,TiXmlElement* ele)
ReadXml	JTimeOut.h	/^  void ReadXml(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JTimeOut	access:protected	signature:(JXml *sxml,TiXmlElement* ele)
ReadXmlCommon	JGaugeSystem.cpp	/^JGaugeItem::StDefault JGaugeSystem::ReadXmlCommon(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JGaugeSystem	signature:(JXml *sxml,TiXmlElement* ele) const
ReadXmlCommon	JGaugeSystem.h	/^  JGaugeItem::StDefault ReadXmlCommon(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JGaugeSystem	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
ReadXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlDef(JXml *sxml,TiXmlElement* node){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node)
ReadXmlDef	JSpaceCtes.h	/^  void ReadXmlDef(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele)
ReadXmlElementAuto	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlElementAuto(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto)
ReadXmlElementAuto	JSpaceCtes.h	/^  void ReadXmlElementAuto(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* node,bool optional,std::string name,double &value,bool &valueauto)
ReadXmlProperty	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXmlProperty(JXml *sxml,TiXmlElement* eprop){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprop)
ReadXmlProperty	JSpaceProperties.h	/^  void ReadXmlProperty(JXml *sxml,TiXmlElement* eprop);$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprop)
ReadXmlPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::ReadXmlPropertyFile(JXml *sxml,TiXmlElement* epropfile){$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* epropfile)
ReadXmlPropertyFile	JSpaceProperties.h	/^  void ReadXmlPropertyFile(JXml *sxml,TiXmlElement* epropfile);$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* epropfile)
ReadXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::ReadXmlRun(JXml *sxml,TiXmlElement* node){$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node)
ReadXmlRun	JSpaceCtes.h	/^  void ReadXmlRun(JXml *sxml,TiXmlElement* ele);$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele)
Rect3d2pt	FunctionsMath.h	/^inline StRect3d Rect3d2pt(tdouble3 p1,tdouble3 p2){$/;"	f	namespace:fmath	signature:(tdouble3 p1,tdouble3 p2)
RectPosX	FunctionsMath.cpp	/^tdouble3 RectPosX(const StRect3d &r,double x){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double x)
RectPosX	FunctionsMath.h	/^tdouble3 RectPosX(const StRect3d &r,double x);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double x)
RectPosY	FunctionsMath.cpp	/^tdouble3 RectPosY(const StRect3d &r,double y){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double y)
RectPosY	FunctionsMath.h	/^tdouble3 RectPosY(const StRect3d &r,double y);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double y)
RectPosZ	FunctionsMath.cpp	/^tdouble3 RectPosZ(const StRect3d &r,double z){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double z)
RectPosZ	FunctionsMath.h	/^tdouble3 RectPosZ(const StRect3d &r,double z);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double z)
Rectilinear	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RectilinearAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RectilinearFile	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RectilinearSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
ReduMaxFloat	JSphGpu_ker.cu	/^float ReduMaxFloat(unsigned ndata,unsigned inidata,float* data,float* resu){$/;"	f	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float* data,float* resu)
ReduMaxFloat	JSphGpu_ker.h	/^float ReduMaxFloat(unsigned ndata,unsigned inidata,float* data,float* resu);$/;"	p	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float* data,float* resu)
ReduMaxFloatSize	JSphGpu_ker.h	/^inline unsigned ReduMaxFloatSize(unsigned ndata){ return((ndata\/SPHBSIZE+1)+(ndata\/(SPHBSIZE*SPHBSIZE)+SPHBSIZE)); }$/;"	f	namespace:cusph	signature:(unsigned ndata)
ReduMaxFloat_w	JSphGpu_ker.cu	/^float ReduMaxFloat_w(unsigned ndata,unsigned inidata,float4* data,float* resu){$/;"	f	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float4* data,float* resu)
ReduMaxFloat_w	JSphGpu_ker.h	/^float ReduMaxFloat_w(unsigned ndata,unsigned inidata,float4* data,float* resu);$/;"	p	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float4* data,float* resu)
ReduPosLimits	JCellDivGpu_ker.cu	/^void ReduPosLimits(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log)
ReduPosLimits	JCellDivGpu_ker.h	/^void ReduPosLimits(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log);$/;"	p	namespace:cudiv	signature:(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log)
ReduSumDouble	JReduSum_ker.cu	/^double ReduSumDouble(unsigned ndata,unsigned inidata,const double* data,double* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu)
ReduSumDouble	JReduSum_ker.h	/^double ReduSumDouble(unsigned ndata,unsigned inidata,const double* data,double* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu)
ReduSumDoubleAsyn	JReduSum_ker.cu	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm)
ReduSumDoubleAsyn	JReduSum_ker.cu	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
ReduSumDoubleAsyn	JReduSum_ker.h	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm)
ReduSumDoubleAsyn	JReduSum_ker.h	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
ReduSumDoubleBase	JReduSum_ker.cu	/^double ReduSumDoubleBase(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
ReduSumFloat	JReduSum_ker.cu	/^float ReduSumFloat(unsigned ndata,unsigned inidata,const float* data,float* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu)
ReduSumFloat	JReduSum_ker.h	/^float ReduSumFloat(unsigned ndata,unsigned inidata,const float* data,float* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu)
ReduSumFloat3	JReduSum_ker.cu	/^float3 ReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data,float3* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu)
ReduSumFloat3	JReduSum_ker.h	/^float3 ReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data,float3* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu)
ReduSumFloat3Asyn	JReduSum_ker.cu	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm)
ReduSumFloat3Asyn	JReduSum_ker.cu	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
ReduSumFloat3Asyn	JReduSum_ker.h	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm)
ReduSumFloat3Asyn	JReduSum_ker.h	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
ReduSumFloat3Base	JReduSum_ker.cu	/^float3 ReduSumFloat3Base(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
ReduSumFloatAsyn	JReduSum_ker.cu	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm)
ReduSumFloatAsyn	JReduSum_ker.cu	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
ReduSumFloatAsyn	JReduSum_ker.h	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm)
ReduSumFloatAsyn	JReduSum_ker.h	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
ReduSumFloatBase	JReduSum_ker.cu	/^float ReduSumFloatBase(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
ReduSumUint	JReduSum_ker.cu	/^unsigned ReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu)
ReduSumUint	JReduSum_ker.h	/^unsigned ReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu)
ReduSumUintAsyn	JReduSum_ker.cu	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm)
ReduSumUintAsyn	JReduSum_ker.cu	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
ReduSumUintAsyn	JReduSum_ker.h	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm)
ReduSumUintAsyn	JReduSum_ker.h	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
ReduSumUintBase	JReduSum_ker.cu	/^unsigned ReduSumUintBase(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
ReduUintLimits	JCellDivGpu_ker.cu	/^void ReduUintLimits(unsigned nblocks,unsigned *aux,unsigned &vmin,unsigned &vmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,unsigned *aux,unsigned &vmin,unsigned &vmax,JLog2 *log)
ReduUintSum	JCellDivGpu_ker.cu	/^unsigned ReduUintSum(unsigned nblocks,unsigned *aux,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,unsigned *aux,JLog2 *log)
Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCir	access:public
Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCirAce	access:public
Ref	JMotionMov.h	/^  const JMotionAxis* Ref;$/;"	m	class:JMotionMovCirSinu	access:public
Ref	JMotionObj.h	/^  const int Ref;     \/\/-Referencia a objeto real (ref<0 lo trata como un obj virtual)$/;"	m	class:JMotionObj	access:public
RefMotion	JSpaceParts.h	/^  unsigned RefMotion;$/;"	m	class:JSpacePartBlock_Moving	access:private
RemLineCount	JReadDatafile.h	/^  int RemLineCount;      \/\/\/< Number of remark lines.$/;"	m	class:JReadDatafile	access:private
RemLines	JReadDatafile.h	/^  unsigned RemLines()const{ return(RemLineCount); }$/;"	f	class:JReadDatafile	access:public	signature:() const
Remove	tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
Remove	tinyxml.h	/^    void Remove( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
RemoveArray	JBinaryData.cpp	/^void JBinaryData::RemoveArray(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
RemoveArray	JBinaryData.h	/^  void RemoveArray(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
RemoveArrays	JBinaryData.cpp	/^void JBinaryData::RemoveArrays(){$/;"	f	class:JBinaryData	signature:()
RemoveArrays	JBinaryData.h	/^  void RemoveArrays();$/;"	p	class:JBinaryData	access:public	signature:()
RemoveAttribute	tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
RemoveAttribute	tinyxml.h	/^    void RemoveAttribute( const char * name );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name )
RemoveAttribute	tinyxml.h	/^    void RemoveAttribute( const std::string& name ) {   RemoveAttribute (name.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
RemoveBoundary	JPartsLoad4.cpp	/^void JPartsLoad4::RemoveBoundary(){$/;"	f	class:JPartsLoad4	signature:()
RemoveBoundary	JPartsLoad4.h	/^  void RemoveBoundary();$/;"	p	class:JPartsLoad4	access:public	signature:()
RemoveChar	JReadDatafile.cpp	/^void JReadDatafile::RemoveChar(char let){$/;"	f	class:JReadDatafile	signature:(char let)
RemoveChar	JReadDatafile.h	/^  void RemoveChar(char let);$/;"	p	class:JReadDatafile	access:public	signature:(char let)
RemoveChild	tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
RemoveChild	tinyxml.h	/^    bool RemoveChild( TiXmlNode* removeThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* removeThis )
RemoveItem	JBinaryData.cpp	/^void JBinaryData::RemoveItem(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
RemoveItem	JBinaryData.h	/^  void RemoveItem(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
RemoveItems	JBinaryData.cpp	/^void JBinaryData::RemoveItems(){$/;"	f	class:JBinaryData	signature:()
RemoveItems	JBinaryData.h	/^  void RemoveItems();$/;"	p	class:JBinaryData	access:public	signature:()
RemoveNode	JXml.cpp	/^void JXml::RemoveNode(const std::string &path){$/;"	f	class:JXml	signature:(const std::string &path)
RemoveNode	JXml.h	/^  void RemoveNode(const std::string &path);$/;"	p	class:JXml	access:public	signature:(const std::string &path)
RemoveValue	JBinaryData.cpp	/^void JBinaryData::RemoveValue(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
RemoveValue	JBinaryData.h	/^  void RemoveValue(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
RemoveValues	JBinaryData.cpp	/^void JBinaryData::RemoveValues(){$/;"	f	class:JBinaryData	signature:()
RemoveValues	JBinaryData.h	/^  void RemoveValues();$/;"	p	class:JBinaryData	access:public	signature:()
Rep	tinystr.h	/^    struct Rep$/;"	s	class:TiXmlString	access:private
ReplaceChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
ReplaceChild	tinyxml.h	/^    TiXmlNode* ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
Reserve	JArraysCpu.cpp	/^void* JArraysCpuSize::Reserve(){$/;"	f	class:JArraysCpuSize	signature:()
Reserve	JArraysCpu.h	/^  void* Reserve();$/;"	p	class:JArraysCpuSize	access:public	signature:()
Reserve	JArraysGpu.cpp	/^void* JArraysGpuSize::Reserve(){$/;"	f	class:JArraysGpuSize	signature:()
Reserve	JArraysGpu.h	/^  void* Reserve();$/;"	p	class:JArraysGpuSize	access:public	signature:()
ReserveBasicArraysCpu	JSphCpu.cpp	/^void JSphCpu::ReserveBasicArraysCpu(){$/;"	f	class:JSphCpu	signature:()
ReserveBasicArraysCpu	JSphCpu.h	/^  void ReserveBasicArraysCpu();$/;"	p	class:JSphCpu	access:protected	signature:()
ReserveBasicArraysGpu	JSphGpu.cpp	/^void JSphGpu::ReserveBasicArraysGpu(){$/;"	f	class:JSphGpu	signature:()
ReserveBasicArraysGpu	JSphGpu.h	/^  void ReserveBasicArraysGpu();$/;"	p	class:JSphGpu	access:protected	signature:()
ReserveByte	JArraysCpu.h	/^  byte*        ReserveByte(){       return((byte*)Arrays1b->Reserve());         }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveByte	JArraysGpu.h	/^  byte*        ReserveByte(){       return((byte*)Arrays1b->Reserve());         }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveDouble	JArraysCpu.h	/^  double*      ReserveDouble(){     return((double*)Arrays8b->Reserve());       }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveDouble	JArraysGpu.h	/^  double*      ReserveDouble(){     return((double*)Arrays8b->Reserve());       }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveDouble2	JArraysCpu.h	/^  tdouble2*    ReserveDouble2(){    return((tdouble2*)Arrays16b->Reserve());    }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveDouble2	JArraysGpu.h	/^  double2*     ReserveDouble2(){    return((double2*)Arrays16b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveDouble3	JArraysCpu.h	/^  tdouble3*    ReserveDouble3(){    return((tdouble3*)Arrays24b->Reserve());    }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveDouble3	JArraysGpu.h	/^  double3*     ReserveDouble3(){    return((double3*)Arrays24b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveDouble4	JArraysGpu.h	/^  double4*     ReserveDouble4(){    return((double4*)Arrays32b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveFloat	JArraysCpu.h	/^  float*       ReserveFloat(){      return((float*)Arrays4b->Reserve());        }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveFloat	JArraysGpu.h	/^  float*       ReserveFloat(){      return((float*)Arrays4b->Reserve());        }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveFloat3	JArraysCpu.h	/^  tfloat3*     ReserveFloat3(){     return((tfloat3*)Arrays12b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveFloat3	JArraysGpu.h	/^  float3*      ReserveFloat3(){     return((float3*)Arrays12b->Reserve());      }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveFloat4	JArraysCpu.h	/^  tfloat4*     ReserveFloat4(){     return((tfloat4*)Arrays16b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveFloat4	JArraysGpu.h	/^  float4*      ReserveFloat4(){     return((float4*)Arrays16b->Reserve());      }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveInt	JArraysCpu.h	/^  int*         ReserveInt(){        return((int*)Arrays4b->Reserve());          }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveInt	JArraysGpu.h	/^  int*         ReserveInt(){        return((int*)Arrays4b->Reserve());          }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveSymatrix3f	JArraysCpu.h	/^  tsymatrix3f* ReserveSymatrix3f(){ return((tsymatrix3f*)Arrays24b->Reserve()); }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveSymatrix3f	JArraysGpu.h	/^  tsymatrix3f* ReserveSymatrix3f(){ return((tsymatrix3f*)Arrays24b->Reserve()); }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveTypeCode	JArraysCpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveUint());                      }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveTypeCode	JArraysCpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveWord());                      }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveTypeCode	JArraysGpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveUint());                      }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveTypeCode	JArraysGpu.h	/^  typecode*    ReserveTypeCode(){   return(ReserveWord());                      }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveUint	JArraysCpu.h	/^  unsigned*    ReserveUint(){       return((unsigned*)Arrays4b->Reserve());     }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveUint	JArraysGpu.h	/^  unsigned*    ReserveUint(){       return((unsigned*)Arrays4b->Reserve());     }$/;"	f	class:JArraysGpu	access:public	signature:()
ReserveWord	JArraysCpu.h	/^  word*        ReserveWord(){       return((word*)Arrays2b->Reserve());         }$/;"	f	class:JArraysCpu	access:public	signature:()
ReserveWord	JArraysGpu.h	/^  word*        ReserveWord(){       return((word*)Arrays2b->Reserve());         }$/;"	f	class:JArraysGpu	access:public	signature:()
Reset	JAppInfo.cpp	/^void JAppInfo::Reset(){$/;"	f	class:JAppInfo	signature:()
Reset	JAppInfo.h	/^  void Reset();$/;"	p	class:JAppInfo	access:public	signature:()
Reset	JArraysCpu.cpp	/^void JArraysCpu::Reset(){$/;"	f	class:JArraysCpu	signature:()
Reset	JArraysCpu.cpp	/^void JArraysCpuSize::Reset(){$/;"	f	class:JArraysCpuSize	signature:()
Reset	JArraysCpu.h	/^  void Reset();$/;"	p	class:JArraysCpu	access:public	signature:()
Reset	JArraysCpu.h	/^  void Reset();$/;"	p	class:JArraysCpuSize	access:public	signature:()
Reset	JArraysGpu.cpp	/^void JArraysGpu::Reset(){$/;"	f	class:JArraysGpu	signature:()
Reset	JArraysGpu.cpp	/^void JArraysGpuSize::Reset(){$/;"	f	class:JArraysGpuSize	signature:()
Reset	JArraysGpu.h	/^  void Reset();$/;"	p	class:JArraysGpu	access:public	signature:()
Reset	JArraysGpu.h	/^  void Reset();$/;"	p	class:JArraysGpuSize	access:public	signature:()
Reset	JBlockSizeAuto.cpp	/^void JBlockSizeAuto::Reset(){$/;"	f	class:JBlockSizeAuto	signature:()
Reset	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::Reset(){$/;"	f	class:JBlockSizeAutoKer	signature:()
Reset	JBlockSizeAuto.h	/^  void Reset();$/;"	p	class:JBlockSizeAuto	access:public	signature:()
Reset	JBlockSizeAuto.h	/^  void Reset();$/;"	p	class:JBlockSizeAutoKer	access:public	signature:()
Reset	JCellDivCpu.cpp	/^void JCellDivCpu::Reset(){$/;"	f	class:JCellDivCpu	signature:()
Reset	JCellDivCpu.h	/^  void Reset();$/;"	p	class:JCellDivCpu	access:protected	signature:()
Reset	JCellDivGpu.cpp	/^void JCellDivGpu::Reset(){$/;"	f	class:JCellDivGpu	signature:()
Reset	JCellDivGpu.h	/^  void Reset();$/;"	p	class:JCellDivGpu	access:protected	signature:()
Reset	JCfgRun.cpp	/^void JCfgRun::Reset(){$/;"	f	class:JCfgRun	signature:()
Reset	JCfgRun.h	/^  void Reset();$/;"	p	class:JCfgRun	access:public	signature:()
Reset	JDamping.cpp	/^void JDamping::Reset(){$/;"	f	class:JDamping	signature:()
Reset	JDamping.h	/^  void Reset();$/;"	p	class:JDamping	access:public	signature:()
Reset	JDsphConfig.cpp	/^void JDsphConfig::Reset(){$/;"	f	class:JDsphConfig	signature:()
Reset	JDsphConfig.h	/^  void Reset();$/;"	p	class:JDsphConfig	access:public	signature:()
Reset	JGaugeItem.cpp	/^void JGaugeForce::Reset(){$/;"	f	class:JGaugeForce	signature:()
Reset	JGaugeItem.cpp	/^void JGaugeItem::Reset(){$/;"	f	class:JGaugeItem	signature:()
Reset	JGaugeItem.cpp	/^void JGaugeMaxZ::Reset(){$/;"	f	class:JGaugeMaxZ	signature:()
Reset	JGaugeItem.cpp	/^void JGaugeSwl::Reset(){$/;"	f	class:JGaugeSwl	signature:()
Reset	JGaugeItem.cpp	/^void JGaugeVelocity::Reset(){$/;"	f	class:JGaugeVelocity	signature:()
Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:()
Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:()
Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:()
Reset	JGaugeItem.h	/^    void Reset(){$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:()
Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeForce	access:protected	signature:()
Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeItem	access:protected	signature:()
Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeMaxZ	access:protected	signature:()
Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeSwl	access:protected	signature:()
Reset	JGaugeItem.h	/^  void Reset();$/;"	p	class:JGaugeVelocity	access:protected	signature:()
Reset	JGaugeSystem.cpp	/^void JGaugeSystem::Reset(){$/;"	f	class:JGaugeSystem	signature:()
Reset	JGaugeSystem.h	/^  void Reset();$/;"	p	class:JGaugeSystem	access:public	signature:()
Reset	JLinearValue.cpp	/^void JLinearValue::Reset(){$/;"	f	class:JLinearValue	signature:()
Reset	JLinearValue.h	/^  void Reset();$/;"	p	class:JLinearValue	access:public	signature:()
Reset	JLog2.cpp	/^void JLog2::Reset(){$/;"	f	class:JLog2	signature:()
Reset	JLog2.h	/^  void Reset();$/;"	p	class:JLog2	access:public	signature:()
Reset	JMeanValues.cpp	/^void JMeanMoving::Reset(){$/;"	f	class:JMeanMoving	signature:()
Reset	JMeanValues.h	/^  void Reset();$/;"	p	class:JMeanMoving	access:public	signature:()
Reset	JMeanValues.h	/^  void Reset(){ Max=-DBL_MAX; Min=DBL_MAX; Mean=0; Values=0; }$/;"	f	class:JMeanValue	access:public	signature:()
Reset	JMotion.cpp	/^void JMotion::Reset(){$/;"	f	class:JMotion	signature:()
Reset	JMotion.h	/^  void Reset();$/;"	p	class:JMotion	access:public	signature:()
Reset	JMotionMov.cpp	/^void JMotionDataFile::Reset(){$/;"	f	class:JMotionDataFile	signature:()
Reset	JMotionMov.h	/^  void Reset();$/;"	p	class:JMotionDataFile	access:private	signature:()
Reset	JMotionObj.cpp	/^void JMotionObj::Reset(){$/;"	f	class:JMotionObj	signature:()
Reset	JMotionObj.h	/^  void Reset();$/;"	p	class:JMotionObj	access:public	signature:()
Reset	JMotionPos.cpp	/^void JMotionPos::Reset(){$/;"	f	class:JMotionPos	signature:()
Reset	JMotionPos.h	/^  void Reset();$/;"	p	class:JMotionPos	access:public	signature:()
Reset	JPartDataBi4.cpp	/^void JPartDataBi4::Reset(){$/;"	f	class:JPartDataBi4	signature:()
Reset	JPartDataBi4.h	/^  void Reset();$/;"	p	class:JPartDataBi4	access:public	signature:()
Reset	JPartDataHead.cpp	/^void JPartDataHead::Reset(){$/;"	f	class:JPartDataHead	signature:()
Reset	JPartDataHead.h	/^  void Reset();$/;"	p	class:JPartDataHead	access:public	signature:()
Reset	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::Reset(){$/;"	f	class:JPartFloatBi4Load	signature:()
Reset	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::Reset(){$/;"	f	class:JPartFloatBi4Save	signature:()
Reset	JPartFloatBi4.h	/^  void Reset();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
Reset	JPartFloatBi4.h	/^  void Reset();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
Reset	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::Reset(){$/;"	f	class:JPartOutBi4Save	signature:()
Reset	JPartOutBi4Save.h	/^  void Reset();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
Reset	JPartsLoad4.cpp	/^void JPartsLoad4::Reset(){$/;"	f	class:JPartsLoad4	signature:()
Reset	JPartsLoad4.h	/^  void Reset();$/;"	p	class:JPartsLoad4	access:public	signature:()
Reset	JPartsOut.cpp	/^void JPartsOut::Reset(){$/;"	f	class:JPartsOut	signature:()
Reset	JPartsOut.h	/^  void Reset();$/;"	p	class:JPartsOut	access:public	signature:()
Reset	JPeriodicDef.h	/^  void Reset(){$/;"	f	struct:StrPeriodic	access:public	signature:()
Reset	JRadixSort.cpp	/^void JRadixSort::Reset(){$/;"	f	class:JRadixSort	signature:()
Reset	JRadixSort.h	/^  void Reset();$/;"	p	class:JRadixSort	access:public	signature:()
Reset	JRangeFilter.cpp	/^void JRangeFilter::Reset(){$/;"	f	class:JRangeFilter	signature:()
Reset	JRangeFilter.h	/^  void Reset();$/;"	p	class:JRangeFilter	access:public	signature:()
Reset	JReadDatafile.cpp	/^void JReadDatafile::Reset(){$/;"	f	class:JReadDatafile	signature:()
Reset	JReadDatafile.h	/^  void Reset();$/;"	p	class:JReadDatafile	access:public	signature:()
Reset	JSaveCsv2.cpp	/^void JSaveCsv2::Reset(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
Reset	JSaveCsv2.h	/^  void Reset();$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:()
Reset	JSaveDt.cpp	/^void JSaveDt::Reset(){$/;"	f	class:JSaveDt	signature:()
Reset	JSaveDt.h	/^  void Reset();$/;"	p	class:JSaveDt	access:public	signature:()
Reset	JSpaceCtes.cpp	/^void JSpaceCtes::Reset(){$/;"	f	class:JSpaceCtes	signature:()
Reset	JSpaceCtes.h	/^  void Reset();$/;"	p	class:JSpaceCtes	access:public	signature:()
Reset	JSpaceEParms.cpp	/^void JSpaceEParms::Reset(){$/;"	f	class:JSpaceEParms	signature:()
Reset	JSpaceEParms.h	/^  void Reset();$/;"	p	class:JSpaceEParms	access:public	signature:()
Reset	JSpaceParts.cpp	/^void JSpaceParts::Reset(){$/;"	f	class:JSpaceParts	signature:()
Reset	JSpaceParts.cpp	/^void JSpacePartsGetMk::Reset(){$/;"	f	class:JSpacePartsGetMk	signature:()
Reset	JSpaceParts.h	/^  void Reset();$/;"	p	class:JSpaceParts	access:public	signature:()
Reset	JSpaceParts.h	/^  void Reset();$/;"	p	class:JSpacePartsGetMk	access:public	signature:()
Reset	JSpaceProperties.cpp	/^void JSpacePropLinks::Reset(){$/;"	f	class:JSpacePropLinks	signature:()
Reset	JSpaceProperties.cpp	/^void JSpaceProperties::Reset(){$/;"	f	class:JSpaceProperties	signature:()
Reset	JSpaceProperties.h	/^  void Reset();$/;"	p	class:JSpacePropLinks	access:public	signature:()
Reset	JSpaceProperties.h	/^  void Reset();$/;"	p	class:JSpaceProperties	access:public	signature:()
Reset	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::Reset(){$/;"	f	class:JSpaceVtkOut	signature:()
Reset	JSpaceVtkOut.cpp	/^void JSpaceVtkOutFile::Reset(){$/;"	f	class:JSpaceVtkOutFile	signature:()
Reset	JSpaceVtkOut.h	/^  void Reset();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
Reset	JSpaceVtkOut.h	/^  void Reset();$/;"	p	class:JSpaceVtkOutFile	access:public	signature:()
Reset	JSphAccInput.cpp	/^void JSphAccInput::Reset(){$/;"	f	class:JSphAccInput	signature:()
Reset	JSphAccInput.cpp	/^void JSphAccInputMk::Reset(){$/;"	f	class:JSphAccInputMk	signature:()
Reset	JSphAccInput.h	/^  void Reset();$/;"	p	class:JSphAccInput	access:protected	signature:()
Reset	JSphAccInput.h	/^  void Reset();$/;"	p	class:JSphAccInputMk	access:protected	signature:()
Reset	JSphDtFixed.cpp	/^void JSphDtFixed::Reset(){$/;"	f	class:JSphDtFixed	signature:()
Reset	JSphDtFixed.h	/^  void Reset();$/;"	p	class:JSphDtFixed	access:public	signature:()
Reset	JSphInitialize.cpp	/^void JSphInitialize::Reset(){$/;"	f	class:JSphInitialize	signature:()
Reset	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::Reset(){$/;"	f	class:JSphInitializeOp_FluidVel	signature:()
Reset	JSphInitialize.h	/^  void Reset();$/;"	p	class:JSphInitialize	access:public	signature:()
Reset	JSphInitialize.h	/^  void Reset();$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:()
Reset	JSphMk.cpp	/^void JSphMk::Reset(){$/;"	f	class:JSphMk	signature:()
Reset	JSphMk.cpp	/^void JSphMkBlock::Reset(){$/;"	f	class:JSphMkBlock	signature:()
Reset	JSphMk.h	/^  void Reset();$/;"	p	class:JSphMk	access:public	signature:()
Reset	JSphMk.h	/^  void Reset();$/;"	p	class:JSphMkBlock	access:public	signature:()
Reset	JSphMotion.cpp	/^void JSphMotion::Reset(){$/;"	f	class:JSphMotion	signature:()
Reset	JSphMotion.h	/^  void Reset();$/;"	p	class:JSphMotion	access:public	signature:()
Reset	JSphPartsInit.cpp	/^void JSphPartsInit::Reset(){$/;"	f	class:JSphPartsInit	signature:()
Reset	JSphPartsInit.h	/^  void Reset();$/;"	p	class:JSphPartsInit	access:public	signature:()
Reset	JSphVisco.cpp	/^void JSphVisco::Reset(){$/;"	f	class:JSphVisco	signature:()
Reset	JSphVisco.h	/^  void Reset();$/;"	p	class:JSphVisco	access:public	signature:()
Reset	JTimeControl.cpp	/^void JTimeControl::Reset(){$/;"	f	class:JTimeControl	signature:()
Reset	JTimeControl.h	/^  void Reset();$/;"	p	class:JTimeControl	access:public	signature:()
Reset	JTimeOut.cpp	/^void JTimeOut::Reset(){$/;"	f	class:JTimeOut	signature:()
Reset	JTimeOut.h	/^  void Reset();$/;"	p	class:JTimeOut	access:public	signature:()
Reset	JTimer.h	/^  void Reset(){ Started=Stopped=false; CounterIni.QuadPart=0; CounterEnd.QuadPart=0; }$/;"	f	class:JTimer	access:public	signature:()
Reset	JTimer.h	/^  void Reset(){ Started=Stopped=false; CounterIni.tv_sec=0; CounterIni.tv_usec=0; CounterEnd.tv_sec=0; CounterEnd.tv_usec=0; }$/;"	f	class:JTimer	access:public	signature:()
Reset	JTimerClock.h	/^  void Reset(){ Stopped=false; CounterIni=0; CounterEnd=0; }$/;"	f	class:JTimerClock	access:public	signature:()
Reset	JTimerCuda.h	/^  void Reset(){$/;"	f	class:JTimerCuda	access:public	signature:()
Reset	JXml.cpp	/^void JXml::Reset(){$/;"	f	class:JXml	signature:()
Reset	JXml.h	/^  void Reset();$/;"	p	class:JXml	access:public	signature:()
ResetCfgDefault	JGaugeSystem.cpp	/^void JGaugeSystem::ResetCfgDefault(){$/;"	f	class:JGaugeSystem	signature:()
ResetCfgDefault	JGaugeSystem.h	/^  void ResetCfgDefault();$/;"	p	class:JGaugeSystem	access:private	signature:()
ResetData	JPartDataBi4.cpp	/^void JPartDataBi4::ResetData(){$/;"	f	class:JPartDataBi4	signature:()
ResetData	JPartDataBi4.h	/^  void ResetData();$/;"	p	class:JPartDataBi4	access:public	signature:()
ResetData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResetData(){$/;"	f	class:JPartFloatBi4Save	signature:()
ResetData	JPartFloatBi4.h	/^  void ResetData();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
ResetData	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ResetData(){$/;"	f	class:JPartOutBi4Save	signature:()
ResetData	JPartOutBi4Save.h	/^  void ResetData();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
ResetPart	JPartDataBi4.cpp	/^void JPartDataBi4::ResetPart(){$/;"	f	class:JPartDataBi4	signature:()
ResetPart	JPartDataBi4.h	/^  void ResetPart();$/;"	p	class:JPartDataBi4	access:public	signature:()
ResetPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::ResetPart(){$/;"	f	class:JPartFloatBi4Load	signature:()
ResetPart	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResetPart(){$/;"	f	class:JPartFloatBi4Save	signature:()
ResetPart	JPartFloatBi4.h	/^  void ResetPart();$/;"	p	class:JPartFloatBi4Load	access:private	signature:()
ResetPart	JPartFloatBi4.h	/^  void ResetPart();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
ResetPart	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::ResetPart(){$/;"	f	class:JPartOutBi4Save	signature:()
ResetPart	JPartOutBi4Save.h	/^  void ResetPart();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
ResetReadLine	JReadDatafile.cpp	/^void JReadDatafile::ResetReadLine(){ $/;"	f	class:JReadDatafile	signature:()
ResetReadLine	JReadDatafile.h	/^  void ResetReadLine();$/;"	p	class:JReadDatafile	access:private	signature:()
ResetTime	JMotion.cpp	/^void JMotion::ResetTime(double timestep){$/;"	f	class:JMotion	signature:(double timestep)
ResetTime	JMotion.h	/^  void ResetTime(double timestep);$/;"	p	class:JMotion	access:public	signature:(double timestep)
ResetTime	JMotionMov.h	/^  void ResetTime(){ P1=InitialP1; P2=InitialP2; }$/;"	f	class:JMotionAxis	access:public	signature:()
ResetTime	JMotionObj.cpp	/^void JMotionObj::ResetTime(){$/;"	f	class:JMotionObj	signature:()
ResetTime	JMotionObj.h	/^  void ResetTime();$/;"	p	class:JMotionObj	access:public	signature:()
ResetValue	JBinaryData.cpp	/^void JBinaryData::ResetValue(const std::string &name,JBinaryDataDef::TpData type,JBinaryData::StValue &v){$/;"	f	class:JBinaryData	signature:(const std::string &name,JBinaryDataDef::TpData type,JBinaryData::StValue &v)
ResetValue	JBinaryData.h	/^  static void ResetValue(const std::string &name,JBinaryDataDef::TpData type,StValue &v);$/;"	p	class:JBinaryData	access:private	signature:(const std::string &name,JBinaryDataDef::TpData type,StValue &v)
Resety	JSphGpu_ker.cu	/^void Resety(unsigned n,unsigned ini,float3 *v){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
Resety	JSphGpu_ker.h	/^void Resety(unsigned n,unsigned ini,float3 *v);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
Resize	JMotionMov.cpp	/^void JMotionDataFile::Resize(unsigned size){$/;"	f	class:JMotionDataFile	signature:(unsigned size)
Resize	JMotionMov.h	/^  void Resize(unsigned size);$/;"	p	class:JMotionDataFile	access:private	signature:(unsigned size)
Resize	JSphAccInput.cpp	/^void JSphAccInputMk::Resize(unsigned size){$/;"	f	class:JSphAccInputMk	signature:(unsigned size)
Resize	JSphAccInput.h	/^  void Resize(unsigned size);$/;"	p	class:JSphAccInputMk	access:protected	signature:(unsigned size)
Resize	JSphDtFixed.cpp	/^void JSphDtFixed::Resize(unsigned size){$/;"	f	class:JSphDtFixed	signature:(unsigned size)
Resize	JSphDtFixed.h	/^  void Resize(unsigned size);$/;"	p	class:JSphDtFixed	access:protected	signature:(unsigned size)
Resize	JSphVisco.cpp	/^void JSphVisco::Resize(unsigned size){$/;"	f	class:JSphVisco	signature:(unsigned size)
Resize	JSphVisco.h	/^  void Resize(unsigned size);$/;"	p	class:JSphVisco	access:protected	signature:(unsigned size)
ResizeAlloc	Functions.cpp	/^byte* ResizeAlloc(byte *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(byte *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^double* ResizeAlloc(double *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(double *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^float* ResizeAlloc(float *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(float *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^int* ResizeAlloc(int *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(int *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tdouble2* ResizeAlloc(tdouble2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tdouble2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tdouble3* ResizeAlloc(tdouble3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tdouble3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tfloat2* ResizeAlloc(tfloat2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tfloat3* ResizeAlloc(tfloat3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tfloat4* ResizeAlloc(tfloat4 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat4 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tint3* ResizeAlloc(tint3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tint3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tuint2* ResizeAlloc(tuint2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tuint3* ResizeAlloc(tuint3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^tuint4* ResizeAlloc(tuint4 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint4 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^unsigned* ResizeAlloc(unsigned *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(unsigned *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.cpp	/^word* ResizeAlloc(word *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(word *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^byte*     ResizeAlloc(byte     *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(byte *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^double*   ResizeAlloc(double   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(double *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^float*    ResizeAlloc(float    *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(float *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^int*      ResizeAlloc(int      *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(int *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tdouble2* ResizeAlloc(tdouble2 *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tdouble2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tdouble3* ResizeAlloc(tdouble3 *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tdouble3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tfloat2*  ResizeAlloc(tfloat2  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tfloat3*  ResizeAlloc(tfloat3  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tfloat4*  ResizeAlloc(tfloat4  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat4 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tint3*    ResizeAlloc(tint3    *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tint3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tuint2*   ResizeAlloc(tuint2   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint2 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tuint3*   ResizeAlloc(tuint3   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint3 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^tuint4*   ResizeAlloc(tuint4   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint4 *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^unsigned* ResizeAlloc(unsigned *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(unsigned *data,unsigned ndata,unsigned newsize)
ResizeAlloc	Functions.h	/^word*     ResizeAlloc(word     *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(word *data,unsigned ndata,unsigned newsize)
ResizeCpuMemoryParticles	JSphCpu.cpp	/^void JSphCpu::ResizeCpuMemoryParticles(unsigned npnew){$/;"	f	class:JSphCpu	signature:(unsigned npnew)
ResizeCpuMemoryParticles	JSphCpu.h	/^  void ResizeCpuMemoryParticles(unsigned np);$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np)
ResizeFtData	JPartFloatBi4.cpp	/^void JPartFloatBi4Load::ResizeFtData(unsigned ftcount){$/;"	f	class:JPartFloatBi4Load	signature:(unsigned ftcount)
ResizeFtData	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::ResizeFtData(unsigned ftcount){$/;"	f	class:JPartFloatBi4Save	signature:(unsigned ftcount)
ResizeFtData	JPartFloatBi4.h	/^  void ResizeFtData(unsigned ftcount);$/;"	p	class:JPartFloatBi4Load	access:private	signature:(unsigned ftcount)
ResizeFtData	JPartFloatBi4.h	/^  void ResizeFtData(unsigned ftcount);$/;"	p	class:JPartFloatBi4Save	access:private	signature:(unsigned ftcount)
ResizeGpuMemoryParticles	JSphGpu.cpp	/^void JSphGpu::ResizeGpuMemoryParticles(unsigned npnew){$/;"	f	class:JSphGpu	signature:(unsigned npnew)
ResizeGpuMemoryParticles	JSphGpu.h	/^  void ResizeGpuMemoryParticles(unsigned np);$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np)
ResizeMapLimits	JSph.cpp	/^void JSph::ResizeMapLimits(){$/;"	f	class:JSph	signature:()
ResizeMapLimits	JSph.h	/^  void ResizeMapLimits();$/;"	p	class:JSph	access:protected	signature:()
ResizeParticlesSize	JSphCpuSingle.cpp	/^void JSphCpuSingle::ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide){$/;"	f	class:JSphCpuSingle	signature:(unsigned newsize,float oversize,bool updatedivide)
ResizeParticlesSize	JSphCpuSingle.h	/^  void ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide);$/;"	p	class:JSphCpuSingle	access:protected	signature:(unsigned newsize,float oversize,bool updatedivide)
ResizeParticlesSize	JSphGpuSingle.cpp	/^void JSphGpuSingle::ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide){$/;"	f	class:JSphGpuSingle	signature:(unsigned newsize,float oversize,bool updatedivide)
ResizeParticlesSize	JSphGpuSingle.h	/^  void ResizeParticlesSize(unsigned newsize,float oversize,bool updatedivide);$/;"	p	class:JSphGpuSingle	access:protected	signature:(unsigned newsize,float oversize,bool updatedivide)
ResizeRanges	JRangeFilter.cpp	/^void JRangeFilter::ResizeRanges(unsigned size){$/;"	f	class:JRangeFilter	signature:(unsigned size)
ResizeRanges	JRangeFilter.h	/^  void ResizeRanges(unsigned size);$/;"	p	class:JRangeFilter	access:private	signature:(unsigned size)
RestartCheckData	JSph.cpp	/^void JSph::RestartCheckData(){$/;"	f	class:JSph	signature:()
RestartCheckData	JSph.h	/^  void RestartCheckData();$/;"	p	class:JSph	access:protected	signature:()
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,double      *data,double      *datanew)const{ TRestoreArrayCpu<double>     (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,double *data,double *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,float       *data,float       *datanew)const{ TRestoreArrayCpu<float>      (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,float *data,float *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,int         *data,int         *datanew)const{ TRestoreArrayCpu<int>        (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,int *data,int *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tdouble3    *data,tdouble3    *datanew)const{ TRestoreArrayCpu<tdouble3>   (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tdouble3 *data,tdouble3 *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tfloat4     *data,tfloat4     *datanew)const{ TRestoreArrayCpu<tfloat4>    (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tfloat4 *data,tfloat4 *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew)const{ TRestoreArrayCpu<tsymatrix3f>(np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,unsigned    *data,unsigned    *datanew)const{ TRestoreArrayCpu<unsigned>   (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,unsigned *data,unsigned *datanew) const
RestoreArrayCpu	JSphCpu.h	/^  void RestoreArrayCpu(unsigned np,word        *data,word        *datanew)const{ TRestoreArrayCpu<word>       (np,data,datanew); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,word *data,word *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,double      *data,double      *datanew)const{ TRestoreArrayGpu<double>     (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,double *data,double *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,double2     *data,double2     *datanew)const{ TRestoreArrayGpu<double2>    (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,double2 *data,double2 *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,float       *data,float       *datanew)const{ TRestoreArrayGpu<float>      (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,float *data,float *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,float4      *data,float4      *datanew)const{ TRestoreArrayGpu<float4>     (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,float4 *data,float4 *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,int         *data,int         *datanew)const{ TRestoreArrayGpu<int>        (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,int *data,int *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew)const{ TRestoreArrayGpu<tsymatrix3f>(np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,tsymatrix3f *data,tsymatrix3f *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,unsigned    *data,unsigned    *datanew)const{ TRestoreArrayGpu<unsigned>   (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,unsigned *data,unsigned *datanew) const
RestoreArrayGpu	JSphGpu.h	/^  void RestoreArrayGpu(unsigned np,word        *data,word        *datanew)const{ TRestoreArrayGpu<word>       (np,data,datanew); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,word *data,word *datanew) const
Result	JGaugeItem.h	/^  StGaugeForceRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeForce	access:protected
Result	JGaugeItem.h	/^  StGaugeMaxzRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeMaxZ	access:protected
Result	JGaugeItem.h	/^  StGaugeSwlRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeSwl	access:protected
Result	JGaugeItem.h	/^  StGaugeVelRes Result; \/\/\/<Result of the last measure.$/;"	m	class:JGaugeVelocity	access:protected
ReuseIds	JPartDataHead.h	/^  bool ReuseIds;         \/\/\/<Id of particles excluded values ââare reused.$/;"	m	class:JPartDataHead	access:private
ReuseIds	JSph.h	/^  bool ReuseIds;           \/\/\/<Id of particles excluded values ââare reused.$/;"	m	class:JSph	access:protected
ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(int *data,int count,int *result){$/;"	f	namespace:fun	signature:(int *data,int count,int *result)
ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(llong *data,int count,llong *result){$/;"	f	namespace:fun	signature:(llong *data,int count,llong *result)
ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(short *data,int count,short *result){$/;"	f	namespace:fun	signature:(short *data,int count,short *result)
ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(int *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(int *data,int count)
ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(llong *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(llong *data,int count)
ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(short *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(short *data,int count)
ReverseByteOrder	Functions.h	/^void ReverseByteOrder(int *data,int count,int *result);$/;"	p	namespace:fun	signature:(int *data,int count,int *result)
ReverseByteOrder	Functions.h	/^void ReverseByteOrder(llong *data,int count,llong *result);$/;"	p	namespace:fun	signature:(llong *data,int count,llong *result)
ReverseByteOrder	Functions.h	/^void ReverseByteOrder(short *data,int count,short *result);$/;"	p	namespace:fun	signature:(short *data,int count,short *result)
Rhop	JPartsOut.h	/^  float *Rhop;$/;"	m	class:JPartsOut	access:protected
Rhop0	JSpaceCtes.h	/^  double Rhop0;           \/\/\/<Density of reference.$/;"	m	class:JSpaceCtes	access:private
RhopOut	JSph.h	/^  bool RhopOut;               \/\/\/<Indicates whether the RhopOut density correction is active or not.    | Indica si activa la correccion de densidad RhopOut o no.                       $/;"	m	class:JSph	access:protected
RhopOutMax	JCfgRun.h	/^  float RhopOutMin,RhopOutMax;    \/\/\/<Limits for \\ref RhopOut density correction.$/;"	m	class:JCfgRun	access:public
RhopOutMax	JSph.h	/^  float RhopOutMax;           \/\/\/<Maximum limit for Rhopout correction.                                 | Limite maximo para la correccion de RhopOut.$/;"	m	class:JSph	access:protected
RhopOutMin	JCfgRun.h	/^  float RhopOutMin,RhopOutMax;    \/\/\/<Limits for \\ref RhopOut density correction.$/;"	m	class:JCfgRun	access:public
RhopOutMin	JSph.h	/^  float RhopOutMin;           \/\/\/<Minimum limit for Rhopout correction.                                 | Limite minimo para la correccion de RhopOut.$/;"	m	class:JSph	access:protected
RhopOutModif	JCfgRun.h	/^  bool RhopOutModif;              \/\/\/<Indicates whether \\ref RhopOutMin or RhopOutMax is changed.$/;"	m	class:JCfgRun	access:public
RhopZero	JGaugeItem.h	/^  float RhopZero;$/;"	m	class:JGaugeItem	access:protected
RhopZero	JGaugeSystem.h	/^  float RhopZero;$/;"	m	class:JGaugeSystem	access:private
RhopZero	JPartDataHead.h	/^  double RhopZero;$/;"	m	class:JPartDataHead	access:private
RhopZero	JSph.h	/^  float H,CteB,Gamma,CFLnumber,RhopZero;$/;"	m	class:JSph	access:protected
RidpMove	JSphCpu.h	/^  unsigned *RidpMove; \/\/\/<Only for moving boundary particles [CaseNmoving] and when CaseNmoving!=0 | Solo para boundary moving particles [CaseNmoving] y cuando CaseNmoving!=0 $/;"	m	class:JSphCpu	access:protected
RidpMoveg	JSphGpu.h	/^  unsigned *RidpMoveg;  \/\/\/<Only for moving boundary particles [CaseNmoving] and when CaseNmoving!=0 | Solo para boundary moving particles [CaseNmoving] y cuando CaseNmoving!=0 $/;"	m	class:JSphGpu	access:protected
RootElement	tinyxml.h	/^    TiXmlElement* RootElement()                 { return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
RootElement	tinyxml.h	/^    const TiXmlElement* RootElement() const     { return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
RotMatrix3x3	FunctionsMath.h	/^inline tmatrix3f RotMatrix3x3(const tfloat3 &ang){$/;"	f	namespace:fmath	signature:(const tfloat3 &ang)
RotMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d RotMatrix3x3(const double3 &ang){$/;"	f	namespace:cumath	signature:(const double3 &ang)
RotMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f RotMatrix3x3(const float3 &ang){$/;"	f	namespace:cumath	signature:(const float3 &ang)
Rotate	JMatrix4.h	/^  void Rotate(T ang,const T3 &axisp1,const T3 &axisp2){$/;"	f	class:JMatrix4	access:public	signature:(T ang,const T3 &axisp1,const T3 &axisp2)
Rotate	JMotionPos.cpp	/^void JMotionPos::Rotate(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2){$/;"	f	class:JMotionPos	signature:(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2)
Rotate	JMotionPos.h	/^  void Rotate(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2);$/;"	p	class:JMotionPos	access:public	signature:(double ang,const tdouble3 &axisp1,const tdouble3 &axisp2)
Rotation	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RotationAce	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RotationFile	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
RotationSinusoidal	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
Row	tinyxml.h	/^    int Row() const         { return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
Run	JSphCpuSingle.cpp	/^void JSphCpuSingle::Run(std::string appname,JCfgRun *cfg,JLog2 *log){$/;"	f	class:JSphCpuSingle	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
Run	JSphCpuSingle.h	/^  void Run(std::string appname,JCfgRun *cfg,JLog2 *log);$/;"	p	class:JSphCpuSingle	access:public	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
Run	JSphGpuSingle.cpp	/^void JSphGpuSingle::Run(std::string appname,JCfgRun *cfg,JLog2 *log){$/;"	f	class:JSphGpuSingle	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
Run	JSphGpuSingle.h	/^  void Run(std::string appname,JCfgRun *cfg,JLog2 *log);$/;"	p	class:JSphGpuSingle	access:public	signature:(std::string appname,JCfgRun *cfg,JLog2 *log)
Run	JSphInitialize.cpp	/^void JSphInitialize::Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop){$/;"	f	class:JSphInitialize	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
Run	JSphInitialize.cpp	/^void JSphInitializeOp_FluidVel::Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop){$/;"	f	class:JSphInitializeOp_FluidVel	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
Run	JSphInitialize.h	/^  virtual void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)=0;$/;"	p	class:JSphInitializeOp	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
Run	JSphInitialize.h	/^  void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop);$/;"	p	class:JSphInitialize	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
Run	JSphInitialize.h	/^  void Run(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop);$/;"	p	class:JSphInitializeOp_FluidVel	access:public	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const word *mktype,tfloat4 *velrhop)
RunCellDivide	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunCellDivide(bool updateperiodic){$/;"	f	class:JSphCpuSingle	signature:(bool updateperiodic)
RunCellDivide	JSphCpuSingle.h	/^  void RunCellDivide(bool updateperiodic);$/;"	p	class:JSphCpuSingle	access:protected	signature:(bool updateperiodic)
RunCellDivide	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunCellDivide(bool updateperiodic){$/;"	f	class:JSphGpuSingle	signature:(bool updateperiodic)
RunCellDivide	JSphGpuSingle.h	/^  void RunCellDivide(bool updateperiodic);$/;"	p	class:JSphGpuSingle	access:protected	signature:(bool updateperiodic)
RunCode	JPartDataHead.h	/^  std::string RunCode;$/;"	m	class:JPartDataHead	access:private
RunCode	JSph.h	/^  std::string RunCode;$/;"	m	class:JSph	access:protected
RunCommand	JAppInfo.h	/^  std::string RunCommand;$/;"	m	class:JAppInfo	access:private
RunDamping	JSphCpu.cpp	/^void JSphCpu::RunDamping(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const{$/;"	f	class:JSphCpu	signature:(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
RunDamping	JSphCpu.h	/^  void RunDamping(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop)const;$/;"	p	class:JSphCpu	access:protected	signature:(double dt,unsigned np,unsigned npb,const tdouble3 *pos,const typecode *code,tfloat4 *velrhop) const
RunDamping	JSphGpu.cpp	/^void JSphGpu::RunDamping(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop){$/;"	f	class:JSphGpu	signature:(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop)
RunDamping	JSphGpu.h	/^  void RunDamping(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop);$/;"	p	class:JSphGpu	access:protected	signature:(double dt,unsigned np,unsigned npb,const double2 *posxy,const double *posz,const typecode *code,float4 *velrhop)
RunException	JFormatFiles2.h	/^  static void RunException(std::string method,std::string msg);$/;"	p	class:JFormatFiles2	access:public	signature:(std::string method,std::string msg)
RunException	JFormatFiles2.h	/^  static void RunException(std::string method,std::string msg,std::string file);$/;"	p	class:JFormatFiles2	access:public	signature:(std::string method,std::string msg,std::string file)
RunException	JObject.cpp	/^void JObject::RunException(const std::string &method,const std::string &msg)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg) const
RunException	JObject.cpp	/^void JObject::RunException(const std::string &method,const std::string &msg,const std::string &file)const{$/;"	f	class:JObject	signature:(const std::string &method,const std::string &msg,const std::string &file) const
RunException	JObject.h	/^  void RunException(const std::string &method,const std::string &msg)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg) const
RunException	JObject.h	/^  void RunException(const std::string &method,const std::string &msg,const std::string &file)const;$/;"	p	class:JObject	access:protected	signature:(const std::string &method,const std::string &msg,const std::string &file) const
RunException	JSaveCsv2.h	/^  void RunException(const std::string &method,const std::string &msg){$/;"	f	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &method,const std::string &msg)
RunException	JSaveCsv2.h	/^  void RunException(const std::string &method,const std::string &msg,const std::string &file){$/;"	f	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &method,const std::string &msg,const std::string &file)
RunExceptionCuda	JGaugeItem.cpp	/^void JGaugeItem::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error){$/;"	f	class:JGaugeItem	signature:(const std::string &method,const std::string &msg,cudaError_t error)
RunExceptionCuda	JGaugeItem.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error);$/;"	p	class:JGaugeItem	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error)
RunExceptionCuda	JObjectGpu.cpp	/^void JObjectGpu::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error)const{$/;"	f	class:JObjectGpu	signature:(const std::string &method,const std::string &msg,cudaError_t error) const
RunExceptionCuda	JObjectGpu.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error)const;$/;"	p	class:JObjectGpu	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error) const
RunExceptionCuda	JSphGpu.cpp	/^void JSphGpu::RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error){$/;"	f	class:JSphGpu	signature:(const std::string &method,const std::string &msg,cudaError_t error)
RunExceptionCuda	JSphGpu.h	/^  void RunExceptionCuda(const std::string &method,const std::string &msg,cudaError_t error);$/;"	p	class:JSphGpu	access:protected	signature:(const std::string &method,const std::string &msg,cudaError_t error)
RunFloating	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunFloating(double dt,bool predictor){$/;"	f	class:JSphCpuSingle	signature:(double dt,bool predictor)
RunFloating	JSphCpuSingle.h	/^  void RunFloating(double dt,bool predictor);$/;"	p	class:JSphCpuSingle	access:protected	signature:(double dt,bool predictor)
RunFloating	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunFloating(double dt,bool predictor){$/;"	f	class:JSphGpuSingle	signature:(double dt,bool predictor)
RunFloating	JSphGpuSingle.h	/^  void RunFloating(double dt,bool predictor);$/;"	p	class:JSphGpuSingle	access:protected	signature:(double dt,bool predictor)
RunGaugeSystem	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunGaugeSystem(double timestep){$/;"	f	class:JSphCpuSingle	signature:(double timestep)
RunGaugeSystem	JSphCpuSingle.h	/^  void RunGaugeSystem(double timestep);$/;"	p	class:JSphCpuSingle	access:protected	signature:(double timestep)
RunGaugeSystem	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunGaugeSystem(double timestep){$/;"	f	class:JSphGpuSingle	signature:(double timestep)
RunGaugeSystem	JSphGpuSingle.h	/^  void RunGaugeSystem(double timestep);$/;"	p	class:JSphGpuSingle	access:protected	signature:(double timestep)
RunInitialize	JSph.cpp	/^void JSph::RunInitialize(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop){$/;"	f	class:JSph	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop)
RunInitialize	JSph.h	/^  void RunInitialize(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop);$/;"	p	class:JSph	access:protected	signature:(unsigned np,unsigned npb,const tdouble3 *pos,const unsigned *idp,const typecode *code,tfloat4 *velrhop)
RunMode	JSphCpu.h	/^  std::string RunMode;   \/\/\/<Overall mode of execution (symmetry, openmp, load balancing). |  Almacena modo de ejecucion (simetria,openmp,balanceo,...).$/;"	m	class:JSphCpu	access:protected
RunMode	JSphGpu.h	/^  std::string RunMode;    \/\/\/<Stores execution mode (symmetry,OpenMP,balance...).$/;"	m	class:JSphGpu	access:protected
RunMotion	JSphCpu.cpp	/^void JSphCpu::RunMotion(double stepdt){$/;"	f	class:JSphCpu	signature:(double stepdt)
RunMotion	JSphCpu.h	/^  void RunMotion(double stepdt);$/;"	p	class:JSphCpu	access:protected	signature:(double stepdt)
RunMotion	JSphGpu.cpp	/^void JSphGpu::RunMotion(double stepdt){$/;"	f	class:JSphGpu	signature:(double stepdt)
RunMotion	JSphGpu.h	/^  void RunMotion(double stepdt);$/;"	p	class:JSphGpu	access:protected	signature:(double stepdt)
RunName	JCfgRun.h	/^  std::string CaseName,RunName,DirOut,DirDataOut;$/;"	m	class:JCfgRun	access:public
RunName	JSph.h	/^  std::string CaseName,DirCase,RunName;$/;"	m	class:JSph	access:protected
RunPath	JAppInfo.h	/^  std::string RunPath;$/;"	m	class:JAppInfo	access:private
RunPeriodic	JSphCpuSingle.cpp	/^void JSphCpuSingle::RunPeriodic(){$/;"	f	class:JSphCpuSingle	signature:()
RunPeriodic	JSphCpuSingle.h	/^  void RunPeriodic();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
RunPeriodic	JSphGpuSingle.cpp	/^void JSphGpuSingle::RunPeriodic(){$/;"	f	class:JSphGpuSingle	signature:()
RunPeriodic	JSphGpuSingle.h	/^  void RunPeriodic();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
RunShifting	JSphCpu.cpp	/^void JSphCpu::RunShifting(double dt){$/;"	f	class:JSphCpu	signature:(double dt)
RunShifting	JSphCpu.h	/^  void RunShifting(double dt);$/;"	p	class:JSphCpu	access:protected	signature:(double dt)
RunShifting	JSphGpu.cpp	/^void JSphGpu::RunShifting(double dt){$/;"	f	class:JSphGpu	signature:(double dt)
RunShifting	JSphGpu.h	/^  void RunShifting(double dt);$/;"	p	class:JSphGpu	access:protected	signature:(double dt)
RunShifting	JSphGpu_ker.cu	/^void RunShifting(unsigned np,unsigned npb,double dt$/;"	f	namespace:cusph	signature:(unsigned np,unsigned npb,double dt ,double shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
RunShifting	JSphGpu_ker.h	/^void RunShifting(unsigned np,unsigned npb,double dt$/;"	p	namespace:cusph	signature:(unsigned np,unsigned npb,double dt ,double shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
RunTimeDate	JSph.h	/^  std::string RunTimeDate;$/;"	m	class:JSph	access:protected
SAVEINFO	JBlockSizeAuto.h	/^  static const int SAVEINFO=0; \/\/\/< Saves statistical data in CSV format or not.$/;"	m	class:JBlockSizeAutoKer	access:protected
SDAT_Binx	Types.h	/^  SDAT_Binx=1,       \/\/\/<BYNARY format .bi2$/;"	e	enum:__anon47
SDAT_Csv	Types.h	/^  SDAT_Csv=4,        \/\/\/<CSV format .csv$/;"	e	enum:__anon47
SDAT_Info	Types.h	/^  SDAT_Info=8,$/;"	e	enum:__anon47
SDAT_None	Types.h	/^  SDAT_None=0 $/;"	e	enum:__anon47
SDAT_Vtk	Types.h	/^  SDAT_Vtk=2,        \/\/\/<VTK format .vtk$/;"	e	enum:__anon47
SHIFT_Full	Types.h	/^  SHIFT_Full=3,             \/\/\/<Shifting is applied to all fluid particles.$/;"	e	enum:__anon53
SHIFT_NoBound	Types.h	/^  SHIFT_NoBound=1,          \/\/\/<Shifting is applied to fluid particles except those that interact with all boundaries.$/;"	e	enum:__anon53
SHIFT_NoFixed	Types.h	/^  SHIFT_NoFixed=2,          \/\/\/<Shifting is applied to fluid particles except those that interact with fixed boundaries.$/;"	e	enum:__anon53
SHIFT_None	Types.h	/^  SHIFT_None=0              \/\/\/<Shifting is not applied.$/;"	e	enum:__anon53
SIZEINITIAL	JLinearValue.h	/^  static const unsigned SIZEINITIAL=500;$/;"	m	class:JLinearValue	access:protected
SIZEINITIAL	JSphAccInput.h	/^  static const unsigned SIZEINITIAL=100;$/;"	m	class:JSphAccInputMk	access:protected
SIZEMAX	JLinearValue.h	/^  static const unsigned SIZEMAX=200000;$/;"	m	class:JLinearValue	access:protected
SIZEMAX	JMotionMov.h	/^  static const unsigned SIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JMotionDataFile	access:private
SIZEMAX	JSphAccInput.h	/^  static const unsigned SIZEMAX=104857600; \/\/\/<Maximum file size (100mb).$/;"	m	class:JSphAccInputMk	access:protected
SIZE_12B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_12B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_16B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_16B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_1B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_1B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_24B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_24B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_2B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_2B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_32B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_32B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_4B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_4B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SIZE_8B	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysCpu::__anon3
SIZE_8B	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	e	enum:JArraysGpu::__anon4
SPHBSIZE	JSphGpu_ker.h	31;"	d
STEP_None	Types.h	/^  STEP_None=0 $/;"	e	enum:__anon48
STEP_Symplectic	Types.h	/^  STEP_Symplectic=2,  \/\/\/<Symplectic algorithm.$/;"	e	enum:__anon48
STEP_Verlet	Types.h	/^  STEP_Verlet=1,      \/\/\/<Verlet algorithm.$/;"	e	enum:__anon48
Save	JSaveCsv2.cpp	/^void JSaveCsv2::Save(const std::string &tx){$/;"	f	class:jcsv::JSaveCsv2	signature:(const std::string &tx)
Save	JSaveCsv2.h	/^  void Save(const std::string &tx);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &tx)
SaveArrayCpu	JSphCpu.h	/^  double*      SaveArrayCpu(unsigned np,const double      *datasrc)const{ return(TSaveArrayCpu<double>     (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const double *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  float*       SaveArrayCpu(unsigned np,const float       *datasrc)const{ return(TSaveArrayCpu<float>      (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const float *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  int*         SaveArrayCpu(unsigned np,const int         *datasrc)const{ return(TSaveArrayCpu<int>        (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const int *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  tdouble3*    SaveArrayCpu(unsigned np,const tdouble3    *datasrc)const{ return(TSaveArrayCpu<tdouble3>   (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tdouble3 *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  tfloat4*     SaveArrayCpu(unsigned np,const tfloat4     *datasrc)const{ return(TSaveArrayCpu<tfloat4>    (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tfloat4 *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  tsymatrix3f* SaveArrayCpu(unsigned np,const tsymatrix3f *datasrc)const{ return(TSaveArrayCpu<tsymatrix3f>(np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const tsymatrix3f *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  unsigned*    SaveArrayCpu(unsigned np,const unsigned    *datasrc)const{ return(TSaveArrayCpu<unsigned>   (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const unsigned *datasrc) const
SaveArrayCpu	JSphCpu.h	/^  word*        SaveArrayCpu(unsigned np,const word        *datasrc)const{ return(TSaveArrayCpu<word>       (np,datasrc)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned np,const word *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  double*      SaveArrayGpu(unsigned np,const double      *datasrc)const{ return(TSaveArrayGpu<double>     (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const double *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  double2*     SaveArrayGpu(unsigned np,const double2     *datasrc)const{ return(TSaveArrayGpu<double2>    (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const double2 *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  float*       SaveArrayGpu(unsigned np,const float       *datasrc)const{ return(TSaveArrayGpu<float>      (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const float *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  float4*      SaveArrayGpu(unsigned np,const float4      *datasrc)const{ return(TSaveArrayGpu<float4>     (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const float4 *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  int*         SaveArrayGpu(unsigned np,const int         *datasrc)const{ return(TSaveArrayGpu<int>        (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const int *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  tsymatrix3f* SaveArrayGpu(unsigned np,const tsymatrix3f *datasrc)const{ return(TSaveArrayGpu<tsymatrix3f>(np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const tsymatrix3f *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  unsigned*    SaveArrayGpu(unsigned np,const unsigned    *datasrc)const{ return(TSaveArrayGpu<unsigned>   (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const unsigned *datasrc) const
SaveArrayGpu	JSphGpu.h	/^  word*        SaveArrayGpu(unsigned np,const word        *datasrc)const{ return(TSaveArrayGpu<word>       (np,datasrc)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned np,const word *datasrc) const
SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const double* data,bool first=false)
SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const float* data,bool first=false)
SaveAscPointsVar	JFormatFiles2.h	/^  static void SaveAscPointsVar(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tfloat3* pos,const float* data,bool first=false)
SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const tdouble3* data,bool first=false)
SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tdouble3* pos,const tfloat3* data,bool first=false)
SaveAscPointsVar3	JFormatFiles2.h	/^  static void SaveAscPointsVar3(const std::string &fname,double timestep,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,double timestep,unsigned np ,const tfloat3* pos,const tfloat3* data,bool first=false)
SaveAscii	JFormatFiles2.h	/^  static void SaveAscii(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd ,const std::vector<StScalarData> &fields,std::string head=Ó)
SaveAscii	JFormatFiles2.h	/^  static void SaveAscii(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np,const tfloat3* pos,const tdouble3* posd ,unsigned nfields,const StScalarData* fields,std::string head=Ó)
SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tdouble3* pos,const std::vector<StScalarData> &fields,std::string head=Ó)
SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tdouble3* pos,unsigned nfields,const StScalarData* fields,std::string head=Ó)
SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tfloat3* pos,const std::vector<StScalarData> &fields,std::string head=Ó)
SaveCsv	JFormatFiles2.h	/^  static void SaveCsv(std::string fname,bool csvsepcoma,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,unsigned np ,const tfloat3* pos,unsigned nfields,const StScalarData* fields,std::string head=Ó)
SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const double* data,bool first=false)
SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const float* data,bool first=false)
SaveCsvPointsVar	JFormatFiles2.h	/^  static void SaveCsvPointsVar(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tfloat3* pos,const float* data,bool first=false)
SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const tdouble3* data,bool first=false)
SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tdouble3* pos,const tfloat3* data,bool first=false)
SaveCsvPointsVar3	JFormatFiles2.h	/^  static void SaveCsvPointsVar3(const std::string &fname,bool csvsepcoma$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,bool csvsepcoma ,const std::string &dataname,int part,double timestep,unsigned np ,const tfloat3* pos,const tfloat3* data,bool first=false)
SaveData	JBinaryData.cpp	/^unsigned JBinaryData::SaveData(unsigned size,byte* ptr,bool all){$/;"	f	class:JBinaryData	signature:(unsigned size,byte* ptr,bool all)
SaveData	JBinaryData.h	/^  unsigned SaveData(unsigned size,byte* ptr,bool all);$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,byte* ptr,bool all)
SaveData	JSaveCsv2.cpp	/^void JSaveCsv2::SaveData(bool closefile){$/;"	f	class:jcsv::JSaveCsv2	signature:(bool closefile)
SaveData	JSaveCsv2.h	/^  void SaveData(bool closefile=false);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(bool closefile=false)
SaveData	JSaveDt.cpp	/^void JSaveDt::SaveData(){$/;"	f	class:JSaveDt	signature:()
SaveData	JSaveDt.h	/^  void SaveData();$/;"	p	class:JSaveDt	access:public	signature:()
SaveData	JSph.cpp	/^void JSph::SaveData(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop$/;"	f	class:JSph	signature:(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop ,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
SaveData	JSph.h	/^  void SaveData(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus);$/;"	p	class:JSph	access:protected	signature:(unsigned npok,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
SaveData	JSphCpuSingle.cpp	/^void JSphCpuSingle::SaveData(){$/;"	f	class:JSphCpuSingle	signature:()
SaveData	JSphCpuSingle.h	/^  void SaveData();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
SaveData	JSphGpuSingle.cpp	/^void JSphGpuSingle::SaveData(){$/;"	f	class:JSphGpuSingle	signature:()
SaveData	JSphGpuSingle.h	/^  void SaveData();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
SaveDataConst	JBinaryData.cpp	/^unsigned JBinaryData::SaveDataConst(unsigned size,byte* ptr,bool all)const{$/;"	f	class:JBinaryData	signature:(unsigned size,byte* ptr,bool all) const
SaveDataConst	JBinaryData.h	/^  unsigned SaveDataConst(unsigned size,byte* ptr,bool all)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned size,byte* ptr,bool all) const
SaveDomainVtk	JSph.cpp	/^void JSph::SaveDomainVtk(unsigned ndom,const tdouble3 *vdom)const{ $/;"	f	class:JSph	signature:(unsigned ndom,const tdouble3 *vdom) const
SaveDomainVtk	JSph.h	/^  void SaveDomainVtk(unsigned ndom,const tdouble3 *vdom)const;$/;"	p	class:JSph	access:protected	signature:(unsigned ndom,const tdouble3 *vdom) const
SaveDt	JSph.h	/^  JSaveDt *SaveDt;$/;"	m	class:JSph	access:protected
SaveFile	JBinaryData.cpp	/^void JBinaryData::SaveFile(const std::string &file,bool memory,bool all){$/;"	f	class:JBinaryData	signature:(const std::string &file,bool memory,bool all)
SaveFile	JBinaryData.h	/^  void SaveFile(const std::string &file,bool memory=false,bool all=true);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,bool memory=false,bool all=true)
SaveFile	JPartDataHead.cpp	/^void JPartDataHead::SaveFile(std::string dir){$/;"	f	class:JPartDataHead	signature:(std::string dir)
SaveFile	JPartDataHead.h	/^  void SaveFile(std::string dir);$/;"	p	class:JPartDataHead	access:public	signature:(std::string dir)
SaveFile	JXml.cpp	/^void JXml::SaveFile(const std::string &fname,const std::string &app,bool date){$/;"	f	class:JXml	signature:(const std::string &fname,const std::string &app,bool date)
SaveFile	JXml.h	/^  void SaveFile(const std::string &fname,const std::string &app="",bool date=false);$/;"	p	class:JXml	access:public	signature:(const std::string &fname,const std::string &app=Ó,bool date=false)
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
SaveFile	tinyxml.h	/^    bool SaveFile( FILE* ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* ) const
SaveFile	tinyxml.h	/^    bool SaveFile( const char * filename ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename ) const
SaveFile	tinyxml.h	/^    bool SaveFile( const std::string& filename ) const      \/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
SaveFile	tinyxml.h	/^    bool SaveFile() const;$/;"	p	class:TiXmlDocument	access:public	signature:() const
SaveFileAllDts	JSaveDt.cpp	/^void JSaveDt::SaveFileAllDts(){$/;"	f	class:JSaveDt	signature:()
SaveFileAllDts	JSaveDt.h	/^  void SaveFileAllDts();$/;"	p	class:JSaveDt	access:private	signature:()
SaveFileCase	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileCase(std::string casename){$/;"	f	class:JPartDataBi4	signature:(std::string casename)
SaveFileCase	JPartDataBi4.h	/^  void SaveFileCase(std::string casename);$/;"	p	class:JPartDataBi4	access:public	signature:(std::string casename)
SaveFileData	JBinaryData.cpp	/^void JBinaryData::SaveFileData(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all) const
SaveFileData	JBinaryData.h	/^  void SaveFileData(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,bool head,const std::string &filecode,bool memory,bool all) const
SaveFileData	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileData(std::string fname){$/;"	f	class:JPartDataBi4	signature:(std::string fname)
SaveFileData	JPartDataBi4.h	/^  void SaveFileData(std::string fname);$/;"	p	class:JPartDataBi4	access:private	signature:(std::string fname)
SaveFileInfo	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFileInfo(){$/;"	f	class:JPartDataBi4	signature:()
SaveFileInfo	JPartDataBi4.h	/^  void SaveFileInfo();$/;"	p	class:JPartDataBi4	access:public	signature:()
SaveFileInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::SaveFileInfoData(){ $/;"	f	class:JBlockSizeAutoKer	signature:()
SaveFileInfoData	JBlockSizeAuto.h	/^  void SaveFileInfoData();$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:()
SaveFileListApp	JBinaryData.cpp	/^void JBinaryData::SaveFileListApp(const std::string &file,const std::string &filecode,bool memory,bool all){$/;"	f	class:JBinaryData	signature:(const std::string &file,const std::string &filecode,bool memory,bool all)
SaveFileListApp	JBinaryData.h	/^  void SaveFileListApp(const std::string &file,const std::string &filecode,bool memory=false,bool all=true);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &file,const std::string &filecode,bool memory=false,bool all=true)
SaveFilePart	JPartDataBi4.cpp	/^void JPartDataBi4::SaveFilePart(){$/;"	f	class:JPartDataBi4	signature:()
SaveFilePart	JPartDataBi4.h	/^  void SaveFilePart();$/;"	p	class:JPartDataBi4	access:public	signature:()
SaveFileValues	JSaveDt.cpp	/^void JSaveDt::SaveFileValues(){ $/;"	f	class:JSaveDt	signature:()
SaveFileValues	JSaveDt.h	/^  void SaveFileValues();$/;"	p	class:JSaveDt	access:private	signature:()
SaveFileValuesEnd	JSaveDt.cpp	/^void JSaveDt::SaveFileValuesEnd(){$/;"	f	class:JSaveDt	signature:()
SaveFileValuesEnd	JSaveDt.h	/^  void SaveFileValuesEnd();$/;"	p	class:JSaveDt	access:private	signature:()
SaveFileXml	JBinaryData.cpp	/^void JBinaryData::SaveFileXml(std::string file,bool svarrays,const std::string &head)const{$/;"	f	class:JBinaryData	signature:(std::string file,bool svarrays,const std::string &head) const
SaveFileXml	JBinaryData.h	/^  void SaveFileXml(std::string file,bool svarrays=false,const std::string &head=" fmt=\\"JBinaryData\\"")const;$/;"	p	class:JBinaryData	access:public	signature:(std::string file,bool svarrays=false,const std::string &head=Ó) const
SaveFileXml	JMotion.cpp	/^void JMotion::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JMotion	signature:(const std::string &file,const std::string &path,bool newfile) const
SaveFileXml	JMotion.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JMotion	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
SaveFileXml	JSpaceEParms.cpp	/^void JSpaceEParms::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceEParms	signature:(const std::string &file,const std::string &path,bool newfile) const
SaveFileXml	JSpaceEParms.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
SaveFileXml	JSpaceParts.cpp	/^void JSpaceParts::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceParts	signature:(const std::string &file,const std::string &path,bool newfile) const
SaveFileXml	JSpaceParts.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceParts	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
SaveFileXml	JSpaceProperties.cpp	/^void JSpaceProperties::SaveFileXml(const std::string &file,const std::string &path,bool newfile)const{$/;"	f	class:JSpaceProperties	signature:(const std::string &file,const std::string &path,bool newfile) const
SaveFileXml	JSpaceProperties.h	/^  void SaveFileXml(const std::string &file,const std::string &path,bool newfile=true)const;$/;"	p	class:JSpaceProperties	access:public	signature:(const std::string &file,const std::string &path,bool newfile=true) const
SaveInfoData	JBlockSizeAuto.cpp	/^void JBlockSizeAutoKer::SaveInfoData(unsigned nstep,float timestep){ $/;"	f	class:JBlockSizeAutoKer	signature:(unsigned nstep,float timestep)
SaveInfoData	JBlockSizeAuto.h	/^  void SaveInfoData(unsigned nstep,float timestep);$/;"	p	class:JBlockSizeAutoKer	access:protected	signature:(unsigned nstep,float timestep)
SaveInitial	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::SaveInitial(){$/;"	f	class:JPartFloatBi4Save	signature:()
SaveInitial	JPartFloatBi4.h	/^  void SaveInitial();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
SaveInitial	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SaveInitial(){$/;"	f	class:JPartOutBi4Save	signature:()
SaveInitial	JPartOutBi4Save.h	/^  void SaveInitial();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
SaveInitialDomainVtk	JSph.cpp	/^void JSph::SaveInitialDomainVtk()const{$/;"	f	class:JSph	signature:() const
SaveInitialDomainVtk	JSph.h	/^  void SaveInitialDomainVtk()const;$/;"	p	class:JSph	access:protected	signature:() const
SaveMapCellsVtk	JSph.cpp	/^void JSph::SaveMapCellsVtk(float scell)const{$/;"	f	class:JSph	signature:(float scell) const
SaveMapCellsVtk	JSph.h	/^  void SaveMapCellsVtk(float scell)const;$/;"	p	class:JSph	access:protected	signature:(float scell) const
SaveMapCellsVtkSize	JSph.cpp	/^unsigned JSph::SaveMapCellsVtkSize()const{$/;"	f	class:JSph	signature:() const
SaveMapCellsVtkSize	JSph.h	/^  unsigned SaveMapCellsVtkSize()const;$/;"	p	class:JSph	access:protected	signature:() const
SaveMotionPredef	JFormatFiles2.h	/^  static void SaveMotionPredef(const std::string &fname,unsigned np,const float *time,const float *pos);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned np,const float *time,const float *pos)
SaveMotionPredef	JFormatFiles2.h	/^  static void SaveMotionPredef(const std::string &fname,unsigned np,const float *time,const tfloat3 *pos);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned np,const float *time,const tfloat3 *pos)
SavePartData	JSph.cpp	/^void JSph::SavePartData(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus){$/;"	f	class:JSph	signature:(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
SavePartData	JSph.h	/^  void SavePartData(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus);$/;"	p	class:JSph	access:protected	signature:(unsigned npok,unsigned nout,const unsigned *idp,const tdouble3 *pos,const tfloat3 *vel,const float *rhop,unsigned ndom,const tdouble3 *vdom,const StInfoPartPlus *infoplus)
SavePartFloat	JPartFloatBi4.cpp	/^void JPartFloatBi4Save::SavePartFloat(){$/;"	f	class:JPartFloatBi4Save	signature:()
SavePartFloat	JPartFloatBi4.h	/^  void SavePartFloat();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
SavePartFloat	JPartFloatBi4.h	/^  void SavePartFloat(unsigned cpart,double timestep,double demdtforce){   AddPartFloat(cpart,timestep,demdtforce); SavePartFloat();   }$/;"	f	class:JPartFloatBi4Save	access:public	signature:(unsigned cpart,double timestep,double demdtforce)
SavePartOut	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SavePartOut(){$/;"	f	class:JPartOutBi4Save	signature:()
SavePartOut	JPartOutBi4Save.cpp	/^void JPartOutBi4Save::SavePartOut(bool posdouble,unsigned cpart,double timestep,unsigned nout$/;"	f	class:JPartOutBi4Save	signature:(bool posdouble,unsigned cpart,double timestep,unsigned nout ,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel ,const float *rhop,const byte *motive)
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(bool posdouble,unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive);$/;"	p	class:JPartOutBi4Save	access:public	signature:(bool posdouble,unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *posf,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,NULL,idpd,NULL,posd,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const ullong  *idpd,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,NULL,idpd,pos ,NULL,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const ullong *idpd,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,idp ,NULL,NULL,posd,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tdouble3 *posd,const tfloat3 *vel,const float *rhop,const byte *motive)
SavePartOut	JPartOutBi4Save.h	/^  void SavePartOut(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3  *pos ,const tfloat3 *vel,const float *rhop,const byte *motive){  AddPartOut(cpart,timestep,nout,idp ,NULL,pos ,NULL,vel,rhop,motive); SavePartOut();  }$/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned cpart,double timestep,unsigned nout,const unsigned *idp,const tfloat3 *pos ,const tfloat3 *vel,const float *rhop,const byte *motive)
SaveRes	JSph.cpp	/^void JSph::SaveRes(float tsim,float ttot,const std::string &headplus,const std::string &detplus){$/;"	f	class:JSph	signature:(float tsim,float ttot,const std::string &headplus,const std::string &detplus)
SaveRes	JSph.h	/^  void SaveRes(float tsim,float ttot,const std::string &headplus="",const std::string &detplus="");$/;"	p	class:JSph	access:protected	signature:(float tsim,float ttot,const std::string &headplus=Ó,const std::string &detplus=Ó)
SaveResults	JGaugeItem.cpp	/^void JGaugeForce::SaveResults(){$/;"	f	class:JGaugeForce	signature:()
SaveResults	JGaugeItem.cpp	/^void JGaugeItem::SaveResults(unsigned cpart){$/;"	f	class:JGaugeItem	signature:(unsigned cpart)
SaveResults	JGaugeItem.cpp	/^void JGaugeMaxZ::SaveResults(){$/;"	f	class:JGaugeMaxZ	signature:()
SaveResults	JGaugeItem.cpp	/^void JGaugeSwl::SaveResults(){$/;"	f	class:JGaugeSwl	signature:()
SaveResults	JGaugeItem.cpp	/^void JGaugeVelocity::SaveResults(){$/;"	f	class:JGaugeVelocity	signature:()
SaveResults	JGaugeItem.h	/^  virtual void SaveResults()=0;$/;"	p	class:JGaugeItem	access:public	signature:()
SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeForce	access:public	signature:()
SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeMaxZ	access:public	signature:()
SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeSwl	access:public	signature:()
SaveResults	JGaugeItem.h	/^  void SaveResults();$/;"	p	class:JGaugeVelocity	access:public	signature:()
SaveResults	JGaugeItem.h	/^  void SaveResults(unsigned cpart);$/;"	p	class:JGaugeItem	access:public	signature:(unsigned cpart)
SaveResults	JGaugeSystem.cpp	/^void JGaugeSystem::SaveResults(unsigned cpart){$/;"	f	class:JGaugeSystem	signature:(unsigned cpart)
SaveResults	JGaugeSystem.h	/^  void SaveResults(unsigned cpart);$/;"	p	class:JGaugeSystem	access:public	signature:(unsigned cpart)
SaveStats	JFormatFiles2.h	/^  static void SaveStats(std::string fname,bool csvsepcoma,bool firstdata,unsigned part$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,bool csvsepcoma,bool firstdata,unsigned part ,double timestep,unsigned np,unsigned nfields,StStatistics* fields,std::string head)
SaveValues	JBinaryData.cpp	/^void JBinaryData::SaveValues(unsigned &count,unsigned size,byte *ptr)const{$/;"	f	class:JBinaryData	signature:(unsigned &count,unsigned size,byte *ptr) const
SaveValues	JBinaryData.h	/^  void SaveValues(unsigned &count,unsigned size,byte *ptr)const;$/;"	p	class:JBinaryData	access:private	signature:(unsigned &count,unsigned size,byte *ptr) const
SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3* pos,const std::vector<StScalarData> &fields)
SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tdouble3* pos,unsigned nfields,const StScalarData* fields)
SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,const std::vector<StScalarData> &fields)
SaveVtk	JFormatFiles2.h	/^  static void SaveVtk(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,unsigned nfields,const StScalarData* fields)
SaveVtkBasic	JFormatFiles2.h	/^  static void SaveVtkBasic(std::string fname,unsigned np$/;"	f	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3* pos,const unsigned* idp,const tfloat3* vel,const float* rhop)
SaveVtkBoxes	JFormatFiles2.h	/^  static void SaveVtkBoxes(const std::string &fname,unsigned nbox,const tfloat3 *vbox,float sizemin=0);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,unsigned nbox,const tfloat3 *vbox,float sizemin=0)
SaveVtkCells	JFormatFiles2.h	/^  static void SaveVtkCells(const std::string &fname,const tfloat3 &posmin,const tuint3 &cells,float scell);$/;"	p	class:JFormatFiles2	access:public	signature:(const std::string &fname,const tfloat3 &posmin,const tuint3 &cells,float scell)
SaveVtkConfig	JDamping.cpp	/^void JDamping::SaveVtkConfig(double dp)const{$/;"	f	class:JDamping	signature:(double dp) const
SaveVtkConfig	JDamping.h	/^  void SaveVtkConfig(double dp)const;$/;"	p	class:JDamping	access:private	signature:(double dp) const
SaveVtkInitPoints	JGaugeSystem.cpp	/^void JGaugeSystem::SaveVtkInitPoints()const{$/;"	f	class:JGaugeSystem	signature:() const
SaveVtkInitPoints	JGaugeSystem.h	/^  void SaveVtkInitPoints()const;$/;"	p	class:JGaugeSystem	access:private	signature:() const
SaveVtkPart	JGaugeItem.h	/^  bool SaveVtkPart; \/\/-Creates VTK files for each PART.$/;"	m	class:JGaugeItem	access:protected
SaveVtkPointsVar	JFormatFiles2.h	/^  static void SaveVtkPointsVar(std::string fname,unsigned np$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,unsigned np ,const tfloat3 *pos,const std::string &varname,const float *var)
SaveVtkResult	JGaugeItem.cpp	/^void JGaugeForce::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeForce	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.cpp	/^void JGaugeMaxZ::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeMaxZ	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.cpp	/^void JGaugeSwl::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeSwl	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.cpp	/^void JGaugeVelocity::SaveVtkResult(unsigned cpart){$/;"	f	class:JGaugeVelocity	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.h	/^  virtual void SaveVtkResult(unsigned cpart)=0;$/;"	p	class:JGaugeItem	access:public	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeForce	access:public	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeMaxZ	access:public	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeSwl	access:public	signature:(unsigned cpart)
SaveVtkResult	JGaugeItem.h	/^  void SaveVtkResult(unsigned cpart);$/;"	p	class:JGaugeVelocity	access:public	signature:(unsigned cpart)
SaveVtkShapes	JFormatFiles2.h	/^  static void SaveVtkShapes(std::string fname,const std::string &valuename$/;"	p	class:JFormatFiles2	access:public	signature:(std::string fname,const std::string &valuename ,const std::string &valuefname,const std::vector<StShapeData> &shapes)
SaveXml	JSpaceEParms.cpp	/^void JSpaceEParms::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceEParms.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceEParms	access:public	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceParts.cpp	/^void JSpaceParts::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceParts.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceParts	access:public	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceProperties.cpp	/^void JSpaceProperties::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceProperties.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::SaveXml(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceVtkOut	signature:(JXml *sxml,const std::string &place) const
SaveXml	JSpaceVtkOut.h	/^  void SaveXml(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceVtkOut	access:public	signature:(JXml *sxml,const std::string &place) const
SaveXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::SaveXmlDef(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place) const
SaveXmlDef	JSpaceCtes.h	/^  void SaveXmlDef(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place) const
SaveXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::SaveXmlRun(JXml *sxml,const std::string &place)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,const std::string &place) const
SaveXmlRun	JSpaceCtes.h	/^  void SaveXmlRun(JXml *sxml,const std::string &place)const;$/;"	p	class:JSpaceCtes	access:public	signature:(JXml *sxml,const std::string &place) const
Scale	JMatrix4.h	/^  void Scale(const T3 &p){$/;"	f	class:JMatrix4	access:public	signature:(const T3 &p)
Scell	JCellDivCpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivCpu	access:protected
Scell	JCellDivGpu.h	/^  const float Scell,OvScell;$/;"	m	class:JCellDivGpu	access:protected
Scell	JGaugeItem.h	/^  float Scell;         \/\/\/<Cell size: 2h or h. | Tamaño de celda: 2h o h.$/;"	m	class:JGaugeItem	access:protected
Scell	JGaugeSystem.h	/^  float Scell;            \/\/\/<Cell size: 2h or h. | Tamaño de celda: 2h o h.$/;"	m	class:JGaugeSystem	access:private
Scell	JSph.h	/^  float Scell;             \/\/\/<Cell size: 2h or h. | TamaÃ±o de celda: 2h o h.$/;"	m	class:JSph	access:protected
SelecDevice	JSphGpu.cpp	/^void JSphGpu::SelecDevice(int gpuid){$/;"	f	class:JSphGpu	signature:(int gpuid)
SelecDevice	JSphGpu.h	/^  void SelecDevice(int gpuid);$/;"	p	class:JSphGpu	access:protected	signature:(int gpuid)
SelecDomain	JSph.cpp	/^void JSph::SelecDomain(tuint3 celini,tuint3 celfin){$/;"	f	class:JSph	signature:(tuint3 celini,tuint3 celfin)
SelecDomain	JSph.h	/^  void SelecDomain(tuint3 celini,tuint3 celfin);$/;"	p	class:JSph	access:protected	signature:(tuint3 celini,tuint3 celfin)
Sep	JReadDatafile.h	/^  std::string Sep;       \/\/\/< Value separator.$/;"	m	class:JReadDatafile	access:private
Sep	JSaveCsv2.h	/^  Sep(unsigned count=1):Count(count){};$/;"	f	class:jcsv::Sep	access:public	signature:(unsigned count=1)
Sep	JSaveCsv2.h	/^class Sep{$/;"	c	namespace:jcsv
Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &forceres){$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:(double t,const tfloat3 &forceres)
Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt,const tfloat3 &ve){$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:(double t,const tfloat3 &pt,const tfloat3 &ve)
Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt,float z){$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:(double t,const tfloat3 &pt,float z)
Set	JGaugeItem.h	/^    void Set(double t,const tfloat3 &pt0,const tfloat3 &pt2,const tfloat3 &ps){$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:(double t,const tfloat3 &pt0,const tfloat3 &pt2,const tfloat3 &ps)
SetArrayCount	JArraysCpu.cpp	/^void JArraysCpuSize::SetArrayCount(unsigned count){$/;"	f	class:JArraysCpuSize	signature:(unsigned count)
SetArrayCount	JArraysCpu.h	/^  void SetArrayCount(TpArraySize tsize,unsigned count){ GetArrays(tsize)->SetArrayCount(count); }$/;"	f	class:JArraysCpu	access:public	signature:(TpArraySize tsize,unsigned count)
SetArrayCount	JArraysCpu.h	/^  void SetArrayCount(unsigned count);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned count)
SetArrayCount	JArraysGpu.cpp	/^void JArraysGpuSize::SetArrayCount(unsigned count){$/;"	f	class:JArraysGpuSize	signature:(unsigned count)
SetArrayCount	JArraysGpu.h	/^  void SetArrayCount(TpArraySize tsize,unsigned count){ GetArrays(tsize)->SetArrayCount(count); }$/;"	f	class:JArraysGpu	access:public	signature:(TpArraySize tsize,unsigned count)
SetArrayCount	JArraysGpu.h	/^  void SetArrayCount(unsigned count);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned count)
SetArraySize	JArraysCpu.cpp	/^void JArraysCpu::SetArraySize(unsigned size){ $/;"	f	class:JArraysCpu	signature:(unsigned size)
SetArraySize	JArraysCpu.cpp	/^void JArraysCpuSize::SetArraySize(unsigned size){$/;"	f	class:JArraysCpuSize	signature:(unsigned size)
SetArraySize	JArraysCpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysCpu	access:public	signature:(unsigned size)
SetArraySize	JArraysCpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysCpuSize	access:public	signature:(unsigned size)
SetArraySize	JArraysGpu.cpp	/^void JArraysGpu::SetArraySize(unsigned size){ $/;"	f	class:JArraysGpu	signature:(unsigned size)
SetArraySize	JArraysGpu.cpp	/^void JArraysGpuSize::SetArraySize(unsigned size){$/;"	f	class:JArraysGpuSize	signature:(unsigned size)
SetArraySize	JArraysGpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysGpu	access:public	signature:(unsigned size)
SetArraySize	JArraysGpu.h	/^  void SetArraySize(unsigned size);$/;"	p	class:JArraysGpuSize	access:public	signature:(unsigned size)
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& name, const std::string& _value )
SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
SetAttribute	tinyxml.h	/^    void SetAttribute( const char * name, int value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, int value )
SetAttribute	tinyxml.h	/^    void SetAttribute( const char* name, const char * _value );$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, const char * _value )
SetAttribute	tinyxml.h	/^    void SetAttribute( const std::string& name, const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, const std::string& _value )
SetAttribute	tinyxml.h	/^    void SetAttribute( const std::string& name, int _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int _value )
SetB	JSpaceCtes.h	/^  void SetB(double v){ B=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetBAuto	JSpaceCtes.h	/^  void SetBAuto(bool on){ BAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetBegin	JSpaceParts.h	/^  void SetBegin(unsigned begin){ Begin=begin; }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned begin)
SetBlockNoutMax	JPartOutBi4Save.h	/^  void SetBlockNoutMax(unsigned v){ BlockNoutMax=(v<250000u? 250000u: v); } $/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned v)
SetBlockNoutMin	JPartOutBi4Save.h	/^  void SetBlockNoutMin(unsigned v){ BlockNoutMin=(v<50000u? 50000u: v); } $/;"	f	class:JPartOutBi4Save	access:public	signature:(unsigned v)
SetBlockSize	JSpaceParts.cpp	/^void JSpaceParts::SetBlockSize(unsigned pos,unsigned np){$/;"	f	class:JSpaceParts	signature:(unsigned pos,unsigned np)
SetBlockSize	JSpaceParts.h	/^  void SetBlockSize(unsigned pos,unsigned np);$/;"	p	class:JSpaceParts	access:public	signature:(unsigned pos,unsigned np)
SetCDATA	tinyxml.h	/^    void SetCDATA( bool _cdata )    { cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
SetCFLnumber	JSpaceCtes.h	/^  void SetCFLnumber(double v){ $/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetCoefH	JSpaceCtes.h	/^  void SetCoefH(double v){ CoefH=v; CoefHdp=0; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetCoefHdp	JSpaceCtes.h	/^  void SetCoefHdp(double v){ if(v){ CoefHdp=v; CoefH=0; } }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetCoefSound	JSpaceCtes.h	/^  void SetCoefSound(double v){ CoefSound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetCoefficient	JSpaceCtes.h	/^  void SetCoefficient(double v){ SetCoefH(v); }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetComment	JSpaceEParms.cpp	/^void JSpaceEParms::SetComment(const std::string &key,const std::string &comment){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &comment)
SetComment	JSpaceEParms.h	/^  void SetComment(const std::string &key,const std::string &comment);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &comment)
SetCondenseWhiteSpace	tinyxml.h	/^    static void SetCondenseWhiteSpace( bool condense )      { condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
SetCount	JSpaceParts.h	/^  void SetCount(unsigned count){ Count=count; }$/;"	f	class:JSpacePartBlock	access:public	signature:(unsigned count)
SetData	JBinaryData.cpp	/^void JBinaryDataArray::SetData(unsigned count,const void* data,bool externalpointer){$/;"	f	class:JBinaryDataArray	signature:(unsigned count,const void* data,bool externalpointer)
SetData	JBinaryData.h	/^  void SetData(unsigned count,const void* data,bool externalpointer);$/;"	p	class:JBinaryDataArray	access:public	signature:(unsigned count,const void* data,bool externalpointer)
SetData	JSaveCsv2.h	/^  void SetData(){ DataSelected=true;  }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:()
SetDirData	JMotion.cpp	/^void JMotion::SetDirData(const std::string &dirdata){$/;"	f	class:JMotion	signature:(const std::string &dirdata)
SetDirData	JMotion.h	/^  void SetDirData(const std::string &dirdata);$/;"	p	class:JMotion	access:public	signature:(const std::string &dirdata)
SetDistLimit	JGaugeItem.h	/^  void SetDistLimit(float distlimit){        ClearResult(); DistLimit=distlimit; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(float distlimit)
SetDocument	tinyxml.h	/^    void SetDocument( TiXmlDocument* doc )  { document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
SetDoubleAttribute	tinyxml.h	/^    void SetDoubleAttribute( const char * name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, double value )
SetDoubleValue	tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
SetDoubleValue	tinyxml.h	/^    void SetDoubleValue( double _value );                               \/\/\/< Set the value from a double.$/;"	p	class:TiXmlAttribute	access:public	signature:( double _value )
SetDp	JSpaceCtes.h	/^  void SetDp(double v){ Dp=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetEps	JSpaceCtes.h	/^  void SetEps(double v){ Eps=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetError	tinyxml.h	/^    void SetError( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlDocument	access:public	signature:( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding )
SetError	tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
SetFmtCurrent	JSaveCsv2.h	/^  void SetFmtCurrent(TpFormat tfmt,const std::string &fmt){ FmtCurrent[tfmt]=fmt; };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt,const std::string &fmt)
SetFmtDouble	JBinaryData.cpp	/^void JBinaryData::SetFmtDouble(const std::string &fmt,bool down){$/;"	f	class:JBinaryData	signature:(const std::string &fmt,bool down)
SetFmtDouble	JBinaryData.h	/^  void SetFmtDouble(const std::string &fmt,bool down);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &fmt,bool down)
SetFmtFloat	JBinaryData.cpp	/^void JBinaryData::SetFmtFloat(const std::string &fmt,bool down){$/;"	f	class:JBinaryData	signature:(const std::string &fmt,bool down)
SetFmtFloat	JBinaryData.h	/^  void SetFmtFloat(const std::string &fmt,bool down);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &fmt,bool down)
SetGamma	JSpaceCtes.h	/^  void SetGamma(double v){ Gamma=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetGravity	JSpaceCtes.h	/^  void SetGravity(const tdouble3& g){ Gravity=g; }$/;"	f	class:JSpaceCtes	access:public	signature:(const tdouble3& g)
SetH	JSpaceCtes.h	/^  void SetH(double v){ H=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetHAuto	JSpaceCtes.h	/^  void SetHAuto(bool on){ HAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetHSwl	JSpaceCtes.h	/^  void SetHSwl(double v){ HSwl=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetHSwlAuto	JSpaceCtes.h	/^  void SetHSwlAuto(bool on){ HSwlAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetHead	JSaveCsv2.h	/^  void SetHead(){ DataSelected=false; }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:()
SetHeight	JGaugeItem.h	/^  void SetHeight   (double height){          ClearResult(); Height=height; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(double height)
SetHide	JBinaryData.h	/^  void SetHide(bool hide){ Hide=hide; }$/;"	f	class:JBinaryDataArray	access:public	signature:(bool hide)
SetHide	JBinaryData.h	/^  void SetHide(bool hide){ HideAll=hide; }$/;"	f	class:JBinaryData	access:public	signature:(bool hide)
SetHideArrays	JBinaryData.cpp	/^void JBinaryData::SetHideArrays(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
SetHideArrays	JBinaryData.h	/^  void SetHideArrays(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
SetHideItems	JBinaryData.cpp	/^void JBinaryData::SetHideItems(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
SetHideItems	JBinaryData.h	/^  void SetHideItems(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
SetHideValues	JBinaryData.cpp	/^void JBinaryData::SetHideValues(bool hide,bool down){$/;"	f	class:JBinaryData	signature:(bool hide,bool down)
SetHideValues	JBinaryData.h	/^  void SetHideValues(bool hide,bool down);$/;"	p	class:JBinaryData	access:public	signature:(bool hide,bool down)
SetIdentity	JMatrix4.h	/^  void SetIdentity(){$/;"	f	class:JMatrix4	access:public	signature:()
SetIncreaseNp	JCellDivCpu.h	/^  void SetIncreaseNp(unsigned increasenp){ IncreaseNp=increasenp; }$/;"	f	class:JCellDivCpu	access:public	signature:(unsigned increasenp)
SetIncreaseNp	JCellDivGpu.h	/^  void SetIncreaseNp(unsigned increasenp){ IncreaseNp=increasenp; }$/;"	f	class:JCellDivGpu	access:public	signature:(unsigned increasenp)
SetIndent	tinyxml.h	/^    void SetIndent( const char* _indent )           { indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
SetIntValue	tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
SetIntValue	tinyxml.h	/^    void SetIntValue( int _value );                                     \/\/\/< Set the value from an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:( int _value )
SetLatticeBound	JSpaceCtes.h	/^  void SetLatticeBound(bool simple){ LatticeBound=(simple? 1: 2); }$/;"	f	class:JSpaceCtes	access:public	signature:(bool simple)
SetLatticeFluid	JSpaceCtes.h	/^  void SetLatticeFluid(bool simple){ LatticeFluid=(simple? 1: 2); }$/;"	f	class:JSpaceCtes	access:public	signature:(bool simple)
SetLineBreak	tinyxml.h	/^    void SetLineBreak( const char* _lineBreak )     { lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
SetMassBound	JSpaceCtes.h	/^  void SetMassBound(double v){ MassBound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetMassBoundAuto	JSpaceCtes.h	/^  void SetMassBoundAuto(bool on){ MassBoundAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetMassFluid	JSpaceCtes.h	/^  void SetMassFluid(double v){ MassFluid=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetMassFluidAuto	JSpaceCtes.h	/^  void SetMassFluidAuto(bool on){ MassFluidAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetMemoryVSort	JCellDivCpu.cpp	/^void JCellDivCpu::SetMemoryVSort(byte *vsort){$/;"	f	class:JCellDivCpu	signature:(byte *vsort)
SetMemoryVSort	JCellDivCpu.h	/^  void SetMemoryVSort(byte *vsort);$/;"	p	class:JCellDivCpu	access:protected	signature:(byte *vsort)
SetMkFirst	JSpaceParts.cpp	/^void JSpaceParts::SetMkFirst(word boundfirst,word fluidfirst){$/;"	f	class:JSpaceParts	signature:(word boundfirst,word fluidfirst)
SetMkFirst	JSpaceParts.h	/^  void SetMkFirst(word boundfirst,word fluidfirst);$/;"	p	class:JSpaceParts	access:public	signature:(word boundfirst,word fluidfirst)
SetMks	JSpaceVtkOut.cpp	/^void JSpaceVtkOutFile::SetMks(const std::string &mks){$/;"	f	class:JSpaceVtkOutFile	signature:(const std::string &mks)
SetMks	JSpaceVtkOut.h	/^  void SetMks(const std::string &mks);$/;"	p	class:JSpaceVtkOutFile	access:public	signature:(const std::string &mks)
SetName	JBinaryData.cpp	/^void JBinaryData::SetName(const std::string &name){$/;"	f	class:JBinaryData	signature:(const std::string &name)
SetName	JBinaryData.cpp	/^void JBinaryDataArray::SetName(const std::string &name){$/;"	f	class:JBinaryDataArray	signature:(const std::string &name)
SetName	JBinaryData.h	/^  void SetName(const std::string &name);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name)
SetName	JBinaryData.h	/^  void SetName(const std::string &name);$/;"	p	class:JBinaryDataArray	access:public	signature:(const std::string &name)
SetName	tinyxml.h	/^    void SetName( const char* _name )   { name = _name; }               \/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
SetName	tinyxml.h	/^    void SetName( const std::string& _name )    { name = _name; }   $/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
SetNextMov	JMotionMov.h	/^  void SetNextMov(JMotionMov* nextmov){ NextMov=nextmov; }$/;"	f	class:JMotionMov	access:public	signature:(JMotionMov* nextmov)
SetPoint	JGaugeItem.h	/^  void SetPoint(const tdouble3 &point){ ClearResult(); Point=point; }$/;"	f	class:JGaugeVelocity	access:public	signature:(const tdouble3 &point)
SetPoint0	JGaugeItem.h	/^  void SetPoint0   (const tdouble3 &point0){ ClearResult(); Point0=point0; }$/;"	f	class:JGaugeMaxZ	access:public	signature:(const tdouble3 &point0)
SetPoints	JGaugeItem.cpp	/^void JGaugeSwl::SetPoints(const tdouble3 &point0,const tdouble3 &point2,double pointdp){$/;"	f	class:JGaugeSwl	signature:(const tdouble3 &point0,const tdouble3 &point2,double pointdp)
SetPoints	JGaugeItem.h	/^  void SetPoints(const tdouble3 &point0,const tdouble3 &point2,double pointdp);$/;"	p	class:JGaugeSwl	access:public	signature:(const tdouble3 &point0,const tdouble3 &point2,double pointdp)
SetPosMinMax	JSphMk.h	/^  void SetPosMinMax(const tdouble3 &pmin,const tdouble3 &pmax){ PosDefined=true; PosMin=pmin; PosMax=pmax; }$/;"	f	class:JSphMkBlock	access:public	signature:(const tdouble3 &pmin,const tdouble3 &pmax)
SetReadLine	JReadDatafile.cpp	/^void JReadDatafile::SetReadLine(int line){ $/;"	f	class:JReadDatafile	signature:(int line)
SetReadLine	JReadDatafile.h	/^  void SetReadLine(int line);$/;"	p	class:JReadDatafile	access:public	signature:(int line)
SetRhop0	JSpaceCtes.h	/^  void SetRhop0(double v){ Rhop0=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetSaveVtkPart	JGaugeItem.h	/^  void SetSaveVtkPart(bool save){ SaveVtkPart=save; }$/;"	f	class:JGaugeItem	access:public	signature:(bool save)
SetSeparators	JSaveCsv2.cpp	/^void JSaveCsv2::SetSeparators(std::string &tx)const{$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string &tx) const
SetSeparators	JSaveCsv2.h	/^  void SetSeparators(std::string &tx)const;$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(std::string &tx) const
SetSize	JLinearValue.cpp	/^void JLinearValue::SetSize(unsigned size){$/;"	f	class:JLinearValue	signature:(unsigned size)
SetSize	JLinearValue.h	/^  void SetSize(unsigned size);$/;"	p	class:JLinearValue	access:public	signature:(unsigned size)
SetSpeedSound	JSpaceCtes.h	/^  void SetSpeedSound(double v){ SpeedSound=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetSpeedSoundAuto	JSpaceCtes.h	/^  void SetSpeedSoundAuto(bool on){ SpeedSoundAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetSpeedSystem	JSpaceCtes.h	/^  void SetSpeedSystem(double v){ SpeedSystem=v; }$/;"	f	class:JSpaceCtes	access:public	signature:(double v)
SetSpeedSystemAuto	JSpaceCtes.h	/^  void SetSpeedSystemAuto(bool on){ SpeedSystemAuto=on; }$/;"	f	class:JSpaceCtes	access:public	signature:(bool on)
SetStreamPrinting	tinyxml.h	/^    void SetStreamPrinting()                        { indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
SetTabSize	tinyxml.h	/^    void SetTabSize( int _tabsize )     { tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
SetTime	JBlockSizeAuto.h	/^  void SetTime(unsigned ct,float t){ if(int(ct)<BsNum)Times[ct]=t; }$/;"	f	class:JBlockSizeAutoKer	access:public	signature:(unsigned ct,float t)
SetTimeMod	JSphMotion.h	/^  void SetTimeMod(double timemod){ TimeMod=timemod; };$/;"	f	class:JSphMotion	access:public	signature:(double timemod)
SetTimeMod	JWaveGen.h	/^  void SetTimeMod(double timemod){ TimeMod=timemod; };$/;"	f	class:JWaveGen	access:public	signature:(double timemod)
SetTimeStep	JGaugeItem.cpp	/^void JGaugeItem::SetTimeStep(double timestep){$/;"	f	class:JGaugeItem	signature:(double timestep)
SetTimeStep	JGaugeItem.h	/^  void SetTimeStep(double timestep);$/;"	p	class:JGaugeItem	access:protected	signature:(double timestep)
SetUserData	tinyxml.h	/^    void  SetUserData( void* user )         { userData = user; }    \/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
SetValue	JLinearValue.cpp	/^void JLinearValue::SetValue(unsigned idx,unsigned cvalue,double value){$/;"	f	class:JLinearValue	signature:(unsigned idx,unsigned cvalue,double value)
SetValue	JLinearValue.h	/^  void SetValue(unsigned idx,unsigned cvalue,double value);$/;"	p	class:JLinearValue	access:public	signature:(unsigned idx,unsigned cvalue,double value)
SetValue	JSpaceEParms.cpp	/^void JSpaceEParms::SetValue(const std::string &key,const std::string &value){$/;"	f	class:JSpaceEParms	signature:(const std::string &key,const std::string &value)
SetValue	JSpaceEParms.h	/^  void SetValue(const std::string &key,const std::string &value);$/;"	p	class:JSpaceEParms	access:public	signature:(const std::string &key,const std::string &value)
SetValue	JSpaceProperties.cpp	/^void JSpacePropValue::SetValue(std::string v){$/;"	f	class:JSpacePropValue	signature:(std::string v)
SetValue	JSpaceProperties.h	/^  void SetValue(std::string v);$/;"	p	class:JSpacePropValue	access:public	signature:(std::string v)
SetValue	tinyxml.h	/^    void SetValue( const char* _value ) { value = _value; }             \/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
SetValue	tinyxml.h	/^    void SetValue( const std::string& _value )  { value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
SetValue	tinyxml.h	/^    void SetValue( const std::string& _value )  { value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
SetValue	tinyxml.h	/^    void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
SetvBool	JBinaryData.cpp	/^void JBinaryData::SetvBool(const std::string &name,bool v){$/;"	f	class:JBinaryData	signature:(const std::string &name,bool v)
SetvBool	JBinaryData.h	/^  void SetvBool   (const std::string &name,bool v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,bool v)
SetvChar	JBinaryData.cpp	/^void JBinaryData::SetvChar(const std::string &name,char v){$/;"	f	class:JBinaryData	signature:(const std::string &name,char v)
SetvChar	JBinaryData.h	/^  void SetvChar   (const std::string &name,char v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,char v)
SetvDouble	JBinaryData.cpp	/^void JBinaryData::SetvDouble(const std::string &name,double v){$/;"	f	class:JBinaryData	signature:(const std::string &name,double v)
SetvDouble	JBinaryData.h	/^  void SetvDouble (const std::string &name,double v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,double v)
SetvDouble3	JBinaryData.cpp	/^void JBinaryData::SetvDouble3(const std::string &name,tdouble3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tdouble3 v)
SetvDouble3	JBinaryData.h	/^  void SetvDouble3(const std::string &name,tdouble3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tdouble3 v)
SetvFloat	JBinaryData.cpp	/^void JBinaryData::SetvFloat(const std::string &name,float v){$/;"	f	class:JBinaryData	signature:(const std::string &name,float v)
SetvFloat	JBinaryData.h	/^  void SetvFloat  (const std::string &name,float v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,float v)
SetvFloat3	JBinaryData.cpp	/^void JBinaryData::SetvFloat3(const std::string &name,tfloat3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tfloat3 v)
SetvFloat3	JBinaryData.h	/^  void SetvFloat3 (const std::string &name,tfloat3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tfloat3 v)
SetvInt	JBinaryData.cpp	/^void JBinaryData::SetvInt(const std::string &name,int v){$/;"	f	class:JBinaryData	signature:(const std::string &name,int v)
SetvInt	JBinaryData.h	/^  void SetvInt    (const std::string &name,int v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,int v)
SetvInt3	JBinaryData.cpp	/^void JBinaryData::SetvInt3(const std::string &name,tint3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tint3 v)
SetvInt3	JBinaryData.h	/^  void SetvInt3   (const std::string &name,tint3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tint3 v)
SetvLlong	JBinaryData.cpp	/^void JBinaryData::SetvLlong(const std::string &name,llong v){$/;"	f	class:JBinaryData	signature:(const std::string &name,llong v)
SetvLlong	JBinaryData.h	/^  void SetvLlong  (const std::string &name,llong v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,llong v)
SetvShort	JBinaryData.cpp	/^void JBinaryData::SetvShort(const std::string &name,short v){$/;"	f	class:JBinaryData	signature:(const std::string &name,short v)
SetvShort	JBinaryData.h	/^  void SetvShort  (const std::string &name,short v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,short v)
SetvText	JBinaryData.cpp	/^void JBinaryData::SetvText(const std::string &name,const std::string &v){$/;"	f	class:JBinaryData	signature:(const std::string &name,const std::string &v)
SetvText	JBinaryData.h	/^  void SetvText   (const std::string &name,const std::string &v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,const std::string &v)
SetvUchar	JBinaryData.cpp	/^void JBinaryData::SetvUchar(const std::string &name,unsigned char v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned char v)
SetvUchar	JBinaryData.h	/^  void SetvUchar  (const std::string &name,unsigned char v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned char v)
SetvUint	JBinaryData.cpp	/^void JBinaryData::SetvUint(const std::string &name,unsigned v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned v)
SetvUint	JBinaryData.h	/^  void SetvUint   (const std::string &name,unsigned v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned v)
SetvUint3	JBinaryData.cpp	/^void JBinaryData::SetvUint3(const std::string &name,tuint3 v){$/;"	f	class:JBinaryData	signature:(const std::string &name,tuint3 v)
SetvUint3	JBinaryData.h	/^  void SetvUint3  (const std::string &name,tuint3 v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,tuint3 v)
SetvUllong	JBinaryData.cpp	/^void JBinaryData::SetvUllong(const std::string &name,ullong v){$/;"	f	class:JBinaryData	signature:(const std::string &name,ullong v)
SetvUllong	JBinaryData.h	/^  void SetvUllong (const std::string &name,ullong v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,ullong v)
SetvUshort	JBinaryData.cpp	/^void JBinaryData::SetvUshort(const std::string &name,unsigned short v){$/;"	f	class:JBinaryData	signature:(const std::string &name,unsigned short v)
SetvUshort	JBinaryData.h	/^  void SetvUshort (const std::string &name,unsigned short v);$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name,unsigned short v)
ShBox	JFormatFiles2.h	/^    ,ShBox$/;"	e	enum:JFormatFiles2::__anon14
ShLine	JFormatFiles2.h	/^     ShLine$/;"	e	enum:JFormatFiles2::__anon14
ShNull	JFormatFiles2.h	/^    ,ShNull $/;"	e	enum:JFormatFiles2::__anon14
ShQuad	JFormatFiles2.h	/^    ,ShQuad$/;"	e	enum:JFormatFiles2::__anon14
ShSphere	JFormatFiles2.h	/^    ,ShSphere$/;"	e	enum:JFormatFiles2::__anon14
ShTriangle	JFormatFiles2.h	/^    ,ShTriangle$/;"	e	enum:JFormatFiles2::__anon14
ShiftCoef	JSph.h	/^  float ShiftCoef;            \/\/\/<Coefficient for shifting computation.$/;"	m	class:JSph	access:protected
ShiftDetectc	JSphCpu.h	/^  float *ShiftDetectc;   \/\/\/<Used to detect free surface with Shifting.$/;"	m	class:JSphCpu	access:protected
ShiftDetectg	JSphGpu.h	/^  float *ShiftDetectg;  \/\/\/<Used to detect free surface with Shifting.$/;"	m	class:JSphGpu	access:protected
ShiftPosc	JSphCpu.h	/^  tfloat3 *ShiftPosc;    \/\/\/<Particle displacement using Shifting.$/;"	m	class:JSphCpu	access:protected
ShiftPosg	JSphGpu.h	/^  float3 *ShiftPosg;    \/\/\/<Particle displacement using Shifting.$/;"	m	class:JSphGpu	access:protected
ShiftTFS	JSph.h	/^  float ShiftTFS;             \/\/\/<Threshold to detect free surface. Typically 1.5 for 2D and 2.75 for 3D (def=0).$/;"	m	class:JSph	access:protected
Shifting	JCfgRun.h	/^  int Shifting;  \/\/\/<Shifting mode -1:no defined, 0:none, 1:nobound, 2:nofixed, 3:full$/;"	m	class:JCfgRun	access:public
Short16	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
ShortFileName	Functions.cpp	/^std::string ShortFileName(const std::string &file,unsigned maxlen,bool withpoints){$/;"	f	namespace:fun	signature:(const std::string &file,unsigned maxlen,bool withpoints)
ShortFileName	Functions.h	/^std::string ShortFileName(const std::string &file,unsigned maxlen,bool withpoints=true);$/;"	p	namespace:fun	signature:(const std::string &file,unsigned maxlen,bool withpoints=true)
ShowResume	JSph.cpp	/^void JSph::ShowResume(bool stop,float tsim,float ttot,bool all,std::string infoplus){$/;"	f	class:JSph	signature:(bool stop,float tsim,float ttot,bool all,std::string infoplus)
ShowResume	JSph.h	/^  void ShowResume(bool stop,float tsim,float ttot,bool all,std::string infoplus);$/;"	p	class:JSph	access:protected	signature:(bool stop,float tsim,float ttot,bool all,std::string infoplus)
ShowTimers	JSphCpu.cpp	/^void JSphCpu::ShowTimers(bool onlyfile){$/;"	f	class:JSphCpu	signature:(bool onlyfile)
ShowTimers	JSphCpu.h	/^  void ShowTimers(bool onlyfile=false);$/;"	p	class:JSphCpu	access:protected	signature:(bool onlyfile=false)
ShowTimers	JSphGpu.cpp	/^void JSphGpu::ShowTimers(bool onlyfile){$/;"	f	class:JSphGpu	signature:(bool onlyfile)
ShowTimers	JSphGpu.h	/^  void ShowTimers(bool onlyfile=false);$/;"	p	class:JSphGpu	access:protected	signature:(bool onlyfile=false)
ShowsVersion	main.cpp	/^bool ShowsVersion(int argc,char** argv){$/;"	f	signature:(int argc,char** argv)
Simple	JSpaceProperties.h	/^  bool Simple;                         \/\/\/<Indicates that value is in line, not item. $/;"	m	class:JSpacePropValue	access:private
Simulate2D	JGaugeItem.h	/^  bool Simulate2D;     \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JGaugeItem	access:protected
Simulate2D	JGaugeSystem.h	/^  bool Simulate2D;        \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JGaugeSystem	access:private
Simulate2D	JPartsLoad4.h	/^  bool Simulate2D;         \/\/\/<Indicates 2D simulation.$/;"	m	class:JPartsLoad4	access:protected
Simulate2D	JSph.h	/^  bool Simulate2D;       \/\/\/<Toggles 2D simulation (cancels forces in Y axis). | Activa o desactiva simulacion en 2D (anula fuerzas en eje Y).$/;"	m	class:JSph	access:protected
Simulate2D	JSphPartsInit.h	/^  const bool Simulate2D;         \/\/\/<Indicates 2D simulation.$/;"	m	class:JSphPartsInit	access:public
Simulate2DPosY	JGaugeSystem.h	/^  double Simulate2DPosY;  \/\/\/<Y value in 2D simulations.                        | Valor de Y en simulaciones 2D.$/;"	m	class:JGaugeSystem	access:private
Simulate2DPosY	JPartsLoad4.h	/^  double Simulate2DPosY;   \/\/\/<Y value in 2D simulations.$/;"	m	class:JPartsLoad4	access:protected
Simulate2DPosY	JSph.h	/^  double Simulate2DPosY; \/\/\/<Y value in 2D simulations.                        | Valor de Y en simulaciones 2D.$/;"	m	class:JSph	access:protected
Simulate2DPosY	JSphPartsInit.h	/^  const double Simulate2DPosY;   \/\/\/<Y value in 2D simulations.$/;"	m	class:JSphPartsInit	access:public
Size	JBinaryData.h	/^  unsigned Size;          \/\/\/<Numero de elementos para los que hay memoria reservada. Number of elements for which there is reserved memory.$/;"	m	class:JBinaryDataArray	access:private
Size	JLinearValue.h	/^  unsigned Size;$/;"	m	class:JLinearValue	access:protected
Size	JMotionMov.h	/^  unsigned Size;   \/\/-Posiciones reservadas para vectores$/;"	m	class:JMotionDataFile	access:private
Size	JPartsOut.h	/^  unsigned Size;$/;"	m	class:JPartsOut	access:protected
Size	JRadixSort.h	/^  unsigned Size;$/;"	m	class:JRadixSort	access:private
Size	JRangeFilter.h	/^  unsigned Size;             \/\/\/<Number of intervals allocated in \\ref Ranges.$/;"	m	class:JRangeFilter	access:private
Size	JReadDatafile.h	/^  unsigned Size;         \/\/\/< Size of data.$/;"	m	class:JReadDatafile	access:private
Size	JSphDtFixed.h	/^  unsigned Size;$/;"	m	class:JSphDtFixed	access:protected
Size	JSphMk.h	/^  unsigned Size()const{ return(MkListSize); }$/;"	f	class:JSphMk	access:public	signature:() const
Size	JSphVisco.h	/^  unsigned Size;$/;"	m	class:JSphVisco	access:protected
Size	tinyxml.h	/^    size_t Size()                                   { return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
SizeAllDts	JSaveDt.h	/^  static const unsigned SizeAllDts=1000;$/;"	m	class:JSaveDt	access:private
SizeAuxMem	JCellDivGpu.h	/^  unsigned SizeAuxMem;$/;"	m	class:JCellDivGpu	access:protected
SizeBeginCell	JCellDivCpu.h	/^  ullong SizeBeginCell(ullong nct)const{ return((nct*2)+5+1); } \/\/-[BoundOk(nct),BoundIgnore(1),Fluid(nct),BoundOut(1),FluidOut(1),BoundOutIgnore(1),FluidOutIgnore(1),END(1)]$/;"	f	class:JCellDivCpu	access:protected	signature:(ullong nct) const
SizeBeginEndCell	JCellDivGpu.h	/^  ullong SizeBeginEndCell(ullong nct)const{ return((nct*2)+5); } \/\/-[BoundOk(nct),BoundIgnore(1),Fluid(nct),BoundOut(1),FluidOut(1),BoundOutIgnore(1),FluidOutIgnore(1)]$/;"	f	class:JCellDivGpu	access:protected	signature:(ullong nct) const
SizeFile	JReadDatafile.h	/^  unsigned SizeFile;     \/\/\/< Size of file.$/;"	m	class:JReadDatafile	access:private
SizeFmt	JSaveCsv2.h	/^  static const unsigned SizeFmt=18;  \/\/\/<Number of different formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
SizeIni	JPartsOut.h	/^  unsigned SizeIni;$/;"	m	class:JPartsOut	access:protected
SizeNct	JCellDivCpu.h	/^  unsigned SizeNct;$/;"	m	class:JCellDivCpu	access:protected
SizeNct	JCellDivGpu.h	/^  unsigned SizeNct;$/;"	m	class:JCellDivGpu	access:protected
SizeNp	JCellDivCpu.h	/^  unsigned SizeNp;$/;"	m	class:JCellDivCpu	access:protected
SizeNp	JCellDivGpu.h	/^  unsigned SizeNp;$/;"	m	class:JCellDivGpu	access:protected
SizeOfType	JBinaryData.cpp	/^size_t JBinaryDataDef::SizeOfType(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
SizeOfType	JBinaryData.h	/^  static size_t SizeOfType(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
SizeOfType	TypesDef.h	/^inline unsigned SizeOfType(TpTypeData type){$/;"	f	signature:(TpTypeData type)
SizeValues	JMeanValues.h	/^  unsigned SizeValues;$/;"	m	class:JMeanMoving	access:protected
SizeValues	JSaveDt.h	/^  static const unsigned SizeValues=100; \/\/\/<Maximum number of intervals to be buffered. | Numero maximo de intervalos a almacenar en buffer.$/;"	m	class:JSaveDt	access:private
SizeValuesSave	JSaveDt.h	/^  unsigned SizeValuesSave;$/;"	m	class:JSaveDt	access:private
SkipWhiteSpace	tinyxml.h	/^    static const char* SkipWhiteSpace( const char*, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char*, TiXmlEncoding encoding )
SkipWhiteSpace	tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
Sort	JCellDivGpu_ker.cu	/^void Sort(unsigned* keys,unsigned* values,unsigned size,bool stable){$/;"	f	namespace:cudiv	signature:(unsigned* keys,unsigned* values,unsigned size,bool stable)
Sort	JCellDivGpu_ker.h	/^void Sort(unsigned* keys,unsigned* values,unsigned size,bool stable);$/;"	p	namespace:cudiv	signature:(unsigned* keys,unsigned* values,unsigned size,bool stable)
Sort	JRadixSort.cpp	/^void JRadixSort::Sort(bool makeindex,unsigned size,ullong *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(bool makeindex,unsigned size,ullong *data,unsigned nbits)
Sort	JRadixSort.cpp	/^void JRadixSort::Sort(bool makeindex,unsigned size,unsigned *data,unsigned nbits){$/;"	f	class:JRadixSort	signature:(bool makeindex,unsigned size,unsigned *data,unsigned nbits)
Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,ullong *data){ Sort(makeindex,size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,ullong *data)
Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,ullong *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,ullong *data,unsigned nbits)
Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,unsigned *data){ Sort(makeindex,size,data,CalcNbits(size,data)); }$/;"	f	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,unsigned *data)
Sort	JRadixSort.h	/^  void Sort(bool makeindex,unsigned size,unsigned *data,unsigned nbits);$/;"	p	class:JRadixSort	access:public	signature:(bool makeindex,unsigned size,unsigned *data,unsigned nbits)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(float *vec){$/;"	f	class:JCellDivCpu	signature:(float *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tdouble3 *vec){$/;"	f	class:JCellDivCpu	signature:(tdouble3 *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tfloat3 *vec){$/;"	f	class:JCellDivCpu	signature:(tfloat3 *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tfloat4 *vec){$/;"	f	class:JCellDivCpu	signature:(tfloat4 *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(tsymatrix3f *vec){$/;"	f	class:JCellDivCpu	signature:(tsymatrix3f *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(unsigned *vec){$/;"	f	class:JCellDivCpu	signature:(unsigned *vec)
SortArray	JCellDivCpu.cpp	/^void JCellDivCpu::SortArray(word *vec){$/;"	f	class:JCellDivCpu	signature:(word *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(float *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(float *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(tdouble3 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tdouble3 *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(tfloat3 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tfloat3 *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(tfloat4 *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tfloat4 *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(tsymatrix3f *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(tsymatrix3f *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(unsigned *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(unsigned *vec)
SortArray	JCellDivCpu.h	/^  void SortArray(word *vec);$/;"	p	class:JCellDivCpu	access:public	signature:(word *vec)
SortBasicArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortBasicArrays(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop$/;"	f	class:JCellDivGpu	signature:(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
SortBasicArrays	JCellDivGpu.h	/^  void SortBasicArrays(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2);$/;"	p	class:JCellDivGpu	access:public	signature:(const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const byte *data,byte *result){ TSortData<byte>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const byte *data,byte *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const double *data,double *result){ TSortData<double>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const double *data,double *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const float *data,float *result){ TSortData<float>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const float *data,float *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const int *data,int *result){ TSortData<int>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const int *data,int *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tdouble2 *data,tdouble2 *result){ TSortData<tdouble2>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tdouble2 *data,tdouble2 *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tdouble3 *data,tdouble3 *result){ TSortData<tdouble3>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tdouble3 *data,tdouble3 *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat2 *data,tfloat2 *result){ TSortData<tfloat2>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat2 *data,tfloat2 *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat3 *data,tfloat3 *result){ TSortData<tfloat3>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat3 *data,tfloat3 *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const tfloat4 *data,tfloat4 *result){ TSortData<tfloat4>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const tfloat4 *data,tfloat4 *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const unsigned *data,unsigned *result){ TSortData<unsigned>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const unsigned *data,unsigned *result)
SortData	JRadixSort.cpp	/^void JRadixSort::SortData(unsigned size,const word *data,word *result){ TSortData<word>(size,data,result); }$/;"	f	class:JRadixSort	signature:(unsigned size,const word *data,word *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const byte *data,byte *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const byte *data,byte *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const double *data,double *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const double *data,double *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const float *data,float *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const float *data,float *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const int *data,int *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const int *data,int *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const tdouble2 *data,tdouble2 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tdouble2 *data,tdouble2 *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const tdouble3 *data,tdouble3 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tdouble3 *data,tdouble3 *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat2 *data,tfloat2 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat2 *data,tfloat2 *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat3 *data,tfloat3 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat3 *data,tfloat3 *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const tfloat4 *data,tfloat4 *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const tfloat4 *data,tfloat4 *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const unsigned *data,unsigned *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const unsigned *data,unsigned *result)
SortData	JRadixSort.h	/^  void SortData(unsigned size,const word *data,word *result);$/;"	p	class:JRadixSort	access:public	signature:(unsigned size,const word *data,word *result)
SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2){$/;"	f	class:JCellDivGpu	signature:(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const float *a,const float *b,float *a2,float *b2){$/;"	f	class:JCellDivGpu	signature:(const float *a,const float *b,float *a2,float *b2)
SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const float4 *a,float4 *a2){$/;"	f	class:JCellDivGpu	signature:(const float4 *a,float4 *a2)
SortDataArrays	JCellDivGpu.cpp	/^void JCellDivGpu::SortDataArrays(const tsymatrix3f *a,tsymatrix3f *a2){$/;"	f	class:JCellDivGpu	signature:(const tsymatrix3f *a,tsymatrix3f *a2)
SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2);$/;"	p	class:JCellDivGpu	access:public	signature:(const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const float *a,const float *b,float *a2,float *b2);$/;"	p	class:JCellDivGpu	access:public	signature:(const float *a,const float *b,float *a2,float *b2)
SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const float4 *a,float4 *a2);$/;"	p	class:JCellDivGpu	access:public	signature:(const float4 *a,float4 *a2)
SortDataArrays	JCellDivGpu.h	/^  void SortDataArrays(const tsymatrix3f *a,tsymatrix3f *a2);$/;"	p	class:JCellDivGpu	access:public	signature:(const tsymatrix3f *a,tsymatrix3f *a2)
SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart ,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
SortFilesList	JLog2.cpp	/^bool SortFilesList(JLog2::StFileInfo a,JLog2::StFileInfo b){$/;"	f	signature:(JLog2::StFileInfo a,JLog2::StFileInfo b)
SortPart	JCellDivCpu.h	/^  unsigned *SortPart;$/;"	m	class:JCellDivCpu	access:protected
SortPart	JCellDivGpu.h	/^  unsigned *SortPart;$/;"	m	class:JCellDivGpu	access:protected
SortParticles	JPartsLoad4.cpp	/^template<typename T> T* JPartsLoad4::SortParticles(const unsigned *vsort,unsigned count,T *v)const{$/;"	f	class:JPartsLoad4	signature:(const unsigned *vsort,unsigned count,T *v) const
SortParticles	JPartsLoad4.cpp	/^void JPartsLoad4::SortParticles(){$/;"	f	class:JPartsLoad4	signature:()
SortParticles	JPartsLoad4.h	/^  template<typename T> T* SortParticles(const unsigned *vsort,unsigned count,T *v)const;$/;"	p	class:JPartsLoad4	access:protected	signature:(const unsigned *vsort,unsigned count,T *v) const
SortParticles	JPartsLoad4.h	/^  void SortParticles();$/;"	p	class:JPartsLoad4	access:protected	signature:()
SortRanges	JRangeFilter.cpp	/^void JRangeFilter::SortRanges(){$/;"	f	class:JRangeFilter	signature:()
SortRanges	JRangeFilter.h	/^  void SortRanges();$/;"	p	class:JRangeFilter	access:private	signature:()
SortStep	JRadixSort.cpp	/^template<class T> void JRadixSort::SortStep(unsigned ck,const T* data,T* data2){$/;"	f	class:JRadixSort	signature:(unsigned ck,const T* data,T* data2)
SortStep	JRadixSort.h	/^  template<class T> void SortStep(unsigned ck,const T* data,T* data2);$/;"	p	class:JRadixSort	access:private	signature:(unsigned ck,const T* data,T* data2)
SortStepIndex	JRadixSort.cpp	/^template<class T> void JRadixSort::SortStepIndex(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2){$/;"	f	class:JRadixSort	signature:(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2)
SortStepIndex	JRadixSort.h	/^  template<class T> void SortStepIndex(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2);$/;"	p	class:JRadixSort	access:private	signature:(unsigned ck,const T* data,T* data2,const unsigned *index,unsigned *index2)
Sp_Movedt	JMotionList.cpp	/^void JMotionListData::Sp_Movedt(const tdouble3 &mvsimple,double dt){$/;"	f	class:JMotionListData	signature:(const tdouble3 &mvsimple,double dt)
Sp_Movedt	JMotionList.cpp	/^void JMotionListData::Sp_Movedt(const tmatrix4d &mvmatrix,double dt){$/;"	f	class:JMotionListData	signature:(const tmatrix4d &mvmatrix,double dt)
Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(const tdouble3  &mvsimple,double dt);$/;"	p	class:JMotionListData	access:public	signature:(const tdouble3 &mvsimple,double dt)
Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(const tmatrix4d &mvmatrix,double dt);$/;"	p	class:JMotionListData	access:public	signature:(const tmatrix4d &mvmatrix,double dt)
Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(unsigned ref,const tdouble3  &mvsimple,double dt){  MotionData[ref].Sp_Movedt(mvsimple,dt);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tdouble3 &mvsimple,double dt)
Sp_Movedt	JMotionList.h	/^  void Sp_Movedt(unsigned ref,const tmatrix4d &mvmatrix,double dt){  MotionData[ref].Sp_Movedt(mvmatrix,dt);  }$/;"	f	class:JMotionList	access:public	signature:(unsigned ref,const tmatrix4d &mvmatrix,double dt)
SpecialConfig	JTimeOut.h	/^  bool SpecialConfig; \/\/\/<Configuration loaded from XML file in special section.$/;"	m	class:JTimeOut	access:protected
SpeedSound	JSpaceCtes.h	/^  double SpeedSound;      \/\/\/<Speed of sound to use in the simulation (by default speedofsound=coefsound*speedsystem).$/;"	m	class:JSpaceCtes	access:private
SpeedSoundAuto	JSpaceCtes.h	/^  bool SpeedSoundAuto;    \/\/\/<Activates the automatic computation of SpeedSound.$/;"	m	class:JSpaceCtes	access:private
SpeedSystem	JSpaceCtes.h	/^  double SpeedSystem;     \/\/\/<Maximum system speed.$/;"	m	class:JSpaceCtes	access:private
SpeedSystemAuto	JSpaceCtes.h	/^  bool SpeedSystemAuto;   \/\/\/<Activates the automatic computation of SpeedSystem.$/;"	m	class:JSpaceCtes	access:private
SphMotion	JSph.h	/^  JSphMotion *SphMotion;      \/\/\/<Manages moving objects. It is NULL when there are not moving objects.$/;"	m	class:JSph	access:protected
SplitsOpts	JCfgRun.cpp	/^void JCfgRun::SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull$/;"	f	class:JCfgRun	signature:(const std::string &opt,std::string &txword,std::string &txoptfull ,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4) const
SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull) const
SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2) const
SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3)const{$/;"	f	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3) const
SplitsOpts	JCfgRun.h	/^  void SplitsOpts(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4)const;$/;"	p	class:JCfgRun	access:protected	signature:(const std::string &opt,std::string &txword,std::string &txoptfull,std::string &txopt1,std::string &txopt2,std::string &txopt3,std::string &txopt4) const
Splitting	JPartDataHead.h	/^  bool Splitting;        \/\/\/<Use of Splitting.$/;"	m	class:JPartDataHead	access:private
Splitting	JSpaceParts.h	/^  const bool Splitting;$/;"	m	class:JSpacePartsGetMk	access:private
SpsBlin	JSph.h	/^  float SpsBlin;             \/\/\/<Blin constant used in the SPS turbulence model.$/;"	m	class:JSph	access:protected
SpsGradvelc	JSphCpu.h	/^  tsymatrix3f *SpsGradvelc;   \/\/\/<Velocity gradients.$/;"	m	class:JSphCpu	access:protected
SpsGradvelg	JSphGpu.h	/^  tsymatrix3f *SpsGradvelg;   \/\/\/<Velocity gradients.$/;"	m	class:JSphGpu	access:protected
SpsSmag	JSph.h	/^  float SpsSmag;             \/\/\/<Smagorinsky constant used in SPS turbulence model.$/;"	m	class:JSph	access:protected
SpsTauc	JSphCpu.h	/^  tsymatrix3f *SpsTauc;       \/\/\/<SPS sub-particle stress tensor.$/;"	m	class:JSphCpu	access:protected
SpsTaug	JSphGpu.h	/^  tsymatrix3f *SpsTaug;       \/\/\/<SPS sub-particle stress tensor.$/;"	m	class:JSphGpu	access:protected
StBlockSizes	JSphGpu.h	/^  }StBlockSizes;$/;"	t	class:JSphGpu	typeref:struct:JSphGpu::__anon31	access:public
StConstants	JSpaceCtes.h	/^  }StConstants;$/;"	t	class:JSpaceCtes	typeref:struct:JSpaceCtes::StrConstants	access:public
StCteInteraction	JSphGpu_ker.h	/^}StCteInteraction; $/;"	t	typeref:struct:__anon32
StCubicCte	JSph.h	/^  }StCubicCte;$/;"	t	class:JSph	typeref:struct:JSph::__anon29	access:public
StDamping	JDamping.h	/^  }StDamping;$/;"	t	class:JDamping	typeref:struct:JDamping::__anon9	access:public
StDefault	JGaugeItem.h	/^  }StDefault;$/;"	t	class:JGaugeItem	typeref:struct:JGaugeItem::__anon16	access:public
StDemData	Types.h	/^}StDemData;$/;"	t	typeref:struct:__anon45
StFileInfo	JLog2.h	/^  }StFileInfo;$/;"	t	class:JLog2	typeref:struct:JLog2::StrFileInfo	access:public
StFloatingData	Types.h	/^}StFloatingData;$/;"	t	typeref:struct:__anon42
StFtoForces	Types.h	/^}StFtoForces;$/;"	t	typeref:struct:__anon43
StFtoForcesRes	Types.h	/^}StFtoForcesRes;$/;"	t	typeref:struct:__anon44
StGaugeForceRes	JGaugeItem.h	/^  }StGaugeForceRes;$/;"	t	class:JGaugeForce	typeref:struct:JGaugeForce::StrGaugeForceRes	access:public
StGaugeMaxzRes	JGaugeItem.h	/^  }StGaugeMaxzRes;$/;"	t	class:JGaugeMaxZ	typeref:struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
StGaugeSwlRes	JGaugeItem.h	/^  }StGaugeSwlRes;$/;"	t	class:JGaugeSwl	typeref:struct:JGaugeSwl::StrGaugeSwlRes	access:public
StGaugeVelRes	JGaugeItem.h	/^  }StGaugeVelRes;$/;"	t	class:JGaugeVelocity	typeref:struct:JGaugeVelocity::StrGaugeVelRes	access:public
StGpuInfo	FunctionsCuda.h	/^}StGpuInfo;$/;"	t	namespace:fcuda	typeref:struct:fcuda::StrGpuInfo
StHeadFmtBin	JBinaryData.h	/^  }StHeadFmtBin;\/\/-sizeof(64)$/;"	t	class:JBinaryData	typeref:struct:JBinaryData::__anon6	access:private
StInfoPartPlus	JSph.h	/^  }StInfoPartPlus;$/;"	t	class:JSph	typeref:struct:JSph::__anon30	access:public
StKerInfo	JSphGpu_ker.h	/^}StKerInfo; $/;"	t	typeref:struct:__anon33
StPeriodic	JPeriodicDef.h	/^}StPeriodic;$/;"	t	typeref:struct:StrPeriodic
StPropertyFile	JSpaceProperties.h	/^  }StPropertyFile;$/;"	t	class:JSpaceProperties	typeref:struct:JSpaceProperties::__anon28	access:private
StRect3d	FunctionsMath.h	/^}StRect3d;$/;"	t	namespace:fmath	typeref:struct:fmath::__anon2
StScalarData	JFormatFiles2.h	/^  }StScalarData;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::__anon12	access:public
StShapeData	JFormatFiles2.h	/^  }StShapeData;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::StrShapeData	access:public
StShapeSpring	JFormatFiles2.h	/^  }StShapeSpring;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::StrShapeSpring	access:public
StSphTimerCpu	JSphTimersCpu.h	/^}StSphTimerCpu; $/;"	t	typeref:struct:__anon37
StSphTimerGpu	JSphTimersGpu.h	/^}StSphTimerGpu; $/;"	t	typeref:struct:__anon39
StStatistics	JFormatFiles2.h	/^  }StStatistics;$/;"	t	class:JFormatFiles2	typeref:struct:JFormatFiles2::__anon13	access:public
StSummaryData	JSpaceParts.h	/^  }StSummaryData;$/;"	t	class:JSpaceParts	typeref:struct:JSpaceParts::__anon26	access:public
StTimeOut	JTimeOut.h	/^  }StTimeOut;$/;"	t	class:JTimeOut	typeref:struct:JTimeOut::__anon41	access:protected
StValue	JBinaryData.h	/^  }StValue;$/;"	t	class:JBinaryData	typeref:struct:JBinaryData::__anon7	access:public
StValue	JSaveDt.h	/^  }StValue;$/;"	t	class:JSaveDt	typeref:struct:JSaveDt::__anon24	access:public
Stable	JCellDivCpu.h	/^  const bool Stable;$/;"	m	class:JCellDivCpu	access:protected
Stable	JCellDivGpu.h	/^  const bool Stable;$/;"	m	class:JCellDivGpu	access:protected
Stable	JCfgRun.h	/^  bool Stable;$/;"	m	class:JCfgRun	access:public
Stable	JSph.h	/^  bool Stable;$/;"	m	class:JSph	access:protected
Stamp	tinyxmlparser.cpp	/^    void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
Stamp	tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
Standalone	tinyxml.h	/^    const char *Standalone() const      { return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Start	JMotionObj.h	/^  double Start,Finish;$/;"	m	class:JMotionMovActive	access:public
Start	JTimer.h	/^  void Start(){ Stopped=false; QueryPerformanceCounter(&CounterIni); Started=true; }$/;"	f	class:JTimer	access:public	signature:()
Start	JTimer.h	/^  void Start(){ Stopped=false; gettimeofday(&CounterIni,NULL); Started=true; }$/;"	f	class:JTimer	access:public	signature:()
Start	JTimerClock.h	/^  void Start(){ Stopped=false; CounterIni=clock(); }$/;"	f	class:JTimerClock	access:public	signature:()
Start	JTimerCuda.h	/^  void Start(){$/;"	f	class:JTimerCuda	access:public	signature:()
Started	JTimer.h	/^  bool Started,Stopped;$/;"	m	class:JTimer	access:private
StepsInterval	JBlockSizeAuto.h	/^  unsigned StepsInterval;$/;"	m	class:JBlockSizeAuto	access:protected
Stop	JTimer.h	/^  void Stop(){ if(Started){ QueryPerformanceCounter(&CounterEnd); Stopped=true; } }$/;"	f	class:JTimer	access:public	signature:()
Stop	JTimer.h	/^  void Stop(){if(Started){ gettimeofday(&CounterEnd,NULL); Stopped=true; } }$/;"	f	class:JTimer	access:public	signature:()
Stop	JTimerClock.h	/^  void Stop(){ CounterEnd=clock(); Stopped=true; }$/;"	f	class:JTimerClock	access:public	signature:()
Stop	JTimerCuda.h	/^  void Stop(){$/;"	f	class:JTimerCuda	access:public	signature:()
Stopped	JTimer.h	/^  bool Started,Stopped;$/;"	m	class:JTimer	access:private
Stopped	JTimerClock.h	/^  bool Stopped;$/;"	m	class:JTimerClock	access:private
Stopped	JTimerCuda.h	/^  bool Stopped;$/;"	m	class:JTimerCuda	access:private
StoreResult	JGaugeItem.cpp	/^void JGaugeForce::StoreResult(){$/;"	f	class:JGaugeForce	signature:()
StoreResult	JGaugeItem.cpp	/^void JGaugeMaxZ::StoreResult(){$/;"	f	class:JGaugeMaxZ	signature:()
StoreResult	JGaugeItem.cpp	/^void JGaugeSwl::StoreResult(){$/;"	f	class:JGaugeSwl	signature:()
StoreResult	JGaugeItem.cpp	/^void JGaugeVelocity::StoreResult(){$/;"	f	class:JGaugeVelocity	signature:()
StoreResult	JGaugeItem.h	/^  virtual void StoreResult()=0;$/;"	p	class:JGaugeItem	access:protected	signature:()
StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeForce	access:protected	signature:()
StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeMaxZ	access:protected	signature:()
StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeSwl	access:protected	signature:()
StoreResult	JGaugeItem.h	/^  void StoreResult();$/;"	p	class:JGaugeVelocity	access:protected	signature:()
Str	tinyxml.h	/^    const std::string& Str()                        { return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
StrAddSlashes	Functions.cpp	/^std::string StrAddSlashes(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrAddSlashes	Functions.h	/^std::string StrAddSlashes(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrConstants	JSpaceCtes.h	/^    StrConstants(){ Clear(); }$/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:()
StrConstants	JSpaceCtes.h	/^    StrConstants(bool vdata2d,tdouble3 vgravity,double vdp,double vcoefh,double vcoefhdp,double vhswl$/;"	f	struct:JSpaceCtes::StrConstants	access:public	signature:(bool vdata2d,tdouble3 vgravity,double vdp,double vcoefh,double vcoefhdp,double vhswl ,double vspeedsystem,double vcoefsound,double vspeedsound,double vgamma,double vrhop0 ,double vcteh,double vcteb,double vmassbound,double vmassfluid)
StrConstants	JSpaceCtes.h	/^  typedef struct StrConstants{$/;"	s	class:JSpaceCtes	access:public
StrCsvSep	Functions.cpp	/^std::string StrCsvSep(bool csvsepcoma,const std::string &cad){$/;"	f	namespace:fun	signature:(bool csvsepcoma,const std::string &cad)
StrCsvSep	Functions.h	/^std::string StrCsvSep(bool csvsepcoma,const std::string &cad);$/;"	p	namespace:fun	signature:(bool csvsepcoma,const std::string &cad)
StrFileError	Functions.cpp	/^std::string StrFileError(int error){$/;"	f	namespace:fun	signature:(int error)
StrFileError	Functions.h	/^std::string StrFileError(int error);$/;"	p	namespace:fun	signature:(int error)
StrFileInfo	JLog2.h	/^    StrFileInfo(const std::string &xfile,const std::string &xinfo){ file=xfile; info=xinfo; }$/;"	f	struct:JLog2::StrFileInfo	access:public	signature:(const std::string &xfile,const std::string &xinfo)
StrFileInfo	JLog2.h	/^  typedef struct StrFileInfo{$/;"	s	class:JLog2	access:public
StrFileToVector	Functions.cpp	/^int StrFileToVector(const std::string &file,std::vector<std::string> &lines){$/;"	f	namespace:fun	signature:(const std::string &file,std::vector<std::string> &lines)
StrFileToVector	Functions.h	/^int StrFileToVector(const std::string &file,std::vector<std::string> &lines);$/;"	p	namespace:fun	signature:(const std::string &file,std::vector<std::string> &lines)
StrGaugeForceRes	JGaugeItem.h	/^    StrGaugeForceRes(){ Reset(); }$/;"	f	struct:JGaugeForce::StrGaugeForceRes	access:public	signature:()
StrGaugeForceRes	JGaugeItem.h	/^  typedef struct StrGaugeForceRes{$/;"	s	class:JGaugeForce	access:public
StrGaugeMaxzRes	JGaugeItem.h	/^    StrGaugeMaxzRes(){ Reset(); }$/;"	f	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public	signature:()
StrGaugeMaxzRes	JGaugeItem.h	/^  typedef struct StrGaugeMaxzRes{$/;"	s	class:JGaugeMaxZ	access:public
StrGaugeSwlRes	JGaugeItem.h	/^    StrGaugeSwlRes(){ Reset(); }$/;"	f	struct:JGaugeSwl::StrGaugeSwlRes	access:public	signature:()
StrGaugeSwlRes	JGaugeItem.h	/^  typedef struct StrGaugeSwlRes{$/;"	s	class:JGaugeSwl	access:public
StrGaugeVelRes	JGaugeItem.h	/^    StrGaugeVelRes(){ Reset(); }$/;"	f	struct:JGaugeVelocity::StrGaugeVelRes	access:public	signature:()
StrGaugeVelRes	JGaugeItem.h	/^  typedef struct StrGaugeVelRes{$/;"	s	class:JGaugeVelocity	access:public
StrGpuInfo	FunctionsCuda.h	/^  StrGpuInfo(){ $/;"	f	struct:fcuda::StrGpuInfo	access:public	signature:()
StrGpuInfo	FunctionsCuda.h	/^typedef struct StrGpuInfo{$/;"	s	namespace:fcuda
StrLower	Functions.cpp	/^std::string StrLower(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrLower	Functions.h	/^std::string StrLower(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrOnlyChars	Functions.cpp	/^bool StrOnlyChars(const std::string &cad,const std::string &chars){$/;"	f	namespace:fun	signature:(const std::string &cad,const std::string &chars)
StrOnlyChars	Functions.h	/^bool StrOnlyChars(const std::string &cad,const std::string &chars);$/;"	p	namespace:fun	signature:(const std::string &cad,const std::string &chars)
StrPeriodic	JPeriodicDef.h	/^  StrPeriodic(){  Reset(); }$/;"	f	struct:StrPeriodic	access:public	signature:()
StrPeriodic	JPeriodicDef.h	/^  StrPeriodic(byte periactive,tdouble3 xinc,tdouble3 yinc,tdouble3 zinc){$/;"	f	struct:StrPeriodic	access:public	signature:(byte periactive,tdouble3 xinc,tdouble3 yinc,tdouble3 zinc)
StrPeriodic	JPeriodicDef.h	/^typedef struct StrPeriodic{$/;"	s
StrPeriodic::PeriMode	JPeriodicDef.h	/^  TpPeri PeriMode;$/;"	m	struct:StrPeriodic	access:public
StrPeriodic::PeriXinc	JPeriodicDef.h	/^  tdouble3 PeriXinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
StrPeriodic::PeriYinc	JPeriodicDef.h	/^  tdouble3 PeriYinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
StrPeriodic::PeriZinc	JPeriodicDef.h	/^  tdouble3 PeriZinc;   \/\/\/<Value that is added at the outer limit to modify coordinates.$/;"	m	struct:StrPeriodic	access:public
StrPeriodic::Reset	JPeriodicDef.h	/^  void Reset(){$/;"	f	struct:StrPeriodic	access:public	signature:()
StrPeriodic::StrPeriodic	JPeriodicDef.h	/^  StrPeriodic(){  Reset(); }$/;"	f	struct:StrPeriodic	access:public	signature:()
StrPeriodic::StrPeriodic	JPeriodicDef.h	/^  StrPeriodic(byte periactive,tdouble3 xinc,tdouble3 yinc,tdouble3 zinc){$/;"	f	struct:StrPeriodic	access:public	signature:(byte periactive,tdouble3 xinc,tdouble3 yinc,tdouble3 zinc)
StrRepeat	Functions.cpp	/^std::string StrRepeat(const std::string &cad,unsigned count){$/;"	f	namespace:fun	signature:(const std::string &cad,unsigned count)
StrRepeat	Functions.h	/^std::string StrRepeat(const std::string &cad,unsigned count);$/;"	p	namespace:fun	signature:(const std::string &cad,unsigned count)
StrReplace	Functions.cpp	/^std::string StrReplace(const std::string &cad,const std::string &key,const std::string &newcad){$/;"	f	namespace:fun	signature:(const std::string &cad,const std::string &key,const std::string &newcad)
StrReplace	Functions.h	/^std::string StrReplace(const std::string &cad,const std::string &key,const std::string &newcad);$/;"	p	namespace:fun	signature:(const std::string &cad,const std::string &key,const std::string &newcad)
StrShapeData	JFormatFiles2.h	/^    StrShapeData(){ reset(); }$/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:()
StrShapeData	JFormatFiles2.h	/^    StrShapeData(TpShape tsh,int vi,float vf,tfloat3 p0=TFloat3(0)$/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:(TpShape tsh,int vi,float vf,tfloat3 p0=TFloat3(0) ,tfloat3 p1=TFloat3(0),tfloat3 p2=TFloat3(0),tfloat3 p3=TFloat3(0) ,tfloat3 p4=TFloat3(0),tfloat3 p5=TFloat3(0),tfloat3 p6=TFloat3(0) ,tfloat3 p7=TFloat3(0))
StrShapeData	JFormatFiles2.h	/^  typedef struct StrShapeData{$/;"	s	class:JFormatFiles2	access:public
StrShapeSpring	JFormatFiles2.h	/^    StrShapeSpring(){ reset(); }$/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:()
StrShapeSpring	JFormatFiles2.h	/^    StrShapeSpring(float xcornersout,float xcornersin,float xradius,float xlength,int xnside)$/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:(float xcornersout,float xcornersin,float xradius,float xlength,int xnside)
StrShapeSpring	JFormatFiles2.h	/^  typedef struct StrShapeSpring{$/;"	s	class:JFormatFiles2	access:public
StrSplit	Functions.cpp	/^std::string StrSplit(const std::string mark,std::string &text){$/;"	f	namespace:fun	signature:(const std::string mark,std::string &text)
StrSplit	Functions.h	/^std::string StrSplit(const std::string mark,std::string &text);$/;"	p	namespace:fun	signature:(const std::string mark,std::string &text)
StrSplitCount	Functions.cpp	/^unsigned StrSplitCount(const std::string mark,std::string text){$/;"	f	namespace:fun	signature:(const std::string mark,std::string text)
StrSplitCount	Functions.h	/^unsigned StrSplitCount(const std::string mark,std::string text);$/;"	p	namespace:fun	signature:(const std::string mark,std::string text)
StrSplitValue	Functions.cpp	/^std::string StrSplitValue(const std::string mark,std::string text,unsigned value){$/;"	f	namespace:fun	signature:(const std::string mark,std::string text,unsigned value)
StrSplitValue	Functions.h	/^std::string StrSplitValue(const std::string mark,std::string text,unsigned value);$/;"	p	namespace:fun	signature:(const std::string mark,std::string text,unsigned value)
StrStripSlashes	Functions.cpp	/^std::string StrStripSlashes(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrStripSlashes	Functions.h	/^std::string StrStripSlashes(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrToByte	Functions.h	/^inline byte     StrToByte   (const std::string &v){ return(byte(StrToInt(v)));          }$/;"	f	namespace:fun	signature:(const std::string &v)
StrToDouble	Functions.cpp	/^double StrToDouble(const std::string &v){$/;"	f	namespace:fun	signature:(const std::string &v)
StrToDouble	Functions.h	/^double   StrToDouble (const std::string &v);$/;"	p	namespace:fun	signature:(const std::string &v)
StrToDouble3	Functions.cpp	/^tdouble3 StrToDouble3(std::string v){$/;"	f	namespace:fun	signature:(std::string v)
StrToDouble3	Functions.h	/^tdouble3 StrToDouble3(std::string v);$/;"	p	namespace:fun	signature:(std::string v)
StrToFloat	Functions.h	/^inline float    StrToFloat  (const std::string &v){ return(float(StrToDouble(v)));      }$/;"	f	namespace:fun	signature:(const std::string &v)
StrToFloat3	Functions.h	/^inline tfloat3  StrToFloat3 (const std::string &v){ return(ToTFloat3(StrToDouble3(v))); }$/;"	f	namespace:fun	signature:(const std::string &v)
StrToInt	Functions.cpp	/^int StrToInt(const std::string &v){$/;"	f	namespace:fun	signature:(const std::string &v)
StrToInt	Functions.h	/^int      StrToInt    (const std::string &v);$/;"	p	namespace:fun	signature:(const std::string &v)
StrToInt3	Functions.cpp	/^tint3 StrToInt3(std::string v){$/;"	f	namespace:fun	signature:(std::string v)
StrToInt3	Functions.h	/^tint3    StrToInt3   (std::string v);$/;"	p	namespace:fun	signature:(std::string v)
StrToUint	Functions.h	/^inline unsigned StrToUint   (const std::string &v){ return(unsigned(StrToInt(v)));      }$/;"	f	namespace:fun	signature:(const std::string &v)
StrToUint3	Functions.h	/^inline tuint3   StrToUint3  (const std::string &v){ return(ToTUint3(StrToInt3(v)));     }$/;"	f	namespace:fun	signature:(const std::string &v)
StrToWord	Functions.h	/^inline word     StrToWord   (const std::string &v){ return(word(StrToInt(v)));          }$/;"	f	namespace:fun	signature:(const std::string &v)
StrTrim	Functions.cpp	/^std::string StrTrim(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrTrim	Functions.h	/^std::string StrTrim(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrTrimBegin	Functions.cpp	/^std::string StrTrimBegin(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrTrimBegin	Functions.h	/^std::string StrTrimBegin(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrTrimEnd	Functions.cpp	/^std::string StrTrimEnd(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrTrimEnd	Functions.h	/^std::string StrTrimEnd(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrTrimRepeated	Functions.cpp	/^std::string StrTrimRepeated(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrTrimRepeated	Functions.h	/^std::string StrTrimRepeated(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrUpper	Functions.cpp	/^std::string StrUpper(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
StrUpper	Functions.h	/^std::string StrUpper(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
StrVectorToFile	Functions.cpp	/^int StrVectorToFile(const std::string &file,const std::vector<std::string> &lines){$/;"	f	namespace:fun	signature:(const std::string &file,const std::vector<std::string> &lines)
StrVectorToFile	Functions.h	/^int StrVectorToFile(const std::string &file,const std::vector<std::string> &lines);$/;"	p	namespace:fun	signature:(const std::string &file,const std::vector<std::string> &lines)
StrWithoutChar	Functions.cpp	/^std::string StrWithoutChar(const std::string &cad,char let){$/;"	f	namespace:fun	signature:(const std::string &cad,char let)
StrWithoutChar	Functions.h	/^std::string StrWithoutChar(const std::string &cad,char let);$/;"	p	namespace:fun	signature:(const std::string &cad,char let)
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlComment	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDeclaration	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDocument	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlElement	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlText	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlUnknown	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream* in, TIXML_STRING* tag ) = 0;$/;"	p	class:TiXmlNode	access:protected	signature:( std::istream* in, TIXML_STRING* tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
StreamIn	tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
StreamTo	tinyxml.h	/^    static bool StreamTo( std::istream * in, int character, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamTo	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamWhiteSpace	tinyxml.h	/^    static bool StreamWhiteSpace( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
StreamWhiteSpace	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
StringEqual	tinyxml.h	/^    static bool StringEqual(    const char* p,$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
StringEqual	tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
SubName	JAppInfo.h	/^  std::string SubName;$/;"	m	class:JAppInfo	access:private
SubNames	JSpaceProperties.h	/^  std::vector<std::string> SubNames;   \/\/\/<Name of each subvalue when it is not simple. $/;"	m	class:JSpacePropValue	access:private
SubValues	JSpaceProperties.h	/^  std::vector<std::string> SubValues;  \/\/\/<Value of each subvalue when it is not simple. $/;"	m	class:JSpacePropValue	access:private
SubVer	JAppInfo.h	/^  std::string SubVer;$/;"	m	class:JAppInfo	access:private
Sum	JMatrix4.h	/^  void Sum(const JMatrix4 &m){$/;"	f	class:JMatrix4	access:public	signature:(const JMatrix4 &m)
SvData	JSph.h	/^  byte SvData;               \/\/\/<Combination of the TpSaveDat values.                            | Combinacion de valores TpSaveDat.                                                      $/;"	m	class:JSph	access:protected
SvDef	JCfgRun.h	/^  bool SvDef;$/;"	m	class:JCfgRun	access:protected
SvDomainVtk	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
SvDomainVtk	JSph.h	/^  bool SvDomainVtk;          \/\/\/<Stores VTK file with the domain of particles of each PART file. | Graba fichero vtk con el dominio de las particulas en cada Part. $/;"	m	class:JSph	access:protected
SvDouble	JSph.h	/^  bool SvDouble;     \/\/\/<Indicates whether Pos is saved as double in bi4 files. | Indica si en los ficheros bi4 se guarda Pos como double.$/;"	m	class:JSph	access:protected
SvRes	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
SvRes	JSph.h	/^  bool SvRes;                \/\/\/<Creates file with execution summary.                            | Graba fichero con resumen de ejecucion.$/;"	m	class:JSph	access:protected
SvTimers	JCfgRun.h	/^  bool SvRes,SvTimers,SvDomainVtk;$/;"	m	class:JCfgRun	access:public
SvTimers	JSph.h	/^  bool SvTimers;             \/\/\/<Computes the time for each process.                             | Obtiene tiempo para cada proceso.$/;"	m	class:JSph	access:protected
Sv_Binx	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
Sv_Csv	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
Sv_Info	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
Sv_Vtk	JCfgRun.h	/^  bool Sv_Binx,Sv_Info,Sv_Csv,Sv_Vtk;$/;"	m	class:JCfgRun	access:public
SymplecticDtPre	JPartsLoad4.h	/^  double SymplecticDtPre;        \/\/\/<Previous Dt to use with Symplectic.$/;"	m	class:JPartsLoad4	access:protected
SymplecticDtPre	JSph.h	/^  double SymplecticDtPre;  \/\/\/<Previous Dt to use with Symplectic.$/;"	m	class:JSph	access:protected
TBitsSize	JRadixSort.cpp	/^template<class T> unsigned JRadixSort::TBitsSize(T v,unsigned smax)const{$/;"	f	class:JRadixSort	signature:(T v,unsigned smax) const
TBitsSize	JRadixSort.h	/^  template<class T> unsigned TBitsSize(T v,unsigned smax)const;$/;"	p	class:JRadixSort	access:private	signature:(T v,unsigned smax) const
TCalcNbits	JRadixSort.cpp	/^template<class T> unsigned JRadixSort::TCalcNbits(unsigned size,const T *data)const{$/;"	f	class:JRadixSort	signature:(unsigned size,const T *data) const
TCalcNbits	JRadixSort.h	/^  template<class T> unsigned TCalcNbits(unsigned size,const T *data)const;$/;"	p	class:JRadixSort	access:private	signature:(unsigned size,const T *data) const
TDeltaSph	JSph.h	/^  TpDeltaSph TDeltaSph;       \/\/\/<Delta-SPH type: None, Basic or Dynamic.                                | Tipo de Delta-SPH: None, Basic o Dynamic. $/;"	m	class:JSph	access:protected
TDouble2	TypesDef.h	/^inline tdouble2 TDouble2(double v){ tdouble2 p={v,v}; return(p); }$/;"	f	signature:(double v)
TDouble2	TypesDef.h	/^inline tdouble2 TDouble2(double x,double y){ tdouble2 p={x,y}; return(p); }$/;"	f	signature:(double x,double y)
TDouble3	TypesDef.h	/^inline tdouble3 TDouble3(double v){ tdouble3 p={v,v,v}; return(p); }$/;"	f	signature:(double v)
TDouble3	TypesDef.h	/^inline tdouble3 TDouble3(double x,double y,double z){ tdouble3 p={x,y,z}; return(p); }$/;"	f	signature:(double x,double y,double z)
TDouble4	TypesDef.h	/^inline tdouble4 TDouble4(double v){ tdouble4 p={v,v,v,v}; return(p); }$/;"	f	signature:(double v)
TDouble4	TypesDef.h	/^inline tdouble4 TDouble4(double x,double y,double z,double w){ tdouble4 p={x,y,z,w}; return(p); }$/;"	f	signature:(double x,double y,double z,double w)
TEXT	tinyxml.h	/^        TEXT,$/;"	e	enum:TiXmlNode::NodeType
TFloat2	TypesDef.h	/^inline tfloat2 TFloat2(float v){ tfloat2 p={v,v}; return(p); }$/;"	f	signature:(float v)
TFloat2	TypesDef.h	/^inline tfloat2 TFloat2(float x,float y){ tfloat2 p={x,y}; return(p); }$/;"	f	signature:(float x,float y)
TFloat3	TypesDef.h	/^inline tfloat3 TFloat3(float v){ tfloat3 p={v,v,v}; return(p); }$/;"	f	signature:(float v)
TFloat3	TypesDef.h	/^inline tfloat3 TFloat3(float x,float y,float z){ tfloat3 p={x,y,z}; return(p); }$/;"	f	signature:(float x,float y,float z)
TFloat3Get	TypesDef.h	/^inline float TFloat3Get(const tfloat3& a,unsigned c){ return(!c? a.x: (c==1? a.y: a.z)); }$/;"	f	signature:(const tfloat3& a,unsigned c)
TFloat3Set	TypesDef.h	/^inline tfloat3 TFloat3Set(const tfloat3& a,unsigned c,float v){ return(TFloat3((c? a.x: v),(c!=1? a.y: v),(c!=2? a.z: v))); }$/;"	f	signature:(const tfloat3& a,unsigned c,float v)
TFloat4	TypesDef.h	/^inline tfloat4 TFloat4(float v){ tfloat4 p={v,v,v,v}; return(p); }$/;"	f	signature:(float v)
TFloat4	TypesDef.h	/^inline tfloat4 TFloat4(float x,float y,float z,float w){ tfloat4 p={x,y,z,w}; return(p); }$/;"	f	signature:(float x,float y,float z,float w)
TINYXML_INCLUDED	tinyxml.h	27;"	d
TIXML_DEFAULT_ENCODING	tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	tinyxml.h	/^    TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	tinyxml.h	/^    TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	tinyxml.h	/^    TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	tinyxml.h	/^        TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_DOCUMENT_EMPTY	tinyxml.h	/^        TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_DOCUMENT_TOP_ONLY	tinyxml.h	/^        TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_EMBEDDED_NULL	tinyxml.h	/^        TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	tinyxml.h	/^        TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_OPENING_FILE	tinyxml.h	/^        TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_OUT_OF_MEMORY	tinyxml.h	/^        TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_CDATA	tinyxml.h	/^        TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_COMMENT	tinyxml.h	/^        TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_DECLARATION	tinyxml.h	/^        TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_ELEMENT	tinyxml.h	/^        TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_EMPTY	tinyxml.h	/^        TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_PARSING_UNKNOWN	tinyxml.h	/^        TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_READING_ATTRIBUTES	tinyxml.h	/^        TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_READING_ELEMENT_VALUE	tinyxml.h	/^        TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_READING_END_TAG	tinyxml.h	/^        TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon76
TIXML_ERROR_STRING_COUNT	tinyxml.h	/^        TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon76
TIXML_EXPLICIT	tinystr.h	51;"	d
TIXML_EXPLICIT	tinystr.h	54;"	d
TIXML_EXPLICIT	tinystr.h	56;"	d
TIXML_LOG	tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	tinyxml.h	/^const int TIXML_MINOR_VERSION = 5;$/;"	v
TIXML_NO_ATTRIBUTE	tinyxml.h	/^    TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon75
TIXML_NO_ERROR	tinyxml.h	/^        TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon76
TIXML_PATCH_VERSION	tinyxml.h	/^const int TIXML_PATCH_VERSION = 3;$/;"	v
TIXML_SAFE	tinyxml.h	60;"	d
TIXML_SNPRINTF	tinyxml.h	65;"	d
TIXML_SNPRINTF	tinyxml.h	71;"	d
TIXML_SNPRINTF	tinyxml.h	77;"	d
TIXML_SNSCANF	tinyxml.h	66;"	d
TIXML_SNSCANF	tinyxml.h	72;"	d
TIXML_SNSCANF	tinyxml.h	78;"	d
TIXML_SSCANF	tinyxml.h	67;"	d
TIXML_SSCANF	tinyxml.h	73;"	d
TIXML_SSCANF	tinyxml.h	79;"	d
TIXML_SSCANF	tinyxml.h	81;"	d
TIXML_STRING	tinyxml.h	50;"	d
TIXML_STRING	tinyxml.h	53;"	d
TIXML_STRING_INCLUDED	tinystr.h	40;"	d
TIXML_SUCCESS	tinyxml.h	/^    TIXML_SUCCESS,$/;"	e	enum:__anon75
TIXML_UTF_LEAD_0	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	tinyxml.h	/^    TIXML_WRONG_TYPE$/;"	e	enum:__anon75
TInt2	TypesDef.h	/^inline tint2 TInt2(int v){ tint2 p={v,v}; return(p); }$/;"	f	signature:(int v)
TInt2	TypesDef.h	/^inline tint2 TInt2(int x,int y){ tint2 p={x,y}; return(p); }$/;"	f	signature:(int x,int y)
TInt2Get	TypesDef.h	/^inline int TInt2Get(const tint2& a,int c){ return(!c? a.x: a.y); }$/;"	f	signature:(const tint2& a,int c)
TInt2Set	TypesDef.h	/^inline tint2 TInt2Set(const tint2& a,int c,int v){ return(TInt2((c? a.x: v),(c!=1? a.y: v))); }$/;"	f	signature:(const tint2& a,int c,int v)
TInt3	TypesDef.h	/^inline tint3 TInt3(int v){ tint3 p={v,v,v}; return(p); }$/;"	f	signature:(int v)
TInt3	TypesDef.h	/^inline tint3 TInt3(int x,int y,int z){ tint3 p={x,y,z}; return(p); }$/;"	f	signature:(int x,int y,int z)
TInt3Get	TypesDef.h	/^inline int TInt3Get(const tint3& a,int c){ return(!c? a.x: (c==1? a.y: a.z)); }$/;"	f	signature:(const tint3& a,int c)
TInt3Set	TypesDef.h	/^inline tint3 TInt3Set(const tint3& a,int c,int v){ return(TInt3((c? a.x: v),(c!=1? a.y: v),(c!=2? a.z: v))); }$/;"	f	signature:(const tint3& a,int c,int v)
TInt4	TypesDef.h	/^inline tint4 TInt4(int v){ tint4 p={v,v,v,v}; return(p); }$/;"	f	signature:(int v)
TInt4	TypesDef.h	/^inline tint4 TInt4(int x,int y,int z,int w){ tint4 p={x,y,z,w}; return(p); }$/;"	f	signature:(int x,int y,int z,int w)
TKernel	JCfgRun.h	/^  TpKernel TKernel;$/;"	m	class:JCfgRun	access:public
TKernel	JSph.h	/^  TpKernel TKernel;           \/\/\/<Kernel type: Cubic, Wendland or Gaussian.                              | Tipo de kernel: Cubic, Wendland o Gaussian.$/;"	m	class:JSph	access:protected
TMC_COUNT	JSphTimersCpu.h	57;"	d
TMC_CfForces	JSphTimersCpu.h	/^  ,TMC_CfForces=6$/;"	e	enum:__anon38
TMC_CfPreForces	JSphTimersCpu.h	/^  ,TMC_CfPreForces=5$/;"	e	enum:__anon38
TMC_Init	JSphTimersCpu.h	/^   TMC_Init=0$/;"	e	enum:__anon38
TMC_NlLimits	JSphTimersCpu.h	/^  ,TMC_NlLimits=1$/;"	e	enum:__anon38
TMC_NlMakeSort	JSphTimersCpu.h	/^  ,TMC_NlMakeSort=2$/;"	e	enum:__anon38
TMC_NlOutCheck	JSphTimersCpu.h	/^  ,TMC_NlOutCheck=4$/;"	e	enum:__anon38
TMC_NlSortData	JSphTimersCpu.h	/^  ,TMC_NlSortData=3$/;"	e	enum:__anon38
TMC_SuComputeStep	JSphTimersCpu.h	/^  ,TMC_SuComputeStep=8$/;"	e	enum:__anon38
TMC_SuFloating	JSphTimersCpu.h	/^  ,TMC_SuFloating=9$/;"	e	enum:__anon38
TMC_SuMotion	JSphTimersCpu.h	/^  ,TMC_SuMotion=10$/;"	e	enum:__anon38
TMC_SuPeriodic	JSphTimersCpu.h	/^  ,TMC_SuPeriodic=11$/;"	e	enum:__anon38
TMC_SuResizeNp	JSphTimersCpu.h	/^  ,TMC_SuResizeNp=12$/;"	e	enum:__anon38
TMC_SuSavePart	JSphTimersCpu.h	/^  ,TMC_SuSavePart=13$/;"	e	enum:__anon38
TMC_SuShifting	JSphTimersCpu.h	/^  ,TMC_SuShifting=7$/;"	e	enum:__anon38
TMG_COUNT	JSphTimersGpu.h	60;"	d
TMG_CfForces	JSphTimersGpu.h	/^  ,TMG_CfForces=8$/;"	e	enum:__anon40
TMG_CfPreForces	JSphTimersGpu.h	/^  ,TMG_CfPreForces=7$/;"	e	enum:__anon40
TMG_Init	JSphTimersGpu.h	/^   TMG_Init=0$/;"	e	enum:__anon40
TMG_NlCellBegin	JSphTimersGpu.h	/^  ,TMG_NlCellBegin=4$/;"	e	enum:__anon40
TMG_NlLimits	JSphTimersGpu.h	/^  ,TMG_NlLimits=1$/;"	e	enum:__anon40
TMG_NlOutCheck	JSphTimersGpu.h	/^  ,TMG_NlOutCheck=6$/;"	e	enum:__anon40
TMG_NlPreSort	JSphTimersGpu.h	/^  ,TMG_NlPreSort=2$/;"	e	enum:__anon40
TMG_NlRadixSort	JSphTimersGpu.h	/^  ,TMG_NlRadixSort=3$/;"	e	enum:__anon40
TMG_NlSortData	JSphTimersGpu.h	/^  ,TMG_NlSortData=5$/;"	e	enum:__anon40
TMG_SuComputeStep	JSphTimersGpu.h	/^  ,TMG_SuComputeStep=10$/;"	e	enum:__anon40
TMG_SuDownData	JSphTimersGpu.h	/^  ,TMG_SuDownData=15$/;"	e	enum:__anon40
TMG_SuFloating	JSphTimersGpu.h	/^  ,TMG_SuFloating=11$/;"	e	enum:__anon40
TMG_SuMotion	JSphTimersGpu.h	/^  ,TMG_SuMotion=12$/;"	e	enum:__anon40
TMG_SuPeriodic	JSphTimersGpu.h	/^  ,TMG_SuPeriodic=13$/;"	e	enum:__anon40
TMG_SuResizeNp	JSphTimersGpu.h	/^  ,TMG_SuResizeNp=14$/;"	e	enum:__anon40
TMG_SuSavePart	JSphTimersGpu.h	/^  ,TMG_SuSavePart=16$/;"	e	enum:__anon40
TMG_SuShifting	JSphTimersGpu.h	/^  ,TMG_SuShifting=9$/;"	e	enum:__anon40
TMatrix3d	TypesDef.h	/^inline tmatrix3d TMatrix3d(double a11,double a12,double a13,double a21,double a22,double a23,double a31,double a32,double a33){ tmatrix3d m={a11,a12,a13,a21,a22,a23,a31,a32,a33}; return(m); }$/;"	f	signature:(double a11,double a12,double a13,double a21,double a22,double a23,double a31,double a32,double a33)
TMatrix3d	TypesDef.h	/^inline tmatrix3d TMatrix3d(double v){ tmatrix3d m={v,v,v,v,v,v,v,v,v}; return(m); }$/;"	f	signature:(double v)
TMatrix3f	TypesDef.h	/^inline tmatrix3f TMatrix3f(float a11,float a12,float a13,float a21,float a22,float a23,float a31,float a32,float a33){ tmatrix3f m={a11,a12,a13,a21,a22,a23,a31,a32,a33}; return(m); }$/;"	f	signature:(float a11,float a12,float a13,float a21,float a22,float a23,float a31,float a32,float a33)
TMatrix3f	TypesDef.h	/^inline tmatrix3f TMatrix3f(float v){ tmatrix3f m={v,v,v,v,v,v,v,v,v}; return(m); }$/;"	f	signature:(float v)
TMatrix4d	TypesDef.h	/^inline tmatrix4d TMatrix4d(){ tmatrix4d m={1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}; return(m); }$/;"	f	signature:()
TMatrix4d	TypesDef.h	/^inline tmatrix4d TMatrix4d(double a11,double a12,double a13,double a14,double a21,double a22,double a23,double a24,double a31,double a32,double a33,double a34,double a41,double a42,double a43,double a44){ tmatrix4d m={a11,a12,a13,a14,a21,a22,a23,a24,a31,a32,a33,a34,a41,a42,a43,a44}; return(m); }$/;"	f	signature:(double a11,double a12,double a13,double a14,double a21,double a22,double a23,double a24,double a31,double a32,double a33,double a34,double a41,double a42,double a43,double a44)
TMatrix4d	TypesDef.h	/^inline tmatrix4d TMatrix4d(double v){ tmatrix4d m={v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v}; return(m); }$/;"	f	signature:(double v)
TMatrix4f	TypesDef.h	/^inline tmatrix4f TMatrix4f(){ tmatrix4f m={1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}; return(m); }$/;"	f	signature:()
TMatrix4f	TypesDef.h	/^inline tmatrix4f TMatrix4f(float a11,float a12,float a13,float a14,float a21,float a22,float a23,float a24,float a31,float a32,float a33,float a34,float a41,float a42,float a43,float a44){ tmatrix4f m={a11,a12,a13,a14,a21,a22,a23,a24,a31,a32,a33,a34,a41,a42,a43,a44}; return(m); }$/;"	f	signature:(float a11,float a12,float a13,float a14,float a21,float a22,float a23,float a24,float a31,float a32,float a33,float a34,float a41,float a42,float a43,float a44)
TMatrix4f	TypesDef.h	/^inline tmatrix4f TMatrix4f(float v){ tmatrix4f m={v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v}; return(m); }$/;"	f	signature:(float v)
TODEG	TypesDef.h	28;"	d
TORAD	TypesDef.h	27;"	d
TPPARTICLES_COUNT	JParticlesDef.h	43;"	d
TRestoreArrayCpu	JSphCpu.cpp	/^template<class T> void JSphCpu::TRestoreArrayCpu(unsigned np,T *data,T *datanew)const{$/;"	f	class:JSphCpu	signature:(unsigned np,T *data,T *datanew) const
TRestoreArrayCpu	JSphCpu.h	/^  template<class T> void TRestoreArrayCpu(unsigned np,T *data,T *datanew)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,T *data,T *datanew) const
TRestoreArrayGpu	JSphGpu.cpp	/^template<class T> void JSphGpu::TRestoreArrayGpu(unsigned np,T *data,T *datanew)const{$/;"	f	class:JSphGpu	signature:(unsigned np,T *data,T *datanew) const
TRestoreArrayGpu	JSphGpu.h	/^  template<class T> void TRestoreArrayGpu(unsigned np,T *data,T *datanew)const;$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,T *data,T *datanew) const
TSaveArrayCpu	JSphCpu.cpp	/^template<class T> T* JSphCpu::TSaveArrayCpu(unsigned np,const T *datasrc)const{$/;"	f	class:JSphCpu	signature:(unsigned np,const T *datasrc) const
TSaveArrayCpu	JSphCpu.h	/^  template<class T> T* TSaveArrayCpu(unsigned np,const T *datasrc)const;$/;"	p	class:JSphCpu	access:protected	signature:(unsigned np,const T *datasrc) const
TSaveArrayGpu	JSphGpu.cpp	/^template<class T> T* JSphGpu::TSaveArrayGpu(unsigned np,const T *datasrc)const{$/;"	f	class:JSphGpu	signature:(unsigned np,const T *datasrc) const
TSaveArrayGpu	JSphGpu.h	/^  template<class T> T* TSaveArrayGpu(unsigned np,const T *datasrc)const;$/;"	p	class:JSphGpu	access:protected	signature:(unsigned np,const T *datasrc) const
TShifting	JSph.h	/^  TpShifting TShifting;       \/\/\/<Type of Shifting: None, NoBound, NoFixed, Full.$/;"	m	class:JSph	access:protected
TSortData	JRadixSort.cpp	/^template<class T> void JRadixSort::TSortData(unsigned size,const T *data,T *result){$/;"	f	class:JRadixSort	signature:(unsigned size,const T *data,T *result)
TSortData	JRadixSort.h	/^  template<class T> void TSortData(unsigned size,const T *data,T *result);$/;"	p	class:JRadixSort	access:private	signature:(unsigned size,const T *data,T *result)
TStep	JCfgRun.h	/^  TpStep TStep;$/;"	m	class:JCfgRun	access:public
TStep	JSph.h	/^  TpStep TStep;               \/\/\/<Step Algorithm: Verlet or Symplectic.                                  | Algoritmo de paso: Verlet o Symplectic.$/;"	m	class:JSph	access:protected
TUint2	TypesDef.h	/^inline tuint2 TUint2(unsigned v){ tuint2 p={v,v}; return(p); }$/;"	f	signature:(unsigned v)
TUint2	TypesDef.h	/^inline tuint2 TUint2(unsigned x,unsigned y){ tuint2 p={x,y}; return(p); }$/;"	f	signature:(unsigned x,unsigned y)
TUint2Get	TypesDef.h	/^inline unsigned TUint2Get(const tuint2& a,unsigned c){ return(!c? a.x: a.y); }$/;"	f	signature:(const tuint2& a,unsigned c)
TUint2Set	TypesDef.h	/^inline tuint2 TUint2Set(const tuint2& a,unsigned c,unsigned v){ return(TUint2((c? a.x: v),(c!=1? a.y: v))); }$/;"	f	signature:(const tuint2& a,unsigned c,unsigned v)
TUint3	TypesDef.h	/^inline tuint3 TUint3(unsigned v){ tuint3 p={v,v,v}; return(p); }$/;"	f	signature:(unsigned v)
TUint3	TypesDef.h	/^inline tuint3 TUint3(unsigned x,unsigned y,unsigned z){ tuint3 p={x,y,z}; return(p); }$/;"	f	signature:(unsigned x,unsigned y,unsigned z)
TUint3Get	TypesDef.h	/^inline unsigned TUint3Get(const tuint3& a,unsigned c){ return(!c? a.x: (c==1? a.y: a.z)); }$/;"	f	signature:(const tuint3& a,unsigned c)
TUint3Set	TypesDef.h	/^inline tuint3 TUint3Set(const tuint3& a,unsigned c,unsigned v){ return(TUint3((c? a.x: v),(c!=1? a.y: v),(c!=2? a.z: v))); }$/;"	f	signature:(const tuint3& a,unsigned c,unsigned v)
TUint4	TypesDef.h	/^inline tuint4 TUint4(unsigned v){ tuint4 p={v,v,v,v}; return(p); }$/;"	f	signature:(unsigned v)
TUint4	TypesDef.h	/^inline tuint4 TUint4(unsigned x,unsigned y,unsigned z,unsigned w){ tuint4 p={x,y,z,w}; return(p); }$/;"	f	signature:(unsigned x,unsigned y,unsigned z,unsigned w)
TVEL_Constant	JSphInitialize.h	/^    TVEL_Constant=0,    \/\/\/<Velocity profile uniform.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
TVEL_Linear	JSphInitialize.h	/^    TVEL_Linear=1,      \/\/\/<Velocity profile linear.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
TVEL_Parabolic	JSphInitialize.h	/^    TVEL_Parabolic=2    \/\/\/<Velocity profile parabolic.$/;"	e	enum:JSphInitializeOp_FluidVel::__anon35
TVisco	JCfgRun.h	/^  TpVisco TVisco;$/;"	m	class:JCfgRun	access:public
TVisco	JSph.h	/^  TpVisco TVisco;             \/\/\/<Viscosity type: Artificial,...                                         | Tipo de viscosidad: Artificial,...$/;"	m	class:JSph	access:protected
TWOPI	TypesDef.h	25;"	d
TYPECOUNT	tinyxml.h	/^        TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TabSize	tinyxml.h	/^    int TabSize() const { return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Text	JException.h	/^  std::string Text;      \/\/\/<Text of the exception.$/;"	m	class:JException	access:protected
Text	tinyxml.h	/^    TiXmlText* Text() const         { return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TextWithShortFileName	Functions.cpp	/^std::string TextWithShortFileName(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen){$/;"	f	namespace:fun	signature:(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen)
TextWithShortFileName	Functions.h	/^std::string TextWithShortFileName(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen);$/;"	p	namespace:fun	signature:(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen)
TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const TiXmlAttribute& );                \/\/ not implemented.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& )
TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute	tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlAttribute::DoubleValue	tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::DoubleValue	tinyxml.h	/^    double          DoubleValue() const;                                \/\/\/< Return the value of this attribute, converted to a double.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::IntValue	tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::IntValue	tinyxml.h	/^    int             IntValue() const;                                   \/\/\/< Return the value of this attribute, converted to an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Name	tinyxml.h	/^    const char*     Name()  const       { return name.c_str(); }        \/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::NameTStr	tinyxml.h	/^    const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Next	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Next	tinyxml.h	/^    TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Next	tinyxml.h	/^    const TiXmlAttribute* Next() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlAttribute	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Parse	tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Previous	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Previous	tinyxml.h	/^    TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Previous	tinyxml.h	/^    const TiXmlAttribute* Previous() const;$/;"	p	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Print	tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlAttribute::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
TiXmlAttribute::Print	tinyxml.h	/^    void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
TiXmlAttribute::QueryDoubleValue	tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
TiXmlAttribute::QueryDoubleValue	tinyxml.h	/^    int QueryDoubleValue( double* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( double* _value ) const
TiXmlAttribute::QueryIntValue	tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
TiXmlAttribute::QueryIntValue	tinyxml.h	/^    int QueryIntValue( int* _value ) const;$/;"	p	class:TiXmlAttribute	access:public	signature:( int* _value ) const
TiXmlAttribute::SetDocument	tinyxml.h	/^    void SetDocument( TiXmlDocument* doc )  { document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
TiXmlAttribute::SetDoubleValue	tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
TiXmlAttribute::SetDoubleValue	tinyxml.h	/^    void SetDoubleValue( double _value );                               \/\/\/< Set the value from a double.$/;"	p	class:TiXmlAttribute	access:public	signature:( double _value )
TiXmlAttribute::SetIntValue	tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
TiXmlAttribute::SetIntValue	tinyxml.h	/^    void SetIntValue( int _value );                                     \/\/\/< Set the value from an integer.$/;"	p	class:TiXmlAttribute	access:public	signature:( int _value )
TiXmlAttribute::SetName	tinyxml.h	/^    void SetName( const char* _name )   { name = _name; }               \/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
TiXmlAttribute::SetName	tinyxml.h	/^    void SetName( const std::string& _name )    { name = _name; }   $/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
TiXmlAttribute::SetValue	tinyxml.h	/^    void SetValue( const char* _value ) { value = _value; }             \/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
TiXmlAttribute::SetValue	tinyxml.h	/^    void SetValue( const std::string& _value )  { value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
TiXmlAttribute::TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const TiXmlAttribute& );                \/\/ not implemented.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& )
TiXmlAttribute::TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute::TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute::TiXmlAttribute	tinyxml.h	/^    TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Value	tinyxml.h	/^    const char*     Value() const       { return value.c_str(); }       \/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::ValueStr	tinyxml.h	/^    const std::string& ValueStr() const { return value; }               \/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::document	tinyxml.h	/^    TiXmlDocument*  document;   \/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::name	tinyxml.h	/^    TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::next	tinyxml.h	/^    TiXmlAttribute* next;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::operator <	tinyxml.h	/^    bool operator<( const TiXmlAttribute& rhs )  const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator =	tinyxml.h	/^    void operator=( const TiXmlAttribute& base );   \/\/ not allowed.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& base )
TiXmlAttribute::operator ==	tinyxml.h	/^    bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator >	tinyxml.h	/^    bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::prev	tinyxml.h	/^    TiXmlAttribute* prev;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::value	tinyxml.h	/^    TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet	tinyxml.h	/^    TiXmlAttributeSet( const TiXmlAttributeSet& );  \/\/ not allowed$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet	tinyxml.h	/^    TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet	tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlAttributeSet::Add	tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
TiXmlAttributeSet::Add	tinyxml.h	/^    void Add( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
TiXmlAttributeSet::Find	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
TiXmlAttributeSet::Find	tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
TiXmlAttributeSet::Find	tinyxml.h	/^    TiXmlAttribute* Find( const char* _name ) {$/;"	f	class:TiXmlAttributeSet	access:public	signature:( const char* _name )
TiXmlAttributeSet::Find	tinyxml.h	/^    TiXmlAttribute* Find( const std::string& _name ) {$/;"	f	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name )
TiXmlAttributeSet::Find	tinyxml.h	/^    const TiXmlAttribute*   Find( const char* _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const char* _name ) const
TiXmlAttributeSet::Find	tinyxml.h	/^    const TiXmlAttribute*   Find( const std::string& _name ) const;$/;"	p	class:TiXmlAttributeSet	access:public	signature:( const std::string& _name ) const
TiXmlAttributeSet::First	tinyxml.h	/^    TiXmlAttribute* First()                 { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::First	tinyxml.h	/^    const TiXmlAttribute* First()   const   { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Last	tinyxml.h	/^    TiXmlAttribute* Last()                  { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::Last	tinyxml.h	/^    const TiXmlAttribute* Last() const      { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Remove	tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
TiXmlAttributeSet::Remove	tinyxml.h	/^    void Remove( TiXmlAttribute* attribute );$/;"	p	class:TiXmlAttributeSet	access:public	signature:( TiXmlAttribute* attribute )
TiXmlAttributeSet::TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::TiXmlAttributeSet	tinyxml.h	/^    TiXmlAttributeSet( const TiXmlAttributeSet& );  \/\/ not allowed$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet::TiXmlAttributeSet	tinyxml.h	/^    TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::operator =	tinyxml.h	/^    void operator=( const TiXmlAttributeSet& ); \/\/ not allowed (as TiXmlAttribute)$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
TiXmlAttributeSet::sentinel	tinyxml.h	/^    TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
TiXmlAttributeSet::~TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::~TiXmlAttributeSet	tinyxml.h	/^    ~TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
TiXmlBase	tinyxml.h	/^    TiXmlBase( const TiXmlBase& );              \/\/ not implemented.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& )
TiXmlBase	tinyxml.h	/^    TiXmlBase() :   userData(0)     {}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase	tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlBase::Column	tinyxml.h	/^    int Column() const      { return location.col + 1; }    \/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::ConvertUTF32ToUTF8	tinyxml.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned long input, char* output, int* length )
TiXmlBase::ConvertUTF32ToUTF8	tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
TiXmlBase::EncodeString	tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
TiXmlBase::EncodeString	tinyxml.h	/^    static void EncodeString( const TIXML_STRING& str, TIXML_STRING* out );$/;"	p	class:TiXmlBase	access:public	signature:( const TIXML_STRING& str, TIXML_STRING* out )
TiXmlBase::Entity	tinyxml.h	/^    struct Entity$/;"	s	class:TiXmlBase	access:private
TiXmlBase::Entity::chr	tinyxml.h	/^        char            chr;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::str	tinyxml.h	/^        const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::strLength	tinyxml.h	/^        unsigned int    strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::GetChar	tinyxml.h	/^    inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetEntity	tinyxml.h	/^    static const char* GetEntity( const char* in, char* value, int* length, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetEntity	tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetUserData	tinyxml.h	/^    const void* GetUserData() const         { return userData; }    \/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::GetUserData	tinyxml.h	/^    void* GetUserData()                     { return userData; }    \/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::IsAlpha	tinyxml.h	/^    static int IsAlpha( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
TiXmlBase::IsAlpha	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsAlphaNum	tinyxml.h	/^    static int IsAlphaNum( unsigned char anyByte, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( unsigned char anyByte, TiXmlEncoding encoding )
TiXmlBase::IsAlphaNum	tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsWhiteSpace	tinyxml.h	/^    inline static bool IsWhiteSpace( char c )       $/;"	f	class:TiXmlBase	access:protected	signature:( char c )
TiXmlBase::IsWhiteSpace	tinyxml.h	/^    inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
TiXmlBase::IsWhiteSpaceCondensed	tinyxml.h	/^    static bool IsWhiteSpaceCondensed()                     { return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::MAX_ENTITY_LENGTH	tinyxml.h	/^        MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon77
TiXmlBase::NUM_ENTITY	tinyxml.h	/^        NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon77
TiXmlBase::Parse	tinyxml.h	/^    virtual const char* Parse(  const char* p, $/;"	p	class:TiXmlBase	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlBase::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const = 0;$/;"	p	class:TiXmlBase	access:public	signature:( FILE* cfile, int depth ) const
TiXmlBase::ReadName	tinyxml.h	/^    static const char* ReadName( const char* p, TIXML_STRING* name, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, TIXML_STRING* name, TiXmlEncoding encoding )
TiXmlBase::ReadName	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
TiXmlBase::ReadText	tinyxml.h	/^    static const char* ReadText(    const char* in,             \/\/ where to start$/;"	p	class:TiXmlBase	access:protected	signature:( const char* in, TIXML_STRING* text, bool ignoreWhiteSpace, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::ReadText	tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(    const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
TiXmlBase::Row	tinyxml.h	/^    int Row() const         { return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::SetCondenseWhiteSpace	tinyxml.h	/^    static void SetCondenseWhiteSpace( bool condense )      { condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
TiXmlBase::SetUserData	tinyxml.h	/^    void  SetUserData( void* user )         { userData = user; }    \/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
TiXmlBase::SkipWhiteSpace	tinyxml.h	/^    static const char* SkipWhiteSpace( const char*, TiXmlEncoding encoding );$/;"	p	class:TiXmlBase	access:protected	signature:( const char*, TiXmlEncoding encoding )
TiXmlBase::SkipWhiteSpace	tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
TiXmlBase::StreamTo	tinyxml.h	/^    static bool StreamTo( std::istream * in, int character, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamTo	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	tinyxml.h	/^    static bool StreamWhiteSpace( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlBase	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StringEqual	tinyxml.h	/^    static bool StringEqual(    const char* p,$/;"	p	class:TiXmlBase	access:protected	signature:( const char* p, const char* endTag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::StringEqual	tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::TIXML_ERROR	tinyxml.h	/^        TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_DOCUMENT_EMPTY	tinyxml.h	/^        TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_DOCUMENT_TOP_ONLY	tinyxml.h	/^        TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_EMBEDDED_NULL	tinyxml.h	/^        TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	tinyxml.h	/^        TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_OPENING_FILE	tinyxml.h	/^        TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_OUT_OF_MEMORY	tinyxml.h	/^        TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_CDATA	tinyxml.h	/^        TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_COMMENT	tinyxml.h	/^        TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_DECLARATION	tinyxml.h	/^        TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_ELEMENT	tinyxml.h	/^        TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_EMPTY	tinyxml.h	/^        TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_PARSING_UNKNOWN	tinyxml.h	/^        TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_READING_ATTRIBUTES	tinyxml.h	/^        TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_READING_ELEMENT_VALUE	tinyxml.h	/^        TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_READING_END_TAG	tinyxml.h	/^        TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_ERROR_STRING_COUNT	tinyxml.h	/^        TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TIXML_NO_ERROR	tinyxml.h	/^        TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon76
TiXmlBase::TiXmlBase	tinyxml.h	/^    TiXmlBase( const TiXmlBase& );              \/\/ not implemented.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& )
TiXmlBase::TiXmlBase	tinyxml.h	/^    TiXmlBase() :   userData(0)     {}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::ToLower	tinyxml.h	/^    inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
TiXmlBase::condenseWhiteSpace	tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
TiXmlBase::condenseWhiteSpace	tinyxml.h	/^    static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	tinyxml.h	/^    static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::errorString	tinyxml.h	/^    static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::errorString	tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
TiXmlBase::location	tinyxml.h	/^    TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::operator =	tinyxml.h	/^    void operator=( const TiXmlBase& base );    \/\/ not allowed.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& base )
TiXmlBase::userData	tinyxml.h	/^    void*           userData;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::utf8ByteTable	tinyxml.h	/^    static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
TiXmlBase::utf8ByteTable	tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::~TiXmlBase	tinyxml.h	/^    virtual ~TiXmlBase()            {}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlComment	tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment	tinyxml.h	/^    TiXmlComment( const TiXmlComment& );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& )
TiXmlComment	tinyxml.h	/^    TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment	tinyxml.h	/^    TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment	tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlComment::Accept	tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlComment	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
TiXmlComment::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlComment	access:public	signature:() const
TiXmlComment::CopyTo	tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
TiXmlComment::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlComment* target ) const;$/;"	p	class:TiXmlComment	access:protected	signature:( TiXmlComment* target ) const
TiXmlComment::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlComment	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Parse	tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Print	tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
TiXmlComment::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlComment	access:public	signature:( FILE* cfile, int depth ) const
TiXmlComment::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlComment	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::StreamIn	tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::TiXmlComment	tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment::TiXmlComment	tinyxml.h	/^    TiXmlComment( const TiXmlComment& );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& )
TiXmlComment::TiXmlComment	tinyxml.h	/^    TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment::TiXmlComment	tinyxml.h	/^    TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	tinyxml.h	/^    virtual TiXmlComment*  ToComment() { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	tinyxml.h	/^    virtual const TiXmlComment*  ToComment() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
TiXmlComment::operator =	tinyxml.cpp	/^void TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
TiXmlComment::operator =	tinyxml.h	/^    void operator=( const TiXmlComment& base );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& base )
TiXmlComment::~TiXmlComment	tinyxml.h	/^    virtual ~TiXmlComment() {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlCursor	tinyxml.h	/^    TiXmlCursor()       { Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor	tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlCursor::Clear	tinyxml.h	/^    void Clear()        { row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::TiXmlCursor	tinyxml.h	/^    TiXmlCursor()       { Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::col	tinyxml.h	/^    int col;    \/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlCursor::row	tinyxml.h	/^    int row;    \/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration(   const char* _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* _version, const char* _encoding, const char* _standalone )
TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration(   const std::string& _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration	tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDeclaration::Accept	tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
TiXmlDeclaration::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::CopyTo	tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlDeclaration* target ) const;$/;"	p	class:TiXmlDeclaration	access:protected	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::Encoding	tinyxml.h	/^    const char *Encoding() const        { return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDeclaration::Parse	tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
TiXmlDeclaration::Print	tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlDeclaration::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
TiXmlDeclaration::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth, TIXML_STRING* str ) const;$/;"	p	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth, TIXML_STRING* str ) const
TiXmlDeclaration::Standalone	tinyxml.h	/^    const char *Standalone() const      { return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDeclaration	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::StreamIn	tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration(   const char* _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const char* _version, const char* _encoding, const char* _standalone )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration(   const std::string& _version,$/;"	p	class:TiXmlDeclaration	access:public	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	tinyxml.h	/^    TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	tinyxml.h	/^    virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	tinyxml.h	/^    virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Version	tinyxml.h	/^    const char *Version() const         { return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::encoding	tinyxml.h	/^    TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::operator =	tinyxml.cpp	/^void TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::operator =	tinyxml.h	/^    void operator=( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::standalone	tinyxml.h	/^    TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::version	tinyxml.h	/^    TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::~TiXmlDeclaration	tinyxml.h	/^    virtual ~TiXmlDeclaration() {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const char * documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * documentName )
TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const std::string& documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const std::string& documentName )
TiXmlDocument	tinyxml.h	/^    TiXmlDocument();$/;"	p	class:TiXmlDocument	access:public	signature:()
TiXmlDocument	tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDocument::Accept	tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
TiXmlDocument::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlVisitor* content ) const
TiXmlDocument::ClearError	tinyxml.h	/^    void ClearError()                       {   error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlDocument	access:protected	signature:() const
TiXmlDocument::CopyTo	tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
TiXmlDocument::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlDocument* target ) const;$/;"	p	class:TiXmlDocument	access:private	signature:( TiXmlDocument* target ) const
TiXmlDocument::Error	tinyxml.h	/^    bool Error() const                      { return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorCol	tinyxml.h	/^    int ErrorCol() const    { return errorLocation.col+1; } \/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorDesc	tinyxml.h	/^    const char * ErrorDesc() const  { return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorId	tinyxml.h	/^    int ErrorId()   const               { return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorRow	tinyxml.h	/^    int ErrorRow() const    { return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
TiXmlDocument::LoadFile	tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	tinyxml.h	/^    bool LoadFile( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	tinyxml.h	/^    bool LoadFile( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	tinyxml.h	/^    bool LoadFile( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::LoadFile	tinyxml.h	/^    bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )           \/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );$/;"	p	class:TiXmlDocument	access:public	signature:( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::Parse	tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::Print	tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
TiXmlDocument::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth = 0 ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* cfile, int depth = 0 ) const
TiXmlDocument::Print	tinyxml.h	/^    void Print() const                      { Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::RootElement	tinyxml.h	/^    TiXmlElement* RootElement()                 { return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::RootElement	tinyxml.h	/^    const TiXmlElement* RootElement() const     { return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
TiXmlDocument::SaveFile	tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::SaveFile	tinyxml.h	/^    bool SaveFile( FILE* ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( FILE* ) const
TiXmlDocument::SaveFile	tinyxml.h	/^    bool SaveFile( const char * filename ) const;$/;"	p	class:TiXmlDocument	access:public	signature:( const char * filename ) const
TiXmlDocument::SaveFile	tinyxml.h	/^    bool SaveFile( const std::string& filename ) const      \/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
TiXmlDocument::SaveFile	tinyxml.h	/^    bool SaveFile() const;$/;"	p	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::SetError	tinyxml.h	/^    void SetError( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlDocument	access:public	signature:( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::SetError	tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDocument::SetTabSize	tinyxml.h	/^    void SetTabSize( int _tabsize )     { tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
TiXmlDocument::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlDocument	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::StreamIn	tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::TabSize	tinyxml.h	/^    int TabSize() const { return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument::TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const char * documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	tinyxml.h	/^    TiXmlDocument( const std::string& documentName );$/;"	p	class:TiXmlDocument	access:public	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	tinyxml.h	/^    TiXmlDocument();$/;"	p	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::ToDocument	tinyxml.h	/^    virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::ToDocument	tinyxml.h	/^    virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::error	tinyxml.h	/^    bool error;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorDesc	tinyxml.h	/^    TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorId	tinyxml.h	/^    int  errorId;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorLocation	tinyxml.h	/^    TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::operator =	tinyxml.cpp	/^void TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::operator =	tinyxml.h	/^    void operator=( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
TiXmlDocument::tabsize	tinyxml.h	/^    int tabsize;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::useMicrosoftBOM	tinyxml.h	/^    bool useMicrosoftBOM;       \/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::~TiXmlDocument	tinyxml.h	/^    virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement	tinyxml.h	/^    TiXmlElement (const char * in_value);$/;"	p	class:TiXmlElement	access:public	signature:(const char * in_value)
TiXmlElement	tinyxml.h	/^    TiXmlElement( const TiXmlElement& );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& )
TiXmlElement	tinyxml.h	/^    TiXmlElement( const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& _value )
TiXmlElement	tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlElement::Accept	tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const;$/;"	p	class:TiXmlElement	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
TiXmlElement::Attribute	tinyxml.h	/^    const char* Attribute( const char* name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name ) const
TiXmlElement::Attribute	tinyxml.h	/^    const char* Attribute( const char* name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	tinyxml.h	/^    const char* Attribute( const char* name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name ) const
TiXmlElement::Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name, double* d ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	tinyxml.h	/^    const std::string* Attribute( const std::string& name, int* i ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* i ) const
TiXmlElement::ClearThis	tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::ClearThis	tinyxml.h	/^    void ClearThis();   \/\/ like clear, but initializes 'this' object as well$/;"	p	class:TiXmlElement	access:protected	signature:()
TiXmlElement::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
TiXmlElement::CopyTo	tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
TiXmlElement::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlElement* target ) const;$/;"	p	class:TiXmlElement	access:protected	signature:( TiXmlElement* target ) const
TiXmlElement::FirstAttribute	tinyxml.h	/^    TiXmlAttribute* FirstAttribute()                { return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::FirstAttribute	tinyxml.h	/^    const TiXmlAttribute* FirstAttribute() const    { return attributeSet.First(); }        \/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::GetText	tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::GetText	tinyxml.h	/^    const char* GetText() const;$/;"	p	class:TiXmlElement	access:public	signature:() const
TiXmlElement::LastAttribute	tinyxml.h	/^    TiXmlAttribute* LastAttribute()                 { return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::LastAttribute	tinyxml.h	/^    const TiXmlAttribute* LastAttribute()   const   { return attributeSet.Last(); }     \/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Parse	tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Print	tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
TiXmlElement::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlElement	access:public	signature:( FILE* cfile, int depth ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.h	/^    int QueryDoubleAttribute( const char* name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, double* _value ) const
TiXmlElement::QueryDoubleAttribute	tinyxml.h	/^    int QueryDoubleAttribute( const std::string& name, double* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, double* _value ) const
TiXmlElement::QueryFloatAttribute	tinyxml.h	/^    int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
TiXmlElement::QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
TiXmlElement::QueryIntAttribute	tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
TiXmlElement::QueryIntAttribute	tinyxml.h	/^    int QueryIntAttribute( const char* name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, int* _value ) const
TiXmlElement::QueryIntAttribute	tinyxml.h	/^    int QueryIntAttribute( const std::string& name, int* _value ) const;$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int* _value ) const
TiXmlElement::QueryValueAttribute	tinyxml.h	/^    template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
TiXmlElement::ReadValue	tinyxml.h	/^    const char* ReadValue( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding );$/;"	p	class:TiXmlElement	access:protected	signature:( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlElement::ReadValue	tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::RemoveAttribute	tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
TiXmlElement::RemoveAttribute	tinyxml.h	/^    void RemoveAttribute( const char * name );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name )
TiXmlElement::RemoveAttribute	tinyxml.h	/^    void RemoveAttribute( const std::string& name ) {   RemoveAttribute (name.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& name, const std::string& _value )
TiXmlElement::SetAttribute	tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
TiXmlElement::SetAttribute	tinyxml.h	/^    void SetAttribute( const char * name, int value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, int value )
TiXmlElement::SetAttribute	tinyxml.h	/^    void SetAttribute( const char* name, const char * _value );$/;"	p	class:TiXmlElement	access:public	signature:( const char* name, const char * _value )
TiXmlElement::SetAttribute	tinyxml.h	/^    void SetAttribute( const std::string& name, const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, const std::string& _value )
TiXmlElement::SetAttribute	tinyxml.h	/^    void SetAttribute( const std::string& name, int _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& name, int _value )
TiXmlElement::SetDoubleAttribute	tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
TiXmlElement::SetDoubleAttribute	tinyxml.h	/^    void SetDoubleAttribute( const char * name, double value );$/;"	p	class:TiXmlElement	access:public	signature:( const char * name, double value )
TiXmlElement::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlElement	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlElement::StreamIn	tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement::TiXmlElement	tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement::TiXmlElement	tinyxml.h	/^    TiXmlElement (const char * in_value);$/;"	p	class:TiXmlElement	access:public	signature:(const char * in_value)
TiXmlElement::TiXmlElement	tinyxml.h	/^    TiXmlElement( const TiXmlElement& );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& )
TiXmlElement::TiXmlElement	tinyxml.h	/^    TiXmlElement( const std::string& _value );$/;"	p	class:TiXmlElement	access:public	signature:( const std::string& _value )
TiXmlElement::ToElement	tinyxml.h	/^    virtual TiXmlElement*           ToElement()           { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::ToElement	tinyxml.h	/^    virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::attributeSet	tinyxml.h	/^    TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
TiXmlElement::operator =	tinyxml.cpp	/^void TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
TiXmlElement::operator =	tinyxml.h	/^    void operator=( const TiXmlElement& base );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& base )
TiXmlElement::~TiXmlElement	tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::~TiXmlElement	tinyxml.h	/^    virtual ~TiXmlElement();$/;"	p	class:TiXmlElement	access:public	signature:()
TiXmlEncoding	tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f	signature:( const char* filename, const char* mode )
TiXmlHandle	tinyxml.h	/^    TiXmlHandle( TiXmlNode* _node )                 { this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle	tinyxml.h	/^    TiXmlHandle( const TiXmlHandle& ref )           { this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle	tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlHandle::Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::Child	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::Child	tinyxml.h	/^    TiXmlHandle Child( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
TiXmlHandle::Child	tinyxml.h	/^    TiXmlHandle Child( const std::string& _value, int index ) const         { return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::Child	tinyxml.h	/^    TiXmlHandle Child( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
TiXmlHandle::ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::ChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( const char* value, int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char* value, int index ) const
TiXmlHandle::ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( const std::string& _value, int index ) const  { return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::ChildElement	tinyxml.h	/^    TiXmlHandle ChildElement( int index ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( int index ) const
TiXmlHandle::Element	tinyxml.h	/^    TiXmlElement* Element() const   { return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChild	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
TiXmlHandle::FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild( const std::string& _value ) const               { return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::FirstChild	tinyxml.h	/^    TiXmlHandle FirstChild() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement( const char * value ) const;$/;"	p	class:TiXmlHandle	access:public	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement( const std::string& _value ) const        { return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::FirstChildElement	tinyxml.h	/^    TiXmlHandle FirstChildElement() const;$/;"	p	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Node	tinyxml.h	/^    TiXmlNode* Node() const         { return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Text	tinyxml.h	/^    TiXmlText* Text() const         { return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::TiXmlHandle	tinyxml.h	/^    TiXmlHandle( TiXmlNode* _node )                 { this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle::TiXmlHandle	tinyxml.h	/^    TiXmlHandle( const TiXmlHandle& ref )           { this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle::ToElement	tinyxml.h	/^    TiXmlElement* ToElement() const     { return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToNode	tinyxml.h	/^    TiXmlNode* ToNode() const           { return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToText	tinyxml.h	/^    TiXmlText* ToText() const           { return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToUnknown	tinyxml.h	/^    TiXmlUnknown* ToUnknown() const     { return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Unknown	tinyxml.h	/^    TiXmlUnknown* Unknown() const   { return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::node	tinyxml.h	/^    TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
TiXmlHandle::operator =	tinyxml.h	/^    TiXmlHandle operator=( const TiXmlHandle& ref ) { this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlNode	tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode	tinyxml.h	/^    TiXmlNode( NodeType _type );$/;"	p	class:TiXmlNode	access:protected	signature:( NodeType _type )
TiXmlNode	tinyxml.h	/^    TiXmlNode( const TiXmlNode& );              \/\/ not implemented.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& )
TiXmlNode	tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlNode::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* visitor ) const = 0;$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlVisitor* visitor ) const
TiXmlNode::COMMENT	tinyxml.h	/^        COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::Clear	tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::Clear	tinyxml.h	/^    void Clear();$/;"	p	class:TiXmlNode	access:public	signature:()
TiXmlNode::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const = 0;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::CopyTo	tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
TiXmlNode::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlNode* target ) const;$/;"	p	class:TiXmlNode	access:protected	signature:( TiXmlNode* target ) const
TiXmlNode::DECLARATION	tinyxml.h	/^        DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::DOCUMENT	tinyxml.h	/^        DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::ELEMENT	tinyxml.h	/^        ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::FirstChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild( const std::string& _value )              {   return FirstChild (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChild	tinyxml.h	/^    TiXmlNode* FirstChild()                     { return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild( const char * value ) const;            \/\/\/< The first child of this node with the matching 'value'. Will be null if none found.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
TiXmlNode::FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild( const std::string& _value ) const  {   return FirstChild (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::FirstChild	tinyxml.h	/^    const TiXmlNode* FirstChild()   const       { return firstChild; }  \/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement( const std::string& _value )                {   return FirstChildElement (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChildElement	tinyxml.h	/^    TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement( const char * _value ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement( const std::string& _value ) const    {   return FirstChildElement (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::FirstChildElement	tinyxml.h	/^    const TiXmlElement* FirstChildElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::GetDocument	tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::GetDocument	tinyxml.h	/^    TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::GetDocument	tinyxml.h	/^    const TiXmlDocument* GetDocument() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Identify	tinyxml.h	/^    TiXmlNode* Identify( const char* start, TiXmlEncoding encoding );$/;"	p	class:TiXmlNode	access:protected	signature:( const char* start, TiXmlEncoding encoding )
TiXmlNode::Identify	tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
TiXmlNode::InsertAfterChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertAfterChild	tinyxml.h	/^    TiXmlNode* InsertAfterChild(  TiXmlNode* afterThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	tinyxml.h	/^    TiXmlNode* InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	tinyxml.h	/^    TiXmlNode* InsertEndChild( const TiXmlNode& addThis );$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode& addThis )
TiXmlNode::IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
TiXmlNode::IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	tinyxml.h	/^    TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {    return IterateChildren (_value.c_str (), previous); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const char * value, const TiXmlNode* previous ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * value, const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	tinyxml.h	/^    const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const  {   return IterateChildren (_value.c_str (), previous); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
TiXmlNode::LastChild	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::LastChild	tinyxml.h	/^    TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::LastChild	tinyxml.h	/^    TiXmlNode* LastChild( const std::string& _value )               {   return LastChild (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::LastChild	tinyxml.h	/^    TiXmlNode* LastChild()  { return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::LastChild	tinyxml.h	/^    const TiXmlNode* LastChild( const char * value ) const;         \/\/\/ The last child of this node matching 'value'. Will be null if there are no children.$/;"	p	class:TiXmlNode	access:public	signature:( const char * value ) const
TiXmlNode::LastChild	tinyxml.h	/^    const TiXmlNode* LastChild( const std::string& _value ) const   {   return LastChild (_value.c_str ()); }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::LastChild	tinyxml.h	/^    const TiXmlNode* LastChild() const  { return lastChild; }       \/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::LinkEndChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
TiXmlNode::LinkEndChild	tinyxml.h	/^    TiXmlNode* LinkEndChild( TiXmlNode* addThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* addThis )
TiXmlNode::NextSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
TiXmlNode::NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling( const std::string& _value)                  {   return NextSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSibling	tinyxml.h	/^    TiXmlNode* NextSibling()                            { return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling( const std::string& _value) const      {   return NextSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NextSibling	tinyxml.h	/^    const TiXmlNode* NextSibling() const                { return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSiblingElement	tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
TiXmlNode::NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement( const std::string& _value)                {   return NextSiblingElement (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSiblingElement	tinyxml.h	/^    TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement( const std::string& _value) const    {   return NextSiblingElement (_value.c_str ());    }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NextSiblingElement	tinyxml.h	/^    const TiXmlElement* NextSiblingElement() const;$/;"	p	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NoChildren	tinyxml.h	/^    bool NoChildren() const                     { return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NodeType	tinyxml.h	/^    enum NodeType$/;"	g	class:TiXmlNode	access:public
TiXmlNode::Parent	tinyxml.h	/^    TiXmlNode* Parent()                         { return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::Parent	tinyxml.h	/^    const TiXmlNode* Parent() const             { return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::PreviousSibling	tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
TiXmlNode::PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling( const std::string& _value )             {   return PreviousSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::PreviousSibling	tinyxml.h	/^    TiXmlNode* PreviousSibling()                        { return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling( const char * ) const;$/;"	p	class:TiXmlNode	access:public	signature:( const char * ) const
TiXmlNode::PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling( const std::string& _value ) const {   return PreviousSibling (_value.c_str ());   }   \/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::PreviousSibling	tinyxml.h	/^    const TiXmlNode* PreviousSibling() const            { return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::RemoveChild	tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
TiXmlNode::RemoveChild	tinyxml.h	/^    bool RemoveChild( TiXmlNode* removeThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* removeThis )
TiXmlNode::ReplaceChild	tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::ReplaceChild	tinyxml.h	/^    TiXmlNode* ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis );$/;"	p	class:TiXmlNode	access:public	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::SetValue	tinyxml.h	/^    void SetValue( const std::string& _value )  { value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::SetValue	tinyxml.h	/^    void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
TiXmlNode::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream* in, TIXML_STRING* tag ) = 0;$/;"	p	class:TiXmlNode	access:protected	signature:( std::istream* in, TIXML_STRING* tag )
TiXmlNode::TEXT	tinyxml.h	/^        TEXT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TYPECOUNT	tinyxml.h	/^        TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TiXmlNode	tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode::TiXmlNode	tinyxml.h	/^    TiXmlNode( NodeType _type );$/;"	p	class:TiXmlNode	access:protected	signature:( NodeType _type )
TiXmlNode::TiXmlNode	tinyxml.h	/^    TiXmlNode( const TiXmlNode& );              \/\/ not implemented.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& )
TiXmlNode::ToComment	tinyxml.h	/^    virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToComment	tinyxml.h	/^    virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDeclaration	tinyxml.h	/^    virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDeclaration	tinyxml.h	/^    virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDocument	tinyxml.h	/^    virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDocument	tinyxml.h	/^    virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToElement	tinyxml.h	/^    virtual TiXmlElement*           ToElement()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToElement	tinyxml.h	/^    virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToText	tinyxml.h	/^    virtual TiXmlText*              ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToText	tinyxml.h	/^    virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToUnknown	tinyxml.h	/^    virtual TiXmlUnknown*           ToUnknown()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToUnknown	tinyxml.h	/^    virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Type	tinyxml.h	/^    int Type() const    { return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::UNKNOWN	tinyxml.h	/^        UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::Value	tinyxml.h	/^    const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueStr	tinyxml.h	/^    const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueTStr	tinyxml.h	/^    const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::firstChild	tinyxml.h	/^    TiXmlNode*      firstChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::lastChild	tinyxml.h	/^    TiXmlNode*      lastChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::next	tinyxml.h	/^    TiXmlNode*      next;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::operator <<	tinyxml.h	/^        friend std::ostream& operator<< (std::ostream& out, const TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::ostream& out, const TiXmlNode& base)
TiXmlNode::operator <<	tinyxml.h	/^        friend std::string& operator<< (std::string& out, const TiXmlNode& base );$/;"	p	class:TiXmlNode	access:friend	signature:(std::string& out, const TiXmlNode& base )
TiXmlNode::operator =	tinyxml.h	/^    void operator=( const TiXmlNode& base );    \/\/ not allowed.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& base )
TiXmlNode::operator >>	tinyxml.h	/^        friend std::istream& operator >> (std::istream& in, TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::istream& in, TiXmlNode& base)
TiXmlNode::parent	tinyxml.h	/^    TiXmlNode*      parent;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::prev	tinyxml.h	/^    TiXmlNode*      prev;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::type	tinyxml.h	/^    NodeType        type;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::value	tinyxml.h	/^    TIXML_STRING    value;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::~TiXmlNode	tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::~TiXmlNode	tinyxml.h	/^    virtual ~TiXmlNode();$/;"	p	class:TiXmlNode	access:public	signature:()
TiXmlOutStream	tinystr.h	/^class TiXmlOutStream : public TiXmlString$/;"	c	inherits:TiXmlString
TiXmlOutStream::operator <<	tinystr.h	/^    TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const TiXmlString & in)
TiXmlOutStream::operator <<	tinystr.h	/^    TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const char * in)
TiXmlParsingData	tinyxmlparser.cpp	/^    TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData	tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlParsingData::Cursor	tinyxmlparser.cpp	/^    const TiXmlCursor& Cursor() { return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:()
TiXmlParsingData::Stamp	tinyxmlparser.cpp	/^    void Stamp( const char* now, TiXmlEncoding encoding );$/;"	p	class:TiXmlParsingData	file:	access:public	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::Stamp	tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::TiXmlParsingData	tinyxmlparser.cpp	/^    TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData::cursor	tinyxmlparser.cpp	/^    TiXmlCursor     cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::stamp	tinyxmlparser.cpp	/^    const char*     stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::tabsize	tinyxmlparser.cpp	/^    int             tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlPrinter	tinyxml.h	/^    TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter	tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c	inherits:TiXmlVisitor
TiXmlPrinter::CStr	tinyxml.h	/^    const char* CStr()                              { return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::DoIndent	tinyxml.h	/^    void DoIndent() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::DoLineBreak	tinyxml.h	/^    void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::Indent	tinyxml.h	/^    const char* Indent()                            { return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::LineBreak	tinyxml.h	/^    const char* LineBreak()                         { return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::SetIndent	tinyxml.h	/^    void SetIndent( const char* _indent )           { indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
TiXmlPrinter::SetLineBreak	tinyxml.h	/^    void SetLineBreak( const char* _lineBreak )     { lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
TiXmlPrinter::SetStreamPrinting	tinyxml.h	/^    void SetStreamPrinting()                        { indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Size	tinyxml.h	/^    size_t Size()                                   { return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Str	tinyxml.h	/^    const std::string& Str()                        { return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::TiXmlPrinter	tinyxml.h	/^    TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlComment& comment );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlDeclaration& declaration );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlText& text );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlUnknown& unknown );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
TiXmlPrinter::VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
TiXmlPrinter::VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
TiXmlPrinter::VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlElement& element );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element )
TiXmlPrinter::buffer	tinyxml.h	/^    TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::depth	tinyxml.h	/^    int depth;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::indent	tinyxml.h	/^    TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::lineBreak	tinyxml.h	/^    TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::simpleTextPrint	tinyxml.h	/^    bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
TiXmlString	tinystr.h	/^    TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * copy)
TiXmlString	tinystr.h	/^    TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * str, size_type len)
TiXmlString	tinystr.h	/^    TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const TiXmlString & copy)
TiXmlString	tinystr.h	/^    TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString	tinystr.h	/^class TiXmlString$/;"	c
TiXmlString::Rep	tinystr.h	/^    struct Rep$/;"	s	class:TiXmlString	access:private
TiXmlString::Rep::capacity	tinystr.h	/^        size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::Rep::size	tinystr.h	/^        size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::Rep::str	tinystr.h	/^        char str[1];$/;"	m	struct:TiXmlString::Rep	access:public
TiXmlString::TiXmlString	tinystr.h	/^    TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * copy)
TiXmlString::TiXmlString	tinystr.h	/^    TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const char * str, size_type len)
TiXmlString::TiXmlString	tinystr.h	/^    TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString	access:public	signature:( const TiXmlString & copy)
TiXmlString::TiXmlString	tinystr.h	/^    TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString::append	tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::append	tinystr.h	/^    TiXmlString& append (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
TiXmlString::assign	tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
TiXmlString::assign	tinystr.h	/^    TiXmlString& assign (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
TiXmlString::at	tinystr.h	/^    const char& at (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
TiXmlString::c_str	tinystr.h	/^    const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::capacity	tinystr.h	/^    size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::clear	tinystr.h	/^    void clear ()$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlString::data	tinystr.h	/^    const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::empty	tinystr.h	/^    bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::find	tinystr.h	/^    size_type find (char lookup) const$/;"	f	class:TiXmlString	access:public	signature:(char lookup) const
TiXmlString::find	tinystr.h	/^    size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString	access:public	signature:(char tofind, size_type offset) const
TiXmlString::finish	tinystr.h	/^    char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString	access:private	signature:() const
TiXmlString::init	tinystr.h	/^    void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
TiXmlString::init	tinystr.h	/^    void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString	access:private	signature:(size_type sz, size_type cap)
TiXmlString::length	tinystr.h	/^    size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::npos	tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
TiXmlString::npos	tinystr.h	/^    static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString	access:public
TiXmlString::nullrep_	tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
TiXmlString::nullrep_	tinystr.h	/^    static Rep nullrep_;$/;"	m	class:TiXmlString	access:private
TiXmlString::operator +=	tinystr.h	/^    TiXmlString& operator += (char single)$/;"	f	class:TiXmlString	access:public	signature:(char single)
TiXmlString::operator +=	tinystr.h	/^    TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & suffix)
TiXmlString::operator +=	tinystr.h	/^    TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString	access:public	signature:(const char * suffix)
TiXmlString::operator =	tinystr.h	/^    TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & copy)
TiXmlString::operator =	tinystr.h	/^    TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString	access:public	signature:(const char * copy)
TiXmlString::operator []	tinystr.h	/^    char& operator [] (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
TiXmlString::quit	tinystr.h	/^    void quit()$/;"	f	class:TiXmlString	access:private	signature:()
TiXmlString::rep_	tinystr.h	/^    Rep * rep_;$/;"	m	class:TiXmlString	access:private
TiXmlString::reserve	tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString	signature:(size_type cap)
TiXmlString::reserve	tinystr.h	/^    void reserve (size_type cap);$/;"	p	class:TiXmlString	access:public	signature:(size_type cap)
TiXmlString::set_size	tinystr.h	/^    void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
TiXmlString::size	tinystr.h	/^    size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
TiXmlString::size_type	tinystr.h	/^    typedef size_t size_type;$/;"	t	class:TiXmlString	access:public
TiXmlString::start	tinystr.h	/^    char* start() const { return rep_->str; }$/;"	f	class:TiXmlString	access:private	signature:() const
TiXmlString::swap	tinystr.h	/^    void swap (TiXmlString& other)$/;"	f	class:TiXmlString	access:public	signature:(TiXmlString& other)
TiXmlString::~TiXmlString	tinystr.h	/^    ~TiXmlString ()$/;"	f	class:TiXmlString	access:public	signature:()
TiXmlText	tinyxml.h	/^    TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText	tinyxml.h	/^    TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TEXT )   { copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText	tinyxml.h	/^    TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText	tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlText::Accept	tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
TiXmlText::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlText	access:public	signature:( TiXmlVisitor* content ) const
TiXmlText::Blank	tinyxml.h	/^    bool Blank() const; \/\/ returns true if all white space and new lines$/;"	p	class:TiXmlText	access:protected	signature:() const
TiXmlText::Blank	tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::CDATA	tinyxml.h	/^    bool CDATA() const              { return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlText	access:protected	signature:() const
TiXmlText::CopyTo	tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
TiXmlText::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlText* target ) const;$/;"	p	class:TiXmlText	access:protected	signature:( TiXmlText* target ) const
TiXmlText::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlText	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Parse	tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Print	tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
TiXmlText::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlText	access:public	signature:( FILE* cfile, int depth ) const
TiXmlText::SetCDATA	tinyxml.h	/^    void SetCDATA( bool _cdata )    { cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
TiXmlText::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlText	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlText::StreamIn	tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlText::TiXmlText	tinyxml.h	/^    TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText::TiXmlText	tinyxml.h	/^    TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TEXT )   { copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText::TiXmlText	tinyxml.h	/^    TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText::ToText	tinyxml.h	/^    virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlText::ToText	tinyxml.h	/^    virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::cdata	tinyxml.h	/^    bool cdata;         \/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
TiXmlText::operator =	tinyxml.h	/^    void operator=( const TiXmlText& base )                             { base.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
TiXmlText::~TiXmlText	tinyxml.h	/^    virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlUnknown	tinyxml.h	/^    TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::UNKNOWN )      { copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown	tinyxml.h	/^    TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )    {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown	tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlUnknown::Accept	tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
TiXmlUnknown::Accept	tinyxml.h	/^    virtual bool Accept( TiXmlVisitor* content ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( TiXmlVisitor* content ) const
TiXmlUnknown::Clone	tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
TiXmlUnknown::Clone	tinyxml.h	/^    virtual TiXmlNode* Clone() const;$/;"	p	class:TiXmlUnknown	access:public	signature:() const
TiXmlUnknown::CopyTo	tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::CopyTo	tinyxml.h	/^    void CopyTo( TiXmlUnknown* target ) const;$/;"	p	class:TiXmlUnknown	access:protected	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::Parse	tinyxml.h	/^    virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );$/;"	p	class:TiXmlUnknown	access:public	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Parse	tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Print	tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::Print	tinyxml.h	/^    virtual void Print( FILE* cfile, int depth ) const;$/;"	p	class:TiXmlUnknown	access:public	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::StreamIn	tinyxml.h	/^    virtual void StreamIn( std::istream * in, TIXML_STRING * tag );$/;"	p	class:TiXmlUnknown	access:protected	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown::StreamIn	tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown::TiXmlUnknown	tinyxml.h	/^    TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::UNKNOWN )      { copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::TiXmlUnknown	tinyxml.h	/^    TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )    {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	tinyxml.h	/^    virtual TiXmlUnknown*           ToUnknown()     { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	tinyxml.h	/^    virtual const TiXmlUnknown*     ToUnknown()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
TiXmlUnknown::operator =	tinyxml.h	/^    void operator=( const TiXmlUnknown& copy )                                      { copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::~TiXmlUnknown	tinyxml.h	/^    virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlVisitor	tinyxml.h	/^class TiXmlVisitor$/;"	c
TiXmlVisitor::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlComment& \/*comment*\/ )           { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
TiXmlVisitor::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )   { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
TiXmlVisitor::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlText& \/*text*\/ )                 { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
TiXmlVisitor::Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )           { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
TiXmlVisitor::VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )         { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )    { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
TiXmlVisitor::VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )          { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlElement& \/*element*\/ )       { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
TiXmlVisitor::~TiXmlVisitor	tinyxml.h	/^    virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
Time	JMotionMov.h	/^  const double Time;$/;"	m	class:JMotionMov	access:public
TimeBase	JTimeOut.h	/^  unsigned TimeBase;$/;"	m	class:JTimeOut	access:protected
TimeFactor	JLinearValue.h	/^  double TimeFactor;$/;"	m	class:JLinearValue	access:protected
TimeFinish	JMotionEvent.h	/^  const double TimeFinish;$/;"	m	class:JMotionEvent	access:public
TimeFinish	JSaveDt.h	/^  double TimeFinish;   \/\/\/<Time from which dt information is not collected. | Instante a partir del cual se deja de recopilar informacion del dt.$/;"	m	class:JSaveDt	access:private
TimeInterval	JSaveDt.h	/^  double TimeInterval; \/\/\/<Time lapse every time dt information is saved. | Cada cuanto se guarda info del dt.$/;"	m	class:JSaveDt	access:private
TimeMax	JCfgRun.h	/^  double TimeMax,TimePart;$/;"	m	class:JCfgRun	access:public
TimeMax	JGaugeSystem.h	/^  double TimeMax;$/;"	m	class:JGaugeSystem	access:private
TimeMax	JSph.h	/^  double TimeMax;$/;"	m	class:JSph	access:protected
TimeMod	JSphMotion.h	/^  double TimeMod;       \/\/\/<Modifies the timestep for motion | Modificador del TimeStep para Motion.$/;"	m	class:JSphMotion	access:private
TimeMod	JWaveGen.h	/^  double TimeMod;       \/\/\/<Modifies the timestep for paddle motion.$/;"	m	class:JWaveGen	access:private
TimeNext	JLinearValue.h	/^  double TimeNext;$/;"	m	class:JLinearValue	access:protected
TimeOut	JSph.h	/^  JTimeOut *TimeOut;$/;"	m	class:JSph	access:protected
TimeOut	JTimeControl.h	/^  double TimeOut;       \/\/\/<Periodic interval duration (in seconds). | Duracion de intervalo periodico (en segundos).$/;"	m	class:JTimeControl	access:protected
TimeOutNum	JTimeControl.h	/^  unsigned TimeOutNum;  \/\/<Number of intervals processed with Periodic or Times. | Numero de intervalos procesados con Periodic o Times.$/;"	m	class:JTimeControl	access:protected
TimePart	JCfgRun.h	/^  double TimeMax,TimePart;$/;"	m	class:JCfgRun	access:public
TimePart	JGaugeSystem.h	/^  double TimePart;$/;"	m	class:JGaugeSystem	access:private
TimePart	JSph.h	/^  double TimePart;$/;"	m	class:JSph	access:protected
TimePartNext	JSph.h	/^  double TimePartNext;    \/\/\/<Instant to store next PART file.   | Instante para grabar siguiente fichero PART.$/;"	m	class:JSph	access:protected
TimePre	JLinearValue.h	/^  double TimePre;$/;"	m	class:JLinearValue	access:protected
TimeStart	JMotionEvent.h	/^  const double TimeStart;$/;"	m	class:JMotionEvent	access:public
TimeStart	JSaveDt.h	/^  double TimeStart;    \/\/\/<Time from which information about the DT begins to be collected. | Instante a partir del cual se empieza a recopilar informacion del dt.$/;"	m	class:JSaveDt	access:private
TimeStep	JGaugeItem.h	/^  double TimeStep;$/;"	m	class:JGaugeItem	access:protected
TimeStep	JLinearValue.h	/^  double TimeStep;$/;"	m	class:JLinearValue	access:protected
TimeStep	JMotionList.h	/^  double TimeStep;$/;"	m	class:JMotionList	access:public
TimeStep	JPartFloatBi4.h	/^  double TimeStep;$/;"	m	class:JPartFloatBi4Load	access:private
TimeStep	JSph.h	/^  double TimeStep;        \/\/\/<Current instant of the simulation. | Instante actual de la simulaciÃ³n.                                 $/;"	m	class:JSph	access:protected
TimeStepIni	JSph.h	/^  double TimeStepIni;     \/\/\/<Initial instant of the simulation. | Instante inicial de la simulaciÃ³n.$/;"	m	class:JSph	access:protected
TimeStepM1	JSph.h	/^  double TimeStepM1;      \/\/\/<Instant of the simulation when the last PART was stored. | Instante de la simulaciÃ³n en que se grabo el Ãºltimo PART.         $/;"	m	class:JSph	access:protected
Timer	JTimeControl.h	/^  JTimer Timer;$/;"	m	class:JTimeControl	access:protected
TimerGetCount	JSphCpu.h	/^  unsigned TimerGetCount()const{ return(TmcGetCount()); }$/;"	f	class:JSphCpu	access:protected	signature:() const
TimerGetCount	JSphGpu.h	/^  unsigned TimerGetCount()const{ return(TmgGetCount()); }$/;"	f	class:JSphGpu	access:protected	signature:() const
TimerGetName	JSphCpu.h	/^  std::string TimerGetName(unsigned ct)const{ return(TmcGetName((CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
TimerGetName	JSphGpu.h	/^  std::string TimerGetName(unsigned ct)const{ return(TmgGetName((CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
TimerGetPtrValue	JSphCpu.h	/^  const double* TimerGetPtrValue(unsigned ct)const{ return(TmcGetPtrValue(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
TimerGetPtrValue	JSphGpu.h	/^  const double* TimerGetPtrValue(unsigned ct)const{ return(TmgGetPtrValue(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
TimerGetValue	JSphCpu.h	/^  float TimerGetValue(unsigned ct)const{ return(TmcGetValue(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
TimerGetValue	JSphGpu.h	/^  float TimerGetValue(unsigned ct)const{ return(TmgGetValue(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
TimerIsActive	JSphCpu.h	/^  bool TimerIsActive(unsigned ct)const{ return(TmcIsActive(Timers,(CsTypeTimerCPU)ct)); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
TimerIsActive	JSphGpu.h	/^  bool TimerIsActive(unsigned ct)const{ return(TmgIsActive(Timers,(CsTypeTimerGPU)ct)); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
TimerPart	JSph.h	/^  JTimer TimerPart;        \/\/\/<Measueres runtime since last PART.                | Mide el tiempo de ejecucion desde el ultimo PART.$/;"	m	class:JSph	access:protected
TimerSim	JSph.h	/^  JTimer TimerSim;         \/\/\/<Measueres runtime since first step of simulation. | Mide el tiempo de ejecucion desde el primer paso de calculo.$/;"	m	class:JSph	access:protected
TimerToText	JSph.cpp	/^std::string JSph::TimerToText(const std::string &name,float value){$/;"	f	class:JSph	signature:(const std::string &name,float value)
TimerToText	JSph.h	/^  static std::string TimerToText(const std::string &name,float value);$/;"	p	class:JSph	access:public	signature:(const std::string &name,float value)
TimerToText	JSphCpu.h	/^  std::string TimerToText(unsigned ct)const{ return(JSph::TimerToText(TimerGetName(ct),TimerGetValue(ct))); }$/;"	f	class:JSphCpu	access:protected	signature:(unsigned ct) const
TimerToText	JSphGpu.h	/^  std::string TimerToText(unsigned ct)const{ return(JSph::TimerToText(TimerGetName(ct),TimerGetValue(ct))); }$/;"	f	class:JSphGpu	access:protected	signature:(unsigned ct) const
TimerTot	JSph.h	/^  JTimer TimerTot;         \/\/\/<Measueres total runtime.                          | Mide el tiempo total de ejecucion.$/;"	m	class:JSph	access:protected
Timers	JSphCpu.h	/^  TimersCpu Timers;$/;"	m	class:JSphCpu	access:protected
Timers	JSphGpu.h	/^  TimersGpu Timers;  \/\/\/<Declares an array with timers for CPU (type structure \\ref StSphTimerGpu).$/;"	m	class:JSphGpu	access:protected
TimersCpu	JSphTimersCpu.h	/^typedef StSphTimerCpu TimersCpu[TMC_COUNT];$/;"	t
TimersGpu	JSphTimersGpu.h	/^typedef StSphTimerGpu TimersGpu[TMG_COUNT];$/;"	t
Times	JBlockSizeAuto.h	/^  float *Times;        \/\/\/< Saves times of test [BsNum].$/;"	m	class:JBlockSizeAutoKer	access:protected
Times	JLinearValue.h	/^  double *Times;$/;"	m	class:JLinearValue	access:protected
Times	JMotionMov.h	/^  double *Times;   \/\/-Tiempos$/;"	m	class:JMotionDataFile	access:private
Times	JSphDtFixed.h	/^  double *Times;$/;"	m	class:JSphDtFixed	access:protected
Times	JSphVisco.h	/^  float *Times;$/;"	m	class:JSphVisco	access:protected
Times	JTimeControl.h	/^  std::vector<double> Times; \/\/\/<List of times when it is not periodic. | Lista de tiempos cuando no es Periodic.$/;"	m	class:JTimeControl	access:protected
Times	JTimeOut.h	/^  std::vector<StTimeOut> Times;  \/\/\/<List values for timeout.$/;"	m	class:JTimeOut	access:protected
TimesSize	JTimeControl.h	/^  unsigned TimesSize;        \/\/\/<Number of elements of Times. | Numero de elementos de Times. $/;"	m	class:JTimeControl	access:protected
Tmatrix3dReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix3dReset(tmatrix3d &m){ $/;"	f	namespace:cumath	signature:(tmatrix3d &m)
Tmatrix3fReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix3fReset(tmatrix3f &m){ $/;"	f	namespace:cumath	signature:(tmatrix3f &m)
Tmatrix4dReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix4dReset(tmatrix4d &m){ $/;"	f	namespace:cumath	signature:(tmatrix4d &m)
Tmatrix4fReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix4fReset(tmatrix4f &m){ $/;"	f	namespace:cumath	signature:(tmatrix4f &m)
TmcActive	JSphTimersCpu.h	/^inline void TmcActive(TimersCpu vtimer,CsTypeTimerCPU ct,bool active){ if(unsigned(ct)<TmcGetCount())vtimer[ct].active=active; }$/;"	f	signature:(TimersCpu vtimer,CsTypeTimerCPU ct,bool active)
TmcActiveAll	JSphTimersCpu.h	/^inline void TmcActiveAll(TimersCpu vtimer,bool active){ for(unsigned c=0;c<TMC_COUNT;c++)vtimer[c].active=active; }$/;"	f	signature:(TimersCpu vtimer,bool active)
TmcCreation	JSphTimersCpu.h	/^inline void TmcCreation(TimersCpu vtimer,bool active){$/;"	f	signature:(TimersCpu vtimer,bool active)
TmcDestruction	JSphTimersCpu.h	/^inline void TmcDestruction(TimersCpu vtimer){ TmcCreation(vtimer,false); }$/;"	f	signature:(TimersCpu vtimer)
TmcGetCount	JSphTimersCpu.h	/^inline unsigned TmcGetCount(){ return(TMC_COUNT); }$/;"	f	signature:()
TmcGetName	JSphTimersCpu.h	/^inline const char* TmcGetName(CsTypeTimerCPU ct){$/;"	f	signature:(CsTypeTimerCPU ct)
TmcGetPtrValue	JSphTimersCpu.h	/^inline const double* TmcGetPtrValue(const TimersCpu vtimer,CsTypeTimerCPU ct){ return(&(vtimer[ct].time)); }$/;"	f	signature:(const TimersCpu vtimer,CsTypeTimerCPU ct)
TmcGetValue	JSphTimersCpu.h	/^inline float TmcGetValue(const TimersCpu vtimer,CsTypeTimerCPU ct){ return(float(vtimer[ct].time)); }$/;"	f	signature:(const TimersCpu vtimer,CsTypeTimerCPU ct)
TmcGetValueD	JSphTimersCpu.h	/^inline double TmcGetValueD(const TimersCpu vtimer,CsTypeTimerCPU ct){ return(vtimer[ct].time); }$/;"	f	signature:(const TimersCpu vtimer,CsTypeTimerCPU ct)
TmcIncreaseValue	JSphTimersCpu.h	/^inline void TmcIncreaseValue(TimersCpu vtimer,CsTypeTimerCPU ct,double value){ if(vtimer[ct].active)vtimer[ct].time+=value; }  $/;"	f	signature:(TimersCpu vtimer,CsTypeTimerCPU ct,double value)
TmcIsActive	JSphTimersCpu.h	/^inline bool TmcIsActive(const TimersCpu vtimer,CsTypeTimerCPU ct){ return(unsigned(ct)<TmcGetCount()&&vtimer[ct].active); }$/;"	f	signature:(const TimersCpu vtimer,CsTypeTimerCPU ct)
TmcResetValues	JSphTimersCpu.h	/^inline void TmcResetValues(TimersCpu vtimer){$/;"	f	signature:(TimersCpu vtimer)
TmcStart	JSphTimersCpu.h	25;"	d
TmcStart	JSphTimersCpu.h	28;"	d
TmcStop	JSphTimersCpu.h	26;"	d
TmcStop	JSphTimersCpu.h	29;"	d
TmgActive	JSphTimersGpu.h	/^inline void TmgActive(TimersGpu vtimer,CsTypeTimerGPU ct,bool active){ if(unsigned(ct)<TmgGetCount())vtimer[ct].active=active; }$/;"	f	signature:(TimersGpu vtimer,CsTypeTimerGPU ct,bool active)
TmgActiveAll	JSphTimersGpu.h	/^inline void TmgActiveAll(TimersGpu vtimer,bool active){ for(unsigned c=0;c<TMG_COUNT;c++)vtimer[c].active=active; }$/;"	f	signature:(TimersGpu vtimer,bool active)
TmgCreation	JSphTimersGpu.h	/^inline void TmgCreation(TimersGpu vtimer,bool active){$/;"	f	signature:(TimersGpu vtimer,bool active)
TmgDestruction	JSphTimersGpu.h	/^inline void TmgDestruction(TimersGpu vtimer){ TmgCreation(vtimer,false); }$/;"	f	signature:(TimersGpu vtimer)
TmgGetCount	JSphTimersGpu.h	/^inline unsigned TmgGetCount(){ return(TMG_COUNT); }$/;"	f	signature:()
TmgGetName	JSphTimersGpu.h	/^inline const char* TmgGetName(CsTypeTimerGPU ct){$/;"	f	signature:(CsTypeTimerGPU ct)
TmgGetPtrValue	JSphTimersGpu.h	/^inline const double* TmgGetPtrValue(const TimersGpu vtimer,CsTypeTimerGPU ct){ return(&(vtimer[ct].time)); }$/;"	f	signature:(const TimersGpu vtimer,CsTypeTimerGPU ct)
TmgGetValue	JSphTimersGpu.h	/^inline float TmgGetValue(const TimersGpu vtimer,CsTypeTimerGPU ct){ return(float(vtimer[ct].time)); }$/;"	f	signature:(const TimersGpu vtimer,CsTypeTimerGPU ct)
TmgGetValueD	JSphTimersGpu.h	/^inline double TmgGetValueD(const TimersGpu vtimer,CsTypeTimerGPU ct){ return(vtimer[ct].time); }$/;"	f	signature:(const TimersGpu vtimer,CsTypeTimerGPU ct)
TmgIncreaseValue	JSphTimersGpu.h	/^inline void TmgIncreaseValue(TimersGpu vtimer,CsTypeTimerGPU ct,double value){ if(vtimer[ct].active)vtimer[ct].time+=value; }  $/;"	f	signature:(TimersGpu vtimer,CsTypeTimerGPU ct,double value)
TmgIsActive	JSphTimersGpu.h	/^inline bool TmgIsActive(const TimersGpu vtimer,CsTypeTimerGPU ct){ return(unsigned(ct)<TmgGetCount()&&vtimer[ct].active); }$/;"	f	signature:(const TimersGpu vtimer,CsTypeTimerGPU ct)
TmgResetValues	JSphTimersGpu.h	/^inline void TmgResetValues(TimersGpu vtimer){$/;"	f	signature:(TimersGpu vtimer)
TmgStart	JSphTimersGpu.h	25;"	d
TmgStart	JSphTimersGpu.h	28;"	d
TmgStop	JSphTimersGpu.h	26;"	d
TmgStop	JSphTimersGpu.h	29;"	d
ToComment	tinyxml.h	/^    virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToComment	tinyxml.h	/^    virtual TiXmlComment*  ToComment() { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
ToComment	tinyxml.h	/^    virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToComment	tinyxml.h	/^    virtual const TiXmlComment*  ToComment() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
ToDeclaration	tinyxml.h	/^    virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
ToDeclaration	tinyxml.h	/^    virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDeclaration	tinyxml.h	/^    virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDeclaration	tinyxml.h	/^    virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
ToDocument	tinyxml.h	/^    virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
ToDocument	tinyxml.h	/^    virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDocument	tinyxml.h	/^    virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDocument	tinyxml.h	/^    virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
ToElement	tinyxml.h	/^    TiXmlElement* ToElement() const     { return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToElement	tinyxml.h	/^    virtual TiXmlElement*           ToElement()           { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
ToElement	tinyxml.h	/^    virtual TiXmlElement*           ToElement()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToElement	tinyxml.h	/^    virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToElement	tinyxml.h	/^    virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
ToHostDouble	FunctionsCuda.cpp	/^double* ToHostDouble(unsigned pini,unsigned n,const double *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double *vg)
ToHostDouble	FunctionsCuda.h	/^double*   ToHostDouble (unsigned pini,unsigned n,const double   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double *ptrg)
ToHostDouble2	FunctionsCuda.cpp	/^tdouble2* ToHostDouble2(unsigned pini,unsigned n,const double2 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *vg)
ToHostDouble2	FunctionsCuda.h	/^tdouble2* ToHostDouble2(unsigned pini,unsigned n,const double2  *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *ptrg)
ToHostFloat	FunctionsCuda.cpp	/^float* ToHostFloat(unsigned pini,unsigned n,const float *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float *vg)
ToHostFloat	FunctionsCuda.h	/^float*    ToHostFloat  (unsigned pini,unsigned n,const float    *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float *ptrg)
ToHostFloat3	FunctionsCuda.cpp	/^tfloat3* ToHostFloat3(unsigned pini,unsigned n,const float3 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float3 *vg)
ToHostFloat3	FunctionsCuda.h	/^tfloat3*  ToHostFloat3 (unsigned pini,unsigned n,const float3   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float3 *ptrg)
ToHostFloat4	FunctionsCuda.cpp	/^tfloat4* ToHostFloat4(unsigned pini,unsigned n,const float4 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float4 *vg)
ToHostFloat4	FunctionsCuda.h	/^tfloat4*  ToHostFloat4 (unsigned pini,unsigned n,const float4   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float4 *ptrg)
ToHostInt	FunctionsCuda.cpp	/^int* ToHostInt(unsigned pini,unsigned n,const int *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const int *vg)
ToHostInt	FunctionsCuda.h	/^int*      ToHostInt    (unsigned pini,unsigned n,const int      *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const int *ptrg)
ToHostInt2	FunctionsCuda.cpp	/^tint2* ToHostInt2(unsigned pini,unsigned n,const int2 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const int2 *vg)
ToHostInt2	FunctionsCuda.h	/^tint2*    ToHostInt2   (unsigned pini,unsigned n,const int2     *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const int2 *ptrg)
ToHostPosd3	FunctionsCuda.cpp	/^tdouble3* ToHostPosd3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
ToHostPosd3	FunctionsCuda.h	/^tdouble3* ToHostPosd3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
ToHostPosf3	FunctionsCuda.cpp	/^tfloat3* ToHostPosf3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
ToHostPosf3	FunctionsCuda.h	/^tfloat3*  ToHostPosf3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
ToHostUint	FunctionsCuda.cpp	/^unsigned* ToHostUint(unsigned pini,unsigned n,const unsigned *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const unsigned *vg)
ToHostUint	FunctionsCuda.h	/^unsigned* ToHostUint   (unsigned pini,unsigned n,const unsigned *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const unsigned *ptrg)
ToHostWord	FunctionsCuda.cpp	/^word* ToHostWord(unsigned pini,unsigned n,const word *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const word *vg)
ToHostWord	FunctionsCuda.h	/^word*     ToHostWord   (unsigned pini,unsigned n,const word     *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const word *ptrg)
ToHostWord4	FunctionsCuda.cpp	/^ushort4* ToHostWord4(unsigned pini,unsigned n,const ushort4 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const ushort4 *vg)
ToHostWord4	FunctionsCuda.h	/^ushort4*  ToHostWord4  (unsigned pini,unsigned n,const ushort4  *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const ushort4 *ptrg)
ToLower	tinyxml.h	/^    inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
ToMatrix	JMotionPos.cpp	/^void JMotionPos::ToMatrix(){$/;"	f	class:JMotionPos	signature:()
ToMatrix	JMotionPos.h	/^  void ToMatrix();$/;"	p	class:JMotionPos	access:public	signature:()
ToNode	tinyxml.h	/^    TiXmlNode* ToNode() const           { return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
ToStr	JException.cpp	/^std::string JException::ToStr()const{$/;"	f	class:JException	signature:() const
ToStr	JException.h	/^  std::string ToStr()const;$/;"	p	class:JException	access:public	signature:() const
ToStr	JSaveCsv2.cpp	/^std::string JSaveCsv2::ToStr(const char *format,...)const{$/;"	f	class:jcsv::JSaveCsv2	signature:(const char *format,...) const
ToStr	JSaveCsv2.h	/^  std::string ToStr(const char *format,...)const;$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const char *format,...) const
ToStr	JSpaceProperties.cpp	/^std::string JSpacePropProperty::ToStr()const{$/;"	f	class:JSpacePropProperty	signature:() const
ToStr	JSpaceProperties.cpp	/^std::string JSpacePropValue::ToStr()const{$/;"	f	class:JSpacePropValue	signature:() const
ToStr	JSpaceProperties.h	/^  std::string ToStr()const;$/;"	p	class:JSpacePropProperty	access:public	signature:() const
ToStr	JSpaceProperties.h	/^  std::string ToStr()const;$/;"	p	class:JSpacePropValue	access:public	signature:() const
ToStr	JXml.cpp	/^std::string JXml::ToStr(double v,const char* fmt){$/;"	f	class:JXml	signature:(double v,const char* fmt)
ToStr	JXml.h	/^  static std::string ToStr(bool v){ return(v? "true": "false"); }$/;"	f	class:JXml	access:public	signature:(bool v)
ToStr	JXml.h	/^  static std::string ToStr(double v,const char* fmt="%g");$/;"	p	class:JXml	access:public	signature:(double v,const char* fmt=Ó)
ToString	JRangeFilter.cpp	/^std::string JRangeFilter::ToString()const{$/;"	f	class:JRangeFilter	signature:() const
ToString	JRangeFilter.h	/^  std::string ToString()const;$/;"	p	class:JRangeFilter	access:public	signature:() const
ToString	JSpaceEParms.cpp	/^std::string JSpaceEParms::ToString(unsigned pos)const{$/;"	f	class:JSpaceEParms	signature:(unsigned pos) const
ToString	JSpaceEParms.h	/^  std::string ToString(unsigned pos)const;$/;"	p	class:JSpaceEParms	access:public	signature:(unsigned pos) const
ToTDouble2	TypesDef.h	/^inline tdouble2 ToTDouble2(const tfloat2& v){ return(TDouble2(v.x,v.y)); }$/;"	f	signature:(const tfloat2& v)
ToTDouble3	TypesDef.h	/^inline tdouble3 ToTDouble3(const tfloat3& v){ return(TDouble3(v.x,v.y,v.z)); }$/;"	f	signature:(const tfloat3& v)
ToTDouble4	TypesDef.h	/^inline tdouble4 ToTDouble4(const tfloat4& v){ return(TDouble4(v.x,v.y,v.z,v.w)); }$/;"	f	signature:(const tfloat4& v)
ToTFloat2	TypesDef.h	/^inline tfloat2 ToTFloat2(const tdouble2& v){ return(TFloat2(float(v.x),float(v.y))); }$/;"	f	signature:(const tdouble2& v)
ToTFloat3	JCellDivGpu_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cudiv	signature:(const float3& v)
ToTFloat3	JGauge_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cugauge	signature:(const float3& v)
ToTFloat3	JSphGpu_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cusph	signature:(const float3& v)
ToTFloat3	TypesDef.h	/^inline tfloat3 ToTFloat3(const tdouble3& v){ return(TFloat3(float(v.x),float(v.y),float(v.z))); }$/;"	f	signature:(const tdouble3& v)
ToTFloat4	TypesDef.h	/^inline tfloat4 ToTFloat4(const tdouble4& v){ return(TFloat4(float(v.x),float(v.y),float(v.z),float(v.w))); }$/;"	f	signature:(const tdouble4& v)
ToTInt3	TypesDef.h	/^inline tint3 ToTInt3(const tuint3& v){ return(TInt3(int(v.x),int(v.y),int(v.z))); }$/;"	f	signature:(const tuint3& v)
ToTMatrix3f	TypesDef.h	/^inline tmatrix3f ToTMatrix3f(const tmatrix3d& v){ return(TMatrix3f(float(v.a11),float(v.a12),float(v.a13),float(v.a21),float(v.a22),float(v.a23),float(v.a31),float(v.a32),float(v.a33))); }$/;"	f	signature:(const tmatrix3d& v)
ToTUint3	TypesDef.h	/^inline tuint3 ToTUint3(const tint3& v){ return(TUint3(unsigned(v.x),unsigned(v.y),unsigned(v.z))); }$/;"	f	signature:(const tint3& v)
ToText	tinyxml.h	/^    TiXmlText* ToText() const           { return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToText	tinyxml.h	/^    virtual TiXmlText*              ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToText	tinyxml.h	/^    virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
ToText	tinyxml.h	/^    virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToText	tinyxml.h	/^    virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
ToUnknown	tinyxml.h	/^    TiXmlUnknown* ToUnknown() const     { return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToUnknown	tinyxml.h	/^    virtual TiXmlUnknown*           ToUnknown()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToUnknown	tinyxml.h	/^    virtual TiXmlUnknown*           ToUnknown()     { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
ToUnknown	tinyxml.h	/^    virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToUnknown	tinyxml.h	/^    virtual const TiXmlUnknown*     ToUnknown()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
TotalNp	JSph.h	/^  ullong TotalNp;          \/\/\/<Total number of simulated particles (no cuenta las particulas inlet no validas).$/;"	m	class:JSph	access:protected
TpArraySize	JArraysCpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	t	class:JArraysCpu	typeref:enum:JArraysCpu::__anon3	access:public
TpArraySize	JArraysGpu.h	/^  typedef enum{ SIZE_1B=1,SIZE_2B=2,SIZE_4B=4,SIZE_8B=8,SIZE_12B=12,SIZE_16B=16,SIZE_24B=24,SIZE_32B=32 }TpArraySize;  \/\/-Tipos de arrays.$/;"	t	class:JArraysGpu	typeref:enum:JArraysGpu::__anon4	access:public
TpAxisDiv	JPartDataBi4.h	/^  typedef enum{ DIV_None=0,DIV_X=1,DIV_Y=2,DIV_Z=3,DIV_Unknown=99 }TpAxisDiv; $/;"	t	class:JPartDataBi4	typeref:enum:JPartDataBi4::__anon19	access:public
TpBlockSizeMode	Types.h	/^}TpBlockSizeMode; $/;"	t	typeref:enum:__anon56
TpByteOrder	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	t	namespace:fun	typeref:enum:fun::__anon1
TpCellMode	Types.h	/^}TpCellMode; $/;"	t	typeref:enum:__anon55
TpData	JBinaryData.h	/^  }TpData; $/;"	t	class:JBinaryDataDef	typeref:enum:JBinaryDataDef::__anon5	access:public
TpData	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon11	access:public
TpDataNull	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
TpDeltaSph	Types.h	/^}TpDeltaSph; $/;"	t	typeref:enum:__anon52
TpDouble1	JSaveCsv2.h	/^  TpDouble1=14,$/;"	e	enum:jcsv::__anon23
TpDouble2	JSaveCsv2.h	/^  TpDouble2=15,$/;"	e	enum:jcsv::__anon23
TpDouble3	JSaveCsv2.h	/^  TpDouble3=16,$/;"	e	enum:jcsv::__anon23
TpDouble4	JSaveCsv2.h	/^  TpDouble4=17$/;"	e	enum:jcsv::__anon23
TpFloat1	JSaveCsv2.h	/^  TpFloat1=10,$/;"	e	enum:jcsv::__anon23
TpFloat2	JSaveCsv2.h	/^  TpFloat2=11,$/;"	e	enum:jcsv::__anon23
TpFloat3	JSaveCsv2.h	/^  TpFloat3=12,$/;"	e	enum:jcsv::__anon23
TpFloat4	JSaveCsv2.h	/^  TpFloat4=13,$/;"	e	enum:jcsv::__anon23
TpFormat	JSaveCsv2.h	/^}TpFormat; $/;"	t	namespace:jcsv	typeref:enum:jcsv::__anon23
TpFtMode	Types.h	/^}TpFtMode;  $/;"	t	typeref:enum:__anon54
TpGauge	JGaugeItem.h	/^  }TpGauge;$/;"	t	class:JGaugeItem	typeref:enum:JGaugeItem::__anon15	access:public
TpInitialize	JSphInitialize.h	/^  typedef enum{ IT_FluidVel=1 }TpInitialize; $/;"	t	class:JSphInitializeOp	typeref:enum:JSphInitializeOp::__anon34	access:public
TpInterStep	Types.h	/^}TpInterStep;$/;"	t	typeref:enum:__anon51
TpKernel	Types.h	/^}TpKernel;                  $/;"	t	typeref:enum:__anon49
TpLink	JSpaceProperties.h	/^  typedef enum{ LINK_Mk=1,LINK_MkBound=2,LINK_MkFluid=3 }TpLink;     \/\/\/<Types of link.$/;"	t	class:JSpacePropLink	typeref:enum:JSpacePropLink::__anon27	access:public
TpLlong1	JSaveCsv2.h	/^  TpLlong1=8,$/;"	e	enum:jcsv::__anon23
TpModeNormal	JFormatFiles2.h	/^  typedef enum{ NorNULL,NorOriginal,NorInvert,NorTwoFace }TpModeNormal; $/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon10	access:public
TpModeOut	Types.h	/^}TpModeOut;   $/;"	t	typeref:enum:__anon46
TpMode_Out	JLog2.h	/^  typedef enum{ Out_Default=4,Out_ScrFile=3,Out_File=2,Out_Screen=1,Out_None=0 }TpMode_Out;$/;"	t	class:JLog2	typeref:enum:JLog2::__anon17	access:public
TpMotionMode	JSphMotion.h	/^  }TpMotionMode;   $/;"	t	class:JSphMotion	typeref:enum:JSphMotion::__anon36	access:public
TpMotionMov	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	t	class:JMotionMov	typeref:enum:JMotionMov::__anon18	access:public
TpPartFixed	JParticlesDef.h	/^  TpPartFixed=0,      \/\/\/<Fixed boundary particles.$/;"	e	enum:__anon21
TpPartFloating	JParticlesDef.h	/^  TpPartFloating=2,   \/\/\/<Floating boundary particles.$/;"	e	enum:__anon21
TpPartFluid	JParticlesDef.h	/^  TpPartFluid=3,      \/\/\/<Fluid particles.$/;"	e	enum:__anon21
TpPartGetStrCode	JParticlesDef.h	/^inline const char* TpPartGetStrCode(const TpParticles type){$/;"	f	signature:(const TpParticles type)
TpPartGetType	JParticlesDef.h	/^inline TpParticles TpPartGetType(std::string strcode){$/;"	f	signature:(std::string strcode)
TpPartMoving	JParticlesDef.h	/^  TpPartMoving=1,     \/\/\/<Moving boundary particles.$/;"	e	enum:__anon21
TpPartUnknown	JParticlesDef.h	/^  TpPartUnknown=9     \/\/\/<Unknown or undefined type of particles.$/;"	e	enum:__anon21
TpParticles	JParticlesDef.h	/^}TpParticles; $/;"	t	typeref:enum:__anon21
TpPeri	JPeriodicDef.h	/^}TpPeri; $/;"	t	typeref:enum:__anon22
TpPeriFromPeriActive	JPeriodicDef.h	/^inline TpPeri TpPeriFromPeriActive(byte periactive){$/;"	f	signature:(byte periactive)
TpPeriName	JPeriodicDef.h	/^inline const char* TpPeriName(TpPeri tperi){$/;"	f	signature:(TpPeri tperi)
TpSaveDat	Types.h	/^}TpSaveDat; $/;"	t	typeref:enum:__anon47
TpShape	JFormatFiles2.h	/^  }TpShape;$/;"	t	class:JFormatFiles2	typeref:enum:JFormatFiles2::__anon14	access:public
TpShifting	Types.h	/^}TpShifting; $/;"	t	typeref:enum:__anon53
TpSigned1	JSaveCsv2.h	/^  TpSigned1=0,$/;"	e	enum:jcsv::__anon23
TpSigned2	JSaveCsv2.h	/^  TpSigned2=1,$/;"	e	enum:jcsv::__anon23
TpSigned3	JSaveCsv2.h	/^  TpSigned3=2,$/;"	e	enum:jcsv::__anon23
TpSigned4	JSaveCsv2.h	/^  TpSigned4=3,$/;"	e	enum:jcsv::__anon23
TpStep	Types.h	/^}TpStep;                    $/;"	t	typeref:enum:__anon48
TpTypeData	TypesDef.h	/^}TpTypeData; $/;"	t	typeref:enum:__anon74
TpUllong1	JSaveCsv2.h	/^  TpUllong1=9,$/;"	e	enum:jcsv::__anon23
TpUnsigned1	JSaveCsv2.h	/^  TpUnsigned1=4,$/;"	e	enum:jcsv::__anon23
TpUnsigned2	JSaveCsv2.h	/^  TpUnsigned2=5,$/;"	e	enum:jcsv::__anon23
TpUnsigned3	JSaveCsv2.h	/^  TpUnsigned3=6,$/;"	e	enum:jcsv::__anon23
TpUnsigned4	JSaveCsv2.h	/^  TpUnsigned4=7,$/;"	e	enum:jcsv::__anon23
TpVelocity	JSphInitialize.h	/^  }TpVelocity;$/;"	t	class:JSphInitializeOp_FluidVel	typeref:enum:JSphInitializeOp_FluidVel::__anon35	access:private
TpVisco	JPartDataHead.h	/^  }TpVisco;            $/;"	t	class:JPartDataHead	typeref:enum:JPartDataHead::__anon20	access:public
TpVisco	Types.h	/^}TpVisco;            $/;"	t	typeref:enum:__anon50
TrasMatrix3x3	FunctionsMath.h	/^inline tmatrix3f TrasMatrix3x3(const tmatrix3f &a){$/;"	f	namespace:fmath	signature:(const tmatrix3f &a)
TrasMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d TrasMatrix3x3(const tmatrix3d &a){$/;"	f	namespace:cumath	signature:(const tmatrix3d &a)
TrasMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f TrasMatrix3x3(const tmatrix3f &a){$/;"	f	namespace:cumath	signature:(const tmatrix3f &a)
Type	JBinaryData.h	/^  const JBinaryDataDef::TpData Type;$/;"	m	class:JBinaryDataArray	access:private
Type	JGaugeItem.h	/^  const TpGauge Type;$/;"	m	class:JGaugeItem	access:public
Type	JMotionMov.h	/^  const TpMotionMov Type;$/;"	m	class:JMotionMov	access:public
Type	JPartDataHead.h	/^  TpParticles Type;   \/\/\/<Type of particle.$/;"	m	class:JPartDataHeadMkBlock	access:public
Type	JSpaceParts.h	/^  const TpParticles Type;    \/\/\/<Type of particle.$/;"	m	class:JSpacePartBlock	access:public
Type	JSpaceProperties.h	/^  TpLink Type;                         \/\/\/<Type of link.$/;"	m	class:JSpacePropLink	access:private
Type	JSphInitialize.h	/^  const TpInitialize Type;   \/\/\/<Type of particle.$/;"	m	class:JSphInitializeOp	access:public
Type	JSphMk.h	/^  const TpParticles Type; \/\/\/<Type of particle.$/;"	m	class:JSphMkBlock	access:public
Type	tinyxml.h	/^    int Type() const    { return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Type32	JRadixSort.h	/^  bool Type32;$/;"	m	class:JRadixSort	access:private
TypeBlock	JMotionMov.h	/^  const bool TypeBlock;$/;"	m	class:JMotionMov	access:public
TypeBool	TypesDef.h	/^  TypeNull=0,TypeText=1,TypeBool=2$/;"	e	enum:__anon74
TypeChar	TypesDef.h	/^  ,TypeChar  =10, TypeUchar  =11$/;"	e	enum:__anon74
TypeDouble	TypesDef.h	/^  ,TypeFloat =18, TypeDouble =19$/;"	e	enum:__anon74
TypeDouble2	TypesDef.h	/^  ,TypeFloat2=42, TypeDouble2=43 $/;"	e	enum:__anon74
TypeDouble3	TypesDef.h	/^  ,TypeFloat3=62, TypeDouble3=63 $/;"	e	enum:__anon74
TypeDouble4	TypesDef.h	/^  ,TypeFloat4=82, TypeDouble4=83 $/;"	e	enum:__anon74
TypeFloat	TypesDef.h	/^  ,TypeFloat =18, TypeDouble =19$/;"	e	enum:__anon74
TypeFloat2	TypesDef.h	/^  ,TypeFloat2=42, TypeDouble2=43 $/;"	e	enum:__anon74
TypeFloat3	TypesDef.h	/^  ,TypeFloat3=62, TypeDouble3=63 $/;"	e	enum:__anon74
TypeFloat4	TypesDef.h	/^  ,TypeFloat4=82, TypeDouble4=83 $/;"	e	enum:__anon74
TypeFmt	JSaveCsv2.h	/^  const TpFormat TypeFmt;$/;"	m	class:jcsv::Fmt	access:public
TypeInt	TypesDef.h	/^  ,TypeInt   =14, TypeUint   =15$/;"	e	enum:__anon74
TypeInt2	TypesDef.h	/^  ,TypeInt2  =40, TypeUint2  =41$/;"	e	enum:__anon74
TypeInt3	TypesDef.h	/^  ,TypeInt3  =60, TypeUint3  =61$/;"	e	enum:__anon74
TypeInt4	TypesDef.h	/^  ,TypeInt4  =80, TypeUint4  =81$/;"	e	enum:__anon74
TypeIsTriple	JBinaryData.cpp	/^bool JBinaryDataDef::TypeIsTriple(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
TypeIsTriple	JBinaryData.h	/^  static bool TypeIsTriple(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
TypeLlong	TypesDef.h	/^  ,TypeLlong =16, TypeUllong =17$/;"	e	enum:__anon74
TypeNull	TypesDef.h	/^  TypeNull=0,TypeText=1,TypeBool=2$/;"	e	enum:__anon74
TypeOfValue	JBinaryData.cpp	/^JBinaryDataDef::TpData JBinaryData::TypeOfValue(const std::string &name)const{$/;"	f	class:JBinaryData	signature:(const std::string &name) const
TypeOfValue	JBinaryData.cpp	/^JBinaryDataDef::TpData JBinaryData::TypeOfValue(unsigned index)const{$/;"	f	class:JBinaryData	signature:(unsigned index) const
TypeOfValue	JBinaryData.h	/^  JBinaryDataDef::TpData TypeOfValue(const std::string &name)const;$/;"	p	class:JBinaryData	access:public	signature:(const std::string &name) const
TypeOfValue	JBinaryData.h	/^  JBinaryDataDef::TpData TypeOfValue(unsigned index)const;$/;"	p	class:JBinaryData	access:public	signature:(unsigned index) const
TypeParts	JGaugeItem.h	/^  TpParticles TypeParts;$/;"	m	class:JGaugeForce	access:protected
TypeShort	TypesDef.h	/^  ,TypeShort =12, TypeUshort =13$/;"	e	enum:__anon74
TypeSimple	JMotionList.h	/^  bool TypeSimple;$/;"	m	class:JMotionListData	access:private
TypeSimple	JMotionPos.h	/^  bool TypeSimple;$/;"	m	class:JMotionPos	access:private
TypeSyMatrix3f	TypesDef.h	/^  ,TypeSyMatrix3f=100$/;"	e	enum:__anon74
TypeText	TypesDef.h	/^  TypeNull=0,TypeText=1,TypeBool=2$/;"	e	enum:__anon74
TypeToStr	JBinaryData.cpp	/^std::string JBinaryDataDef::TypeToStr(TpData type){$/;"	f	class:JBinaryDataDef	signature:(TpData type)
TypeToStr	JBinaryData.h	/^  static std::string TypeToStr(TpData type);$/;"	p	class:JBinaryDataDef	access:public	signature:(TpData type)
TypeToStr	TypesDef.h	/^inline const char* TypeToStr(TpTypeData type){$/;"	f	signature:(TpTypeData type)
TypeUchar	TypesDef.h	/^  ,TypeChar  =10, TypeUchar  =11$/;"	e	enum:__anon74
TypeUint	TypesDef.h	/^  ,TypeInt   =14, TypeUint   =15$/;"	e	enum:__anon74
TypeUint2	TypesDef.h	/^  ,TypeInt2  =40, TypeUint2  =41$/;"	e	enum:__anon74
TypeUint3	TypesDef.h	/^  ,TypeInt3  =60, TypeUint3  =61$/;"	e	enum:__anon74
TypeUint4	TypesDef.h	/^  ,TypeInt4  =80, TypeUint4  =81$/;"	e	enum:__anon74
TypeUllong	TypesDef.h	/^  ,TypeLlong =16, TypeUllong =17$/;"	e	enum:__anon74
TypeUshort	TypesDef.h	/^  ,TypeShort =12, TypeUshort =13$/;"	e	enum:__anon74
UChar8	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
UInt32	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
ULlong64	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
UNKNOWN	tinyxml.h	/^        UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
USE_FLOATING	Types.h	227;"	d
USE_FTEXTERNAL	Types.h	229;"	d
USE_NOFLOATING	Types.h	228;"	d
UShort16	JFormatFiles2.h	/^  typedef enum{ UChar8,Char8,UShort16,Short16,UInt32,Int32,Float32,Double64,ULlong64,Llong64,TpDataNull }TpData;$/;"	e	enum:JFormatFiles2::__anon11
Uint3RangeStr	Functions.h	/^inline std::string Uint3RangeStr(const tuint3 &v,const tuint3 &v2){ return(std::string("(")+Uint3Str(v)+")-("+Uint3Str(v2)+")"); }$/;"	f	namespace:fun	signature:(const tuint3 &v,const tuint3 &v2)
Uint3Str	Functions.cpp	/^std::string Uint3Str(const tuint3 &v){$/;"	f	namespace:fun	signature:(const tuint3 &v)
Uint3Str	Functions.h	/^std::string Uint3Str(const tuint3 &v);$/;"	p	namespace:fun	signature:(const tuint3 &v)
UintStr	Functions.cpp	/^std::string UintStr(unsigned v,const char* fmt){$/;"	f	namespace:fun	signature:(unsigned v,const char* fmt)
UintStr	Functions.h	/^std::string UintStr(unsigned v,const char* fmt="%u");$/;"	p	namespace:fun	signature:(unsigned v,const char* fmt=Ó)
UintStrFill	Functions.cpp	/^std::string UintStrFill(unsigned v,unsigned vmax,const char fillchar){$/;"	f	namespace:fun	signature:(unsigned v,unsigned vmax,const char fillchar)
UintStrFill	Functions.h	/^std::string UintStrFill(unsigned v,unsigned vmax,const char fillchar='0');$/;"	p	namespace:fun	signature:(unsigned v,unsigned vmax,const char fillchar=Ã)
UlongStr	Functions.cpp	/^std::string UlongStr(ullong v){$/;"	f	namespace:fun	signature:(ullong v)
UlongStr	Functions.h	/^std::string UlongStr(ullong v);$/;"	p	namespace:fun	signature:(ullong v)
Unknown	tinyxml.h	/^    TiXmlUnknown* Unknown() const   { return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
Update	JGaugeItem.h	/^  bool Update(double timestep)const{ return(timestep>=ComputeNext && ComputeStart<=timestep && timestep<=ComputeEnd); }$/;"	f	class:JGaugeItem	access:public	signature:(double timestep) const
UpdateFtObjs	JSphGpuSingle.cpp	/^void JSphGpuSingle::UpdateFtObjs(){$/;"	f	class:JSphGpuSingle	signature:()
UpdateFtObjs	JSphGpuSingle.h	/^  void UpdateFtObjs();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
UpdateMaxValues	JSphCpuSingle.cpp	/^void JSphCpuSingle::UpdateMaxValues(){$/;"	f	class:JSphCpuSingle	signature:()
UpdateMaxValues	JSphCpuSingle.h	/^  void UpdateMaxValues();$/;"	p	class:JSphCpuSingle	access:protected	signature:()
UpdateMaxValues	JSphGpuSingle.cpp	/^void JSphGpuSingle::UpdateMaxValues(){$/;"	f	class:JSphGpuSingle	signature:()
UpdateMaxValues	JSphGpuSingle.h	/^  void UpdateMaxValues();$/;"	p	class:JSphGpuSingle	access:protected	signature:()
UpdatePeriodicPos	JSph.cpp	/^tdouble3 JSph::UpdatePeriodicPos(tdouble3 ps)const{$/;"	f	class:JSph	signature:(tdouble3 ps) const
UpdatePeriodicPos	JSph.h	/^  tdouble3 UpdatePeriodicPos(tdouble3 ps)const;$/;"	p	class:JSph	access:protected	signature:(tdouble3 ps) const
UpdatePos	JSphCpu.cpp	/^void JSphCpu::UpdatePos(tdouble3 rpos,double movx,double movy,double movz$/;"	f	class:JSphCpu	signature:(tdouble3 rpos,double movx,double movy,double movz ,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code) const
UpdatePos	JSphCpu.h	/^  void UpdatePos(tdouble3 pos0,double dx,double dy,double dz,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code)const;$/;"	p	class:JSphCpu	access:public	signature:(tdouble3 pos0,double dx,double dy,double dz,bool outrhop,unsigned p,tdouble3 *pos,unsigned *cell,typecode *code) const
UpdateProperty	JSpaceParts.cpp	/^void JSpacePartBlock::UpdateProperty(){$/;"	f	class:JSpacePartBlock	signature:()
UpdateProperty	JSpaceParts.h	/^  void UpdateProperty();$/;"	p	class:JSpacePartBlock	access:public	signature:()
UptadeMkNumbers	JPartDataHead.cpp	/^void JPartDataHead::UptadeMkNumbers(){$/;"	f	class:JPartDataHead	signature:()
UptadeMkNumbers	JPartDataHead.h	/^  void UptadeMkNumbers();$/;"	p	class:JPartDataHead	access:private	signature:()
UseAwas	JWaveGen.h	/^  bool UseAwas()const{ return(Use_Awas); } $/;"	f	class:JWaveGen	access:public	signature:() const
UseDEM	JSph.h	/^  bool UseDEM;         \/\/\/<Use DEM for boundary collisions.$/;"	m	class:JSph	access:protected
UseGpu	JWaveGen.h	/^  const bool UseGpu;$/;"	m	class:JWaveGen	access:private
UseOmp	JPartsLoad4.h	/^  const bool UseOmp;$/;"	m	class:JPartsLoad4	access:protected
UseOmp	JRadixSort.h	/^  const bool UseOmp;$/;"	m	class:JRadixSort	access:private
UseOmp	JWaveGen.h	/^  const bool UseOmp;$/;"	m	class:JWaveGen	access:private
UseSpecialConfig	JTimeOut.h	/^  bool UseSpecialConfig()const{ return(SpecialConfig); }$/;"	f	class:JTimeOut	access:public	signature:() const
Use_Awas	JWaveGen.h	/^  bool Use_Awas;    \/\/-Use of AWAS-Zsurf.$/;"	m	class:JWaveGen	access:private
VISCO_Artificial	JPartDataHead.h	/^    VISCO_Artificial=1,        \/\/\/<Artificial viscosity.$/;"	e	enum:JPartDataHead::__anon20
VISCO_Artificial	Types.h	/^  VISCO_Artificial=1,        \/\/\/<Artificial viscosity.$/;"	e	enum:__anon50
VISCO_LaminarSPS	JPartDataHead.h	/^    VISCO_LaminarSPS=2,        \/\/\/<Laminar viscosity and Sub-Partice Scale Turbulence.$/;"	e	enum:JPartDataHead::__anon20
VISCO_LaminarSPS	Types.h	/^  VISCO_LaminarSPS=2,        \/\/\/<Laminar viscosity and Sub-Partice Scale Turbulence.$/;"	e	enum:__anon50
VISCO_None	JPartDataHead.h	/^    VISCO_None=0 $/;"	e	enum:JPartDataHead::__anon20
VISCO_None	Types.h	/^  VISCO_None=0 $/;"	e	enum:__anon50
VSort	JCellDivCpu.h	/^  byte        *VSort;            \/\/\/<Memory to reorder particles. | Memoria para reordenar particulas. [sizeof(tdouble3)*Np]$/;"	m	class:JCellDivCpu	access:protected
VSortDouble3	JCellDivCpu.h	/^  tdouble3    *VSortDouble3;     \/\/\/<To order vectors tdouble3 (write to VSort). | Para ordenar vectores tdouble3 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortFloat	JCellDivCpu.h	/^  float       *VSortFloat;       \/\/\/<To order vectors float (write to VSort). | Para ordenar vectores float (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortFloat3	JCellDivCpu.h	/^  tfloat3     *VSortFloat3;      \/\/\/<To order vectors tfloat3 (write to VSort). | Para ordenar vectores tfloat3 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortFloat4	JCellDivCpu.h	/^  tfloat4     *VSortFloat4;      \/\/\/<To order vectors tfloat4 (write to VSort). | Para ordenar vectores tfloat4 (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortInt	JCellDivCpu.h	/^  int         *VSortInt;         \/\/\/<To order vectors int (write to VSort). | Para ordenar vectores int (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortSymmatrix3f	JCellDivCpu.h	/^  tsymatrix3f *VSortSymmatrix3f; \/\/\/<To order vectors tsymatrix3f (write to VSort). | Para ordenar vectores tsymatrix3f (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
VSortWord	JCellDivCpu.h	/^  word        *VSortWord;        \/\/\/<To order word vectors (write to VSort). | Para ordenar vectores word (apunta a VSort).$/;"	m	class:JCellDivCpu	access:protected
Value	JSpaceProperties.h	/^  std::string Value;                   \/\/\/<Value when it is simple. $/;"	m	class:JSpacePropValue	access:private
Value	tinyxml.h	/^    const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
Value	tinyxml.h	/^    const char*     Value() const       { return value.c_str(); }       \/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueMax	JRangeFilter.h	/^  unsigned ValueMin,ValueMax;$/;"	m	class:JRangeFilter	access:private
ValueMin	JRangeFilter.h	/^  unsigned ValueMin,ValueMax;$/;"	m	class:JRangeFilter	access:private
ValueNull	JSaveDt.h	/^  StValue ValueNull;$/;"	m	class:JSaveDt	access:private
ValueStr	tinyxml.h	/^    const std::string& ValueStr() const { return value; }               \/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueStr	tinyxml.h	/^    const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
ValueTStr	tinyxml.h	/^    const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
ValueToXml	JBinaryData.cpp	/^std::string JBinaryData::ValueToXml(const StValue &v)const{$/;"	f	class:JBinaryData	signature:(const StValue &v) const
ValueToXml	JBinaryData.h	/^  std::string ValueToXml(const StValue &v)const;$/;"	p	class:JBinaryData	access:private	signature:(const StValue &v) const
Values	JBinaryData.h	/^  std::vector<StValue> Values;$/;"	m	class:JBinaryData	access:private
Values	JLinearValue.h	/^  double *Values;$/;"	m	class:JLinearValue	access:protected
Values	JMeanValues.h	/^  double *Values;$/;"	m	class:JMeanMoving	access:protected
Values	JMeanValues.h	/^  ullong Values;$/;"	m	class:JMeanValue	access:public
Values	JSpaceProperties.h	/^  std::vector<JSpacePropValue*> Values;\/\/\/<List of values.$/;"	m	class:JSpacePropProperty	access:private
Values	JSphDtFixed.h	/^  double *Values;$/;"	m	class:JSphDtFixed	access:protected
Values	JSphVisco.h	/^  float *Values;$/;"	m	class:JSphVisco	access:protected
ValuesAng	JMotionMov.h	/^  double *ValuesAng;    \/\/-Angulos, siemgre en grados.$/;"	m	class:JMotionDataFile	access:private
ValuesCachePrepare	JBinaryData.cpp	/^void JBinaryData::ValuesCachePrepare(bool down){$/;"	f	class:JBinaryData	signature:(bool down)
ValuesCachePrepare	JBinaryData.h	/^  void ValuesCachePrepare(bool down);$/;"	p	class:JBinaryData	access:private	signature:(bool down)
ValuesCacheReset	JBinaryData.cpp	/^void JBinaryData::ValuesCacheReset(){$/;"	f	class:JBinaryData	signature:()
ValuesCacheReset	JBinaryData.h	/^  void ValuesCacheReset();$/;"	p	class:JBinaryData	access:private	signature:()
ValuesData	JBinaryData.h	/^  byte* ValuesData;$/;"	m	class:JBinaryData	access:private
ValuesFull	JMeanValues.h	/^  bool ValuesFull;      \/\/\/< Array of values is full.$/;"	m	class:JMeanMoving	access:protected
ValuesModif	JBinaryData.h	/^  bool ValuesModif;$/;"	m	class:JBinaryData	access:private
ValuesPos	JMotionMov.h	/^  tdouble3 *ValuesPos;  \/\/-Posiciones.$/;"	m	class:JMotionDataFile	access:private
ValuesSize	JBinaryData.h	/^  unsigned ValuesSize;$/;"	m	class:JBinaryData	access:private
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,bool value){ return(name+"="+(value? "True": "False")+""); }$/;"	f	namespace:fun	signature:(const std::string &name,bool value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,const char *value){ return(name+"=\\""+value+"\\""); }$/;"	f	namespace:fun	signature:(const std::string &name,const char *value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,const std::string &value){ return(name+"=\\""+value+"\\""); }$/;"	f	namespace:fun	signature:(const std::string &name,const std::string &value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,double value){ return(name+"="+DoubleStr(value)); }$/;"	f	namespace:fun	signature:(const std::string &name,double value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,float value){ return(name+"="+FloatStr(value)); }$/;"	f	namespace:fun	signature:(const std::string &name,float value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,int value){$/;"	f	namespace:fun	signature:(const std::string &name,int value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,tdouble3 value){ return(name+"=("+DoubleStr(value.x)+","+DoubleStr(value.y)+","+DoubleStr(value.z)+")"); }$/;"	f	namespace:fun	signature:(const std::string &name,tdouble3 value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,tfloat3 value){ return(name+"=("+FloatStr(value.x)+","+FloatStr(value.y)+","+FloatStr(value.z)+")"); }$/;"	f	namespace:fun	signature:(const std::string &name,tfloat3 value)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const double* values,std::string size,const char* fmt){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const double* values,std::string size,const char* fmt)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const float* values,std::string size,const char* fmt){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const float* values,std::string size,const char* fmt)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const int* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const int* values,std::string size)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const unsigned* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const unsigned* values,std::string size)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const word* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const word* values,std::string size)
VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned value){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,bool value);$/;"	p	namespace:fun	signature:(const std::string &name,bool value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,const char *value);$/;"	p	namespace:fun	signature:(const std::string &name,const char *value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,const std::string &value);$/;"	p	namespace:fun	signature:(const std::string &name,const std::string &value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,double value);$/;"	p	namespace:fun	signature:(const std::string &name,double value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,float value);$/;"	p	namespace:fun	signature:(const std::string &name,float value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,int value);$/;"	p	namespace:fun	signature:(const std::string &name,int value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,tdouble3 value);$/;"	p	namespace:fun	signature:(const std::string &name,tdouble3 value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,tfloat3 value);$/;"	p	namespace:fun	signature:(const std::string &name,tfloat3 value)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const double* values,std::string size="?",const char* fmt="%f");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const double* values,std::string size=Ó,const char* fmt=Ó)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const float* values,std::string size="?",const char* fmt="%f");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const float* values,std::string size=Ó,const char* fmt=Ó)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const int* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const int* values,std::string size=Ó)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const unsigned* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const unsigned* values,std::string size=Ó)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const word* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const word* values,std::string size=Ó)
VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned value);$/;"	p	namespace:fun	signature:(const std::string &name,unsigned value)
VecList	JSpaceEParms.h	/^  typedef std::vector<JSpaceEParmsItem> VecList;$/;"	t	class:JSpaceEParms	access:private
VecListIt	JSpaceEParms.h	/^  typedef std::vector<JSpaceEParmsItem>::iterator VecListIt;$/;"	t	class:JSpaceEParms	access:private
VecOrthogonal	FunctionsMath.h	/^inline tdouble3 VecOrthogonal(const tdouble3 &v,double module){$/;"	f	namespace:fmath	signature:(const tdouble3 &v,double module)
VecOrthogonal	FunctionsMath.h	/^inline tfloat3 VecOrthogonal(const tfloat3 &v,float module){$/;"	f	namespace:fmath	signature:(const tfloat3 &v,float module)
VecOrthogonal2	FunctionsMath.h	/^inline tdouble3 VecOrthogonal2(const tdouble3 &v,double module,bool first=true){$/;"	f	namespace:fmath	signature:(const tdouble3 &v,double module,bool first=true)
VecOrthogonal2	FunctionsMath.h	/^inline tfloat3 VecOrthogonal2(const tfloat3 &v,float module,bool first=true){$/;"	f	namespace:fmath	signature:(const tfloat3 &v,float module,bool first=true)
VecUnitary	FunctionsMath.h	/^inline tdouble3 VecUnitary(const tdouble3 &p1){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1)
VecUnitary	FunctionsMath.h	/^inline tfloat3 VecUnitary(const tfloat3 &p1){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1)
VecUnitarySafe	FunctionsMath.h	/^inline tdouble3 VecUnitarySafe(const tdouble3 &v){$/;"	f	namespace:fmath	signature:(const tdouble3 &v)
VecUnitarySafe	FunctionsMath.h	/^inline tfloat3 VecUnitarySafe(const tfloat3 &v){$/;"	f	namespace:fmath	signature:(const tfloat3 &v)
VectorSplitInt	Functions.cpp	/^unsigned VectorSplitInt(const std::string mark,const std::string &text,std::vector<int> &vec){$/;"	f	namespace:fun	signature:(const std::string mark,const std::string &text,std::vector<int> &vec)
VectorSplitInt	Functions.h	/^unsigned VectorSplitInt(const std::string mark,const std::string &text,std::vector<int> &vec);$/;"	p	namespace:fun	signature:(const std::string mark,const std::string &text,std::vector<int> &vec)
Vel	JMotionMov.h	/^  const tdouble3 Vel;$/;"	m	class:JMotionMovRect	access:public
Vel	JMotionMov.h	/^  const tdouble3 Vel;$/;"	m	class:JMotionMovRectAce	access:public
Vel	JMotionObj.h	/^  tdouble3 Vel;    \/\/-Solo se usa para el RectilinearAce$/;"	m	class:JMotionMovActive	access:public
Vel	JPartsOut.h	/^  tfloat3 *Vel;$/;"	m	class:JPartsOut	access:protected
Vel1	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
Vel2	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
Vel3	JSphInitialize.h	/^  float Vel1,Vel2,Vel3;$/;"	m	class:JSphInitializeOp_FluidVel	access:private
VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovCir	access:public
VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovCirAce	access:public
VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovRot	access:public
VelAng	JMotionMov.h	/^  const double VelAng;  \/\/-Siempre en grados\/s.$/;"	m	class:JMotionMovRotAce	access:public
VelAng	JMotionObj.h	/^  double VelAng;   \/\/-Solo se usa para el RotationAce$/;"	m	class:JMotionMovActive	access:public
VelAng	JSphAccInput.h	/^  tfloat3 *VelAng;           \/\/\/<Angular velocity variable to store values as the angular acceleration values are read from the input files. SL$/;"	m	class:JSphAccInputMk	access:protected
VelLin	JSphAccInput.h	/^  tfloat3 *VelLin;           \/\/\/<Linear velocity variable to store values as the linear acceleration values are read from the input files. SL$/;"	m	class:JSphAccInputMk	access:protected
VelMax	JSaveDt.h	/^  StValue VelMax[SizeValues];           \/\/\/<VelMax [SizeValues].$/;"	m	class:JSaveDt	access:private
VelMax	JSphCpu.h	/^  double VelMax;        \/\/\/<Maximum value of Vel[] sqrt(vel.x^2 + vel.y^2 + vel.z^2) computed in PreInteraction_Forces().$/;"	m	class:JSphCpu	access:protected
VelMax	JSphGpu.h	/^  double VelMax;      \/\/\/<Maximum value of Vel[] sqrt(vel.x^2 + vel.y^2 + vel.z^2) computed in PreInteraction_Forces().$/;"	m	class:JSphGpu	access:protected
VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovCirAce	access:public
VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovRectAce	access:public
VelPrev	JMotionMov.h	/^  const bool VelPrev;$/;"	m	class:JMotionMovRotAce	access:public
VelRhop	JPartsLoad4.h	/^  tfloat4 *VelRhop;$/;"	m	class:JPartsLoad4	access:protected
VelSimple	JMotionList.h	/^  tdouble3 VelSimple;$/;"	m	class:JMotionListData	access:private
VelType	JSphInitialize.h	/^  TpVelocity VelType;  \/\/\/<Type of velocity.$/;"	m	class:JSphInitializeOp_FluidVel	access:private
Velini	JSpaceParts.h	/^  tdouble3 Velini;$/;"	m	class:JSpacePartBlock_Floating	access:private
Velrhop	JSphGpu.h	/^  tfloat4 *Velrhop;$/;"	m	class:JSphGpu	access:protected
VelrhopM1c	JSphCpu.h	/^  tfloat4 *VelrhopM1c;  \/\/\/<Verlet: in order to keep previous values. | Verlet: para guardar valores anteriores.$/;"	m	class:JSphCpu	access:protected
VelrhopM1g	JSphGpu.h	/^  float4 *VelrhopM1g;  \/\/\/<Verlet: in order to keep previous values. | Verlet: para guardar valores anteriores.$/;"	m	class:JSphGpu	access:protected
VelrhopPrec	JSphCpu.h	/^  tfloat4 *VelrhopPrec;$/;"	m	class:JSphCpu	access:protected
VelrhopPreg	JSphGpu.h	/^  float4 *VelrhopPreg;$/;"	m	class:JSphGpu	access:protected
Velrhopc	JSphCpu.h	/^  tfloat4 *Velrhopc;$/;"	m	class:JSphCpu	access:protected
Velrhopg	JSphGpu.h	/^  float4 *Velrhopg;$/;"	m	class:JSphGpu	access:protected
VerletStep	JSph.h	/^  int VerletStep;$/;"	m	class:JSph	access:protected
VerletSteps	JCfgRun.h	/^  int VerletSteps;$/;"	m	class:JCfgRun	access:public
VerletSteps	JSph.h	/^  int VerletSteps;            \/\/\/<Number of steps to apply Eulerian equations.$/;"	m	class:JSph	access:protected
Version	tinyxml.h	/^    const char *Version() const         { return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
ViscDtMax	JSaveDt.h	/^  StValue ViscDtMax[SizeValues];        \/\/\/<ViscDtMax [SizeValues].$/;"	m	class:JSaveDt	access:private
ViscDtMax	JSphCpu.h	/^  float ViscDtMax;      \/\/\/<Max value of ViscDt calculated in Interaction_Forces() \/ Valor maximo de ViscDt calculado en Interaction_Forces().$/;"	m	class:JSphCpu	access:protected
ViscDtMax	JSphGpu.h	/^  float ViscDtMax;    \/\/\/<Maximum value of ViscDt computed in Interaction_Forces().$/;"	m	class:JSphGpu	access:protected
ViscDtg	JSphGpu.h	/^  float *ViscDtg;$/;"	m	class:JSphGpu	access:protected
Visco	JCfgRun.h	/^  float Visco;$/;"	m	class:JCfgRun	access:public
Visco	JSph.h	/^  float Visco;  $/;"	m	class:JSph	access:protected
ViscoBoundFactor	JCfgRun.h	/^  float ViscoBoundFactor;$/;"	m	class:JCfgRun	access:public
ViscoBoundFactor	JPartDataHead.h	/^  float ViscoBoundFactor;\/\/\/<For boundary interaction use ViscoValue*ViscoBoundFactor.$/;"	m	class:JPartDataHead	access:private
ViscoBoundFactor	JSph.h	/^  float ViscoBoundFactor;     \/\/\/<For boundary interaction use Visco*ViscoBoundFactor.                  | Para interaccion con contorno usa Visco*ViscoBoundFactor.$/;"	m	class:JSph	access:protected
ViscoTime	JSph.h	/^  JSphVisco *ViscoTime;       \/\/\/<Provides a viscosity value as a function of simulation time.          | Proporciona un valor de viscosidad en funcion del instante de la simulacion.$/;"	m	class:JSph	access:protected
ViscoType	JPartDataHead.h	/^  TpVisco ViscoType;     \/\/\/<Viscosity type: Artificial,... $/;"	m	class:JPartDataHead	access:private
ViscoValue	JPartDataHead.h	/^  float ViscoValue;      \/\/\/<Viscosity value. $/;"	m	class:JPartDataHead	access:private
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
Visit	tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlComment& \/*comment*\/ )           { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlComment& comment );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlComment& comment )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )   { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlDeclaration& declaration );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDeclaration& declaration )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlText& \/*text*\/ )                 { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlText& text );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlText& text )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )           { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
Visit	tinyxml.h	/^    virtual bool Visit( const TiXmlUnknown& unknown );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlUnknown& unknown )
VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitEnter	tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )         { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )    { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
VisitEnter	tinyxml.h	/^    virtual bool VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitExit	tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )          { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlDocument& doc );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlDocument& doc )
VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlElement& \/*element*\/ )       { return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
VisitExit	tinyxml.h	/^    virtual bool VisitExit( const TiXmlElement& element );$/;"	p	class:TiXmlPrinter	access:public	signature:( const TiXmlElement& element )
VisuConfig	JCfgRun.cpp	/^void JCfgRun::VisuConfig()const{$/;"	f	class:JCfgRun	signature:() const
VisuConfig	JCfgRun.h	/^  void VisuConfig()const;$/;"	p	class:JCfgRun	access:public	signature:() const
VisuConfig	JDamping.cpp	/^void JDamping::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JDamping	signature:(std::string txhead,std::string txfoot)
VisuConfig	JDamping.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JDamping	access:public	signature:(std::string txhead,std::string txfoot)
VisuConfig	JGaugeSystem.cpp	/^void JGaugeSystem::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JGaugeSystem	signature:(std::string txhead,std::string txfoot)
VisuConfig	JGaugeSystem.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JGaugeSystem	access:public	signature:(std::string txhead,std::string txfoot)
VisuConfig	JSaveDt.cpp	/^void JSaveDt::VisuConfig(std::string txhead,std::string txfoot){$/;"	f	class:JSaveDt	signature:(std::string txhead,std::string txfoot)
VisuConfig	JSaveDt.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JSaveDt	access:public	signature:(std::string txhead,std::string txfoot)
VisuConfig	JSph.cpp	/^void JSph::VisuConfig()const{$/;"	f	class:JSph	signature:() const
VisuConfig	JSph.h	/^  void VisuConfig()const;$/;"	p	class:JSph	access:protected	signature:() const
VisuConfig	JSphAccInput.cpp	/^void JSphAccInput::VisuConfig(std::string txhead,std::string txfoot)const{$/;"	f	class:JSphAccInput	signature:(std::string txhead,std::string txfoot) const
VisuConfig	JSphAccInput.h	/^  void VisuConfig(std::string txhead,std::string txfoot)const;$/;"	p	class:JSphAccInput	access:public	signature:(std::string txhead,std::string txfoot) const
VisuConfig	JTimeOut.cpp	/^void JTimeOut::VisuConfig(JLog2 *log,std::string txhead,std::string txfoot){$/;"	f	class:JTimeOut	signature:(JLog2 *log,std::string txhead,std::string txfoot)
VisuConfig	JTimeOut.h	/^  void VisuConfig(JLog2 *log,std::string txhead,std::string txfoot);$/;"	p	class:JTimeOut	access:public	signature:(JLog2 *log,std::string txhead,std::string txfoot)
VisuConfig	JWaveGen.h	/^  void VisuConfig(std::string txhead,std::string txfoot);$/;"	p	class:JWaveGen	access:public	signature:(std::string txhead,std::string txfoot)
VisuData	JLinearValue.cpp	/^void JLinearValue::VisuData(){$/;"	f	class:JLinearValue	signature:()
VisuData	JLinearValue.h	/^  void VisuData();$/;"	p	class:JLinearValue	access:public	signature:()
VisuDemCoefficients	JSph.cpp	/^void JSph::VisuDemCoefficients()const{$/;"	f	class:JSph	signature:() const
VisuDemCoefficients	JSph.h	/^  void VisuDemCoefficients()const;$/;"	p	class:JSph	access:protected	signature:() const
VisuInfo	JCfgRun.cpp	/^void JCfgRun::VisuInfo()const{$/;"	f	class:JCfgRun	signature:() const
VisuInfo	JCfgRun.h	/^  void VisuInfo()const;$/;"	p	class:JCfgRun	access:public	signature:() const
VisuParticleSummary	JSph.cpp	/^void JSph::VisuParticleSummary()const{$/;"	f	class:JSph	signature:() const
VisuParticleSummary	JSph.h	/^  void VisuParticleSummary()const;$/;"	p	class:JSph	access:protected	signature:() const
VisuParticlesInfo	JPartDataHead.cpp	/^void JPartDataHead::VisuParticlesInfo()const{$/;"	f	class:JPartDataHead	signature:() const
VisuParticlesInfo	JPartDataHead.h	/^  void VisuParticlesInfo()const;$/;"	p	class:JPartDataHead	access:public	signature:() const
VisuParticlesInfo	JSpaceParts.cpp	/^void JSpaceParts::VisuParticlesInfo()const{$/;"	f	class:JSpaceParts	signature:() const
VisuParticlesInfo	JSpaceParts.h	/^  void VisuParticlesInfo()const;$/;"	p	class:JSpaceParts	access:public	signature:() const
WAVEBSIZE	JWaveOrder2_ker.h	32;"	d
Wait	JMotionMov.h	/^  typedef enum{ Null=0,Nulo,CircularSinusoidal,RotationSinusoidal,RectilinearSinusoidal,CircularAce,Circular,RotationFile,RotationAce,Rotation,RectilinearFile,RectilinearAce,Rectilinear,Wait }TpMotionMov; $/;"	e	enum:JMotionMov::__anon18
WarningCount	JLog2.h	/^  unsigned WarningCount()const{ return(unsigned(Warnings.size())); }$/;"	f	class:JLog2	access:public	signature:() const
Warnings	JLog2.h	/^  std::vector<std::string> Warnings; \/\/\/<List of warnings.$/;"	m	class:JLog2	access:protected
WavPad	JWaveGen.h	/^  JWavePaddles* WavPad; $/;"	m	class:JWaveGen	access:private
WaveGen	JSph.h	/^  JWaveGen *WaveGen;            \/\/\/<Object for wave generation.$/;"	m	class:JSph	access:protected
Weights	JMeanValues.h	/^  double *Weights;$/;"	m	class:JMeanMoving	access:protected
WithFloating	JSph.h	/^  bool WithFloating;$/;"	m	class:JSph	access:protected
WithMpi	JSph.h	/^  const bool WithMpi;$/;"	m	class:JSph	access:protected
WriteArray	JBinaryData.cpp	/^void JBinaryData::WriteArray(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar) const
WriteArray	JBinaryData.h	/^  void WriteArray(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,unsigned sbuf,byte *buf,const JBinaryDataArray *ar) const
WriteArrayData	JBinaryData.cpp	/^void JBinaryData::WriteArrayData(std::fstream *pf,const JBinaryDataArray *ar)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,const JBinaryDataArray *ar) const
WriteArrayData	JBinaryData.h	/^  void WriteArrayData(std::fstream *pf,const JBinaryDataArray *ar)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,const JBinaryDataArray *ar) const
WriteFileXml	JBinaryData.cpp	/^void JBinaryData::WriteFileXml(const std::string &tabs,std::ofstream* pf,bool svarrays)const{$/;"	f	class:JBinaryData	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays) const
WriteFileXml	JBinaryData.h	/^  void WriteFileXml(const std::string &tabs,std::ofstream* pf,bool svarrays)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays) const
WriteFileXmlArray	JBinaryData.cpp	/^void JBinaryData::WriteFileXmlArray(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar)const{$/;"	f	class:JBinaryData	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar) const
WriteFileXmlArray	JBinaryData.h	/^  void WriteFileXmlArray(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar)const;$/;"	p	class:JBinaryData	access:private	signature:(const std::string &tabs,std::ofstream* pf,bool svarrays,const JBinaryDataArray* ar) const
WriteItem	JBinaryData.cpp	/^void JBinaryData::WriteItem(std::fstream *pf,unsigned sbuf,byte *buf,bool all)const{$/;"	f	class:JBinaryData	signature:(std::fstream *pf,unsigned sbuf,byte *buf,bool all) const
WriteItem	JBinaryData.h	/^  void WriteItem(std::fstream *pf,unsigned sbuf,byte *buf,bool all)const;$/;"	p	class:JBinaryData	access:private	signature:(std::fstream *pf,unsigned sbuf,byte *buf,bool all) const
WriteXml	JMotion.cpp	/^void JMotion::WriteXml(JXml *jxml,const std::string &path)const{$/;"	f	class:JMotion	signature:(JXml *jxml,const std::string &path) const
WriteXml	JMotion.h	/^  void WriteXml(JXml *jxml,const std::string &path)const;$/;"	p	class:JMotion	access:public	signature:(JXml *jxml,const std::string &path) const
WriteXml	JMotionMov.cpp	/^void JMotionMovCir::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCir	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovCirAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCirAce	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovCirSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovCirSinu	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovNull::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovNull	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRect::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRect	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRectAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectAce	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRectFile::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectFile	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRectSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRectSinu	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRot::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRot	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRotAce::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotAce	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRotFile::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotFile	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovRotSinu::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovRotSinu	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.cpp	/^void JMotionMovWait::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionMovWait	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  virtual void WriteXml(TiXmlNode* node)const=0;$/;"	p	class:JMotionMov	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCir	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCirAce	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovCirSinu	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovNull	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRect	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectAce	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectFile	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRectSinu	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRot	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotAce	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotFile	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovRotSinu	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionMov.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionMovWait	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionObj.cpp	/^void JMotionObj::WriteXml(TiXmlNode* node)const{$/;"	f	class:JMotionObj	signature:(TiXmlNode* node) const
WriteXml	JMotionObj.cpp	/^void JMotionObj::WriteXml(TiXmlNode* node,const JMotionEvent &evt)const{$/;"	f	class:JMotionObj	signature:(TiXmlNode* node,const JMotionEvent &evt) const
WriteXml	JMotionObj.h	/^  void WriteXml(TiXmlNode* node)const;$/;"	p	class:JMotionObj	access:public	signature:(TiXmlNode* node) const
WriteXml	JMotionObj.h	/^  void WriteXml(TiXmlNode* node,const JMotionEvent &evt)const;$/;"	p	class:JMotionObj	access:private	signature:(TiXmlNode* node,const JMotionEvent &evt) const
WriteXml	JSpaceEParms.cpp	/^void JSpaceEParms::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceEParms	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXml	JSpaceEParms.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceEParms	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock_Floating::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock_Floating	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.cpp	/^TiXmlElement* JSpacePartBlock_Moving::WriteXml(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpacePartBlock_Moving	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.cpp	/^void JSpaceParts::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXml	JSpaceParts.h	/^  TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock_Floating	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.h	/^  TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock_Moving	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.h	/^  virtual TiXmlElement* WriteXml(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpacePartBlock	access:public	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXml	JSpaceParts.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXml	JSpaceProperties.cpp	/^void JSpacePropLinks::WriteXml(JXml *sxml,TiXmlElement* eprops)const{$/;"	f	class:JSpacePropLinks	signature:(JXml *sxml,TiXmlElement* eprops) const
WriteXml	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXml(JXml *sxml,TiXmlElement* eprops)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops) const
WriteXml	JSpaceProperties.h	/^  void WriteXml(JXml *sxml,TiXmlElement* eprops)const;$/;"	p	class:JSpacePropLinks	access:public	signature:(JXml *sxml,TiXmlElement* eprops) const
WriteXml	JSpaceProperties.h	/^  void WriteXml(JXml *sxml,TiXmlElement* eprops)const;$/;"	p	class:JSpaceProperties	access:public	signature:(JXml *sxml,TiXmlElement* eprops) const
WriteXml	JSpaceVtkOut.cpp	/^void JSpaceVtkOut::WriteXml(JXml *sxml,TiXmlElement* lis)const{$/;"	f	class:JSpaceVtkOut	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXml	JSpaceVtkOut.h	/^  void WriteXml(JXml *sxml,TiXmlElement* lis)const;$/;"	p	class:JSpaceVtkOut	access:private	signature:(JXml *sxml,TiXmlElement* lis) const
WriteXmlDef	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlDef(JXml *sxml,TiXmlElement* node)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node) const
WriteXmlDef	JSpaceCtes.h	/^  void WriteXmlDef(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXmlElementAuto	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlElementAuto(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment,std::string unitscomment)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment,std::string unitscomment) const
WriteXmlElementAuto	JSpaceCtes.h	/^  void WriteXmlElementAuto(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment="",std::string unitscomment="")const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* node,std::string name,double value,bool valueauto,std::string comment=Ó,std::string unitscomment=Ó) const
WriteXmlElementComment	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlElementComment(TiXmlElement* ele,std::string comment,std::string unitscomment)const{$/;"	f	class:JSpaceCtes	signature:(TiXmlElement* ele,std::string comment,std::string unitscomment) const
WriteXmlElementComment	JSpaceCtes.h	/^  void WriteXmlElementComment(TiXmlElement* ele,std::string comment="",std::string unitscomment="")const;$/;"	p	class:JSpaceCtes	access:private	signature:(TiXmlElement* ele,std::string comment=Ó,std::string unitscomment=Ó) const
WriteXmlProperty	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXmlProperty(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop) const
WriteXmlProperty	JSpaceProperties.h	/^  void WriteXmlProperty(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop)const;$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprops,const JSpacePropProperty* prop) const
WriteXmlPropertyFile	JSpaceProperties.cpp	/^void JSpaceProperties::WriteXmlPropertyFile(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile)const{$/;"	f	class:JSpaceProperties	signature:(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile) const
WriteXmlPropertyFile	JSpaceProperties.h	/^  void WriteXmlPropertyFile(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile)const;$/;"	p	class:JSpaceProperties	access:private	signature:(JXml *sxml,TiXmlElement* eprops,StPropertyFile propfile) const
WriteXmlRun	JSpaceCtes.cpp	/^void JSpaceCtes::WriteXmlRun(JXml *sxml,TiXmlElement* node)const{$/;"	f	class:JSpaceCtes	signature:(JXml *sxml,TiXmlElement* node) const
WriteXmlRun	JSpaceCtes.h	/^  void WriteXmlRun(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceCtes	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXmlSummary	JSpaceParts.cpp	/^void JSpaceParts::WriteXmlSummary(JXml *sxml,TiXmlElement* ele)const{$/;"	f	class:JSpaceParts	signature:(JXml *sxml,TiXmlElement* ele) const
WriteXmlSummary	JSpaceParts.h	/^  void WriteXmlSummary(JXml *sxml,TiXmlElement* ele)const;$/;"	p	class:JSpaceParts	access:private	signature:(JXml *sxml,TiXmlElement* ele) const
_ConvertSMVer2Cores	FunctionsCuda.cpp	/^int _ConvertSMVer2Cores(int major, int minor){$/;"	f	namespace:fcuda	signature:(int major, int minor)
_ConvertSMVer2Cores	FunctionsCuda.h	/^int _ConvertSMVer2Cores(int major, int minor);$/;"	p	namespace:fcuda	signature:(int major, int minor)
_FunctionsCuda_	FunctionsCuda.h	33;"	d
_FunctionsMath_	FunctionsMath.h	45;"	d
_Functions_	Functions.h	76;"	d
_JAppInfo_	JAppInfo.h	22;"	d
_JArraysCpu_	JArraysCpu.h	29;"	d
_JArraysGpu_	JArraysGpu.h	22;"	d
_JBinaryData_	JBinaryData.h	49;"	d
_JBlockSizeAuto_	JBlockSizeAuto.h	30;"	d
_JCellDivCpuSingle_	JCellDivCpuSingle.h	22;"	d
_JCellDivCpu_	JCellDivCpu.h	22;"	d
_JCellDivGpuSingle_	JCellDivGpuSingle.h	22;"	d
_JCellDivGpuSingle_ker_	JCellDivGpuSingle_ker.h	22;"	d
_JCellDivGpu_	JCellDivGpu.h	22;"	d
_JCellDivGpu_ker_	JCellDivGpu_ker.h	22;"	d
_JCfgRun_	JCfgRun.h	22;"	d
_JDamping_	JDamping.h	34;"	d
_JDsphConfig_	JDsphConfig.h	29;"	d
_JException_	JException.h	22;"	d
_JFormatFiles2_	JFormatFiles2.h	84;"	d
_JGaugeItem_	JGaugeItem.h	29;"	d
_JGaugeSystem_	JGaugeSystem.h	31;"	d
_JGauge_ker_	JGauge_ker.h	22;"	d
_JLinearValue_	JLinearValue.h	22;"	d
_JLog2_	JLog2.h	40;"	d
_JMatrix4_	JMatrix4.h	37;"	d
_JMeanValues_	JMeanValues.h	28;"	d
_JMotionEvent_	JMotionEvent.h	22;"	d
_JMotionList_	JMotionList.h	22;"	d
_JMotionMov_	JMotionMov.h	22;"	d
_JMotionObj_	JMotionObj.h	22;"	d
_JMotionPos_	JMotionPos.h	22;"	d
_JMotion_	JMotion.h	55;"	d
_JObjectGpu_	JObjectGpu.h	22;"	d
_JObject_	JObject.h	30;"	d
_JPartDataBi4_	JPartDataBi4.h	55;"	d
_JPartDataHead_	JPartDataHead.h	31;"	d
_JPartFloatBi4_	JPartFloatBi4.h	37;"	d
_JPartOutBi4Save_	JPartOutBi4Save.h	37;"	d
_JParticlesDef_	JParticlesDef.h	28;"	d
_JPartsLoad4_	JPartsLoad4.h	41;"	d
_JPartsOut_	JPartsOut.h	32;"	d
_JPeriodicDef_	JPeriodicDef.h	28;"	d
_JRadixSort_	JRadixSort.h	40;"	d
_JRangeFilter_	JRangeFilter.h	35;"	d
_JReadDatafile_	JReadDatafile.h	42;"	d
_JReduSum_ker_	JReduSum_ker.h	29;"	d
_JSaveCsv2_	JSaveCsv2.h	39;"	d
_JSaveDt_	JSaveDt.h	33;"	d
_JSpaceCtes_	JSpaceCtes.h	40;"	d
_JSpaceEParms_	JSpaceEParms.h	35;"	d
_JSpaceParts_	JSpaceParts.h	53;"	d
_JSpaceProperties_	JSpaceProperties.h	39;"	d
_JSpaceVtkOut_	JSpaceVtkOut.h	29;"	d
_JSphAccInput_	JSphAccInput.h	22;"	d
_JSphCpuSingle_	JSphCpuSingle.h	22;"	d
_JSphCpu_	JSphCpu.h	22;"	d
_JSphDtFixed_	JSphDtFixed.h	31;"	d
_JSphGpuSingle_	JSphGpuSingle.h	22;"	d
_JSphGpu_	JSphGpu.h	22;"	d
_JSphGpu_ker_	JSphGpu_ker.h	22;"	d
_JSphInitialize_	JSphInitialize.h	29;"	d
_JSphMk_	JSphMk.h	29;"	d
_JSphMotion_	JSphMotion.h	32;"	d
_JSphPartsInit_	JSphPartsInit.h	28;"	d
_JSphTimersCpu_	JSphTimersCpu.h	22;"	d
_JSphTimersGpu_	JSphTimersGpu.h	22;"	d
_JSphVisco_	JSphVisco.h	31;"	d
_JSph_	JSph.h	29;"	d
_JTimeControl_	JTimeControl.h	31;"	d
_JTimeOut_	JTimeOut.h	28;"	d
_JTimerClock_	JTimerClock.h	29;"	d
_JTimerCuda_	JTimerCuda.h	30;"	d
_JTimer_	JTimer.h	32;"	d
_JWaveGen_	JWaveGen.h	28;"	d
_JWaveOrder2_ker_	JWaveOrder2_ker.h	28;"	d
_JWaveSpectrumGPU_	JWaveSpectrumGpu.h	28;"	d
_JXml_	JXml.h	46;"	d
_OmpDefs_	OmpDefs.h	22;"	d
_TmcStart	JSphTimersCpu.h	/^inline void _TmcStart(TimersCpu vtimer,CsTypeTimerCPU ct){ if(vtimer[ct].active)vtimer[ct].timer.Start(); }$/;"	f	signature:(TimersCpu vtimer,CsTypeTimerCPU ct)
_TmcStop	JSphTimersCpu.h	/^inline void _TmcStop(TimersCpu vtimer,CsTypeTimerCPU ct){$/;"	f	signature:(TimersCpu vtimer,CsTypeTimerCPU ct)
_TmgStart	JSphTimersGpu.h	/^inline void _TmgStart(TimersGpu vtimer,CsTypeTimerGPU ct){ if(vtimer[ct].active)vtimer[ct].timer.Start(); }$/;"	f	signature:(TimersGpu vtimer,CsTypeTimerGPU ct)
_TmgStop	JSphTimersGpu.h	/^inline void _TmgStop(TimersGpu vtimer,CsTypeTimerGPU ct){$/;"	f	signature:(TimersGpu vtimer,CsTypeTimerGPU ct)
_TypesDef_	TypesDef.h	22;"	d
_Types_	Types.h	22;"	d
__CheckErrorCuda	JGauge_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cugauge	signature:(const char *text,const char *file,const int line)
__CheckErrorCuda	JReduSum_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:curedus	signature:(const char *text,const char *file,const int line)
__CheckErrorCuda	JSphGpu_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cusph	signature:(const char *text,const char *file,const int line)
__CheckErrorCuda	JWaveOrder2_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cuwave2	signature:(const char *text,const char *file,const int line)
__anon32::agau	JSphGpu_ker.h	/^  float agau,bgau;$/;"	m	struct:__anon32	access:public
__anon32::awen	JSphGpu_ker.h	/^  float awen;               \/\/\/<Cte. of Wendland kernel to compute wab.$/;"	m	struct:__anon32	access:public
__anon32::bgau	JSphGpu_ker.h	/^  float agau,bgau;$/;"	m	struct:__anon32	access:public
__anon32::bwen	JSphGpu_ker.h	/^  float bwen;               \/\/\/<Cte. of Wendland kernel to compute fac (kernel derivative).$/;"	m	struct:__anon32	access:public
__anon32::cellcode	JSphGpu_ker.h	/^  unsigned cellcode;$/;"	m	struct:__anon32	access:public
__anon32::cs0	JSphGpu_ker.h	/^  float cs0;                \/\/\/<Speed of sound of reference.$/;"	m	struct:__anon32	access:public
__anon32::cteb	JSphGpu_ker.h	/^  float cteb,gamma;$/;"	m	struct:__anon32	access:public
__anon32::cubic_a1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_a2	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_a24	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_aa	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_c1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_c2	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_d1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::cubic_odwdeltap	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
__anon32::delta2h	JSphGpu_ker.h	/^  float delta2h;            \/\/\/<delta2h=DeltaSph*H*2$/;"	m	struct:__anon32	access:public
__anon32::domposminx	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
__anon32::domposminy	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
__anon32::domposminz	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
__anon32::dosh	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
__anon32::dp	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
__anon32::eta2	JSphGpu_ker.h	/^  float eta2;               \/\/\/<eta*eta being eta=0.1*\\ref h$/;"	m	struct:__anon32	access:public
__anon32::fourh2	JSphGpu_ker.h	/^  float fourh2;             \/\/\/< \\ref h * \\ref h * 4 $/;"	m	struct:__anon32	access:public
__anon32::gamma	JSphGpu_ker.h	/^  float cteb,gamma;$/;"	m	struct:__anon32	access:public
__anon32::h	JSphGpu_ker.h	/^  float h;                  \/\/\/<Smoothing length (=coef*sqrt(dx*dx+dy*dy+dz*dz))$/;"	m	struct:__anon32	access:public
__anon32::maprealposminx	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
__anon32::maprealposminy	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
__anon32::maprealposminz	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
__anon32::maprealsizex	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
__anon32::maprealsizey	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
__anon32::maprealsizez	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
__anon32::massb	JSphGpu_ker.h	/^  float massb;              \/\/\/<Mass of a boundary particle.$/;"	m	struct:__anon32	access:public
__anon32::massf	JSphGpu_ker.h	/^  float massf;              \/\/\/<Mass of a fluid particle.$/;"	m	struct:__anon32	access:public
__anon32::movlimit	JSphGpu_ker.h	/^  float movlimit;$/;"	m	struct:__anon32	access:public
__anon32::nbound	JSphGpu_ker.h	/^  unsigned nbound;$/;"	m	struct:__anon32	access:public
__anon32::ovrhopzero	JSphGpu_ker.h	/^  float ovrhopzero;         \/\/\/<ovrhopzero=1\/RhopZero$/;"	m	struct:__anon32	access:public
__anon32::periactive	JSphGpu_ker.h	/^  unsigned periactive;$/;"	m	struct:__anon32	access:public
__anon32::rhopzero	JSphGpu_ker.h	/^  float rhopzero;           \/\/\/<rhopzero=RhopZero$/;"	m	struct:__anon32	access:public
__anon32::scell	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
__anon32::xperincx	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
__anon32::xperincy	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
__anon32::xperincz	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
__anon32::yperincx	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
__anon32::yperincy	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
__anon32::yperincz	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
__anon32::zperincx	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
__anon32::zperincy	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
__anon32::zperincz	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
__anon33::forcesbound_bs	JSphGpu_ker.h	/^  int forcesbound_bs;$/;"	m	struct:__anon33	access:public
__anon33::forcesbound_bsmax	JSphGpu_ker.h	/^  int forcesbound_bsmax;$/;"	m	struct:__anon33	access:public
__anon33::forcesbound_rg	JSphGpu_ker.h	/^  int forcesbound_rg;$/;"	m	struct:__anon33	access:public
__anon33::forcesdem_bs	JSphGpu_ker.h	/^  int forcesdem_bs;$/;"	m	struct:__anon33	access:public
__anon33::forcesdem_bsmax	JSphGpu_ker.h	/^  int forcesdem_bsmax;$/;"	m	struct:__anon33	access:public
__anon33::forcesdem_rg	JSphGpu_ker.h	/^  int forcesdem_rg;$/;"	m	struct:__anon33	access:public
__anon33::forcesfluid_bs	JSphGpu_ker.h	/^  int forcesfluid_bs;$/;"	m	struct:__anon33	access:public
__anon33::forcesfluid_bsmax	JSphGpu_ker.h	/^  int forcesfluid_bsmax;$/;"	m	struct:__anon33	access:public
__anon33::forcesfluid_rg	JSphGpu_ker.h	/^  int forcesfluid_rg;$/;"	m	struct:__anon33	access:public
__anon37::active	JSphTimersCpu.h	/^  bool active;$/;"	m	struct:__anon37	access:public
__anon37::time	JSphTimersCpu.h	/^  double time;$/;"	m	struct:__anon37	access:public
__anon37::timer	JSphTimersCpu.h	/^  JTimer timer; \/\/JTimerClock timer;$/;"	m	struct:__anon37	access:public
__anon39::active	JSphTimersGpu.h	/^  bool active;$/;"	m	struct:__anon39	access:public
__anon39::time	JSphTimersGpu.h	/^  double time;$/;"	m	struct:__anon39	access:public
__anon39::timer	JSphTimersGpu.h	/^  JTimerCuda timer;$/;"	m	struct:__anon39	access:public
__anon42::angles	Types.h	/^  tfloat3 angles;   \/\/\/<Rotation angles from center (angle xz, angle yz, angle xy) (units:Rad).$/;"	m	struct:__anon42	access:public
__anon42::begin	Types.h	/^  unsigned begin;   \/\/\/<First particle of the floating object.$/;"	m	struct:__anon42	access:public
__anon42::center	Types.h	/^  tdouble3 center;  \/\/\/<Center of the floating object (units:m).$/;"	m	struct:__anon42	access:public
__anon42::count	Types.h	/^  unsigned count;   \/\/\/<Number of floating objects.$/;"	m	struct:__anon42	access:public
__anon42::fomega	Types.h	/^  tfloat3 fomega;   \/\/\/<Angular velocity of the floating object (units:rad\/s).$/;"	m	struct:__anon42	access:public
__anon42::fvel	Types.h	/^  tfloat3 fvel;     \/\/\/<Linear velocity of the floating object (units:m\/s).$/;"	m	struct:__anon42	access:public
__anon42::inertiaini	Types.h	/^  tmatrix3f inertiaini; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given).$/;"	m	struct:__anon42	access:public
__anon42::mass	Types.h	/^  float mass;       \/\/\/<Mass of the floating object (units:Kg).$/;"	m	struct:__anon42	access:public
__anon42::massp	Types.h	/^  float massp;      \/\/\/<Mass of the particle of the floating object (units:Kg).$/;"	m	struct:__anon42	access:public
__anon42::mkbound	Types.h	/^  word mkbound;     \/\/\/<MkBound of the floating object.$/;"	m	struct:__anon42	access:public
__anon42::radius	Types.h	/^  float radius;     \/\/\/<Maximum distance between particles and center (units:m).$/;"	m	struct:__anon42	access:public
__anon43::face	Types.h	/^  tfloat3 face;       \/\/\/<Sum of particle acceleration (units:m\/s2). | Sumatorio de ace de particulas.$/;"	m	struct:__anon43	access:public
__anon43::fomegaace	Types.h	/^  tfloat3 fomegaace;  \/\/\/<Angular acceleration of the floating object (units:rad\/s2). | Aceleracion angular del objecto floating.$/;"	m	struct:__anon43	access:public
__anon44::fcenterres	Types.h	/^  tdouble3 fcenterres; \/\/\/<Calculated center to upadte floating body (units:m).$/;"	m	struct:__anon44	access:public
__anon44::fomegares	Types.h	/^  tfloat3 fomegares;   \/\/\/<Calculated angular velocity to upadte floating body (units:rad\/s).$/;"	m	struct:__anon44	access:public
__anon44::fvelres	Types.h	/^  tfloat3 fvelres;     \/\/\/<Calculated linear velocity to upadte floating body (units:m\/s).$/;"	m	struct:__anon44	access:public
__anon45::kfric	Types.h	/^  float kfric;        \/\/\/<Kinetic friction coefficient of the floating object (units:-).$/;"	m	struct:__anon45	access:public
__anon45::mass	Types.h	/^  float mass;         \/\/\/<Mass of the object (units:Kg).$/;"	m	struct:__anon45	access:public
__anon45::massp	Types.h	/^  float massp;        \/\/\/<Mass of the particle of the floating object (units:Kg).$/;"	m	struct:__anon45	access:public
__anon45::poisson	Types.h	/^  float poisson;      \/\/\/<Poisson coefficient of the floating object (units:-).$/;"	m	struct:__anon45	access:public
__anon45::restitu	Types.h	/^  float restitu;      \/\/\/<Restitution Coefficient (units:-).$/;"	m	struct:__anon45	access:public
__anon45::tau	Types.h	/^  float tau;          \/\/\/<Value of (1-poisson^2)\/young (units:-).$/;"	m	struct:__anon45	access:public
__anon45::young	Types.h	/^  float young;        \/\/\/<Young Modulus of the floating object (units:N\/m2).$/;"	m	struct:__anon45	access:public
__anon57::x	TypesDef.h	/^  int x,y;$/;"	m	struct:__anon57	access:public
__anon57::y	TypesDef.h	/^  int x,y;$/;"	m	struct:__anon57	access:public
__anon58::x	TypesDef.h	/^  unsigned x,y;$/;"	m	struct:__anon58	access:public
__anon58::y	TypesDef.h	/^  unsigned x,y;$/;"	m	struct:__anon58	access:public
__anon59::x	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
__anon59::y	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
__anon59::z	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
__anon60::x	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
__anon60::y	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
__anon60::z	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
__anon61::x	TypesDef.h	/^  float x,y;$/;"	m	struct:__anon61	access:public
__anon61::y	TypesDef.h	/^  float x,y;$/;"	m	struct:__anon61	access:public
__anon62::x	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
__anon62::y	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
__anon62::z	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
__anon63::x	TypesDef.h	/^  double x,y;$/;"	m	struct:__anon63	access:public
__anon63::y	TypesDef.h	/^  double x,y;$/;"	m	struct:__anon63	access:public
__anon64::x	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
__anon64::y	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
__anon64::z	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
__anon65::w	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
__anon65::x	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
__anon65::y	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
__anon65::z	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
__anon66::w	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
__anon66::x	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
__anon66::y	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
__anon66::z	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
__anon67::w	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
__anon67::x	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
__anon67::y	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
__anon67::z	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
__anon68::w	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
__anon68::x	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
__anon68::y	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
__anon68::z	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
__anon69::a11	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
__anon69::a12	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
__anon69::a13	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
__anon69::a21	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
__anon69::a22	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
__anon69::a23	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
__anon69::a31	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
__anon69::a32	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
__anon69::a33	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
__anon70::a11	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
__anon70::a12	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
__anon70::a13	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
__anon70::a21	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
__anon70::a22	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
__anon70::a23	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
__anon70::a31	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
__anon70::a32	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
__anon70::a33	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
__anon71::a11	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
__anon71::a12	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
__anon71::a13	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
__anon71::a14	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
__anon71::a21	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
__anon71::a22	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
__anon71::a23	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
__anon71::a24	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
__anon71::a31	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
__anon71::a32	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
__anon71::a33	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
__anon71::a34	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
__anon71::a41	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
__anon71::a42	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
__anon71::a43	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
__anon71::a44	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
__anon72::a11	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
__anon72::a12	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
__anon72::a13	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
__anon72::a14	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
__anon72::a21	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
__anon72::a22	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
__anon72::a23	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
__anon72::a24	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
__anon72::a31	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
__anon72::a32	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
__anon72::a33	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
__anon72::a34	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
__anon72::a41	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
__anon72::a42	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
__anon72::a43	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
__anon72::a44	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
__anon73::xx	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
__anon73::xy	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
__anon73::xz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
__anon73::yy	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
__anon73::yz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
__anon73::zz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
a1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
a11	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
a11	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
a11	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
a11	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
a11	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
a12	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
a12	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
a12	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
a12	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
a12	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
a13	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
a13	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
a13	TypesDef.h	/^  double a11,a12,a13;$/;"	m	struct:__anon70	access:public
a13	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
a13	TypesDef.h	/^  float a11,a12,a13;$/;"	m	struct:__anon69	access:public
a14	JMatrix4.h	/^  T a11,a12,a13,a14;$/;"	m	class:JMatrix4	access:private
a14	TypesDef.h	/^  double a11,a12,a13,a14;$/;"	m	struct:__anon72	access:public
a14	TypesDef.h	/^  float a11,a12,a13,a14;$/;"	m	struct:__anon71	access:public
a2	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
a21	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
a21	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
a21	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
a21	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
a21	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
a22	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
a22	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
a22	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
a22	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
a22	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
a23	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
a23	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
a23	TypesDef.h	/^  double a21,a22,a23;$/;"	m	struct:__anon70	access:public
a23	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
a23	TypesDef.h	/^  float a21,a22,a23;$/;"	m	struct:__anon69	access:public
a24	JMatrix4.h	/^  T a21,a22,a23,a24;$/;"	m	class:JMatrix4	access:private
a24	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
a24	TypesDef.h	/^  double a21,a22,a23,a24;$/;"	m	struct:__anon72	access:public
a24	TypesDef.h	/^  float a21,a22,a23,a24;$/;"	m	struct:__anon71	access:public
a31	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
a31	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
a31	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
a31	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
a31	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
a32	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
a32	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
a32	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
a32	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
a32	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
a33	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
a33	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
a33	TypesDef.h	/^  double a31,a32,a33;$/;"	m	struct:__anon70	access:public
a33	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
a33	TypesDef.h	/^  float a31,a32,a33;$/;"	m	struct:__anon69	access:public
a34	JMatrix4.h	/^  T a31,a32,a33,a34;$/;"	m	class:JMatrix4	access:private
a34	TypesDef.h	/^  double a31,a32,a33,a34;$/;"	m	struct:__anon72	access:public
a34	TypesDef.h	/^  float a31,a32,a33,a34;$/;"	m	struct:__anon71	access:public
a41	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
a41	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
a41	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
a42	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
a42	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
a42	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
a43	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
a43	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
a43	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
a44	JMatrix4.h	/^  T a41,a42,a43,a44;$/;"	m	class:JMatrix4	access:private
a44	TypesDef.h	/^  double a41,a42,a43,a44;$/;"	m	struct:__anon72	access:public
a44	TypesDef.h	/^  float a41,a42,a43,a44;$/;"	m	struct:__anon71	access:public
aa	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
active	JSphTimersCpu.h	/^  bool active;$/;"	m	struct:__anon37	access:public
active	JSphTimersGpu.h	/^  bool active;$/;"	m	struct:__anon39	access:public
agau	JSphGpu_ker.h	/^  float agau,bgau;$/;"	m	struct:__anon32	access:public
angles	Types.h	/^  tfloat3 angles;   \/\/\/<Rotation angles from center (angle xz, angle yz, angle xy) (units:Rad).$/;"	m	struct:__anon42	access:public
append	tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
append	tinystr.h	/^    TiXmlString& append (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
assign	tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString	signature:(const char* str, size_type len)
assign	tinystr.h	/^    TiXmlString& assign (const char* str, size_type len);$/;"	p	class:TiXmlString	access:public	signature:(const char* str, size_type len)
at	tinystr.h	/^    const char& at (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
attributeSet	tinyxml.h	/^    TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
awen	JSphGpu_ker.h	/^  float awen;               \/\/\/<Cte. of Wendland kernel to compute wab.$/;"	m	struct:__anon32	access:public
begin	Types.h	/^  unsigned begin;   \/\/\/<First particle of the floating object.$/;"	m	struct:__anon42	access:public
bgau	JSphGpu_ker.h	/^  float agau,bgau;$/;"	m	struct:__anon32	access:public
buffer	tinyxml.h	/^    TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
busmem	FunctionsCuda.h	/^  int busmem;          \/\/\/<Memory Bus Width.$/;"	m	struct:fcuda::StrGpuInfo	access:public
bwen	JSphGpu_ker.h	/^  float bwen;               \/\/\/<Cte. of Wendland kernel to compute fac (kernel derivative).$/;"	m	struct:__anon32	access:public
byte	TypesDef.h	/^typedef unsigned char byte;$/;"	t
byteorder	JBinaryData.h	/^    byte byteorder;              \/\/\/<1:BigEndian 0:LittleEndian.$/;"	m	struct:JBinaryData::__anon6	access:public
c1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
c2	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
c_str	tinystr.h	/^    const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
cachelv2	FunctionsCuda.h	/^  int cachelv2;        \/\/\/<L2 Cache Size.$/;"	m	struct:fcuda::StrGpuInfo	access:public
capacity	tinystr.h	/^        size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
capacity	tinystr.h	/^    size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString	access:public	signature:() const
ccmajor	FunctionsCuda.h	/^  int ccmajor;         \/\/\/<Capability major.$/;"	m	struct:fcuda::StrGpuInfo	access:public
ccminor	FunctionsCuda.h	/^  int ccminor;         \/\/\/<Capability minor.$/;"	m	struct:fcuda::StrGpuInfo	access:public
cdata	tinyxml.h	/^    bool cdata;         \/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
cellcode	JSphGpu_ker.h	/^  unsigned cellcode;$/;"	m	struct:__anon32	access:public
center	Types.h	/^  tdouble3 center;  \/\/\/<Center of the floating object (units:m).$/;"	m	struct:__anon42	access:public
chr	tinyxml.h	/^        char            chr;$/;"	m	struct:TiXmlBase::Entity	access:public
clear	tinystr.h	/^    void clear ()$/;"	f	class:TiXmlString	access:public	signature:()
clockrate	FunctionsCuda.h	/^  int clockrate;       \/\/\/<GPU Max Clock rate.$/;"	m	struct:fcuda::StrGpuInfo	access:public
clockratemem	FunctionsCuda.h	/^  int clockratemem;    \/\/\/<Memory Clock rate.$/;"	m	struct:fcuda::StrGpuInfo	access:public
coefh	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
coefhdp	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
coefsound	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
col	tinyxml.h	/^    int col;    \/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
comment	JSpaceEParms.h	/^    std::string comment;$/;"	m	struct:JSpaceEParms::__anon25	access:public
comp	JFormatFiles2.h	/^    unsigned comp;$/;"	m	struct:JFormatFiles2::__anon12	access:public
comp	JFormatFiles2.h	/^    unsigned comp;$/;"	m	struct:JFormatFiles2::__anon13	access:public
computedt	JGaugeItem.h	/^    double computedt;$/;"	m	struct:JGaugeItem::__anon16	access:public
computeend	JGaugeItem.h	/^    double computeend;$/;"	m	struct:JGaugeItem::__anon16	access:public
computestart	JGaugeItem.h	/^    double computestart;$/;"	m	struct:JGaugeItem::__anon16	access:public
condenseWhiteSpace	tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
condenseWhiteSpace	tinyxml.h	/^    static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
constantmem	FunctionsCuda.h	/^  ullong constantmem;  \/\/\/<Constant memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
cores	FunctionsCuda.h	/^  int cores;           \/\/\/<CUDA Cores.$/;"	m	struct:fcuda::StrGpuInfo	access:public
coresmp	FunctionsCuda.h	/^  int coresmp;         \/\/\/<CUDA Cores\/MP.$/;"	m	struct:fcuda::StrGpuInfo	access:public
cornersin	JFormatFiles2.h	/^    float cornersin;  \/\/-Size of corner (inside).$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
cornersout	JFormatFiles2.h	/^    float cornersout; \/\/-Size of corner.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
cot	FunctionsMath.h	/^inline double cot(double z){ return(1.0 \/ tan(z)); }$/;"	f	namespace:fmath	signature:(double z)
coth	FunctionsMath.h	/^inline double coth(double z){ return(cosh(z) \/ sinh(z)); }$/;"	f	namespace:fmath	signature:(double z)
count	Types.h	/^  unsigned count;   \/\/\/<Number of floating objects.$/;"	m	struct:__anon42	access:public
countp2pto	FunctionsCuda.h	/^  int countp2pto;               \/\/\/<Number of GPUs with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
cs0	JSphGpu_ker.h	/^  float cs0;                \/\/\/<Speed of sound of reference.$/;"	m	struct:__anon32	access:public
csc	FunctionsMath.h	/^inline double csc(double z){ return(1.0 \/ sin(z)); }$/;"	f	namespace:fmath	signature:(double z)
cteb	JSpaceCtes.h	/^    double cteh,cteb;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
cteb	JSphGpu_ker.h	/^  float cteb,gamma;$/;"	m	struct:__anon32	access:public
cteh	JSpaceCtes.h	/^    double cteh,cteb;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
cubic_a1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_a2	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_a24	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_aa	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_c1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_c2	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_d1	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cubic_odwdeltap	JSphGpu_ker.h	/^  float cubic_a1,cubic_a2,cubic_aa,cubic_a24,cubic_c1,cubic_d1,cubic_c2,cubic_odwdeltap;$/;"	m	struct:__anon32	access:public
cudiv	JCellDivGpuSingle_ker.cu	/^namespace cudiv{$/;"	n	file:
cudiv	JCellDivGpuSingle_ker.h	/^namespace cudiv{$/;"	n
cudiv	JCellDivGpu_ker.cu	/^namespace cudiv{$/;"	n	file:
cudiv	JCellDivGpu_ker.h	/^namespace cudiv{$/;"	n
cudiv::CalcBeginEndCell	JCellDivGpu_ker.cu	/^void CalcBeginEndCell(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell){$/;"	f	namespace:cudiv	signature:(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell)
cudiv::CalcBeginEndCell	JCellDivGpu_ker.h	/^void CalcBeginEndCell(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell);$/;"	p	namespace:cudiv	signature:(bool full,unsigned np,unsigned npb,unsigned sizebegcell,unsigned cellfluid,const unsigned *cellpart,int2 *begcell)
cudiv::Float3	JCellDivGpu_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cudiv	signature:(const tfloat3& v)
cudiv::Float3	JCellDivGpu_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cudiv	signature:(float x,float y,float z)
cudiv::GetGridSize	JCellDivGpu_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned blocksize)
cudiv::GetGridSize	JCellDivGpu_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cudiv	signature:(unsigned n,unsigned blocksize)
cudiv::KerCalcBeginEndCell	JCellDivGpu_ker.cu	/^__global__ void KerCalcBeginEndCell(unsigned n,unsigned pini,const unsigned *cellpart,int2 *begcell)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *cellpart,int2 *begcell)
cudiv::KerLimitsCell	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerLimitsCell(unsigned n,unsigned pini$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini ,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *results)
cudiv::KerLimitsCellRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerLimitsCellRedu(unsigned cellcode,unsigned* spx1,unsigned* spy1,unsigned* spz1,unsigned* spx2,unsigned* spy2,unsigned* spz2,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned* spx1,unsigned* spy1,unsigned* spz1,unsigned* spx2,unsigned* spy2,unsigned* spz2,const unsigned &tid,unsigned* results)
cudiv::KerLimitsCellReduBase	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerLimitsCellReduBase(unsigned cellcode,unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned n,unsigned* data,unsigned *results)
cudiv::KerLimitsCellWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerLimitsCellWarpRedu(volatile unsigned* spx1,volatile unsigned* spy1,volatile unsigned* spz1,volatile unsigned* spx2,volatile unsigned* spy2,volatile unsigned* spz2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* spx1,volatile unsigned* spy1,volatile unsigned* spz1,volatile unsigned* spx2,volatile unsigned* spy2,volatile unsigned* spz2,const unsigned &tid)
cudiv::KerPosLimitsRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerPosLimitsRedu(float* spx1,float* spy1,float* spz1,float* spx2,float* spy2,float* spz2,const unsigned &tid,float* results){$/;"	f	namespace:cudiv	signature:(float* spx1,float* spy1,float* spz1,float* spx2,float* spy2,float* spz2,const unsigned &tid,float* results)
cudiv::KerPosLimitsWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerPosLimitsWarpRedu(volatile float* spx1,volatile float* spy1,volatile float* spz1,volatile float* spx2,volatile float* spy2,volatile float* spz2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile float* spx1,volatile float* spy1,volatile float* spz1,volatile float* spx2,volatile float* spy2,volatile float* spz2,const unsigned &tid)
cudiv::KerPreSortFluid	JCellDivGpuSingle_ker.cu	/^__global__ void KerPreSortFluid(unsigned n,unsigned pini,unsigned cellcode$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,unsigned cellcode ,const unsigned *dcell,const typecode *code,uint3 cellzero,uint3 ncells ,unsigned *cellpart,unsigned *sortpart)
cudiv::KerPreSortFull	JCellDivGpuSingle_ker.cu	/^__global__ void KerPreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell ,const typecode *code,uint3 cellzero,uint3 ncells,unsigned *cellpart,unsigned *sortpart)
cudiv::KerReduPosLimits	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduPosLimits(unsigned n,float* data,float *results)$/;"	f	namespace:cudiv	signature:(unsigned n,float* data,float *results)
cudiv::KerReduUintLimits	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduUintLimits(unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned* data,unsigned *results)
cudiv::KerReduUintSum	JCellDivGpu_ker.cu	/^template <unsigned int blockSize> __global__ void KerReduUintSum(unsigned n,unsigned* data,unsigned *results)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned* data,unsigned *results)
cudiv::KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart ,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
cudiv::KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
cudiv::KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
cudiv::KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
cudiv::KerSortDataParticles	JCellDivGpu_ker.cu	/^__global__ void KerSortDataParticles(unsigned n,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)$/;"	f	namespace:cudiv	signature:(unsigned n,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
cudiv::KerUintLimitsRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintLimitsRedu(unsigned* sp1,unsigned* sp2,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned* sp1,unsigned* sp2,const unsigned &tid,unsigned* results)
cudiv::KerUintLimitsWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintLimitsWarpRedu(volatile unsigned* sp1,volatile unsigned* sp2,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* sp1,volatile unsigned* sp2,const unsigned &tid)
cudiv::KerUintSumRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintSumRedu(unsigned* sp1,const unsigned &tid,unsigned* results){$/;"	f	namespace:cudiv	signature:(unsigned* sp1,const unsigned &tid,unsigned* results)
cudiv::KerUintSumWarpRedu	JCellDivGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerUintSumWarpRedu(volatile unsigned* sp1,const unsigned &tid){$/;"	f	namespace:cudiv	signature:(volatile unsigned* sp1,const unsigned &tid)
cudiv::LimitsCell	JCellDivGpu_ker.cu	/^void LimitsCell(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
cudiv::LimitsCell	JCellDivGpu_ker.h	/^void LimitsCell(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
cudiv::LimitsCellRedu	JCellDivGpu_ker.cu	/^void LimitsCellRedu(unsigned cellcode,unsigned nblocks,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned cellcode,unsigned nblocks,unsigned *aux,tuint3 &celmin,tuint3 &celmax,JLog2 *log)
cudiv::LimitsPosSize	JCellDivGpu_ker.h	/^inline unsigned LimitsPosSize(unsigned ndata){ ndata=(ndata>DIVBSIZE? ndata: DIVBSIZE); unsigned n=6,s=((ndata\/DIVBSIZE)+1); return((s*n + ((s\/DIVBSIZE)+1)*n) + DIVBSIZE); }$/;"	f	namespace:cudiv	signature:(unsigned ndata)
cudiv::PreSortFluid	JCellDivGpuSingle_ker.cu	/^void PreSortFluid(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code$/;"	f	namespace:cudiv	signature:(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code ,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
cudiv::PreSortFluid	JCellDivGpuSingle_ker.h	/^void PreSortFluid(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart);$/;"	p	namespace:cudiv	signature:(unsigned npf,unsigned pini,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
cudiv::PreSortFull	JCellDivGpuSingle_ker.cu	/^void PreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code ,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
cudiv::PreSortFull	JCellDivGpuSingle_ker.h	/^void PreSortFull(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned cellcode,const unsigned *dcell,const typecode *code,tuint3 cellmin,tuint3 ncells,unsigned *cellpart,unsigned *sortpart)
cudiv::ReduPosLimits	JCellDivGpu_ker.cu	/^void ReduPosLimits(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log)
cudiv::ReduPosLimits	JCellDivGpu_ker.h	/^void ReduPosLimits(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log);$/;"	p	namespace:cudiv	signature:(unsigned nblocks,float *aux,tfloat3 &pmin,tfloat3 &pmax,JLog2 *log)
cudiv::ReduUintLimits	JCellDivGpu_ker.cu	/^void ReduUintLimits(unsigned nblocks,unsigned *aux,unsigned &vmin,unsigned &vmax,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,unsigned *aux,unsigned &vmin,unsigned &vmax,JLog2 *log)
cudiv::ReduUintSum	JCellDivGpu_ker.cu	/^unsigned ReduUintSum(unsigned nblocks,unsigned *aux,JLog2 *log){$/;"	f	namespace:cudiv	signature:(unsigned nblocks,unsigned *aux,JLog2 *log)
cudiv::Sort	JCellDivGpu_ker.cu	/^void Sort(unsigned* keys,unsigned* values,unsigned size,bool stable){$/;"	f	namespace:cudiv	signature:(unsigned* keys,unsigned* values,unsigned size,bool stable)
cudiv::Sort	JCellDivGpu_ker.h	/^void Sort(unsigned* keys,unsigned* values,unsigned size,bool stable);$/;"	p	namespace:cudiv	signature:(unsigned* keys,unsigned* values,unsigned size,bool stable)
cudiv::SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart ,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop ,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
cudiv::SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
cudiv::SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
cudiv::SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
cudiv::SortDataParticles	JCellDivGpu_ker.cu	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2){$/;"	f	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
cudiv::SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const double2 *a,const double *b,const float4 *c,double2 *a2,double *b2,float4 *c2)
cudiv::SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float *a,const float *b,float *a2,float *b2)
cudiv::SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const float4 *a,float4 *a2)
cudiv::SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const tsymatrix3f *a,tsymatrix3f *a2)
cudiv::SortDataParticles	JCellDivGpu_ker.h	/^void SortDataParticles(unsigned np,unsigned pini,const unsigned *sortpart,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2);$/;"	p	namespace:cudiv	signature:(unsigned np,unsigned pini,const unsigned *sortpart,const unsigned *idp,const typecode *code,const unsigned *dcell,const double2 *posxy,const double *posz,const float4 *velrhop,unsigned *idp2,typecode *code2,unsigned *dcell2,double2 *posxy2,double *posz2,float4 *velrhop2)
cudiv::ToTFloat3	JCellDivGpu_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cudiv	signature:(const float3& v)
cugauge	JGauge_ker.cu	/^namespace cugauge{$/;"	n	file:
cugauge	JGauge_ker.h	/^namespace cugauge{$/;"	n
cugauge::Double3	JGauge_ker.h	/^inline double3 Double3(const tdouble3& v){ double3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cugauge	signature:(const tdouble3& v)
cugauge::Float3	JGauge_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cugauge	signature:(const tfloat3& v)
cugauge::Float3	JGauge_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cugauge	signature:(float x,float y,float z)
cugauge::GetGridSize	JGauge_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned blocksize)
cugauge::GetGridSize	JGauge_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cugauge	signature:(unsigned n,unsigned blocksize)
cugauge::Int4	JGauge_ker.h	/^inline int4 Int4(const tint4& v){ int4 p={v.x,v.y,v.z,v.w}; return(p); }$/;"	f	namespace:cugauge	signature:(const tint4& v)
cugauge::Interaction_GaugeForce	JGauge_ker.cu	/^void Interaction_GaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell,tdouble3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
cugauge::Interaction_GaugeForce	JGauge_ker.h	/^void Interaction_GaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	p	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell,tdouble3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
cugauge::Interaction_GaugeMaxz	JGauge_ker.cu	/^void Interaction_GaugeMaxz(tdouble3 point0,float maxdist2$/;"	f	namespace:cugauge	signature:(tdouble3 point0,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
cugauge::Interaction_GaugeMaxz	JGauge_ker.h	/^void Interaction_GaugeMaxz(tdouble3 point0,float maxdist2$/;"	p	namespace:cugauge	signature:(tdouble3 point0,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
cugauge::Interaction_GaugeSwl	JGauge_ker.cu	/^void Interaction_GaugeSwl(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit$/;"	f	namespace:cugauge	signature:(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,tdouble3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
cugauge::Interaction_GaugeSwl	JGauge_ker.h	/^void Interaction_GaugeSwl(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit$/;"	p	namespace:cugauge	signature:(tdouble3 point0,tdouble3 pointdir,unsigned pointnp,float masslimit ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,tdouble3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
cugauge::Interaction_GaugeVel	JGauge_ker.cu	/^void Interaction_GaugeVel(tdouble3 ptpos$/;"	f	namespace:cugauge	signature:(tdouble3 ptpos ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,tdouble3 domposmin,float scell,float fourh2,float h,float massf)
cugauge::Interaction_GaugeVel	JGauge_ker.h	/^void Interaction_GaugeVel(tdouble3 ptpos$/;"	p	namespace:cugauge	signature:(tdouble3 ptpos ,float awen,int hdiv,tuint3 ncells,tuint3 cellmin,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,tdouble3 domposmin,float scell,float fourh2,float h,float massf)
cugauge::KerCalculeMass	JGauge_ker.cu	/^__device__ float KerCalculeMass(double px,double py,double pz,float awen$/;"	f	namespace:cugauge	signature:(double px,double py,double pz,float awen ,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,double3 domposmin,float scell,float fourh2,float h,float massf)
cugauge::KerGetInteractionCells	JGauge_ker.cu	/^__device__ void KerGetInteractionCells(double px,double py,double pz$/;"	f	namespace:cugauge	signature:(double px,double py,double pz ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin ,const double3 &domposmin,float scell)
cugauge::KerInteractionGaugeForce	JGauge_ker.cu	/^__global__ void KerInteractionGaugeForce(unsigned n,unsigned idbegin,typecode codesel$/;"	f	namespace:cugauge	signature:(unsigned n,unsigned idbegin,typecode codesel ,float fourh2,float h,float bwen,float massf,float cteb,float rhopzero,float gamma ,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell,double3 domposmin,float scell ,const double2 *posxy,const double *posz,const typecode *code,const unsigned *idp,const float4 *velrhop ,float3 *partace)
cugauge::KerInteractionGaugeMaxz	JGauge_ker.cu	/^__global__ void KerInteractionGaugeMaxz(double p0x,double p0y,float maxdist2$/;"	f	namespace:cugauge	signature:(double p0x,double p0y,float maxdist2 ,int cxini,int cxfin,int yini,int yfin,int zini,int zfin ,int4 nc,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code ,float3 *ptres)
cugauge::KerInteractionGaugeSwl	JGauge_ker.cu	/^__global__ void KerInteractionGaugeSwl(double p0x,double p0y,double p0z$/;"	f	namespace:cugauge	signature:(double p0x,double p0y,double p0z ,double pdirx,double pdiry,double pdirz,unsigned pointnp,float masslimit ,float awen,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,double3 domposmin,float scell,float fourh2,float h,float massf,float3 *ptres)
cugauge::KerInteractionGaugeVel	JGauge_ker.cu	/^__global__ void KerInteractionGaugeVel(double3 ptpos$/;"	f	namespace:cugauge	signature:(double3 ptpos ,float awen,int hdiv,int4 nc,int3 cellzero,unsigned cellfluid,const int2 *begincell ,const double2 *posxy,const double *posz,const typecode *code,const float4 *velrhop ,float3 *ptvel ,double3 domposmin,float scell,float fourh2,float h,float massf)
cugauge::ToTFloat3	JGauge_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cugauge	signature:(const float3& v)
cugauge::__CheckErrorCuda	JGauge_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cugauge	signature:(const char *text,const char *file,const int line)
cumath	FunctionsMath_ker.cu	/^namespace cumath{$/;"	n	file:
cumath::Determinant3x3	FunctionsMath_ker.cu	/^__device__ double Determinant3x3(const tmatrix3d &d){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d)
cumath::Determinant3x3	FunctionsMath_ker.cu	/^__device__ float Determinant3x3(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
cumath::Determinant3x3dbl	FunctionsMath_ker.cu	/^__device__ double Determinant3x3dbl(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
cumath::Determinant4x4	FunctionsMath_ker.cu	/^__device__ double Determinant4x4(const tmatrix4d &d){$/;"	f	namespace:cumath	signature:(const tmatrix4d &d)
cumath::Determinant4x4	FunctionsMath_ker.cu	/^__device__ float Determinant4x4(const tmatrix4f &d){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d)
cumath::Determinant4x4dbl	FunctionsMath_ker.cu	/^__device__ double Determinant4x4dbl(const tmatrix4f &d){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d)
cumath::DistPlane	FunctionsMath_ker.cu	/^__device__ double DistPlane(const float4 &pla,const double3 &pt){ $/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
cumath::DistPlaneSign	FunctionsMath_ker.cu	/^__device__ double DistPlaneSign(const float4 &pla,const double3 &pt){$/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
cumath::InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d InverseMatrix3x3(const tmatrix3d &d){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d)
cumath::InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d InverseMatrix3x3(const tmatrix3d &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix3d &d,const double det)
cumath::InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3(const tmatrix3f &d){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d)
cumath::InverseMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3(const tmatrix3f &d,const float det){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d,const float det)
cumath::InverseMatrix3x3dbl	FunctionsMath_ker.cu	/^__device__ tmatrix3f InverseMatrix3x3dbl(const tmatrix3f &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix3f &d,const double det)
cumath::InverseMatrix4x4	FunctionsMath_ker.cu	/^__device__ tmatrix4d InverseMatrix4x4(const tmatrix4d &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix4d &d,const double det)
cumath::InverseMatrix4x4	FunctionsMath_ker.cu	/^__device__ tmatrix4f InverseMatrix4x4(const tmatrix4f &d,const float det){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d,const float det)
cumath::InverseMatrix4x4dbl	FunctionsMath_ker.cu	/^__device__ tmatrix4f InverseMatrix4x4dbl(const tmatrix4f &d,const double det){$/;"	f	namespace:cumath	signature:(const tmatrix4f &d,const double det)
cumath::KerDistPlaneSign	FunctionsMath_ker.cu	/^__device__ float KerDistPlaneSign(const float4 &pla,float px,float py,float pz){ $/;"	f	namespace:cumath	signature:(const float4 &pla,float px,float py,float pz)
cumath::MulMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d MulMatrix3x3(const tmatrix3d &a,const tmatrix3d &b){$/;"	f	namespace:cumath	signature:(const tmatrix3d &a,const tmatrix3d &b)
cumath::MulMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f MulMatrix3x3(const tmatrix3f &a,const tmatrix3f &b){$/;"	f	namespace:cumath	signature:(const tmatrix3f &a,const tmatrix3f &b)
cumath::PointPlane	FunctionsMath_ker.cu	/^__device__ double PointPlane(const float4 &pla,const double3 &pt){ $/;"	f	namespace:cumath	signature:(const float4 &pla,const double3 &pt)
cumath::PointPlane	FunctionsMath_ker.cu	/^__device__ float PointPlane(const float4 &pla,float px,float py,float pz){ $/;"	f	namespace:cumath	signature:(const float4 &pla,float px,float py,float pz)
cumath::RotMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d RotMatrix3x3(const double3 &ang){$/;"	f	namespace:cumath	signature:(const double3 &ang)
cumath::RotMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f RotMatrix3x3(const float3 &ang){$/;"	f	namespace:cumath	signature:(const float3 &ang)
cumath::Tmatrix3dReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix3dReset(tmatrix3d &m){ $/;"	f	namespace:cumath	signature:(tmatrix3d &m)
cumath::Tmatrix3fReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix3fReset(tmatrix3f &m){ $/;"	f	namespace:cumath	signature:(tmatrix3f &m)
cumath::Tmatrix4dReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix4dReset(tmatrix4d &m){ $/;"	f	namespace:cumath	signature:(tmatrix4d &m)
cumath::Tmatrix4fReset	FunctionsMath_ker.cu	/^__device__ void Tmatrix4fReset(tmatrix4f &m){ $/;"	f	namespace:cumath	signature:(tmatrix4f &m)
cumath::TrasMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3d TrasMatrix3x3(const tmatrix3d &a){$/;"	f	namespace:cumath	signature:(const tmatrix3d &a)
cumath::TrasMatrix3x3	FunctionsMath_ker.cu	/^__device__ tmatrix3f TrasMatrix3x3(const tmatrix3f &a){$/;"	f	namespace:cumath	signature:(const tmatrix3f &a)
curedus	JReduSum_ker.cu	/^namespace curedus{$/;"	n	file:
curedus	JReduSum_ker.h	/^namespace curedus{$/;"	n
curedus::DgReduSumDouble	JReduSum_ker.cu	/^double DgReduSumDouble(unsigned ndata,unsigned inidata,const double* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* datag)
curedus::DgReduSumDouble	JReduSum_ker.h	/^double DgReduSumDouble(unsigned ndata,unsigned inidata,const double* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data)
curedus::DgReduSumFloat	JReduSum_ker.cu	/^float DgReduSumFloat(unsigned ndata,unsigned inidata,const float* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* datag)
curedus::DgReduSumFloat	JReduSum_ker.h	/^float DgReduSumFloat(unsigned ndata,unsigned inidata,const float* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data)
curedus::DgReduSumFloat3	JReduSum_ker.cu	/^float3 DgReduSumFloat3(unsigned ndata,unsigned inidata,const float3* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* datag)
curedus::DgReduSumFloat3	JReduSum_ker.h	/^float3 DgReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data)
curedus::DgReduSumUint	JReduSum_ker.cu	/^unsigned DgReduSumUint(unsigned ndata,unsigned inidata,const unsigned* datag){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* datag)
curedus::DgReduSumUint	JReduSum_ker.h	/^unsigned DgReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data)
curedus::GetAuxSize_ReduSumDouble	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumDouble(unsigned ndata){$/;"	f	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumDouble	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumDouble(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumFloat	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumFloat(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumFloat	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumFloat(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumFloat3	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumFloat3(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumFloat3	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumFloat3(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumUint	JReduSum_ker.cu	/^unsigned GetAuxSize_ReduSumUint(unsigned ndata){ return(GetAuxSize_ReduSumDouble(ndata)); }$/;"	f	namespace:curedus	signature:(unsigned ndata)
curedus::GetAuxSize_ReduSumUint	JReduSum_ker.h	/^unsigned GetAuxSize_ReduSumUint(unsigned ndata);$/;"	p	namespace:curedus	signature:(unsigned ndata)
curedus::GetGridSize	JReduSum_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned blocksize)
curedus::KerReduSumDouble	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumDouble(unsigned n,unsigned ini,const double *dat,double *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const double *dat,double *res)
curedus::KerReduSumDoubleWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumDoubleWarp(volatile double* sddat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile double* sddat,unsigned tid)
curedus::KerReduSumFloat	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumFloat(unsigned n,unsigned ini,const float *dat,float *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const float *dat,float *res)
curedus::KerReduSumFloat3	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumFloat3(unsigned n,unsigned ini,const float3 *dat,float3 *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const float3 *dat,float3 *res)
curedus::KerReduSumFloatWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumFloatWarp(volatile float* sfdat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile float* sfdat,unsigned tid)
curedus::KerReduSumUint	JReduSum_ker.cu	/^template <unsigned blockSize> __global__ void KerReduSumUint(unsigned n,unsigned ini,const unsigned *dat,unsigned *res){$/;"	f	namespace:curedus	signature:(unsigned n,unsigned ini,const unsigned *dat,unsigned *res)
curedus::KerReduSumUintWarp	JReduSum_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumUintWarp(volatile unsigned* sudat,unsigned tid){$/;"	f	namespace:curedus	signature:(volatile unsigned* sudat,unsigned tid)
curedus::ReduSumDouble	JReduSum_ker.cu	/^double ReduSumDouble(unsigned ndata,unsigned inidata,const double* data,double* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu)
curedus::ReduSumDouble	JReduSum_ker.h	/^double ReduSumDouble(unsigned ndata,unsigned inidata,const double* data,double* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu)
curedus::ReduSumDoubleAsyn	JReduSum_ker.cu	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm)
curedus::ReduSumDoubleAsyn	JReduSum_ker.cu	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
curedus::ReduSumDoubleAsyn	JReduSum_ker.h	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,cudaStream_t stm)
curedus::ReduSumDoubleAsyn	JReduSum_ker.h	/^void ReduSumDoubleAsyn(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
curedus::ReduSumDoubleBase	JReduSum_ker.cu	/^double ReduSumDoubleBase(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const double* data,double* resu,double *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloat	JReduSum_ker.cu	/^float ReduSumFloat(unsigned ndata,unsigned inidata,const float* data,float* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu)
curedus::ReduSumFloat	JReduSum_ker.h	/^float ReduSumFloat(unsigned ndata,unsigned inidata,const float* data,float* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu)
curedus::ReduSumFloat3	JReduSum_ker.cu	/^float3 ReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data,float3* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu)
curedus::ReduSumFloat3	JReduSum_ker.h	/^float3 ReduSumFloat3(unsigned ndata,unsigned inidata,const float3* data,float3* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu)
curedus::ReduSumFloat3Asyn	JReduSum_ker.cu	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm)
curedus::ReduSumFloat3Asyn	JReduSum_ker.cu	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloat3Asyn	JReduSum_ker.h	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,cudaStream_t stm)
curedus::ReduSumFloat3Asyn	JReduSum_ker.h	/^void ReduSumFloat3Asyn(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloat3Base	JReduSum_ker.cu	/^float3 ReduSumFloat3Base(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float3* data,float3* resu,float3 *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloatAsyn	JReduSum_ker.cu	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm)
curedus::ReduSumFloatAsyn	JReduSum_ker.cu	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloatAsyn	JReduSum_ker.h	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,cudaStream_t stm)
curedus::ReduSumFloatAsyn	JReduSum_ker.h	/^void ReduSumFloatAsyn(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
curedus::ReduSumFloatBase	JReduSum_ker.cu	/^float ReduSumFloatBase(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const float* data,float* resu,float *pim1_sum,cudaStream_t stm)
curedus::ReduSumUint	JReduSum_ker.cu	/^unsigned ReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu)
curedus::ReduSumUint	JReduSum_ker.h	/^unsigned ReduSumUint(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu)
curedus::ReduSumUintAsyn	JReduSum_ker.cu	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm)
curedus::ReduSumUintAsyn	JReduSum_ker.cu	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
curedus::ReduSumUintAsyn	JReduSum_ker.h	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,cudaStream_t stm)
curedus::ReduSumUintAsyn	JReduSum_ker.h	/^void ReduSumUintAsyn(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm);$/;"	p	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
curedus::ReduSumUintBase	JReduSum_ker.cu	/^unsigned ReduSumUintBase(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm){$/;"	f	namespace:curedus	signature:(unsigned ndata,unsigned inidata,const unsigned* data,unsigned* resu,unsigned *pim1_sum,cudaStream_t stm)
curedus::__CheckErrorCuda	JReduSum_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:curedus	signature:(const char *text,const char *file,const int line)
cursor	tinyxmlparser.cpp	/^    TiXmlCursor     cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
cusph	JSphGpu_ker.cu	/^namespace cusph{$/;"	n	file:
cusph	JSphGpu_ker.h	/^namespace cusph{$/;"	n
cusph::AddAccInput	JSphGpu_ker.cu	/^void AddAccInput(unsigned n,unsigned pini,typecode codesel$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel ,tdouble3 acclin,tdouble3 accang,tdouble3 centre,tdouble3 velang,tdouble3 vellin,bool setgravity ,tfloat3 gravity,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
cusph::AddAccInput	JSphGpu_ker.h	/^void AddAccInput(unsigned n,unsigned pini,typecode codesel$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel ,tdouble3 acclin,tdouble3 accang,tdouble3 centre,tdouble3 velang,tdouble3 vellin,bool setgravity ,tfloat3 gravity,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
cusph::AddDelta	JSphGpu_ker.cu	/^void AddDelta(unsigned n,const float *delta,float *ar){$/;"	f	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
cusph::AddDelta	JSphGpu_ker.h	/^void AddDelta(unsigned n,const float *delta,float *ar);$/;"	p	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
cusph::CalcRidp	JSphGpu_ker.cu	/^void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp){$/;"	f	namespace:cusph	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
cusph::CalcRidp	JSphGpu_ker.h	/^void CalcRidp(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp);$/;"	p	namespace:cusph	signature:(bool periactive,unsigned np,unsigned pini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
cusph::ComputeAceMod	JSphGpu_ker.cu	/^void ComputeAceMod(unsigned n,const float3 *ace,float *acemod){$/;"	f	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
cusph::ComputeAceMod	JSphGpu_ker.cu	/^void ComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod){$/;"	f	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
cusph::ComputeAceMod	JSphGpu_ker.h	/^void ComputeAceMod(unsigned n,const float3 *ace,float *acemod);$/;"	p	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
cusph::ComputeAceMod	JSphGpu_ker.h	/^void ComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod);$/;"	p	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
cusph::ComputeDamping	JSphGpu_ker.cu	/^void ComputeDamping(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	f	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::ComputeDamping	JSphGpu_ker.h	/^void ComputeDamping(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	p	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::ComputeDampingPla	JSphGpu_ker.cu	/^void ComputeDampingPla(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	f	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,double zmin,double zmax,tdouble4 pla0,tdouble4 pla1,tdouble4 pla2,tdouble4 pla3 ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::ComputeDampingPla	JSphGpu_ker.h	/^void ComputeDampingPla(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax$/;"	p	namespace:cusph	signature:(double dt,tdouble4 plane,float dist,float over,tfloat3 factorxyz,float redumax ,double zmin,double zmax,tdouble4 pla0,tdouble4 pla1,tdouble4 pla2,tdouble4 pla3 ,unsigned n,unsigned pini,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::ComputeSpsTau	JSphGpu_ker.cu	/^void ComputeSpsTau(unsigned np,unsigned npb,float smag,float blin$/;"	f	namespace:cusph	signature:(unsigned np,unsigned npb,float smag,float blin ,const float4 *velrhop,const tsymatrix3f *gradvelg,tsymatrix3f *tau)
cusph::ComputeSpsTau	JSphGpu_ker.h	/^void ComputeSpsTau(unsigned np,unsigned npb,float smag,float blin$/;"	p	namespace:cusph	signature:(unsigned np,unsigned npb,float smag,float blin ,const float4 *velrhop,const tsymatrix3f *gradvelg,tsymatrix3f *tau)
cusph::ComputeStepPos	JSphGpu_ker.cu	/^void ComputeStepPos(byte periactive,bool floatings,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb ,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::ComputeStepPos	JSphGpu_ker.h	/^void ComputeStepPos (byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::ComputeStepPos2	JSphGpu_ker.cu	/^void ComputeStepPos2(byte periactive,bool floatings,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb ,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::ComputeStepPos2	JSphGpu_ker.h	/^void ComputeStepPos2(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool floatings,unsigned np,unsigned npb,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::ComputeStepSymplecticCor	JSphGpu_ker.cu	/^void ComputeStepSymplecticCor(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::ComputeStepSymplecticCor	JSphGpu_ker.h	/^void ComputeStepSymplecticCor(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::ComputeStepSymplecticPre	JSphGpu_ker.cu	/^void ComputeStepSymplecticPre(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::ComputeStepSymplecticPre	JSphGpu_ker.h	/^void ComputeStepSymplecticPre(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::ComputeStepVerlet	JSphGpu_ker.cu	/^void ComputeStepVerlet(bool floatings,bool shift,unsigned np,unsigned npb$/;"	f	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt2,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhopnew)
cusph::ComputeStepVerlet	JSphGpu_ker.h	/^void ComputeStepVerlet(bool floatings,bool shift,unsigned np,unsigned npb$/;"	p	namespace:cusph	signature:(bool floatings,bool shift,unsigned np,unsigned npb ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt2,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhopnew)
cusph::ComputeVelMod	JSphGpu_ker.cu	/^void ComputeVelMod(unsigned n,const float4 *vel,float *velmod){$/;"	f	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
cusph::ComputeVelMod	JSphGpu_ker.h	/^void ComputeVelMod(unsigned n,const float4 *vel,float *velmod);$/;"	p	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
cusph::CteInteractionUp	JSphGpu_ker.cu	/^void CteInteractionUp(const StCteInteraction *cte){$/;"	f	namespace:cusph	signature:(const StCteInteraction *cte)
cusph::CteInteractionUp	JSphGpu_ker.h	/^void CteInteractionUp(const StCteInteraction *cte);$/;"	p	namespace:cusph	signature:(const StCteInteraction *cte)
cusph::Double3	JSphGpu_ker.h	/^inline double3 Double3(const tdouble3& v){ double3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cusph	signature:(const tdouble3& v)
cusph::Double4	JSphGpu_ker.h	/^inline double4 Double4(const tdouble4& v){ double4 p={v.x,v.y,v.z,v.w}; return(p); }$/;"	f	namespace:cusph	signature:(const tdouble4& v)
cusph::Float3	JSphGpu_ker.h	/^inline float3 Float3(const tfloat3& v){ float3 p={v.x,v.y,v.z}; return(p); }$/;"	f	namespace:cusph	signature:(const tfloat3& v)
cusph::Float3	JSphGpu_ker.h	/^inline float3 Float3(float x,float y,float z){ float3 p={x,y,z}; return(p); }$/;"	f	namespace:cusph	signature:(float x,float y,float z)
cusph::FtCalcForces	JSphGpu_ker.cu	/^void FtCalcForces(unsigned ftcount,tfloat3 gravity,const float4 *ftodata$/;"	f	namespace:cusph	signature:(unsigned ftcount,tfloat3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
cusph::FtCalcForces	JSphGpu_ker.h	/^void FtCalcForces(unsigned ftcount,tfloat3 gravity,const float4 *ftodata$/;"	p	namespace:cusph	signature:(unsigned ftcount,tfloat3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
cusph::FtCalcForcesRes	JSphGpu_ker.cu	/^void FtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	f	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
cusph::FtCalcForcesRes	JSphGpu_ker.h	/^void FtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	p	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
cusph::FtCalcForcesSum	JSphGpu_ker.cu	/^void FtCalcForcesSum(bool periactive,unsigned ftcount$/;"	f	namespace:cusph	signature:(bool periactive,unsigned ftcount ,tfloat3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
cusph::FtCalcForcesSum	JSphGpu_ker.h	/^void FtCalcForcesSum(bool periactive,unsigned ftcount$/;"	p	namespace:cusph	signature:(bool periactive,unsigned ftcount ,tfloat3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
cusph::FtUpdate	JSphGpu_ker.cu	/^void FtUpdate(bool periactive,bool predictor,unsigned ftcount,double dt$/;"	f	namespace:cusph	signature:(bool periactive,bool predictor,unsigned ftcount,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::FtUpdate	JSphGpu_ker.h	/^void FtUpdate(bool periactive,bool predictor,unsigned ftcount,double dt$/;"	p	namespace:cusph	signature:(bool periactive,bool predictor,unsigned ftcount,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::GetGridSize	JSphGpu_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned blocksize)
cusph::GetGridSize	JSphGpu_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned blocksize)
cusph::InitArray	JSphGpu_ker.cu	/^void InitArray(unsigned n,float3 *v,tfloat3 value){$/;"	f	namespace:cusph	signature:(unsigned n,float3 *v,tfloat3 value)
cusph::InitArray	JSphGpu_ker.h	/^void InitArray(unsigned n,float3 *v,tfloat3 value);$/;"	p	namespace:cusph	signature:(unsigned n,float3 *v,tfloat3 value)
cusph::Interaction_Forces	JSphGpu_ker.cu	/^void Interaction_Forces(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps$/;"	f	namespace:cusph	signature:(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps ,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
cusph::Interaction_Forces	JSphGpu_ker.h	/^void Interaction_Forces(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps$/;"	p	namespace:cusph	signature:(bool psingle,TpKernel tkernel,TpFtMode ftmode,bool lamsps ,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
cusph::Interaction_ForcesDem	JSphGpu_ker.cu	/^void Interaction_ForcesDem(bool psingle,TpCellMode cellmode,unsigned bsize$/;"	f	namespace:cusph	signature:(bool psingle,TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
cusph::Interaction_ForcesDem	JSphGpu_ker.h	/^void Interaction_ForcesDem(bool psingle,TpCellMode cellmode,unsigned bsize$/;"	p	namespace:cusph	signature:(bool psingle,TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
cusph::Interaction_ForcesDemT	JSphGpu_ker.cu	/^template<bool psingle> void Interaction_ForcesDemT$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,unsigned bsize ,unsigned nfloat,tuint3 ncells,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,const typecode *code,const unsigned *idp,float *viscdt,float3 *ace,StKerInfo *kerinfo)
cusph::Interaction_ForcesDemT_KerInfo	JSphGpu_ker.cu	/^template<bool psingle> void Interaction_ForcesDemT_KerInfo(StKerInfo *kerinfo)$/;"	f	namespace:cusph	signature:(StKerInfo *kerinfo)
cusph::Interaction_ForcesT	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
cusph::Interaction_ForcesT_BsAuto	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT_BsAuto$/;"	f	namespace:cusph	signature:(TpCellMode cellmode,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,JBlockSizeAuto *bsauto)
cusph::Interaction_ForcesT_KerInfo	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> void Interaction_ForcesT_KerInfo$/;"	f	namespace:cusph	signature:(StKerInfo *kerinfo)
cusph::Interaction_Forces_t1	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> void Interaction_Forces_t1(bool lamsps,TpDeltaSph tdelta,TpCellMode cellmode$/;"	f	namespace:cusph	signature:(bool lamsps,TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
cusph::Interaction_Forces_t2	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps> void Interaction_Forces_t2(TpDeltaSph tdelta,TpCellMode cellmode$/;"	f	namespace:cusph	signature:(TpDeltaSph tdelta,TpCellMode cellmode ,float viscob,float viscof,unsigned bsbound,unsigned bsfluid ,unsigned np,unsigned npb,unsigned npbok,tuint3 ncells ,const int2 *begincell,tuint3 cellmin,const unsigned *dcell ,const double2 *posxy,const double *posz,const float4 *pospress ,const float4 *velrhop,const typecode *code,const unsigned *idp ,const float *ftomassp,const tsymatrix3f *tau,tsymatrix3f *gradvel ,float *viscdt,float* ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect ,bool simulate2d,StKerInfo *kerinfo,JBlockSizeAuto *bsauto)
cusph::KerAddAccInputAng	JSphGpu_ker.cu	/^__global__ void KerAddAccInputAng(unsigned n,unsigned pini,typecode codesel,float3 gravity$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel,float3 gravity ,bool setgravity,double3 acclin,double3 accang,double3 centre,double3 velang,double3 vellin ,const typecode *code,const double2 *posxy,const double *posz,const float4 *velrhop,float3 *ace)
cusph::KerAddAccInputLin	JSphGpu_ker.cu	/^__global__ void KerAddAccInputLin(unsigned n,unsigned pini,typecode codesel,float3 gravity$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,typecode codesel,float3 gravity ,bool setgravity,double3 acclin,const typecode *code,float3 *ace)
cusph::KerAddDelta	JSphGpu_ker.cu	/^__global__ void KerAddDelta(unsigned n,const float *delta,float *ar)$/;"	f	namespace:cusph	signature:(unsigned n,const float *delta,float *ar)
cusph::KerCalcRidp	JSphGpu_ker.cu	/^__global__ void KerCalcRidp(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const typecode *code,const unsigned *idp,unsigned *ridp)
cusph::KerCalcRidp	JSphGpu_ker.cu	/^__global__ void KerCalcRidp(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const unsigned *idp,unsigned *ridp)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,unsigned idini,unsigned idfin,const unsigned *idp,unsigned *ridp)
cusph::KerComputeAceMod	JSphGpu_ker.cu	/^__global__ void KerComputeAceMod(unsigned n,const float3 *ace,float *acemod)$/;"	f	namespace:cusph	signature:(unsigned n,const float3 *ace,float *acemod)
cusph::KerComputeAceMod	JSphGpu_ker.cu	/^__global__ void KerComputeAceMod(unsigned n,const typecode *code,const float3 *ace,float *acemod)$/;"	f	namespace:cusph	signature:(unsigned n,const typecode *code,const float3 *ace,float *acemod)
cusph::KerComputeDamping	JSphGpu_ker.cu	/^__global__ void KerComputeDamping(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,double dt,double4 plane,float dist,float over,float3 factorxyz,float redumax ,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::KerComputeDampingPla	JSphGpu_ker.cu	/^__global__ void KerComputeDampingPla(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,double dt,double4 plane,float dist,float over,float3 factorxyz,float redumax ,double zmin,double zmax,double4 pla0,double4 pla1,double4 pla2,double4 pla3 ,const double2 *posxy,const double *posz,const typecode *code ,float4 *velrhop)
cusph::KerComputeSpsTau	JSphGpu_ker.cu	/^__global__ void KerComputeSpsTau(unsigned n,unsigned pini,float smag,float blin$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,float smag,float blin ,const float4 *velrhop,const float2 *gradvelff,float2 *tauff)
cusph::KerComputeStepPos	JSphGpu_ker.cu	/^template<bool periactive,bool floatings> __global__ void KerComputeStepPos(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::KerComputeStepPos2	JSphGpu_ker.cu	/^template<bool periactive,bool floatings> __global__ void KerComputeStepPos2(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,const double2 *posxypre,const double *poszpre,const double2 *movxy,const double *movz ,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::KerComputeStepSymplecticCor	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepSymplecticCor$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,double dt,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::KerComputeStepSymplecticPre	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepSymplecticPre$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb ,const float4 *velrhoppre,const float *ar,const float3 *ace,const float3 *shiftpos ,double dtm,float rhopoutmin,float rhopoutmax ,typecode *code,double2 *movxy,double *movz,float4 *velrhop)
cusph::KerComputeStepVerlet	JSphGpu_ker.cu	/^template<bool floatings,bool shift> __global__ void KerComputeStepVerlet$/;"	f	namespace:cusph	signature:(unsigned n,unsigned npb,float rhopoutmin,float rhopoutmax ,const float4 *velrhop1,const float4 *velrhop2 ,const float *ar,const float3 *ace,const float3 *shiftpos ,double dt,double dt205,double dt2 ,double2 *movxy,double *movz,typecode *code,float4 *velrhopnew)
cusph::KerComputeVelMod	JSphGpu_ker.cu	/^__global__ void KerComputeVelMod(unsigned n,const float4 *vel,float *velmod)$/;"	f	namespace:cusph	signature:(unsigned n,const float4 *vel,float *velmod)
cusph::KerFtCalcForces	JSphGpu_ker.cu	/^__global__ void KerFtCalcForces(unsigned ftcount,float3 gravity,const float4 *ftodata$/;"	f	namespace:cusph	signature:(unsigned ftcount,float3 gravity,const float4 *ftodata ,const float3 *ftoangles,const float4 *ftoinertiaini8,const float *ftoinertiaini1 ,const float3 *ftoforcessum,float3 *ftoforces)
cusph::KerFtCalcForcesRes	JSphGpu_ker.cu	/^__global__ void KerFtCalcForcesRes(unsigned ftcount,bool simulate2d,double dt$/;"	f	namespace:cusph	signature:(unsigned ftcount,bool simulate2d,double dt ,const float3 *ftoomega,const float3 *ftovel,const double3 *ftocenter,const float3 *ftoforces ,float3 *ftoforcesres,double3 *ftocenterres)
cusph::KerFtCalcForcesSum	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerFtCalcForcesSum( \/\/fdata={pini,np,radius,mass}$/;"	f	namespace:cusph	signature:( float3 gravity,const float4 *ftodata,const double3 *ftocenter,const unsigned *ftridp ,const double2 *posxy,const double *posz,const float3 *ace ,float3 *ftoforcessum)
cusph::KerFtPeriodicDist	JSphGpu_ker.cu	/^template<bool periactive> __device__ void KerFtPeriodicDist(double px,double py,double pz,double cenx,double ceny,double cenz,float radius,float &dx,float &dy,float &dz){$/;"	f	namespace:cusph	signature:(double px,double py,double pz,double cenx,double ceny,double cenz,float radius,float &dx,float &dy,float &dz)
cusph::KerFtUpdate	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerFtUpdate(bool predictor,double dt \/\/fdata={pini,np,radius,mass}$/;"	f	namespace:cusph	signature:(bool predictor,double dt ,const float4 *ftodata,const float3 *ftoforcesres,double3 *ftocenterres,const unsigned *ftridp ,double3 *ftocenter,float3 *ftoangles,float3 *ftovel,float3 *ftoomega ,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::KerGetInteractionCells	JSphGpu_ker.cu	/^__device__ void KerGetInteractionCells(double px,double py,double pz$/;"	f	namespace:cusph	signature:(double px,double py,double pz ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin)
cusph::KerGetInteractionCells	JSphGpu_ker.cu	/^__device__ void KerGetInteractionCells(unsigned rcell$/;"	f	namespace:cusph	signature:(unsigned rcell ,int hdiv,const int4 &nc,const int3 &cellzero ,int &cxini,int &cxfin,int &yini,int &yfin,int &zini,int &zfin)
cusph::KerGetKernelCubic	JSphGpu_ker.cu	/^__device__ void KerGetKernelCubic(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
cusph::KerGetKernelCubicTensil	JSphGpu_ker.cu	/^__device__ float KerGetKernelCubicTensil(float rr2$/;"	f	namespace:cusph	signature:(float rr2 ,float rhopp1,float pressp1,float rhopp2,float pressp2)
cusph::KerGetKernelGaussian	JSphGpu_ker.cu	/^__device__ void KerGetKernelGaussian(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
cusph::KerGetKernelWendland	JSphGpu_ker.cu	/^__device__ void KerGetKernelWendland(float rr2,float drx,float dry,float drz$/;"	f	namespace:cusph	signature:(float rr2,float drx,float dry,float drz ,float &frx,float &fry,float &frz)
cusph::KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress ,double3 &posdp1,float3 &posp1)
cusph::KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,float3 &velp1,double3 &posdp1,float3 &posp1)
cusph::KerGetParticleData	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticleData(unsigned p1$/;"	f	namespace:cusph	signature:(unsigned p1 ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop ,float3 &velp1,float &rhopp1,double3 &posdp1,float3 &posp1,float &pressp1)
cusph::KerGetParticlesDr	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticlesDr(int p2$/;"	f	namespace:cusph	signature:(int p2 ,const double2 *posxy,const double *posz,const float4 *pospress ,const double3 &posdp1,const float3 &posp1 ,float &drx,float &dry,float &drz)
cusph::KerGetParticlesDr	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerGetParticlesDr(int p2$/;"	f	namespace:cusph	signature:(int p2 ,const double2 *posxy,const double *posz,const float4 *pospress ,const double3 &posdp1,const float3 &posp1 ,float &drx,float &dry,float &drz,float &pressp2)
cusph::KerInitArray	JSphGpu_ker.cu	/^__global__ void KerInitArray(unsigned n,float3 *v,float3 value)$/;"	f	namespace:cusph	signature:(unsigned n,float3 *v,float3 value)
cusph::KerInteractionForcesBound	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> __global__ void KerInteractionForcesBound$/;"	f	namespace:cusph	signature:(unsigned n,int hdiv,int4 nc,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const float *ftomassp ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float *ar)
cusph::KerInteractionForcesBoundBox	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode> __device__ void KerInteractionForcesBoundBox$/;"	f	namespace:cusph	signature:(unsigned p1,const unsigned &pini,const unsigned &pfin ,const float *ftomassp ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned* idp ,float massf,double3 posdp1,float3 posp1,float3 velp1,float &arp1,float &visc)
cusph::KerInteractionForcesDem	JSphGpu_ker.cu	/^template<bool psingle> __global__ void KerInteractionForcesDem$/;"	f	namespace:cusph	signature:(unsigned nfloat,int hdiv,int4 nc,unsigned cellfluid ,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const unsigned *ftridp,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float3 *ace)
cusph::KerInteractionForcesDemBox	JSphGpu_ker.cu	/^template<bool psingle> __device__ void KerInteractionForcesDemBox $/;"	f	namespace:cusph	signature:(bool boundp2,const unsigned &pini,const unsigned &pfin ,const float4 *demdata,float dtforce ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,double3 posdp1,float3 posp1,float3 velp1,typecode tavp1,float masstotp1,float taup1,float kfricp1,float restitup1 ,float3 &acep1,float &demdtp1)
cusph::KerInteractionForcesFluid	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> __global__ void KerInteractionForcesFluid$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pinit,int hdiv,int4 nc,unsigned cellfluid,float viscob,float viscof ,const int2 *begincell,int3 cellzero,const unsigned *dcell ,const float *ftomassp,const float2 *tauff,float2 *gradvelff ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float *viscdt,float *ar,float3 *ace,float *delta ,TpShifting tshifting,float3 *shiftpos,float *shiftdetect)
cusph::KerInteractionForcesFluidBox	JSphGpu_ker.cu	/^template<bool psingle,TpKernel tker,TpFtMode ftmode,bool lamsps,TpDeltaSph tdelta,bool shift> __device__ void KerInteractionForcesFluidBox$/;"	f	namespace:cusph	signature:(bool boundp2,unsigned p1,const unsigned &pini,const unsigned &pfin,float visco ,const float *ftomassp,const float2 *tauff ,const double2 *posxy,const double *posz,const float4 *pospress,const float4 *velrhop,const typecode *code,const unsigned *idp ,float massp2,float ftmassp1,bool ftp1 ,double3 posdp1,float3 posp1,float3 velp1,float pressp1,float rhopp1 ,const float2 &taup1_xx_xy,const float2 &taup1_xz_yy,const float2 &taup1_yz_zz ,float2 &grap1_xx_xy,float2 &grap1_xz_yy,float2 &grap1_yz_zz ,float3 &acep1,float &arp1,float &visc,float &deltap1 ,TpShifting tshifting,float3 &shiftposp1,float &shiftdetectp1)
cusph::KerIsNormalFluid	JSphGpu_ker.cu	/^__device__ bool KerIsNormalFluid(const typecode *code,unsigned p){$/;"	f	namespace:cusph	signature:(const typecode *code,unsigned p)
cusph::KerLoadMatrix3f	JSphGpu_ker.cu	/^__device__ void KerLoadMatrix3f(unsigned c,const float4 *data8,const float *data1,tmatrix3f &v)$/;"	f	namespace:cusph	signature:(unsigned c,const float4 *data8,const float *data1,tmatrix3f &v)
cusph::KerMoveLinBound	JSphGpu_ker.cu	/^template<bool periactive> __global__ void KerMoveLinBound(unsigned n,unsigned ini,double3 mvpos,float3 mvvel$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,double3 mvpos,float3 mvvel ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::KerMoveMatBound	JSphGpu_ker.cu	/^template<bool periactive,bool simulate2d> __global__ void KerMoveMatBound(unsigned n,unsigned ini,tmatrix4d m,double dt$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::KerPeriodicDuplicatePos	JSphGpu_ker.cu	/^__device__ void KerPeriodicDuplicatePos(unsigned pnew,unsigned pcopy$/;"	f	namespace:cusph	signature:(unsigned pnew,unsigned pcopy ,bool inverse,double dx,double dy,double dz,uint3 cellmax ,double2 *posxy,double *posz,unsigned *dcell)
cusph::KerPeriodicDuplicateSymplectic	JSphGpu_ker.cu	/^template<bool varspre> __global__ void KerPeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,uint3 cellmax,double3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
cusph::KerPeriodicDuplicateVerlet	JSphGpu_ker.cu	/^__global__ void KerPeriodicDuplicateVerlet(unsigned n,unsigned pini,uint3 cellmax,double3 perinc$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,uint3 cellmax,double3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
cusph::KerPeriodicIgnore	JSphGpu_ker.cu	/^__global__ void KerPeriodicIgnore(unsigned n,typecode *code)$/;"	f	namespace:cusph	signature:(unsigned n,typecode *code)
cusph::KerPeriodicMakeList	JSphGpu_ker.cu	/^__global__ void KerPeriodicMakeList(unsigned n,unsigned pini,unsigned nmax$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,unsigned nmax ,double3 mapposmin,double3 mapposmax,double3 perinc ,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
cusph::KerPointPlane	JSphGpu_ker.cu	/^__device__ double KerPointPlane(const double4 &pla,const double3 &pt)$/;"	f	namespace:cusph	signature:(const double4 &pla,const double3 &pt)
cusph::KerPointPlane	JSphGpu_ker.cu	/^__device__ double KerPointPlane(const double4 &pla,double px,double py,double pz)$/;"	f	namespace:cusph	signature:(const double4 &pla,double px,double py,double pz)
cusph::KerPreInteractionSingle	JSphGpu_ker.cu	/^__global__ void KerPreInteractionSingle(unsigned n,const double2 *posxy,const double *posz$/;"	f	namespace:cusph	signature:(unsigned n,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float gamma)
cusph::KerReduMaxFloat	JSphGpu_ker.cu	/^template <unsigned blockSize> __global__ void KerReduMaxFloat(unsigned n,unsigned ini,const float *dat,float *res){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,const float *dat,float *res)
cusph::KerReduMaxFloatWarp	JSphGpu_ker.cu	/^template <unsigned blockSize> __device__ void KerReduMaxFloatWarp(volatile float* sdat,unsigned tid){$/;"	f	namespace:cusph	signature:(volatile float* sdat,unsigned tid)
cusph::KerReduMaxFloat_w	JSphGpu_ker.cu	/^template <unsigned blockSize> __global__ void KerReduMaxFloat_w(unsigned n,unsigned ini,const float4 *dat,float *res){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,const float4 *dat,float *res)
cusph::KerResety	JSphGpu_ker.cu	/^__global__ void KerResety(unsigned n,unsigned ini,float3 *v)$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
cusph::KerRunShifting	JSphGpu_ker.cu	/^__global__ void KerRunShifting(unsigned n,unsigned pini,double dt$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,double dt ,float shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
cusph::KerUpdatePeriodicPos	JSphGpu_ker.cu	/^__device__ double3 KerUpdatePeriodicPos(double3 ps)$/;"	f	namespace:cusph	signature:(double3 ps)
cusph::KerUpdatePos	JSphGpu_ker.cu	/^template<bool periactive> __device__ void KerUpdatePos$/;"	f	namespace:cusph	signature:(double2 rxy,double rz,double movx,double movy,double movz ,bool outrhop,unsigned p,double2 *posxy,double *posz,unsigned *dcell,typecode *code)
cusph::MoveLinBound	JSphGpu_ker.cu	/^void MoveLinBound(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel$/;"	f	namespace:cusph	signature:(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel ,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::MoveLinBound	JSphGpu_ker.h	/^void MoveLinBound(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,unsigned np,unsigned ini,tdouble3 mvpos,tfloat3 mvvel,const unsigned *ridp,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::MoveMatBound	JSphGpu_ker.cu	/^void MoveMatBound(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt$/;"	f	namespace:cusph	signature:(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt ,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::MoveMatBound	JSphGpu_ker.h	/^void MoveMatBound(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code);$/;"	p	namespace:cusph	signature:(byte periactive,bool simulate2d,unsigned np,unsigned ini,tmatrix4d m,double dt,const unsigned *ridpmv,double2 *posxy,double *posz,unsigned *dcell,float4 *velrhop,typecode *code)
cusph::PeriodicDuplicateSymplectic	JSphGpu_ker.cu	/^void PeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini ,tuint3 domcells,tdouble3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
cusph::PeriodicDuplicateSymplectic	JSphGpu_ker.h	/^void PeriodicDuplicateSymplectic(unsigned n,unsigned pini$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini ,tuint3 domcells,tdouble3 perinc,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,double2 *posxypre,double *poszpre,float4 *velrhoppre)
cusph::PeriodicDuplicateVerlet	JSphGpu_ker.cu	/^void PeriodicDuplicateVerlet(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
cusph::PeriodicDuplicateVerlet	JSphGpu_ker.h	/^void PeriodicDuplicateVerlet(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,tuint3 domcells,tdouble3 perinc ,const unsigned *listp,unsigned *idp,typecode *code,unsigned *dcell ,double2 *posxy,double *posz,float4 *velrhop,tsymatrix3f *spstau,float4 *velrhopm1)
cusph::PeriodicIgnore	JSphGpu_ker.cu	/^void PeriodicIgnore(unsigned n,typecode *code){$/;"	f	namespace:cusph	signature:(unsigned n,typecode *code)
cusph::PeriodicIgnore	JSphGpu_ker.h	/^void PeriodicIgnore(unsigned n,typecode *code);$/;"	p	namespace:cusph	signature:(unsigned n,typecode *code)
cusph::PeriodicMakeList	JSphGpu_ker.cu	/^unsigned PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax$/;"	f	namespace:cusph	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax ,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc ,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
cusph::PeriodicMakeList	JSphGpu_ker.h	/^unsigned PeriodicMakeList(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned pini,bool stable,unsigned nmax,tdouble3 mapposmin,tdouble3 mapposmax,tdouble3 perinc,const double2 *posxy,const double *posz,const typecode *code,unsigned *listp)
cusph::PreInteractionSingle	JSphGpu_ker.cu	/^void PreInteractionSingle(unsigned np,const double2 *posxy,const double *posz$/;"	f	namespace:cusph	signature:(unsigned np,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float ctegamma)
cusph::PreInteractionSingle	JSphGpu_ker.h	/^void PreInteractionSingle(unsigned np,const double2 *posxy,const double *posz$/;"	p	namespace:cusph	signature:(unsigned np,const double2 *posxy,const double *posz ,const float4 *velrhop,float4 *pospress,float cteb,float ctegamma)
cusph::ReduMaxFloat	JSphGpu_ker.cu	/^float ReduMaxFloat(unsigned ndata,unsigned inidata,float* data,float* resu){$/;"	f	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float* data,float* resu)
cusph::ReduMaxFloat	JSphGpu_ker.h	/^float ReduMaxFloat(unsigned ndata,unsigned inidata,float* data,float* resu);$/;"	p	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float* data,float* resu)
cusph::ReduMaxFloatSize	JSphGpu_ker.h	/^inline unsigned ReduMaxFloatSize(unsigned ndata){ return((ndata\/SPHBSIZE+1)+(ndata\/(SPHBSIZE*SPHBSIZE)+SPHBSIZE)); }$/;"	f	namespace:cusph	signature:(unsigned ndata)
cusph::ReduMaxFloat_w	JSphGpu_ker.cu	/^float ReduMaxFloat_w(unsigned ndata,unsigned inidata,float4* data,float* resu){$/;"	f	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float4* data,float* resu)
cusph::ReduMaxFloat_w	JSphGpu_ker.h	/^float ReduMaxFloat_w(unsigned ndata,unsigned inidata,float4* data,float* resu);$/;"	p	namespace:cusph	signature:(unsigned ndata,unsigned inidata,float4* data,float* resu)
cusph::Resety	JSphGpu_ker.cu	/^void Resety(unsigned n,unsigned ini,float3 *v){$/;"	f	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
cusph::Resety	JSphGpu_ker.h	/^void Resety(unsigned n,unsigned ini,float3 *v);$/;"	p	namespace:cusph	signature:(unsigned n,unsigned ini,float3 *v)
cusph::RunShifting	JSphGpu_ker.cu	/^void RunShifting(unsigned np,unsigned npb,double dt$/;"	f	namespace:cusph	signature:(unsigned np,unsigned npb,double dt ,double shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
cusph::RunShifting	JSphGpu_ker.h	/^void RunShifting(unsigned np,unsigned npb,double dt$/;"	p	namespace:cusph	signature:(unsigned np,unsigned npb,double dt ,double shiftcoef,float shifttfs,double coeftfs ,const float4 *velrhop,const float *shiftdetect,float3 *shiftpos)
cusph::ToTFloat3	JSphGpu_ker.h	/^inline tfloat3 ToTFloat3(const float3& v){ return(TFloat3(v.x,v.y,v.z)); }$/;"	f	namespace:cusph	signature:(const float3& v)
cusph::__CheckErrorCuda	JSphGpu_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cusph	signature:(const char *text,const char *file,const int line)
cuwave2	JWaveOrder2_ker.cu	/^namespace cuwave2{$/;"	n	file:
cuwave2	JWaveOrder2_ker.h	/^namespace cuwave2{$/;"	n
cuwave2::CalcElevation	JWaveOrder2_ker.cu	/^double CalcElevation(double time,double x,unsigned n,const double4 *coefe,double *aux)$/;"	f	namespace:cuwave2	signature:(double time,double x,unsigned n,const double4 *coefe,double *aux)
cuwave2::CalcElevation	JWaveOrder2_ker.h	/^double CalcElevation(double time,double x,unsigned n,const double4 *coefe,double *aux);$/;"	p	namespace:cuwave2	signature:(double time,double x,unsigned n,const double4 *coefe,double *aux)
cuwave2::CalcPosition	JWaveOrder2_ker.cu	/^double CalcPosition(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)$/;"	f	namespace:cuwave2	signature:(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)
cuwave2::CalcPosition	JWaveOrder2_ker.h	/^double CalcPosition(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux);$/;"	p	namespace:cuwave2	signature:(double time,unsigned n,const double *dnm,const double2 *coefx,double *aux)
cuwave2::GetGridSize	JWaveOrder2_ker.cu	/^dim3 GetGridSize(unsigned n,unsigned blocksize){$/;"	f	namespace:cuwave2	signature:(unsigned n,unsigned blocksize)
cuwave2::GetGridSize	JWaveOrder2_ker.h	/^dim3 GetGridSize(unsigned n,unsigned blocksize);$/;"	p	namespace:cuwave2	signature:(unsigned n,unsigned blocksize)
cuwave2::GetSizeAux	JWaveOrder2_ker.cu	/^unsigned GetSizeAux(unsigned n){$/;"	f	namespace:cuwave2	signature:(unsigned n)
cuwave2::GetSizeAux	JWaveOrder2_ker.h	/^unsigned GetSizeAux(unsigned n);$/;"	p	namespace:cuwave2	signature:(unsigned n)
cuwave2::KerCalcElevation	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __global__ void KerCalcElevation(unsigned n,double time$/;"	f	namespace:cuwave2	signature:(unsigned n,double time ,double x,const double4 *coefe,double *res)
cuwave2::KerCalcPosition	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __global__ void KerCalcPosition(unsigned n,double time$/;"	f	namespace:cuwave2	signature:(unsigned n,double time ,const double *dnm,const double2 *coefx,double *res)
cuwave2::KerReduSumDoubleWarp	JWaveOrder2_ker.cu	/^template <unsigned blockSize> __device__ void KerReduSumDoubleWarp(volatile double* sdat,unsigned tid){$/;"	f	namespace:cuwave2	signature:(volatile double* sdat,unsigned tid)
cuwave2::__CheckErrorCuda	JWaveOrder2_ker.cu	/^void __CheckErrorCuda(const char *text,const char *file,const int line){$/;"	f	namespace:cuwave2	signature:(const char *text,const char *file,const int line)
d1	JSph.h	/^    float a1,a2,aa,a24,c1,d1,c2;$/;"	m	struct:JSph::__anon29	access:public
data	tinystr.h	/^    const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString	access:public	signature:() const
data2d	JSpaceCtes.h	/^    bool data2d;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
delptr	JFormatFiles2.h	/^    bool delptr;$/;"	m	struct:JFormatFiles2::__anon12	access:public
delta2h	JSphGpu_ker.h	/^  float delta2h;            \/\/\/<delta2h=DeltaSph*H*2$/;"	m	struct:__anon32	access:public
depth	tinyxml.h	/^    int depth;$/;"	m	class:TiXmlPrinter	access:private
dist	JDamping.h	/^    float dist;         \/\/\/<Distance between limitmin and limitmax points. | Distancia entre puntos limitmin y limitmax.$/;"	m	struct:JDamping::__anon9	access:public
document	tinyxml.h	/^    TiXmlDocument*  document;   \/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
dompla0	JDamping.h	/^    tdouble4 dompla0;   \/\/\/<Domain definition - plane 0.$/;"	m	struct:JDamping::__anon9	access:public
dompla1	JDamping.h	/^    tdouble4 dompla1;   \/\/\/<Domain definition - plane 1.$/;"	m	struct:JDamping::__anon9	access:public
dompla2	JDamping.h	/^    tdouble4 dompla2;   \/\/\/<Domain definition - plane 2.$/;"	m	struct:JDamping::__anon9	access:public
dompla3	JDamping.h	/^    tdouble4 dompla3;   \/\/\/<Domain definition - plane 3.$/;"	m	struct:JDamping::__anon9	access:public
domposminx	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
domposminy	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
domposminz	JSphGpu_ker.h	/^  double domposminx,domposminy,domposminz;$/;"	m	struct:__anon32	access:public
dompt0	JDamping.h	/^    tdouble2 dompt0;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
dompt1	JDamping.h	/^    tdouble2 dompt1;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
dompt2	JDamping.h	/^    tdouble2 dompt2;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
dompt3	JDamping.h	/^    tdouble2 dompt3;    \/\/\/<Domain point.$/;"	m	struct:JDamping::__anon9	access:public
domzmax	JDamping.h	/^    double domzmax;     \/\/\/<Domain definition - Z maximum. | Definicion de dominio - Z maxima.$/;"	m	struct:JDamping::__anon9	access:public
domzmin	JDamping.h	/^    double domzmin;     \/\/\/<Domain definition - Z minimum. | Definicion de dominio - Z minima.$/;"	m	struct:JDamping::__anon9	access:public
dosh	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
dp	JSpaceCtes.h	/^    double dp,coefh,coefhdp;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
dp	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
eccmode	FunctionsCuda.h	/^  int eccmode;         \/\/\/<Device has ECC support.$/;"	m	struct:fcuda::StrGpuInfo	access:public
empty	tinystr.h	/^    bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString	access:public	signature:() const
encoding	tinyxml.h	/^    TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
entity	tinyxml.h	/^    static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
entity	tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
error	tinyxml.h	/^    bool error;$/;"	m	class:TiXmlDocument	access:private
errorDesc	tinyxml.h	/^    TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
errorId	tinyxml.h	/^    int  errorId;$/;"	m	class:TiXmlDocument	access:private
errorLocation	tinyxml.h	/^    TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
errorString	tinyxml.h	/^    static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
errorString	tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
eta2	JSphGpu_ker.h	/^  float eta2;               \/\/\/<eta*eta being eta=0.1*\\ref h$/;"	m	struct:__anon32	access:public
face	Types.h	/^  tfloat3 face;       \/\/\/<Sum of particle acceleration (units:m\/s2). | Sumatorio de ace de particulas.$/;"	m	struct:__anon43	access:public
factorxyz	JDamping.h	/^    tfloat3 factorxyz;  \/\/\/<Factor applied on each axis. | Factor de aplicacion en cada eje.$/;"	m	struct:JDamping::__anon9	access:public
fcenterres	Types.h	/^  tdouble3 fcenterres; \/\/\/<Calculated center to upadte floating body (units:m).$/;"	m	struct:__anon44	access:public
fcuda	FunctionsCuda.cpp	/^namespace fcuda{$/;"	n	file:
fcuda	FunctionsCuda.h	/^namespace fcuda{$/;"	n
fcuda::CheckCudaError	FunctionsCuda.cpp	/^void CheckCudaError(const std::string &msg,const char *const file,int const line){$/;"	f	namespace:fcuda	signature:(const std::string &msg,const char *const file,int const line)
fcuda::CheckCudaError	FunctionsCuda.h	/^void CheckCudaError(const std::string &msg,const char *const file,int const line);$/;"	p	namespace:fcuda	signature:(const std::string &msg,const char *const file,int const line)
fcuda::GetCudaDeviceInfo	FunctionsCuda.cpp	/^StGpuInfo GetCudaDeviceInfo(int gid){$/;"	f	namespace:fcuda	signature:(int gid)
fcuda::GetCudaDeviceInfo	FunctionsCuda.h	/^StGpuInfo GetCudaDeviceInfo(int gid);$/;"	p	namespace:fcuda	signature:(int gid)
fcuda::GetCudaDeviceName	FunctionsCuda.cpp	/^std::string GetCudaDeviceName(int gid){$/;"	f	namespace:fcuda	signature:(int gid)
fcuda::GetCudaDeviceName	FunctionsCuda.h	/^std::string GetCudaDeviceName(int gid);$/;"	p	namespace:fcuda	signature:(int gid)
fcuda::GetCudaDevicesInfo	FunctionsCuda.cpp	/^int GetCudaDevicesInfo(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops){$/;"	f	namespace:fcuda	signature:(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops)
fcuda::GetCudaDevicesInfo	FunctionsCuda.h	/^int GetCudaDevicesInfo(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops);$/;"	p	namespace:fcuda	signature:(std::vector<std::string> *gpuinfo,std::vector<StGpuInfo> *gpuprops)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(double **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(float **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(int **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(int2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int2 **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(tdouble2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(tdouble2 **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(tfloat4 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(tfloat4 **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(unsigned **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(unsigned **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.cpp	/^size_t HostAlloc(word **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(word **ptr,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(double   **,unsigned count);$/;"	p	namespace:fcuda	signature:(double **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(float    **,unsigned count);$/;"	p	namespace:fcuda	signature:(float **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(int      **,unsigned count);$/;"	p	namespace:fcuda	signature:(int **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(int2     **,unsigned count);$/;"	p	namespace:fcuda	signature:(int2 **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(tdouble2 **,unsigned count);$/;"	p	namespace:fcuda	signature:(tdouble2 **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(tfloat4  **,unsigned count);$/;"	p	namespace:fcuda	signature:(tfloat4 **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(unsigned **,unsigned count);$/;"	p	namespace:fcuda	signature:(unsigned **,unsigned count)
fcuda::HostAlloc	FunctionsCuda.h	/^size_t HostAlloc(word     **,unsigned count);$/;"	p	namespace:fcuda	signature:(word **,unsigned count)
fcuda::IsGPUCapableP2P	FunctionsCuda.cpp	/^inline bool IsGPUCapableP2P(const cudaDeviceProp *pProp){$/;"	f	namespace:fcuda	signature:(const cudaDeviceProp *pProp)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(byte **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(byte **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(double **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(double2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double2 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(double3 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(double3 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(float **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(float2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float2 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(float3 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float3 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(float4 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(float4 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(int **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(int2 **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(int2 **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(unsigned **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(unsigned **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.cpp	/^size_t Malloc(word **ptr,unsigned count){$/;"	f	namespace:fcuda	signature:(word **ptr,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(byte     **,unsigned count);$/;"	p	namespace:fcuda	signature:(byte **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(double   **,unsigned count);$/;"	p	namespace:fcuda	signature:(double **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(double2  **,unsigned count);$/;"	p	namespace:fcuda	signature:(double2 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(double3  **,unsigned count);$/;"	p	namespace:fcuda	signature:(double3 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(float    **,unsigned count);$/;"	p	namespace:fcuda	signature:(float **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(float2   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float2 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(float3   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float3 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(float4   **,unsigned count);$/;"	p	namespace:fcuda	signature:(float4 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(int      **,unsigned count);$/;"	p	namespace:fcuda	signature:(int **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(int2     **,unsigned count);$/;"	p	namespace:fcuda	signature:(int2 **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(unsigned **,unsigned count);$/;"	p	namespace:fcuda	signature:(unsigned **,unsigned count)
fcuda::Malloc	FunctionsCuda.h	/^size_t Malloc(word     **,unsigned count);$/;"	p	namespace:fcuda	signature:(word **,unsigned count)
fcuda::StGpuInfo	FunctionsCuda.h	/^}StGpuInfo;$/;"	t	namespace:fcuda	typeref:struct:fcuda::StrGpuInfo
fcuda::StrGpuInfo	FunctionsCuda.h	/^typedef struct StrGpuInfo{$/;"	s	namespace:fcuda
fcuda::StrGpuInfo::StrGpuInfo	FunctionsCuda.h	/^  StrGpuInfo(){ $/;"	f	struct:fcuda::StrGpuInfo	access:public	signature:()
fcuda::StrGpuInfo::busmem	FunctionsCuda.h	/^  int busmem;          \/\/\/<Memory Bus Width.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::cachelv2	FunctionsCuda.h	/^  int cachelv2;        \/\/\/<L2 Cache Size.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::ccmajor	FunctionsCuda.h	/^  int ccmajor;         \/\/\/<Capability major.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::ccminor	FunctionsCuda.h	/^  int ccminor;         \/\/\/<Capability minor.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::clockrate	FunctionsCuda.h	/^  int clockrate;       \/\/\/<GPU Max Clock rate.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::clockratemem	FunctionsCuda.h	/^  int clockratemem;    \/\/\/<Memory Clock rate.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::constantmem	FunctionsCuda.h	/^  ullong constantmem;  \/\/\/<Constant memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::cores	FunctionsCuda.h	/^  int cores;           \/\/\/<CUDA Cores.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::coresmp	FunctionsCuda.h	/^  int coresmp;         \/\/\/<CUDA Cores\/MP.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::countp2pto	FunctionsCuda.h	/^  int countp2pto;               \/\/\/<Number of GPUs with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::eccmode	FunctionsCuda.h	/^  int eccmode;         \/\/\/<Device has ECC support.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::globalmem	FunctionsCuda.h	/^  ullong globalmem;    \/\/\/<Global memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::id	FunctionsCuda.h	/^  int id;              \/\/\/<Device number.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::integrated	FunctionsCuda.h	/^  int integrated;      \/\/\/<Integrated GPU sharing Host Memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::limitrun	FunctionsCuda.h	/^  int limitrun;        \/\/\/<Run time limit on kernels.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::maphostmem	FunctionsCuda.h	/^  int maphostmem;      \/\/\/<Support host page-locked memory mapping.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::maxthblock	FunctionsCuda.h	/^  int maxthblock;      \/\/\/<Maximum threads per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::maxthmp	FunctionsCuda.h	/^  int maxthmp;         \/\/\/<Maximum threads per MP.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::mp	FunctionsCuda.h	/^  int mp;              \/\/\/<Multiprocessors.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::name	FunctionsCuda.h	/^  std::string name;    \/\/\/<GPU name.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::overlap	FunctionsCuda.h	/^  int overlap;         \/\/\/<Concurrent copy and kernel execution.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::overlapcount	FunctionsCuda.h	/^  int overlapcount;    \/\/\/<Number of concurrent copy and kernel execution.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::p2pto	FunctionsCuda.h	/^  int p2pto[sizep2pto];         \/\/\/<GPU list with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::pcibus	FunctionsCuda.h	/^  int pcibus;          \/\/\/<PCI Bus ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::pcidevice	FunctionsCuda.h	/^  int pcidevice;       \/\/\/<PCI location ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::pcidomain	FunctionsCuda.h	/^  int pcidomain;       \/\/\/<PCI Domain ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::rdma	FunctionsCuda.h	/^  bool rdma;           \/\/\/<Device supports P2P and RDMA.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::regsblock	FunctionsCuda.h	/^  int regsblock;       \/\/\/<Registers per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::sharedmem	FunctionsCuda.h	/^  ullong sharedmem;    \/\/\/<Shared memory per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::sizep2pto	FunctionsCuda.h	/^  static const int sizep2pto=8; \/\/\/<Maximum number of GPUs with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::tccdriver	FunctionsCuda.h	/^  int tccdriver;       \/\/\/<CUDA Device Driver Mode (TCC or WDDM).$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::StrGpuInfo::uva	FunctionsCuda.h	/^  int uva;             \/\/\/<Device supports Unified Addressing (UVA).$/;"	m	struct:fcuda::StrGpuInfo	access:public
fcuda::ToHostDouble	FunctionsCuda.cpp	/^double* ToHostDouble(unsigned pini,unsigned n,const double *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double *vg)
fcuda::ToHostDouble	FunctionsCuda.h	/^double*   ToHostDouble (unsigned pini,unsigned n,const double   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double *ptrg)
fcuda::ToHostDouble2	FunctionsCuda.cpp	/^tdouble2* ToHostDouble2(unsigned pini,unsigned n,const double2 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *vg)
fcuda::ToHostDouble2	FunctionsCuda.h	/^tdouble2* ToHostDouble2(unsigned pini,unsigned n,const double2  *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *ptrg)
fcuda::ToHostFloat	FunctionsCuda.cpp	/^float* ToHostFloat(unsigned pini,unsigned n,const float *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float *vg)
fcuda::ToHostFloat	FunctionsCuda.h	/^float*    ToHostFloat  (unsigned pini,unsigned n,const float    *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float *ptrg)
fcuda::ToHostFloat3	FunctionsCuda.cpp	/^tfloat3* ToHostFloat3(unsigned pini,unsigned n,const float3 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float3 *vg)
fcuda::ToHostFloat3	FunctionsCuda.h	/^tfloat3*  ToHostFloat3 (unsigned pini,unsigned n,const float3   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float3 *ptrg)
fcuda::ToHostFloat4	FunctionsCuda.cpp	/^tfloat4* ToHostFloat4(unsigned pini,unsigned n,const float4 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const float4 *vg)
fcuda::ToHostFloat4	FunctionsCuda.h	/^tfloat4*  ToHostFloat4 (unsigned pini,unsigned n,const float4   *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const float4 *ptrg)
fcuda::ToHostInt	FunctionsCuda.cpp	/^int* ToHostInt(unsigned pini,unsigned n,const int *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const int *vg)
fcuda::ToHostInt	FunctionsCuda.h	/^int*      ToHostInt    (unsigned pini,unsigned n,const int      *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const int *ptrg)
fcuda::ToHostInt2	FunctionsCuda.cpp	/^tint2* ToHostInt2(unsigned pini,unsigned n,const int2 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const int2 *vg)
fcuda::ToHostInt2	FunctionsCuda.h	/^tint2*    ToHostInt2   (unsigned pini,unsigned n,const int2     *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const int2 *ptrg)
fcuda::ToHostPosd3	FunctionsCuda.cpp	/^tdouble3* ToHostPosd3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
fcuda::ToHostPosd3	FunctionsCuda.h	/^tdouble3* ToHostPosd3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
fcuda::ToHostPosf3	FunctionsCuda.cpp	/^tfloat3* ToHostPosf3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
fcuda::ToHostPosf3	FunctionsCuda.h	/^tfloat3*  ToHostPosf3(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const double2 *posxyg,const double *poszg)
fcuda::ToHostUint	FunctionsCuda.cpp	/^unsigned* ToHostUint(unsigned pini,unsigned n,const unsigned *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const unsigned *vg)
fcuda::ToHostUint	FunctionsCuda.h	/^unsigned* ToHostUint   (unsigned pini,unsigned n,const unsigned *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const unsigned *ptrg)
fcuda::ToHostWord	FunctionsCuda.cpp	/^word* ToHostWord(unsigned pini,unsigned n,const word *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const word *vg)
fcuda::ToHostWord	FunctionsCuda.h	/^word*     ToHostWord   (unsigned pini,unsigned n,const word     *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const word *ptrg)
fcuda::ToHostWord4	FunctionsCuda.cpp	/^ushort4* ToHostWord4(unsigned pini,unsigned n,const ushort4 *vg){$/;"	f	namespace:fcuda	signature:(unsigned pini,unsigned n,const ushort4 *vg)
fcuda::ToHostWord4	FunctionsCuda.h	/^ushort4*  ToHostWord4  (unsigned pini,unsigned n,const ushort4  *ptrg);$/;"	p	namespace:fcuda	signature:(unsigned pini,unsigned n,const ushort4 *ptrg)
fcuda::_ConvertSMVer2Cores	FunctionsCuda.cpp	/^int _ConvertSMVer2Cores(int major, int minor){$/;"	f	namespace:fcuda	signature:(int major, int minor)
fcuda::_ConvertSMVer2Cores	FunctionsCuda.h	/^int _ConvertSMVer2Cores(int major, int minor);$/;"	p	namespace:fcuda	signature:(int major, int minor)
file	JLog2.h	/^    std::string file;$/;"	m	struct:JLog2::StrFileInfo	access:public
file	JSpaceProperties.h	/^    std::string file;$/;"	m	struct:JSpaceProperties::__anon28	access:public
find	tinystr.h	/^    size_type find (char lookup) const$/;"	f	class:TiXmlString	access:public	signature:(char lookup) const
find	tinystr.h	/^    size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString	access:public	signature:(char tofind, size_type offset) const
finish	tinystr.h	/^    char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString	access:private	signature:() const
firstChild	tinyxml.h	/^    TiXmlNode*      firstChild;$/;"	m	class:TiXmlNode	access:protected
fmath	FunctionsMath.cpp	/^namespace fmath{$/;"	n	file:
fmath	FunctionsMath.h	/^namespace fmath{$/;"	n
fmath::AnglePlanes	FunctionsMath.h	/^inline double AnglePlanes(tdouble4 v1,tdouble4 v2){$/;"	f	namespace:fmath	signature:(tdouble4 v1,tdouble4 v2)
fmath::AnglePlanes	FunctionsMath.h	/^inline float AnglePlanes(tfloat4 v1,tfloat4 v2){$/;"	f	namespace:fmath	signature:(tfloat4 v1,tfloat4 v2)
fmath::AngleVector	FunctionsMath.h	/^inline double AngleVector(const tdouble3 &v1,const tdouble3 &v2){$/;"	f	namespace:fmath	signature:(const tdouble3 &v1,const tdouble3 &v2)
fmath::AngleVector	FunctionsMath.h	/^inline float AngleVector(const tfloat3 &v1,const tfloat3 &v2){$/;"	f	namespace:fmath	signature:(const tfloat3 &v1,const tfloat3 &v2)
fmath::AreaTriangle	FunctionsMath.cpp	/^double AreaTriangle(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
fmath::AreaTriangle	FunctionsMath.cpp	/^float AreaTriangle(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
fmath::AreaTriangle	FunctionsMath.h	/^double AreaTriangle(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
fmath::AreaTriangle	FunctionsMath.h	/^float AreaTriangle(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
fmath::CorrectNormal	FunctionsMath.h	/^inline tdouble3 CorrectNormal(tdouble3 n){$/;"	f	namespace:fmath	signature:(tdouble3 n)
fmath::CorrectNormal	FunctionsMath.h	/^inline tfloat3 CorrectNormal(tfloat3 n){$/;"	f	namespace:fmath	signature:(tfloat3 n)
fmath::Determinant3x3	FunctionsMath.h	/^inline double Determinant3x3(const tmatrix3d &d){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d)
fmath::Determinant3x3	FunctionsMath.h	/^inline float Determinant3x3(const tmatrix3f &d){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d)
fmath::Determinant4x4	FunctionsMath.h	/^inline double Determinant4x4(const tmatrix4d &d){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d)
fmath::Determinant4x4	FunctionsMath.h	/^inline float Determinant4x4(const tmatrix4f &d){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d)
fmath::DistLine	FunctionsMath.h	/^inline double DistLine(const tdouble3 &pt,const tdouble3 &pr1,const tdouble3 &pr2){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble3 &pr1,const tdouble3 &pr2)
fmath::DistLine	FunctionsMath.h	/^inline float DistLine(const tfloat3 &pt,const tfloat3 &pr1,const tfloat3 &pr2){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat3 &pr1,const tfloat3 &pr2)
fmath::DistPlane	FunctionsMath.h	/^inline double DistPlane(const tdouble4 &pla,const tdouble3 &pt){ $/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
fmath::DistPlane	FunctionsMath.h	/^inline float DistPlane(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
fmath::DistPlaneSign	FunctionsMath.h	/^inline double DistPlaneSign(const tdouble4 &pla,const tdouble3 &pt){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
fmath::DistPlaneSign	FunctionsMath.h	/^inline float DistPlaneSign(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
fmath::DistPoint	FunctionsMath.h	/^inline double DistPoint(const tdouble3 &p1){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1)
fmath::DistPoint	FunctionsMath.h	/^inline float DistPoint(const tfloat3 &p1){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1)
fmath::DistPoints	FunctionsMath.h	/^inline double DistPoints(const tdouble3 &p1,const tdouble3 &p2){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2)
fmath::DistPoints	FunctionsMath.h	/^inline float DistPoints(const tfloat3 &p1,const tfloat3 &p2){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2)
fmath::InterpolationBilinear	FunctionsMath.h	/^inline double InterpolationBilinear(double x,double y,double px,double py,double dx,double dy,double vxy,double vxyy,double vxxy,double vxxyy){$/;"	f	namespace:fmath	signature:(double x,double y,double px,double py,double dx,double dy,double vxy,double vxyy,double vxxy,double vxxyy)
fmath::InterpolationLinear	FunctionsMath.h	/^inline double InterpolationLinear(double x,double x0,double x1,double v0,double v1){$/;"	f	namespace:fmath	signature:(double x,double x0,double x1,double v0,double v1)
fmath::InterpolationLinear	FunctionsMath.h	/^inline float InterpolationLinear(float x,float x0,float x1,float v0,float v1){$/;"	f	namespace:fmath	signature:(float x,float x0,float x1,float v0,float v1)
fmath::Intersec3Planes	FunctionsMath.cpp	/^tdouble3 Intersec3Planes(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3)
fmath::Intersec3Planes	FunctionsMath.cpp	/^tfloat3 Intersec3Planes(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3)
fmath::Intersec3Planes	FunctionsMath.h	/^tdouble3 Intersec3Planes(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3);$/;"	p	namespace:fmath	signature:(const tdouble4 &pla1,const tdouble4 &pla2,const tdouble4 &pla3)
fmath::Intersec3Planes	FunctionsMath.h	/^tfloat3 Intersec3Planes(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3);$/;"	p	namespace:fmath	signature:(const tfloat4 &pla1,const tfloat4 &pla2,const tfloat4 &pla3)
fmath::IntersecPlaneLine	FunctionsMath.cpp	/^tdouble3 IntersecPlaneLine(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2){$/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2)
fmath::IntersecPlaneLine	FunctionsMath.cpp	/^tfloat3 IntersecPlaneLine(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2){$/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2)
fmath::IntersecPlaneLine	FunctionsMath.h	/^tdouble3 IntersecPlaneLine(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2);$/;"	p	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt1,const tdouble3 &pt2)
fmath::IntersecPlaneLine	FunctionsMath.h	/^tfloat3 IntersecPlaneLine(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2);$/;"	p	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt1,const tfloat3 &pt2)
fmath::InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3d InverseMatrix3x3(const tmatrix3d &d){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d)
fmath::InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3d InverseMatrix3x3(const tmatrix3d &d,const double det){$/;"	f	namespace:fmath	signature:(const tmatrix3d &d,const double det)
fmath::InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3f InverseMatrix3x3(const tmatrix3f &d){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d)
fmath::InverseMatrix3x3	FunctionsMath.h	/^inline tmatrix3f InverseMatrix3x3(const tmatrix3f &d,const float det){$/;"	f	namespace:fmath	signature:(const tmatrix3f &d,const float det)
fmath::InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4d InverseMatrix4x4(const tmatrix4d &d){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d)
fmath::InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4d InverseMatrix4x4(const tmatrix4d &d,const double det){$/;"	f	namespace:fmath	signature:(const tmatrix4d &d,const double det)
fmath::InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4f InverseMatrix4x4(const tmatrix4f &d){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d)
fmath::InverseMatrix4x4	FunctionsMath.h	/^inline tmatrix4f InverseMatrix4x4(const tmatrix4f &d,const float det){$/;"	f	namespace:fmath	signature:(const tmatrix4f &d,const float det)
fmath::MulMatrix3x3	FunctionsMath.h	/^inline tmatrix3f MulMatrix3x3(const tmatrix3f &a,const tmatrix3f &b){$/;"	f	namespace:fmath	signature:(const tmatrix3f &a,const tmatrix3f &b)
fmath::NormalPlanes3Pt	FunctionsMath.cpp	/^void NormalPlanes3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3)
fmath::NormalPlanes3Pt	FunctionsMath.cpp	/^void NormalPlanes3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
fmath::NormalPlanes3Pt	FunctionsMath.h	/^void NormalPlanes3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble4 &pla1,tdouble4 &pla2,tdouble4 &pla3)
fmath::NormalPlanes3Pt	FunctionsMath.h	/^void NormalPlanes3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
fmath::NormalPlanes3Pt_dbl	FunctionsMath.h	/^inline void NormalPlanes3Pt_dbl(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat4 &pla1,tfloat4 &pla2,tfloat4 &pla3)
fmath::NormalTriangle	FunctionsMath.h	/^inline tdouble3 NormalTriangle(const tdouble3& p1,const tdouble3& p2,const tdouble3& p3){$/;"	f	namespace:fmath	signature:(const tdouble3& p1,const tdouble3& p2,const tdouble3& p3)
fmath::NormalTriangle	FunctionsMath.h	/^inline tfloat3 NormalTriangle(const tfloat3& p1,const tfloat3& p2,const tfloat3& p3){$/;"	f	namespace:fmath	signature:(const tfloat3& p1,const tfloat3& p2,const tfloat3& p3)
fmath::OpenTriangle3Pt	FunctionsMath.cpp	/^void OpenTriangle3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3)
fmath::OpenTriangle3Pt	FunctionsMath.cpp	/^void OpenTriangle3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3)
fmath::OpenTriangle3Pt	FunctionsMath.h	/^void OpenTriangle3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3,double openingdist,tdouble3 &pt1,tdouble3 &pt2,tdouble3 &pt3)
fmath::OpenTriangle3Pt	FunctionsMath.h	/^void OpenTriangle3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3,float openingdist,tfloat3 &pt1,tfloat3 &pt2,tfloat3 &pt3)
fmath::Plane3Pt	FunctionsMath.cpp	/^tdouble4 Plane3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3){ $/;"	f	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
fmath::Plane3Pt	FunctionsMath.cpp	/^tfloat4 Plane3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3){ $/;"	f	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
fmath::Plane3Pt	FunctionsMath.h	/^tdouble4 Plane3Pt(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3);$/;"	p	namespace:fmath	signature:(const tdouble3 &p1,const tdouble3 &p2,const tdouble3 &p3)
fmath::Plane3Pt	FunctionsMath.h	/^tfloat4 Plane3Pt(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3);$/;"	p	namespace:fmath	signature:(const tfloat3 &p1,const tfloat3 &p2,const tfloat3 &p3)
fmath::PlanePtVec	FunctionsMath.h	/^inline tdouble4 PlanePtVec(const tdouble3 &pt,const tdouble3 &vec){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble3 &vec)
fmath::PlanePtVec	FunctionsMath.h	/^inline tfloat4 PlanePtVec(const tfloat3 &pt,const tfloat3 &vec){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat3 &vec)
fmath::PointPlane	FunctionsMath.h	/^inline double PointPlane(const tdouble4 &pla,const tdouble3 &pt){ $/;"	f	namespace:fmath	signature:(const tdouble4 &pla,const tdouble3 &pt)
fmath::PointPlane	FunctionsMath.h	/^inline float PointPlane(const tfloat4 &pla,const tfloat3 &pt){ $/;"	f	namespace:fmath	signature:(const tfloat4 &pla,const tfloat3 &pt)
fmath::ProductScalar	FunctionsMath.h	/^inline double ProductScalar(tdouble3 v1,tdouble3 v2){$/;"	f	namespace:fmath	signature:(tdouble3 v1,tdouble3 v2)
fmath::ProductScalar	FunctionsMath.h	/^inline float ProductScalar(tfloat3 v1,tfloat3 v2){$/;"	f	namespace:fmath	signature:(tfloat3 v1,tfloat3 v2)
fmath::ProductVec	FunctionsMath.h	/^inline tdouble3 ProductVec(const tdouble3 &v1,const tdouble3 &v2){$/;"	f	namespace:fmath	signature:(const tdouble3 &v1,const tdouble3 &v2)
fmath::ProductVec	FunctionsMath.h	/^inline tfloat3 ProductVec(const tfloat3 &v1,const tfloat3 &v2){$/;"	f	namespace:fmath	signature:(const tfloat3 &v1,const tfloat3 &v2)
fmath::PtOrthogonal	FunctionsMath.h	/^inline tdouble3 PtOrthogonal(const tdouble3 &pt,const tdouble4 &pla){$/;"	f	namespace:fmath	signature:(const tdouble3 &pt,const tdouble4 &pla)
fmath::PtOrthogonal	FunctionsMath.h	/^inline tfloat3 PtOrthogonal(const tfloat3 &pt,const tfloat4 &pla){$/;"	f	namespace:fmath	signature:(const tfloat3 &pt,const tfloat4 &pla)
fmath::Rect3d2pt	FunctionsMath.h	/^inline StRect3d Rect3d2pt(tdouble3 p1,tdouble3 p2){$/;"	f	namespace:fmath	signature:(tdouble3 p1,tdouble3 p2)
fmath::RectPosX	FunctionsMath.cpp	/^tdouble3 RectPosX(const StRect3d &r,double x){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double x)
fmath::RectPosX	FunctionsMath.h	/^tdouble3 RectPosX(const StRect3d &r,double x);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double x)
fmath::RectPosY	FunctionsMath.cpp	/^tdouble3 RectPosY(const StRect3d &r,double y){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double y)
fmath::RectPosY	FunctionsMath.h	/^tdouble3 RectPosY(const StRect3d &r,double y);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double y)
fmath::RectPosZ	FunctionsMath.cpp	/^tdouble3 RectPosZ(const StRect3d &r,double z){$/;"	f	namespace:fmath	signature:(const StRect3d &r,double z)
fmath::RectPosZ	FunctionsMath.h	/^tdouble3 RectPosZ(const StRect3d &r,double z);$/;"	p	namespace:fmath	signature:(const StRect3d &r,double z)
fmath::RotMatrix3x3	FunctionsMath.h	/^inline tmatrix3f RotMatrix3x3(const tfloat3 &ang){$/;"	f	namespace:fmath	signature:(const tfloat3 &ang)
fmath::StRect3d	FunctionsMath.h	/^}StRect3d;$/;"	t	namespace:fmath	typeref:struct:fmath::__anon2
fmath::TrasMatrix3x3	FunctionsMath.h	/^inline tmatrix3f TrasMatrix3x3(const tmatrix3f &a){$/;"	f	namespace:fmath	signature:(const tmatrix3f &a)
fmath::VecOrthogonal	FunctionsMath.h	/^inline tdouble3 VecOrthogonal(const tdouble3 &v,double module){$/;"	f	namespace:fmath	signature:(const tdouble3 &v,double module)
fmath::VecOrthogonal	FunctionsMath.h	/^inline tfloat3 VecOrthogonal(const tfloat3 &v,float module){$/;"	f	namespace:fmath	signature:(const tfloat3 &v,float module)
fmath::VecOrthogonal2	FunctionsMath.h	/^inline tdouble3 VecOrthogonal2(const tdouble3 &v,double module,bool first=true){$/;"	f	namespace:fmath	signature:(const tdouble3 &v,double module,bool first=true)
fmath::VecOrthogonal2	FunctionsMath.h	/^inline tfloat3 VecOrthogonal2(const tfloat3 &v,float module,bool first=true){$/;"	f	namespace:fmath	signature:(const tfloat3 &v,float module,bool first=true)
fmath::VecUnitary	FunctionsMath.h	/^inline tdouble3 VecUnitary(const tdouble3 &p1){$/;"	f	namespace:fmath	signature:(const tdouble3 &p1)
fmath::VecUnitary	FunctionsMath.h	/^inline tfloat3 VecUnitary(const tfloat3 &p1){$/;"	f	namespace:fmath	signature:(const tfloat3 &p1)
fmath::VecUnitarySafe	FunctionsMath.h	/^inline tdouble3 VecUnitarySafe(const tdouble3 &v){$/;"	f	namespace:fmath	signature:(const tdouble3 &v)
fmath::VecUnitarySafe	FunctionsMath.h	/^inline tfloat3 VecUnitarySafe(const tfloat3 &v){$/;"	f	namespace:fmath	signature:(const tfloat3 &v)
fmath::__anon2::p	FunctionsMath.h	/^  tdouble3 p; \/\/\/<Point of rect.$/;"	m	struct:fmath::__anon2	access:public
fmath::__anon2::p1	FunctionsMath.h	/^  tdouble3 p1; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
fmath::__anon2::p2	FunctionsMath.h	/^  tdouble3 p2; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
fmath::__anon2::v	FunctionsMath.h	/^  tdouble3 v; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
fmath::cot	FunctionsMath.h	/^inline double cot(double z){ return(1.0 \/ tan(z)); }$/;"	f	namespace:fmath	signature:(double z)
fmath::coth	FunctionsMath.h	/^inline double coth(double z){ return(cosh(z) \/ sinh(z)); }$/;"	f	namespace:fmath	signature:(double z)
fmath::csc	FunctionsMath.h	/^inline double csc(double z){ return(1.0 \/ sin(z)); }$/;"	f	namespace:fmath	signature:(double z)
fmath::sec	FunctionsMath.h	/^inline double sec(double z){ return(1.0 \/ cos(z)); }$/;"	f	namespace:fmath	signature:(double z)
fmt	JFormatFiles2.h	/^    std::string fmt;$/;"	m	struct:JFormatFiles2::__anon12	access:public
fomega	Types.h	/^  tfloat3 fomega;   \/\/\/<Angular velocity of the floating object (units:rad\/s).$/;"	m	struct:__anon42	access:public
fomegaace	Types.h	/^  tfloat3 fomegaace;  \/\/\/<Angular acceleration of the floating object (units:rad\/s2). | Aceleracion angular del objecto floating.$/;"	m	struct:__anon43	access:public
fomegares	Types.h	/^  tfloat3 fomegares;   \/\/\/<Calculated angular velocity to upadte floating body (units:rad\/s).$/;"	m	struct:__anon44	access:public
force	JGaugeItem.h	/^    tfloat3 force;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
forcesbound	JSphGpu.h	/^    unsigned forcesbound;$/;"	m	struct:JSphGpu::__anon31	access:public
forcesbound_bs	JSphGpu_ker.h	/^  int forcesbound_bs;$/;"	m	struct:__anon33	access:public
forcesbound_bsmax	JSphGpu_ker.h	/^  int forcesbound_bsmax;$/;"	m	struct:__anon33	access:public
forcesbound_rg	JSphGpu_ker.h	/^  int forcesbound_rg;$/;"	m	struct:__anon33	access:public
forcesdem	JSphGpu.h	/^    unsigned forcesdem;$/;"	m	struct:JSphGpu::__anon31	access:public
forcesdem_bs	JSphGpu_ker.h	/^  int forcesdem_bs;$/;"	m	struct:__anon33	access:public
forcesdem_bsmax	JSphGpu_ker.h	/^  int forcesdem_bsmax;$/;"	m	struct:__anon33	access:public
forcesdem_rg	JSphGpu_ker.h	/^  int forcesdem_rg;$/;"	m	struct:__anon33	access:public
forcesfluid	JSphGpu.h	/^    unsigned forcesfluid;$/;"	m	struct:JSphGpu::__anon31	access:public
forcesfluid_bs	JSphGpu_ker.h	/^  int forcesfluid_bs;$/;"	m	struct:__anon33	access:public
forcesfluid_bsmax	JSphGpu_ker.h	/^  int forcesfluid_bsmax;$/;"	m	struct:__anon33	access:public
forcesfluid_rg	JSphGpu_ker.h	/^  int forcesfluid_rg;$/;"	m	struct:__anon33	access:public
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
fourh2	JSphGpu_ker.h	/^  float fourh2;             \/\/\/< \\ref h * \\ref h * 4 $/;"	m	struct:__anon32	access:public
fun	Functions.cpp	/^namespace fun{$/;"	n	file:
fun	Functions.h	/^namespace fun{$/;"	n
fun::AddExtension	Functions.cpp	/^std::string AddExtension(const std::string &file,const std::string &ext){$/;"	f	namespace:fun	signature:(const std::string &file,const std::string &ext)
fun::AddExtension	Functions.h	/^std::string AddExtension(const std::string &file,const std::string &ext);$/;"	p	namespace:fun	signature:(const std::string &file,const std::string &ext)
fun::BigEndian	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	e	enum:fun::__anon1
fun::CpyFile	Functions.cpp	/^int CpyFile(std::string src,const std::string dest){$/;"	f	namespace:fun	signature:(std::string src,const std::string dest)
fun::CpyFile	Functions.h	/^int CpyFile(std::string src,const std::string dest);$/;"	p	namespace:fun	signature:(std::string src,const std::string dest)
fun::DirExists	Functions.h	/^inline bool DirExists(const std::string &name){ return(FileType(name)==1); }$/;"	f	namespace:fun	signature:(const std::string &name)
fun::Double3Str	Functions.cpp	/^std::string Double3Str(const tdouble3 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tdouble3 &v,const char* fmt)
fun::Double3Str	Functions.h	/^std::string Double3Str(const tdouble3 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tdouble3 &v,const char* fmt=Ó)
fun::Double3gRangeStr	Functions.h	/^inline std::string Double3gRangeStr(const tdouble3 &v,const tdouble3 &v2){ return(std::string("(")+Double3gStr(v)+")-("+Double3gStr(v2)+")"); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const tdouble3 &v2)
fun::Double3gStr	Functions.h	/^inline std::string Double3gStr(const tdouble3 &v){ return(Double3Str(v,"%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tdouble3 &v)
fun::Double3xRangeStr	Functions.h	/^inline std::string Double3xRangeStr(const tdouble3 &v,const tdouble3 &v2,const char* fmt="%f"){ return(std::string("(")+Double3xStr(v,fmt)+")-("+Double3xStr(v2,fmt)+")"); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const tdouble3 &v2,const char* fmt=Ó)
fun::Double3xStr	Functions.h	/^inline std::string Double3xStr(const tdouble3 &v,const char* fmt="%f"){ return(DoublexStr(v.x,fmt)+","+DoublexStr(v.y,fmt)+","+DoublexStr(v.z,fmt)); }$/;"	f	namespace:fun	signature:(const tdouble3 &v,const char* fmt=Ó)
fun::Double4Str	Functions.cpp	/^std::string Double4Str(const tdouble4 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tdouble4 &v,const char* fmt)
fun::Double4Str	Functions.h	/^std::string Double4Str(const tdouble4 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tdouble4 &v,const char* fmt=Ó)
fun::Double4gStr	Functions.h	/^inline std::string Double4gStr(const tdouble4 &v){ return(Double4Str(v,"%g,%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tdouble4 &v)
fun::DoubleStr	Functions.cpp	/^std::string DoubleStr(double v,const char* fmt){$/;"	f	namespace:fun	signature:(double v,const char* fmt)
fun::DoubleStr	Functions.h	/^std::string DoubleStr(double v,const char* fmt="%g");$/;"	p	namespace:fun	signature:(double v,const char* fmt=Ó)
fun::DoublexStr	Functions.cpp	/^std::string DoublexStr(double v,const char* fmt){$/;"	f	namespace:fun	signature:(double v,const char* fmt)
fun::DoublexStr	Functions.h	/^std::string DoublexStr(double v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(double v,const char* fmt=Ó)
fun::FileExists	Functions.h	/^inline bool FileExists(const std::string &name){ return(FileType(name)==2); }$/;"	f	namespace:fun	signature:(const std::string &name)
fun::FileMask	Functions.cpp	/^bool FileMask(std::string text,std::string mask){$/;"	f	namespace:fun	signature:(std::string text,std::string mask)
fun::FileMask	Functions.h	/^bool FileMask(std::string text,std::string mask);$/;"	p	namespace:fun	signature:(std::string text,std::string mask)
fun::FileNameSec	Functions.cpp	/^std::string FileNameSec(std::string fname,unsigned fnumber){$/;"	f	namespace:fun	signature:(std::string fname,unsigned fnumber)
fun::FileNameSec	Functions.h	/^std::string FileNameSec(std::string fname,unsigned fnumber);$/;"	p	namespace:fun	signature:(std::string fname,unsigned fnumber)
fun::FileType	Functions.cpp	/^int FileType(const std::string &name){$/;"	f	namespace:fun	signature:(const std::string &name)
fun::FileType	Functions.h	/^int FileType(const std::string &name);$/;"	p	namespace:fun	signature:(const std::string &name)
fun::Float3Str	Functions.cpp	/^std::string Float3Str(const tfloat3 &v,const char* fmt){$/;"	f	namespace:fun	signature:(const tfloat3 &v,const char* fmt)
fun::Float3Str	Functions.h	/^std::string Float3Str(const tfloat3 &v,const char* fmt="%f,%f,%f");$/;"	p	namespace:fun	signature:(const tfloat3 &v,const char* fmt=Ó)
fun::Float3gRangeStr	Functions.h	/^inline std::string Float3gRangeStr(const tfloat3 &v,const tfloat3 &v2){ return(std::string("(")+Float3gStr(v)+")-("+Float3gStr(v2)+")"); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const tfloat3 &v2)
fun::Float3gStr	Functions.h	/^inline std::string Float3gStr(const tfloat3 &v){ return(Float3Str(v,"%g,%g,%g")); }$/;"	f	namespace:fun	signature:(const tfloat3 &v)
fun::Float3xRangeStr	Functions.h	/^inline std::string Float3xRangeStr(const tfloat3 &v,const tfloat3 &v2,const char* fmt="%f"){ return(std::string("(")+Float3xStr(v,fmt)+")-("+Float3xStr(v2,fmt)+")"); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const tfloat3 &v2,const char* fmt=Ó)
fun::Float3xStr	Functions.h	/^inline std::string Float3xStr(const tfloat3 &v,const char* fmt="%f"){ return(FloatxStr(v.x,fmt)+","+FloatxStr(v.y,fmt)+","+FloatxStr(v.z,fmt)); }$/;"	f	namespace:fun	signature:(const tfloat3 &v,const char* fmt=Ó)
fun::FloatStr	Functions.cpp	/^std::string FloatStr(float v,const char* fmt){$/;"	f	namespace:fun	signature:(float v,const char* fmt)
fun::FloatStr	Functions.h	/^std::string FloatStr(float v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(float v,const char* fmt=Ó)
fun::FloatxStr	Functions.cpp	/^std::string FloatxStr(float v,const char* fmt){$/;"	f	namespace:fun	signature:(float v,const char* fmt)
fun::FloatxStr	Functions.h	/^std::string FloatxStr(float v,const char* fmt="%f");$/;"	p	namespace:fun	signature:(float v,const char* fmt=Ó)
fun::GetByteOrder	Functions.cpp	/^TpByteOrder GetByteOrder(){$/;"	f	namespace:fun	signature:()
fun::GetByteOrder	Functions.h	/^TpByteOrder GetByteOrder();$/;"	p	namespace:fun	signature:()
fun::GetCanonicalPath	Functions.cpp	/^std::string GetCanonicalPath(std::string pathbase,std::string path){$/;"	f	namespace:fun	signature:(std::string pathbase,std::string path)
fun::GetCanonicalPath	Functions.h	/^std::string GetCanonicalPath(std::string pathbase,std::string path);$/;"	p	namespace:fun	signature:(std::string pathbase,std::string path)
fun::GetCurrentDir	Functions.cpp	/^std::string GetCurrentDir(){$/;"	f	namespace:fun	signature:()
fun::GetCurrentDir	Functions.h	/^std::string GetCurrentDir();$/;"	p	namespace:fun	signature:()
fun::GetDateTime	Functions.h	/^inline std::string GetDateTime(){ return(GetDateTimeFormat("%d-%m-%Y %H:%M:%S",0)); }$/;"	f	namespace:fun	signature:()
fun::GetDateTimeAfter	Functions.h	/^inline std::string GetDateTimeAfter(int nseg){ return(GetDateTimeFormat("%d-%m-%Y %H:%M:%S",nseg)); }$/;"	f	namespace:fun	signature:(int nseg)
fun::GetDateTimeFormat	Functions.cpp	/^std::string GetDateTimeFormat(const char* format,int nseg){$/;"	f	namespace:fun	signature:(const char* format,int nseg)
fun::GetDateTimeFormat	Functions.h	/^std::string GetDateTimeFormat(const char* format,int nseg=0);$/;"	p	namespace:fun	signature:(const char* format,int nseg=0)
fun::GetDateTimeFormatUTC	Functions.cpp	/^std::string GetDateTimeFormatUTC(const char* format,int day,int month,int year,int hour,int min,int sec){$/;"	f	namespace:fun	signature:(const char* format,int day,int month,int year,int hour,int min,int sec)
fun::GetDateTimeFormatUTC	Functions.h	/^std::string GetDateTimeFormatUTC(const char* format,int day,int month,int year,int hour=0,int min=0,int sec=0);$/;"	p	namespace:fun	signature:(const char* format,int day,int month,int year,int hour=0,int min=0,int sec=0)
fun::GetDirParent	Functions.cpp	/^std::string GetDirParent(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
fun::GetDirParent	Functions.h	/^std::string GetDirParent(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
fun::GetDirWithSlash	Functions.cpp	/^std::string GetDirWithSlash(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
fun::GetDirWithSlash	Functions.h	/^std::string GetDirWithSlash(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
fun::GetDirWithoutSlash	Functions.cpp	/^std::string GetDirWithoutSlash(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
fun::GetDirWithoutSlash	Functions.h	/^std::string GetDirWithoutSlash(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
fun::GetExtension	Functions.cpp	/^std::string GetExtension(const std::string &file){$/;"	f	namespace:fun	signature:(const std::string &file)
fun::GetExtension	Functions.h	/^std::string GetExtension(const std::string &file);$/;"	p	namespace:fun	signature:(const std::string &file)
fun::GetFile	Functions.cpp	/^std::string GetFile(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
fun::GetFile	Functions.h	/^std::string GetFile(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
fun::GetFileNameSplit	Functions.cpp	/^void GetFileNameSplit(const std::string &file,std::string &dir,std::string &fname,std::string &fext){$/;"	f	namespace:fun	signature:(const std::string &file,std::string &dir,std::string &fname,std::string &fext)
fun::GetFileNameSplit	Functions.h	/^void GetFileNameSplit(const std::string &file,std::string &dir,std::string &fname,std::string &fext);$/;"	p	namespace:fun	signature:(const std::string &file,std::string &dir,std::string &fname,std::string &fext)
fun::GetFirstValueDouble	Functions.cpp	/^double GetFirstValueDouble(std::string tex,std::string &endtex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
fun::GetFirstValueDouble	Functions.cpp	/^double GetFirstValueDouble(std::string tex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string pretex)
fun::GetFirstValueDouble	Functions.h	/^double GetFirstValueDouble(std::string tex,std::string &endtex,std::string pretex);$/;"	p	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
fun::GetFirstValueDouble	Functions.h	/^double GetFirstValueDouble(std::string tex,std::string pretex="");$/;"	p	namespace:fun	signature:(std::string tex,std::string pretex=Ó)
fun::GetFirstValueInt	Functions.cpp	/^int GetFirstValueInt(std::string tex,std::string &endtex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
fun::GetFirstValueInt	Functions.cpp	/^int GetFirstValueInt(std::string tex,std::string pretex){$/;"	f	namespace:fun	signature:(std::string tex,std::string pretex)
fun::GetFirstValueInt	Functions.h	/^int GetFirstValueInt(std::string tex,std::string &endtex,std::string pretex);$/;"	p	namespace:fun	signature:(std::string tex,std::string &endtex,std::string pretex)
fun::GetFirstValueInt	Functions.h	/^int GetFirstValueInt(std::string tex,std::string pretex="");$/;"	p	namespace:fun	signature:(std::string tex,std::string pretex=Ó)
fun::GetHoursOfSeconds	Functions.cpp	/^std::string GetHoursOfSeconds(double s){$/;"	f	namespace:fun	signature:(double s)
fun::GetHoursOfSeconds	Functions.h	/^std::string GetHoursOfSeconds(double s);$/;"	p	namespace:fun	signature:(double s)
fun::GetPathLevels	Functions.cpp	/^std::string GetPathLevels(std::string path,unsigned levels){$/;"	f	namespace:fun	signature:(std::string path,unsigned levels)
fun::GetPathLevels	Functions.h	/^std::string GetPathLevels(std::string path,unsigned levels);$/;"	p	namespace:fun	signature:(std::string path,unsigned levels)
fun::GetTextRandomCode	Functions.cpp	/^std::string GetTextRandomCode(unsigned length){$/;"	f	namespace:fun	signature:(unsigned length)
fun::GetTextRandomCode	Functions.h	/^std::string GetTextRandomCode(unsigned length);$/;"	p	namespace:fun	signature:(unsigned length)
fun::GetWeekDay	Functions.cpp	/^int GetWeekDay(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
fun::GetWeekDay	Functions.h	/^int GetWeekDay(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
fun::GetWeekNumber	Functions.cpp	/^int GetWeekNumber(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
fun::GetWeekNumber	Functions.h	/^int GetWeekNumber(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
fun::GetWithoutExtension	Functions.cpp	/^std::string GetWithoutExtension(const std::string &ruta){$/;"	f	namespace:fun	signature:(const std::string &ruta)
fun::GetWithoutExtension	Functions.h	/^std::string GetWithoutExtension(const std::string &ruta);$/;"	p	namespace:fun	signature:(const std::string &ruta)
fun::GetYearDay	Functions.cpp	/^int GetYearDay(int day,int month,int year){$/;"	f	namespace:fun	signature:(int day,int month,int year)
fun::GetYearDay	Functions.h	/^int GetYearDay(int day,int month,int year);$/;"	p	namespace:fun	signature:(int day,int month,int year)
fun::Int3RangeStr	Functions.h	/^inline std::string Int3RangeStr(const tint3 &v,const tint3 &v2){ return(std::string("(")+Int3Str(v)+")-("+Int3Str(v2)+")"); }$/;"	f	namespace:fun	signature:(const tint3 &v,const tint3 &v2)
fun::Int3Str	Functions.cpp	/^std::string Int3Str(const tint3 &v){$/;"	f	namespace:fun	signature:(const tint3 &v)
fun::Int3Str	Functions.h	/^std::string Int3Str(const tint3 &v);$/;"	p	namespace:fun	signature:(const tint3 &v)
fun::IntStr	Functions.cpp	/^std::string IntStr(int v){$/;"	f	namespace:fun	signature:(int v)
fun::IntStr	Functions.h	/^std::string IntStr(int v);$/;"	p	namespace:fun	signature:(int v)
fun::IntStrFill	Functions.cpp	/^std::string IntStrFill(int v,int vmax){$/;"	f	namespace:fun	signature:(int v,int vmax)
fun::IntStrFill	Functions.h	/^std::string IntStrFill(int v,int vmax);$/;"	p	namespace:fun	signature:(int v,int vmax)
fun::IsInfinity	Functions.cpp	/^bool IsInfinity(double v){$/;"	f	namespace:fun	signature:(double v)
fun::IsInfinity	Functions.cpp	/^bool IsInfinity(float v){$/;"	f	namespace:fun	signature:(float v)
fun::IsInfinity	Functions.h	/^bool IsInfinity(double v);$/;"	p	namespace:fun	signature:(double v)
fun::IsInfinity	Functions.h	/^bool IsInfinity(float v);$/;"	p	namespace:fun	signature:(float v)
fun::IsNAN	Functions.cpp	/^bool IsNAN(double v){$/;"	f	namespace:fun	signature:(double v)
fun::IsNAN	Functions.cpp	/^bool IsNAN(float v){$/;"	f	namespace:fun	signature:(float v)
fun::IsNAN	Functions.h	/^bool IsNAN(double v);$/;"	p	namespace:fun	signature:(double v)
fun::IsNAN	Functions.h	/^bool IsNAN(float v);$/;"	p	namespace:fun	signature:(float v)
fun::LittleEndian	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	e	enum:fun::__anon1
fun::LongStr	Functions.cpp	/^std::string LongStr(llong v){$/;"	f	namespace:fun	signature:(llong v)
fun::LongStr	Functions.h	/^std::string LongStr(llong v);$/;"	p	namespace:fun	signature:(llong v)
fun::Mkdir	Functions.cpp	/^int Mkdir(const std::string &dirname){$/;"	f	namespace:fun	signature:(const std::string &dirname)
fun::Mkdir	Functions.h	/^int Mkdir(const std::string &dirname);$/;"	p	namespace:fun	signature:(const std::string &dirname)
fun::MkdirPath	Functions.cpp	/^int MkdirPath(std::string path){$/;"	f	namespace:fun	signature:(std::string path)
fun::MkdirPath	Functions.h	/^int MkdirPath(std::string path);$/;"	p	namespace:fun	signature:(std::string path)
fun::PrintStr	Functions.cpp	/^std::string PrintStr(const char *format,...){$/;"	f	namespace:fun	signature:(const char *format,...)
fun::PrintStr	Functions.h	/^std::string PrintStr(const char *format,...);$/;"	p	namespace:fun	signature:(const char *format,...)
fun::PrintStrCsv	Functions.cpp	/^std::string PrintStrCsv(bool csvsepcoma,const char *format,...){$/;"	f	namespace:fun	signature:(bool csvsepcoma,const char *format,...)
fun::PrintStrCsv	Functions.h	/^std::string PrintStrCsv(bool csvsepcoma,const char *format,...);$/;"	p	namespace:fun	signature:(bool csvsepcoma,const char *format,...)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,bool value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,bool value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,const char *value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,const char *value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,const std::string &value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,const std::string &value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,double value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,double value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,float value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,float value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,int value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,int value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,tdouble3 value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,tdouble3 value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,tfloat3 value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,tfloat3 value,const std::string &post)
fun::PrintVar	Functions.cpp	/^void PrintVar(const std::string &name,unsigned value,const std::string &post){ printf("%s%s",VarStr(name,value).c_str(),post.c_str()); }$/;"	f	namespace:fun	signature:(const std::string &name,unsigned value,const std::string &post)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,bool value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,bool value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,const char *value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,const char *value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,const std::string &value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,const std::string &value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,double value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,double value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,float value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,float value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,int value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,int value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,tdouble3 value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,tdouble3 value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,tfloat3 value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,tfloat3 value,const std::string &post=Ó)
fun::PrintVar	Functions.h	/^void PrintVar(const std::string &name,unsigned value,const std::string &post="");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned value,const std::string &post=Ó)
fun::ResizeAlloc	Functions.cpp	/^byte* ResizeAlloc(byte *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(byte *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^double* ResizeAlloc(double *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(double *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^float* ResizeAlloc(float *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(float *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^int* ResizeAlloc(int *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(int *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tdouble2* ResizeAlloc(tdouble2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tdouble2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tdouble3* ResizeAlloc(tdouble3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tdouble3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tfloat2* ResizeAlloc(tfloat2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tfloat3* ResizeAlloc(tfloat3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tfloat4* ResizeAlloc(tfloat4 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tfloat4 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tint3* ResizeAlloc(tint3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tint3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tuint2* ResizeAlloc(tuint2 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tuint3* ResizeAlloc(tuint3 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^tuint4* ResizeAlloc(tuint4 *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(tuint4 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^unsigned* ResizeAlloc(unsigned *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(unsigned *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.cpp	/^word* ResizeAlloc(word *data,unsigned ndata,unsigned newsize){$/;"	f	namespace:fun	signature:(word *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^byte*     ResizeAlloc(byte     *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(byte *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^double*   ResizeAlloc(double   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(double *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^float*    ResizeAlloc(float    *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(float *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^int*      ResizeAlloc(int      *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(int *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tdouble2* ResizeAlloc(tdouble2 *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tdouble2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tdouble3* ResizeAlloc(tdouble3 *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tdouble3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tfloat2*  ResizeAlloc(tfloat2  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tfloat3*  ResizeAlloc(tfloat3  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tfloat4*  ResizeAlloc(tfloat4  *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tfloat4 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tint3*    ResizeAlloc(tint3    *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tint3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tuint2*   ResizeAlloc(tuint2   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint2 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tuint3*   ResizeAlloc(tuint3   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint3 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^tuint4*   ResizeAlloc(tuint4   *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(tuint4 *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^unsigned* ResizeAlloc(unsigned *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(unsigned *data,unsigned ndata,unsigned newsize)
fun::ResizeAlloc	Functions.h	/^word*     ResizeAlloc(word     *data,unsigned ndata,unsigned newsize);$/;"	p	namespace:fun	signature:(word *data,unsigned ndata,unsigned newsize)
fun::ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(int *data,int count,int *result){$/;"	f	namespace:fun	signature:(int *data,int count,int *result)
fun::ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(llong *data,int count,llong *result){$/;"	f	namespace:fun	signature:(llong *data,int count,llong *result)
fun::ReverseByteOrder	Functions.cpp	/^void ReverseByteOrder(short *data,int count,short *result){$/;"	f	namespace:fun	signature:(short *data,int count,short *result)
fun::ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(int *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(int *data,int count)
fun::ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(llong *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(llong *data,int count)
fun::ReverseByteOrder	Functions.h	/^inline void ReverseByteOrder(short *data,int count){ ReverseByteOrder(data,count,data); }$/;"	f	namespace:fun	signature:(short *data,int count)
fun::ReverseByteOrder	Functions.h	/^void ReverseByteOrder(int *data,int count,int *result);$/;"	p	namespace:fun	signature:(int *data,int count,int *result)
fun::ReverseByteOrder	Functions.h	/^void ReverseByteOrder(llong *data,int count,llong *result);$/;"	p	namespace:fun	signature:(llong *data,int count,llong *result)
fun::ReverseByteOrder	Functions.h	/^void ReverseByteOrder(short *data,int count,short *result);$/;"	p	namespace:fun	signature:(short *data,int count,short *result)
fun::ShortFileName	Functions.cpp	/^std::string ShortFileName(const std::string &file,unsigned maxlen,bool withpoints){$/;"	f	namespace:fun	signature:(const std::string &file,unsigned maxlen,bool withpoints)
fun::ShortFileName	Functions.h	/^std::string ShortFileName(const std::string &file,unsigned maxlen,bool withpoints=true);$/;"	p	namespace:fun	signature:(const std::string &file,unsigned maxlen,bool withpoints=true)
fun::StrAddSlashes	Functions.cpp	/^std::string StrAddSlashes(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrAddSlashes	Functions.h	/^std::string StrAddSlashes(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrCsvSep	Functions.cpp	/^std::string StrCsvSep(bool csvsepcoma,const std::string &cad){$/;"	f	namespace:fun	signature:(bool csvsepcoma,const std::string &cad)
fun::StrCsvSep	Functions.h	/^std::string StrCsvSep(bool csvsepcoma,const std::string &cad);$/;"	p	namespace:fun	signature:(bool csvsepcoma,const std::string &cad)
fun::StrFileError	Functions.cpp	/^std::string StrFileError(int error){$/;"	f	namespace:fun	signature:(int error)
fun::StrFileError	Functions.h	/^std::string StrFileError(int error);$/;"	p	namespace:fun	signature:(int error)
fun::StrFileToVector	Functions.cpp	/^int StrFileToVector(const std::string &file,std::vector<std::string> &lines){$/;"	f	namespace:fun	signature:(const std::string &file,std::vector<std::string> &lines)
fun::StrFileToVector	Functions.h	/^int StrFileToVector(const std::string &file,std::vector<std::string> &lines);$/;"	p	namespace:fun	signature:(const std::string &file,std::vector<std::string> &lines)
fun::StrLower	Functions.cpp	/^std::string StrLower(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrLower	Functions.h	/^std::string StrLower(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrOnlyChars	Functions.cpp	/^bool StrOnlyChars(const std::string &cad,const std::string &chars){$/;"	f	namespace:fun	signature:(const std::string &cad,const std::string &chars)
fun::StrOnlyChars	Functions.h	/^bool StrOnlyChars(const std::string &cad,const std::string &chars);$/;"	p	namespace:fun	signature:(const std::string &cad,const std::string &chars)
fun::StrRepeat	Functions.cpp	/^std::string StrRepeat(const std::string &cad,unsigned count){$/;"	f	namespace:fun	signature:(const std::string &cad,unsigned count)
fun::StrRepeat	Functions.h	/^std::string StrRepeat(const std::string &cad,unsigned count);$/;"	p	namespace:fun	signature:(const std::string &cad,unsigned count)
fun::StrReplace	Functions.cpp	/^std::string StrReplace(const std::string &cad,const std::string &key,const std::string &newcad){$/;"	f	namespace:fun	signature:(const std::string &cad,const std::string &key,const std::string &newcad)
fun::StrReplace	Functions.h	/^std::string StrReplace(const std::string &cad,const std::string &key,const std::string &newcad);$/;"	p	namespace:fun	signature:(const std::string &cad,const std::string &key,const std::string &newcad)
fun::StrSplit	Functions.cpp	/^std::string StrSplit(const std::string mark,std::string &text){$/;"	f	namespace:fun	signature:(const std::string mark,std::string &text)
fun::StrSplit	Functions.h	/^std::string StrSplit(const std::string mark,std::string &text);$/;"	p	namespace:fun	signature:(const std::string mark,std::string &text)
fun::StrSplitCount	Functions.cpp	/^unsigned StrSplitCount(const std::string mark,std::string text){$/;"	f	namespace:fun	signature:(const std::string mark,std::string text)
fun::StrSplitCount	Functions.h	/^unsigned StrSplitCount(const std::string mark,std::string text);$/;"	p	namespace:fun	signature:(const std::string mark,std::string text)
fun::StrSplitValue	Functions.cpp	/^std::string StrSplitValue(const std::string mark,std::string text,unsigned value){$/;"	f	namespace:fun	signature:(const std::string mark,std::string text,unsigned value)
fun::StrSplitValue	Functions.h	/^std::string StrSplitValue(const std::string mark,std::string text,unsigned value);$/;"	p	namespace:fun	signature:(const std::string mark,std::string text,unsigned value)
fun::StrStripSlashes	Functions.cpp	/^std::string StrStripSlashes(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrStripSlashes	Functions.h	/^std::string StrStripSlashes(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrToByte	Functions.h	/^inline byte     StrToByte   (const std::string &v){ return(byte(StrToInt(v)));          }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToDouble	Functions.cpp	/^double StrToDouble(const std::string &v){$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToDouble	Functions.h	/^double   StrToDouble (const std::string &v);$/;"	p	namespace:fun	signature:(const std::string &v)
fun::StrToDouble3	Functions.cpp	/^tdouble3 StrToDouble3(std::string v){$/;"	f	namespace:fun	signature:(std::string v)
fun::StrToDouble3	Functions.h	/^tdouble3 StrToDouble3(std::string v);$/;"	p	namespace:fun	signature:(std::string v)
fun::StrToFloat	Functions.h	/^inline float    StrToFloat  (const std::string &v){ return(float(StrToDouble(v)));      }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToFloat3	Functions.h	/^inline tfloat3  StrToFloat3 (const std::string &v){ return(ToTFloat3(StrToDouble3(v))); }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToInt	Functions.cpp	/^int StrToInt(const std::string &v){$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToInt	Functions.h	/^int      StrToInt    (const std::string &v);$/;"	p	namespace:fun	signature:(const std::string &v)
fun::StrToInt3	Functions.cpp	/^tint3 StrToInt3(std::string v){$/;"	f	namespace:fun	signature:(std::string v)
fun::StrToInt3	Functions.h	/^tint3    StrToInt3   (std::string v);$/;"	p	namespace:fun	signature:(std::string v)
fun::StrToUint	Functions.h	/^inline unsigned StrToUint   (const std::string &v){ return(unsigned(StrToInt(v)));      }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToUint3	Functions.h	/^inline tuint3   StrToUint3  (const std::string &v){ return(ToTUint3(StrToInt3(v)));     }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrToWord	Functions.h	/^inline word     StrToWord   (const std::string &v){ return(word(StrToInt(v)));          }$/;"	f	namespace:fun	signature:(const std::string &v)
fun::StrTrim	Functions.cpp	/^std::string StrTrim(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrTrim	Functions.h	/^std::string StrTrim(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrTrimBegin	Functions.cpp	/^std::string StrTrimBegin(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrTrimBegin	Functions.h	/^std::string StrTrimBegin(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrTrimEnd	Functions.cpp	/^std::string StrTrimEnd(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrTrimEnd	Functions.h	/^std::string StrTrimEnd(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrTrimRepeated	Functions.cpp	/^std::string StrTrimRepeated(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrTrimRepeated	Functions.h	/^std::string StrTrimRepeated(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrUpper	Functions.cpp	/^std::string StrUpper(const std::string &cad){$/;"	f	namespace:fun	signature:(const std::string &cad)
fun::StrUpper	Functions.h	/^std::string StrUpper(const std::string &cad);$/;"	p	namespace:fun	signature:(const std::string &cad)
fun::StrVectorToFile	Functions.cpp	/^int StrVectorToFile(const std::string &file,const std::vector<std::string> &lines){$/;"	f	namespace:fun	signature:(const std::string &file,const std::vector<std::string> &lines)
fun::StrVectorToFile	Functions.h	/^int StrVectorToFile(const std::string &file,const std::vector<std::string> &lines);$/;"	p	namespace:fun	signature:(const std::string &file,const std::vector<std::string> &lines)
fun::StrWithoutChar	Functions.cpp	/^std::string StrWithoutChar(const std::string &cad,char let){$/;"	f	namespace:fun	signature:(const std::string &cad,char let)
fun::StrWithoutChar	Functions.h	/^std::string StrWithoutChar(const std::string &cad,char let);$/;"	p	namespace:fun	signature:(const std::string &cad,char let)
fun::TextWithShortFileName	Functions.cpp	/^std::string TextWithShortFileName(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen){$/;"	f	namespace:fun	signature:(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen)
fun::TextWithShortFileName	Functions.h	/^std::string TextWithShortFileName(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen);$/;"	p	namespace:fun	signature:(const std::string &txpre,const std::string &txpos,const std::string &file,unsigned maxlen)
fun::TpByteOrder	Functions.h	/^typedef enum{ BigEndian=1,LittleEndian=0 }TpByteOrder;$/;"	t	namespace:fun	typeref:enum:fun::__anon1
fun::Uint3RangeStr	Functions.h	/^inline std::string Uint3RangeStr(const tuint3 &v,const tuint3 &v2){ return(std::string("(")+Uint3Str(v)+")-("+Uint3Str(v2)+")"); }$/;"	f	namespace:fun	signature:(const tuint3 &v,const tuint3 &v2)
fun::Uint3Str	Functions.cpp	/^std::string Uint3Str(const tuint3 &v){$/;"	f	namespace:fun	signature:(const tuint3 &v)
fun::Uint3Str	Functions.h	/^std::string Uint3Str(const tuint3 &v);$/;"	p	namespace:fun	signature:(const tuint3 &v)
fun::UintStr	Functions.cpp	/^std::string UintStr(unsigned v,const char* fmt){$/;"	f	namespace:fun	signature:(unsigned v,const char* fmt)
fun::UintStr	Functions.h	/^std::string UintStr(unsigned v,const char* fmt="%u");$/;"	p	namespace:fun	signature:(unsigned v,const char* fmt=Ó)
fun::UintStrFill	Functions.cpp	/^std::string UintStrFill(unsigned v,unsigned vmax,const char fillchar){$/;"	f	namespace:fun	signature:(unsigned v,unsigned vmax,const char fillchar)
fun::UintStrFill	Functions.h	/^std::string UintStrFill(unsigned v,unsigned vmax,const char fillchar='0');$/;"	p	namespace:fun	signature:(unsigned v,unsigned vmax,const char fillchar=Ã)
fun::UlongStr	Functions.cpp	/^std::string UlongStr(ullong v){$/;"	f	namespace:fun	signature:(ullong v)
fun::UlongStr	Functions.h	/^std::string UlongStr(ullong v);$/;"	p	namespace:fun	signature:(ullong v)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,bool value){ return(name+"="+(value? "True": "False")+""); }$/;"	f	namespace:fun	signature:(const std::string &name,bool value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,const char *value){ return(name+"=\\""+value+"\\""); }$/;"	f	namespace:fun	signature:(const std::string &name,const char *value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,const std::string &value){ return(name+"=\\""+value+"\\""); }$/;"	f	namespace:fun	signature:(const std::string &name,const std::string &value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,double value){ return(name+"="+DoubleStr(value)); }$/;"	f	namespace:fun	signature:(const std::string &name,double value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,float value){ return(name+"="+FloatStr(value)); }$/;"	f	namespace:fun	signature:(const std::string &name,float value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,int value){$/;"	f	namespace:fun	signature:(const std::string &name,int value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,tdouble3 value){ return(name+"=("+DoubleStr(value.x)+","+DoubleStr(value.y)+","+DoubleStr(value.z)+")"); }$/;"	f	namespace:fun	signature:(const std::string &name,tdouble3 value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,tfloat3 value){ return(name+"=("+FloatStr(value.x)+","+FloatStr(value.y)+","+FloatStr(value.z)+")"); }$/;"	f	namespace:fun	signature:(const std::string &name,tfloat3 value)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const double* values,std::string size,const char* fmt){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const double* values,std::string size,const char* fmt)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const float* values,std::string size,const char* fmt){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const float* values,std::string size,const char* fmt)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const int* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const int* values,std::string size)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const unsigned* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const unsigned* values,std::string size)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned n,const word* values,std::string size){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned n,const word* values,std::string size)
fun::VarStr	Functions.cpp	/^std::string VarStr(const std::string &name,unsigned value){$/;"	f	namespace:fun	signature:(const std::string &name,unsigned value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,bool value);$/;"	p	namespace:fun	signature:(const std::string &name,bool value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,const char *value);$/;"	p	namespace:fun	signature:(const std::string &name,const char *value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,const std::string &value);$/;"	p	namespace:fun	signature:(const std::string &name,const std::string &value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,double value);$/;"	p	namespace:fun	signature:(const std::string &name,double value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,float value);$/;"	p	namespace:fun	signature:(const std::string &name,float value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,int value);$/;"	p	namespace:fun	signature:(const std::string &name,int value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,tdouble3 value);$/;"	p	namespace:fun	signature:(const std::string &name,tdouble3 value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,tfloat3 value);$/;"	p	namespace:fun	signature:(const std::string &name,tfloat3 value)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const double* values,std::string size="?",const char* fmt="%f");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const double* values,std::string size=Ó,const char* fmt=Ó)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const float* values,std::string size="?",const char* fmt="%f");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const float* values,std::string size=Ó,const char* fmt=Ó)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const int* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const int* values,std::string size=Ó)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const unsigned* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const unsigned* values,std::string size=Ó)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned n,const word* values,std::string size="?");$/;"	p	namespace:fun	signature:(const std::string &name,unsigned n,const word* values,std::string size=Ó)
fun::VarStr	Functions.h	/^std::string VarStr(const std::string &name,unsigned value);$/;"	p	namespace:fun	signature:(const std::string &name,unsigned value)
fun::VectorSplitInt	Functions.cpp	/^unsigned VectorSplitInt(const std::string mark,const std::string &text,std::vector<int> &vec){$/;"	f	namespace:fun	signature:(const std::string mark,const std::string &text,std::vector<int> &vec)
fun::VectorSplitInt	Functions.h	/^unsigned VectorSplitInt(const std::string mark,const std::string &text,std::vector<int> &vec);$/;"	p	namespace:fun	signature:(const std::string mark,const std::string &text,std::vector<int> &vec)
fvel	Types.h	/^  tfloat3 fvel;     \/\/\/<Linear velocity of the floating object (units:m\/s).$/;"	m	struct:__anon42	access:public
fvelres	Types.h	/^  tfloat3 fvelres;     \/\/\/<Calculated linear velocity to upadte floating body (units:m\/s).$/;"	m	struct:__anon44	access:public
gamma	JSpaceCtes.h	/^    double gamma,rhop0;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
gamma	JSphGpu_ker.h	/^  float cteb,gamma;$/;"	m	struct:__anon32	access:public
getlicense_lgpl	main.cpp	/^std::string getlicense_lgpl(const std::string &name,bool simple){$/;"	f	signature:(const std::string &name,bool simple)
globalmem	FunctionsCuda.h	/^  ullong globalmem;    \/\/\/<Global memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
gpudata	JSph.h	/^    bool gpudata;$/;"	m	struct:JSph::__anon30	access:public
gravity	JSpaceCtes.h	/^    tdouble3 gravity;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
h	JSphGpu_ker.h	/^  float h;                  \/\/\/<Smoothing length (=coef*sqrt(dx*dx+dy*dy+dz*dz))$/;"	m	struct:__anon32	access:public
hswl	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
id	FunctionsCuda.h	/^  int id;              \/\/\/<Device number.$/;"	m	struct:fcuda::StrGpuInfo	access:public
idini	JSpaceParts.h	/^    unsigned idini[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
idlast	JSpaceParts.h	/^    unsigned idlast[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
indent	tinyxml.h	/^    TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
inertiaini	Types.h	/^  tmatrix3f inertiaini; \/\/\/<Initial state inertia tensor in world coordinates (computed or user-given).$/;"	m	struct:__anon42	access:public
info	JLog2.h	/^    std::string info;$/;"	m	struct:JLog2::StrFileInfo	access:public
init	tinystr.h	/^    void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
init	tinystr.h	/^    void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString	access:private	signature:(size_type sz, size_type cap)
int32_t	randomc.h	/^  typedef   signed __int32  int32_t;$/;"	t
int32_t	randomc.h	/^  typedef   signed long int int32_t;$/;"	t
int32_t	randomc.h	/^  typedef signed int          int32_t;$/;"	t
int64_t	randomc.h	/^  typedef   signed __int64  int64_t;$/;"	t
int64_t	randomc.h	/^  typedef long long           int64_t;$/;"	t
integrated	FunctionsCuda.h	/^  int integrated;      \/\/\/<Integrated GPU sharing Host Memory.$/;"	m	struct:fcuda::StrGpuInfo	access:public
jcsv	JSaveCsv2.cpp	/^namespace jcsv{$/;"	n	file:
jcsv	JSaveCsv2.h	/^namespace jcsv{$/;"	n
jcsv::AutoSepOff	JSaveCsv2.h	/^class AutoSepOff{$/;"	c	namespace:jcsv
jcsv::AutoSepOff::AutoSepOff	JSaveCsv2.h	/^  AutoSepOff(){};$/;"	f	class:jcsv::AutoSepOff	access:public	signature:()
jcsv::AutoSepOn	JSaveCsv2.h	/^class AutoSepOn{$/;"	c	namespace:jcsv
jcsv::AutoSepOn::AutoSepOn	JSaveCsv2.h	/^  AutoSepOn(){};$/;"	f	class:jcsv::AutoSepOn	access:public	signature:()
jcsv::Endl	JSaveCsv2.h	/^class Endl{$/;"	c	namespace:jcsv
jcsv::Endl::Endl	JSaveCsv2.h	/^  Endl(){};$/;"	f	class:jcsv::Endl	access:public	signature:()
jcsv::Fmt	JSaveCsv2.h	/^class Fmt$/;"	c	namespace:jcsv
jcsv::Fmt::Fmt	JSaveCsv2.h	/^  Fmt(TpFormat typefmt):TypeFmt(typefmt),Format(""){};$/;"	f	class:jcsv::Fmt	access:public	signature:(TpFormat typefmt)
jcsv::Fmt::Fmt	JSaveCsv2.h	/^  Fmt(TpFormat typefmt,const std::string &format):TypeFmt(typefmt),Format(format){};$/;"	f	class:jcsv::Fmt	access:public	signature:(TpFormat typefmt,const std::string &format)
jcsv::Fmt::Format	JSaveCsv2.h	/^  const std::string Format;$/;"	m	class:jcsv::Fmt	access:public
jcsv::Fmt::TypeFmt	JSaveCsv2.h	/^  const TpFormat TypeFmt;$/;"	m	class:jcsv::Fmt	access:public
jcsv::JSaveCsv2	JSaveCsv2.h	/^class JSaveCsv2 : protected JObject$/;"	c	namespace:jcsv	inherits:JObject
jcsv::JSaveCsv2::AddEndl	JSaveCsv2.cpp	/^void JSaveCsv2::AddEndl(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
jcsv::JSaveCsv2::AddEndl	JSaveCsv2.h	/^  void AddEndl();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
jcsv::JSaveCsv2::AddSeparator	JSaveCsv2.cpp	/^void JSaveCsv2::AddSeparator(unsigned count){$/;"	f	class:jcsv::JSaveCsv2	signature:(unsigned count)
jcsv::JSaveCsv2::AddSeparator	JSaveCsv2.h	/^  void AddSeparator(unsigned count);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(unsigned count)
jcsv::JSaveCsv2::AddStr	JSaveCsv2.cpp	/^void JSaveCsv2::AddStr(std::string tx){$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string tx)
jcsv::JSaveCsv2::AddStr	JSaveCsv2.h	/^  void AddStr(std::string tx);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(std::string tx)
jcsv::JSaveCsv2::App	JSaveCsv2.h	/^  const bool App;          \/\/\/<Append mode enabled.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::AppendMode	JSaveCsv2.h	/^  bool AppendMode;         \/\/\/<File already exists and was opened to append data.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::AutoSepEnable	JSaveCsv2.h	/^  bool AutoSepEnable; \/\/\/<Enable or disable auto separator change according configuration (def=true).$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::CsvSepComa	JSaveCsv2.h	/^  const bool CsvSepComa;   \/\/\/<Separator character in CSV files (0=semicolon, 1=coma).$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::Data	JSaveCsv2.h	/^  std::string Data;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::DataLineEmpty	JSaveCsv2.h	/^  bool DataLineEmpty;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::DataSelected	JSaveCsv2.h	/^  bool DataSelected;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::ExceptionThrown	JSaveCsv2.h	/^  bool ExceptionThrown;    \/\/\/<An exception was thrown.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::FileName	JSaveCsv2.h	/^  std::string FileName;    \/\/\/<Name of file to store data.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::FirstSaveData	JSaveCsv2.h	/^  bool FirstSaveData;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::FmtCurrent	JSaveCsv2.h	/^  std::string FmtCurrent[SizeFmt];   \/\/\/<Current formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::FmtDefault	JSaveCsv2.h	/^  std::string FmtDefault[SizeFmt];   \/\/\/<Default formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::GetAppendMode	JSaveCsv2.h	/^  bool GetAppendMode()const{ return(AppendMode); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:() const
jcsv::JSaveCsv2::GetFileName	JSaveCsv2.h	/^  std::string GetFileName()const{ return(FileName); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:() const
jcsv::JSaveCsv2::GetFmtCurrent	JSaveCsv2.h	/^  const std::string& GetFmtCurrent(TpFormat tfmt)const{ return(FmtCurrent[tfmt]); };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt) const
jcsv::JSaveCsv2::GetFmtDefault	JSaveCsv2.h	/^  const std::string& GetFmtDefault(TpFormat tfmt)const{ return(FmtDefault[tfmt]); };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt) const
jcsv::JSaveCsv2::Head	JSaveCsv2.h	/^  std::string Head;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::HeadLineEmpty	JSaveCsv2.h	/^  bool HeadLineEmpty;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::InitFmt	JSaveCsv2.cpp	/^void JSaveCsv2::InitFmt(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
jcsv::JSaveCsv2::InitFmt	JSaveCsv2.h	/^  void InitFmt();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
jcsv::JSaveCsv2::JSaveCsv2	JSaveCsv2.cpp	/^JSaveCsv2::JSaveCsv2(std::string fname,bool app,bool csvsepcoma):ExceptionThrown(false),App(app),CsvSepComa(csvsepcoma){$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string fname,bool app,bool csvsepcoma)
jcsv::JSaveCsv2::JSaveCsv2	JSaveCsv2.h	/^  JSaveCsv2(std::string fname,bool app,bool csvsepcoma);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(std::string fname,bool app,bool csvsepcoma)
jcsv::JSaveCsv2::OpenFile	JSaveCsv2.cpp	/^void JSaveCsv2::OpenFile(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
jcsv::JSaveCsv2::OpenFile	JSaveCsv2.h	/^  void OpenFile();$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:()
jcsv::JSaveCsv2::Pf	JSaveCsv2.h	/^  std::fstream *Pf;$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::Reset	JSaveCsv2.cpp	/^void JSaveCsv2::Reset(){$/;"	f	class:jcsv::JSaveCsv2	signature:()
jcsv::JSaveCsv2::Reset	JSaveCsv2.h	/^  void Reset();$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:()
jcsv::JSaveCsv2::RunException	JSaveCsv2.h	/^  void RunException(const std::string &method,const std::string &msg){$/;"	f	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &method,const std::string &msg)
jcsv::JSaveCsv2::RunException	JSaveCsv2.h	/^  void RunException(const std::string &method,const std::string &msg,const std::string &file){$/;"	f	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &method,const std::string &msg,const std::string &file)
jcsv::JSaveCsv2::Save	JSaveCsv2.cpp	/^void JSaveCsv2::Save(const std::string &tx){$/;"	f	class:jcsv::JSaveCsv2	signature:(const std::string &tx)
jcsv::JSaveCsv2::Save	JSaveCsv2.h	/^  void Save(const std::string &tx);$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(const std::string &tx)
jcsv::JSaveCsv2::SaveData	JSaveCsv2.cpp	/^void JSaveCsv2::SaveData(bool closefile){$/;"	f	class:jcsv::JSaveCsv2	signature:(bool closefile)
jcsv::JSaveCsv2::SaveData	JSaveCsv2.h	/^  void SaveData(bool closefile=false);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(bool closefile=false)
jcsv::JSaveCsv2::SetData	JSaveCsv2.h	/^  void SetData(){ DataSelected=true;  }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:()
jcsv::JSaveCsv2::SetFmtCurrent	JSaveCsv2.h	/^  void SetFmtCurrent(TpFormat tfmt,const std::string &fmt){ FmtCurrent[tfmt]=fmt; };$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(TpFormat tfmt,const std::string &fmt)
jcsv::JSaveCsv2::SetHead	JSaveCsv2.h	/^  void SetHead(){ DataSelected=false; }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:()
jcsv::JSaveCsv2::SetSeparators	JSaveCsv2.cpp	/^void JSaveCsv2::SetSeparators(std::string &tx)const{$/;"	f	class:jcsv::JSaveCsv2	signature:(std::string &tx) const
jcsv::JSaveCsv2::SetSeparators	JSaveCsv2.h	/^  void SetSeparators(std::string &tx)const;$/;"	p	class:jcsv::JSaveCsv2	access:private	signature:(std::string &tx) const
jcsv::JSaveCsv2::SizeFmt	JSaveCsv2.h	/^  static const unsigned SizeFmt=18;  \/\/\/<Number of different formats.$/;"	m	class:jcsv::JSaveCsv2	access:private
jcsv::JSaveCsv2::ToStr	JSaveCsv2.cpp	/^std::string JSaveCsv2::ToStr(const char *format,...)const{$/;"	f	class:jcsv::JSaveCsv2	signature:(const char *format,...) const
jcsv::JSaveCsv2::ToStr	JSaveCsv2.h	/^  std::string ToStr(const char *format,...)const;$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const char *format,...) const
jcsv::JSaveCsv2::operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const AutoSepOff &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const AutoSepOff &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const AutoSepOn &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const AutoSepOn &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Endl &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Endl &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Fmt &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Fmt &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Sep &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Sep &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(byte     v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(byte v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(char     v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(char v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const AutoSepOff &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const AutoSepOff &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const AutoSepOn &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const AutoSepOn &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Endl &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Endl &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Fmt &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Fmt &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Sep &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Sep &obj)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const std::string &v){ AddStr(v); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const std::string &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble2 &v){ AddStr(ToStr(FmtCurrent[TpDouble2 ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble2 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble3 &v){ AddStr(ToStr(FmtCurrent[TpDouble3 ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble3 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble4 &v){ AddStr(ToStr(FmtCurrent[TpDouble4 ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble4 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat2  &v){ AddStr(ToStr(FmtCurrent[TpFloat2  ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat2 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat3  &v){ AddStr(ToStr(FmtCurrent[TpFloat3  ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat3 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat4  &v){ AddStr(ToStr(FmtCurrent[TpFloat4  ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat4 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint2   &v){ AddStr(ToStr(FmtCurrent[TpSigned2  ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint2 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint3   &v){ AddStr(ToStr(FmtCurrent[TpSigned3  ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint3 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint4   &v){ AddStr(ToStr(FmtCurrent[TpSigned4  ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint4 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint2  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned2].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint2 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint3  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned3].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint3 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint4  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned4].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint4 &v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(double   v){ AddStr(ToStr(FmtCurrent[TpDouble1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(double v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(float    v){ AddStr(ToStr(FmtCurrent[TpFloat1   ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(float v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(int      v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(int v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(llong    v){ AddStr(ToStr(FmtCurrent[TpLlong1   ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(llong v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(short    v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(short v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(ullong   v){ AddStr(ToStr(FmtCurrent[TpUllong1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(ullong v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(unsigned v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(unsigned v)
jcsv::JSaveCsv2::operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(word     v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(word v)
jcsv::JSaveCsv2::~JSaveCsv2	JSaveCsv2.cpp	/^JSaveCsv2::~JSaveCsv2(){ $/;"	f	class:jcsv::JSaveCsv2	signature:()
jcsv::JSaveCsv2::~JSaveCsv2	JSaveCsv2.h	/^  ~JSaveCsv2();$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:()
jcsv::Sep	JSaveCsv2.h	/^class Sep{$/;"	c	namespace:jcsv
jcsv::Sep::Count	JSaveCsv2.h	/^  const unsigned Count;$/;"	m	class:jcsv::Sep	access:public
jcsv::Sep::Sep	JSaveCsv2.h	/^  Sep(unsigned count=1):Count(count){};$/;"	f	class:jcsv::Sep	access:public	signature:(unsigned count=1)
jcsv::TpDouble1	JSaveCsv2.h	/^  TpDouble1=14,$/;"	e	enum:jcsv::__anon23
jcsv::TpDouble2	JSaveCsv2.h	/^  TpDouble2=15,$/;"	e	enum:jcsv::__anon23
jcsv::TpDouble3	JSaveCsv2.h	/^  TpDouble3=16,$/;"	e	enum:jcsv::__anon23
jcsv::TpDouble4	JSaveCsv2.h	/^  TpDouble4=17$/;"	e	enum:jcsv::__anon23
jcsv::TpFloat1	JSaveCsv2.h	/^  TpFloat1=10,$/;"	e	enum:jcsv::__anon23
jcsv::TpFloat2	JSaveCsv2.h	/^  TpFloat2=11,$/;"	e	enum:jcsv::__anon23
jcsv::TpFloat3	JSaveCsv2.h	/^  TpFloat3=12,$/;"	e	enum:jcsv::__anon23
jcsv::TpFloat4	JSaveCsv2.h	/^  TpFloat4=13,$/;"	e	enum:jcsv::__anon23
jcsv::TpFormat	JSaveCsv2.h	/^}TpFormat; $/;"	t	namespace:jcsv	typeref:enum:jcsv::__anon23
jcsv::TpLlong1	JSaveCsv2.h	/^  TpLlong1=8,$/;"	e	enum:jcsv::__anon23
jcsv::TpSigned1	JSaveCsv2.h	/^  TpSigned1=0,$/;"	e	enum:jcsv::__anon23
jcsv::TpSigned2	JSaveCsv2.h	/^  TpSigned2=1,$/;"	e	enum:jcsv::__anon23
jcsv::TpSigned3	JSaveCsv2.h	/^  TpSigned3=2,$/;"	e	enum:jcsv::__anon23
jcsv::TpSigned4	JSaveCsv2.h	/^  TpSigned4=3,$/;"	e	enum:jcsv::__anon23
jcsv::TpUllong1	JSaveCsv2.h	/^  TpUllong1=9,$/;"	e	enum:jcsv::__anon23
jcsv::TpUnsigned1	JSaveCsv2.h	/^  TpUnsigned1=4,$/;"	e	enum:jcsv::__anon23
jcsv::TpUnsigned2	JSaveCsv2.h	/^  TpUnsigned2=5,$/;"	e	enum:jcsv::__anon23
jcsv::TpUnsigned3	JSaveCsv2.h	/^  TpUnsigned3=6,$/;"	e	enum:jcsv::__anon23
jcsv::TpUnsigned4	JSaveCsv2.h	/^  TpUnsigned4=7,$/;"	e	enum:jcsv::__anon23
key	JSpaceEParms.h	/^    std::string key;$/;"	m	struct:JSpaceEParms::__anon25	access:public
kfric	Types.h	/^  float kfric;        \/\/\/<Kinetic friction coefficient of the floating object (units:-).$/;"	m	struct:__anon45	access:public
lastChild	tinyxml.h	/^    TiXmlNode*      lastChild;$/;"	m	class:TiXmlNode	access:protected
length	JFormatFiles2.h	/^    float length;     \/\/-Length for each revolution.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
length	tinystr.h	/^    size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
limitmax	JDamping.h	/^    tdouble3 limitmax;  \/\/\/<Miximum reduction position. | Posicion de reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
limitmin	JDamping.h	/^    tdouble3 limitmin;  \/\/\/<Minimal reduction position. | Posicion de reduccion minima.$/;"	m	struct:JDamping::__anon9	access:public
limitrun	FunctionsCuda.h	/^  int limitrun;        \/\/\/<Run time limit on kernels.$/;"	m	struct:fcuda::StrGpuInfo	access:public
lineBreak	tinyxml.h	/^    TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
llong	TypesDef.h	/^typedef long long llong;$/;"	t
location	tinyxml.h	/^    TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
main	main.cpp	/^int main(int argc, char** argv){$/;"	f	signature:(int argc, char** argv)
maphostmem	FunctionsCuda.h	/^  int maphostmem;      \/\/\/<Support host page-locked memory mapping.$/;"	m	struct:fcuda::StrGpuInfo	access:public
maprealposminx	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
maprealposminy	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
maprealposminz	JSphGpu_ker.h	/^  double maprealposminx,maprealposminy,maprealposminz;$/;"	m	struct:__anon32	access:public
maprealsizex	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
maprealsizey	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
maprealsizez	JSphGpu_ker.h	/^  double maprealsizex,maprealsizey,maprealsizez;$/;"	m	struct:__anon32	access:public
mass	Types.h	/^  float mass;         \/\/\/<Mass of the object (units:Kg).$/;"	m	struct:__anon45	access:public
mass	Types.h	/^  float mass;       \/\/\/<Mass of the floating object (units:Kg).$/;"	m	struct:__anon42	access:public
massb	JSphGpu_ker.h	/^  float massb;              \/\/\/<Mass of a boundary particle.$/;"	m	struct:__anon32	access:public
massbound	JSpaceCtes.h	/^    double massbound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
massf	JSphGpu_ker.h	/^  float massf;              \/\/\/<Mass of a fluid particle.$/;"	m	struct:__anon32	access:public
massfluid	JSpaceCtes.h	/^    double massfluid;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
massp	Types.h	/^  float massp;        \/\/\/<Mass of the particle of the floating object (units:Kg).$/;"	m	struct:__anon45	access:public
massp	Types.h	/^  float massp;      \/\/\/<Mass of the particle of the floating object (units:Kg).$/;"	m	struct:__anon42	access:public
max	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
max1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
max2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
max3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
maxthblock	FunctionsCuda.h	/^  int maxthblock;      \/\/\/<Maximum threads per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
maxthmp	FunctionsCuda.h	/^  int maxthmp;         \/\/\/<Maximum threads per MP.$/;"	m	struct:fcuda::StrGpuInfo	access:public
mean	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
mean1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
mean2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
mean3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
memorycpualloc	JSph.h	/^    llong memorycpualloc;$/;"	m	struct:JSph::__anon30	access:public
memorynctalloc	JSph.h	/^    llong memorynctalloc;$/;"	m	struct:JSph::__anon30	access:public
memorynctused	JSph.h	/^    llong memorynctused;$/;"	m	struct:JSph::__anon30	access:public
memorynpalloc	JSph.h	/^    llong memorynpalloc;$/;"	m	struct:JSph::__anon30	access:public
memorynpused	JSph.h	/^    llong memorynpused;$/;"	m	struct:JSph::__anon30	access:public
min	JFormatFiles2.h	/^    double min,max,mean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
min1	JFormatFiles2.h	/^    double min1,max1,mean1;$/;"	m	struct:JFormatFiles2::__anon13	access:public
min2	JFormatFiles2.h	/^    double min2,max2,mean2;$/;"	m	struct:JFormatFiles2::__anon13	access:public
min3	JFormatFiles2.h	/^    double min3,max3,mean3;$/;"	m	struct:JFormatFiles2::__anon13	access:public
mkbound	JGaugeItem.h	/^    word mkbound;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
mkbound	Types.h	/^  word mkbound;     \/\/\/<MkBound of the floating object.$/;"	m	struct:__anon42	access:public
mklist	JSpaceParts.h	/^    std::string mklist[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
modified	JGaugeItem.h	/^    bool modified;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
movlimit	JSphGpu_ker.h	/^  float movlimit;$/;"	m	struct:__anon32	access:public
mp	FunctionsCuda.h	/^  int mp;              \/\/\/<Multiprocessors.$/;"	m	struct:fcuda::StrGpuInfo	access:public
mt	randomc.h	/^   uint32_t mt[MERS_N];                \/\/ State vector$/;"	m	class:CRandomMersenne	access:private
mti	randomc.h	/^   int mti;                            \/\/ Index into mt$/;"	m	class:CRandomMersenne	access:private
name	FunctionsCuda.h	/^  std::string name;    \/\/\/<GPU name.$/;"	m	struct:fcuda::StrGpuInfo	access:public
name	JBinaryData.h	/^    std::string name;$/;"	m	struct:JBinaryData::__anon7	access:public
name	JFormatFiles2.h	/^    std::string name; \/\/"name:outputformat:units", e.g. "velocity:%f:m\/s"$/;"	m	struct:JFormatFiles2::__anon12	access:public
name	JFormatFiles2.h	/^    std::string name;$/;"	m	struct:JFormatFiles2::__anon13	access:public
name	tinyxml.h	/^    TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
nbound	JSphGpu_ker.h	/^  unsigned nbound;$/;"	m	struct:__anon32	access:public
nct	JSph.h	/^    unsigned nct;        \/\/\/<Number of cells used in the divide.                                                           | Numero de celdas usadas en el divide.                                                    $/;"	m	struct:JSph::__anon30	access:public
newnp	JSph.h	/^    unsigned newnp;      \/\/\/<Number of new fluid particles (inlet conditions)                                              | Numero de nuevas particulas fluid (inlet conditions).                                    $/;"	m	struct:JSph::__anon30	access:public
next	tinyxml.h	/^    TiXmlAttribute* next;$/;"	m	class:TiXmlAttribute	access:private
next	tinyxml.h	/^    TiXmlNode*      next;$/;"	m	class:TiXmlNode	access:protected
nmk	JSpaceParts.h	/^    unsigned nmk[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
node	tinyxml.h	/^    TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
np	JSpaceParts.h	/^    unsigned np[4];$/;"	m	struct:JSpaceParts::__anon26	access:public
npbin	JSph.h	/^    unsigned npbin;      \/\/\/<Number of boundary particles within the area of the divide (includes periodic particles).     | Numero de particulas bound dentro del area del divide (incluye particulas periodicas).$/;"	m	struct:JSph::__anon30	access:public
npbout	JSph.h	/^    unsigned npbout;     \/\/\/<Number of boundary particles outside of the area of the divide (includes periodic particles). | Numero de particulas bound fuera del area del divide (incluye particulas periodicas).    $/;"	m	struct:JSph::__anon30	access:public
npbper	JSph.h	/^    unsigned npbper;     \/\/\/<Number of periodic boundary particles (inside and outside the area of the split).             | Numero de particulas bound periodicas (dentro y fuera del area del divide).              $/;"	m	struct:JSph::__anon30	access:public
npf	JSph.h	/^    unsigned npf;        \/\/\/<Number of fluid particles (includes periodic particles).                                      | Numero de particulas fluid (incluye particulas periodicas).                              $/;"	m	struct:JSph::__anon30	access:public
npfper	JSph.h	/^    unsigned npfper;     \/\/\/<Number of periodic fluid particles.                                                           | Numero de particulas fluid periodicas.                                                   $/;"	m	struct:JSph::__anon30	access:public
npos	tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
npos	tinystr.h	/^    static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString	access:public
nside	JFormatFiles2.h	/^    int nside;        \/\/-Number of sections for each revolution.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
nullrep_	tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
nullrep_	tinystr.h	/^    static Rep nullrep_;$/;"	m	class:TiXmlString	access:private
num	JFormatFiles2.h	/^    ullong num;$/;"	m	struct:JFormatFiles2::__anon13	access:public
num	JSaveDt.h	/^    unsigned num;$/;"	m	struct:JSaveDt::__anon24	access:public
od_wdeltap	JSph.h	/^    float od_wdeltap;        \/\/\/<Parameter for tensile instability correction.  $/;"	m	struct:JSph::__anon29	access:public
omp_get_max_threads	OmpDefs.h	36;"	d
omp_get_thread_num	OmpDefs.h	35;"	d
operator !=	TypesDef.h	/^inline bool   operator !=(const tint2& a,const tint2& b){ return(a.x!=b.x || a.y!=b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator !=	TypesDef.h	/^inline bool   operator !=(const tint3& a, const tint3& b){ return(a.x!=b.x || a.y!=b.y || a.z!=b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator !=	TypesDef.h	/^inline bool   operator !=(const tuint2& a,const tuint2& b){ return(a.x!=b.x || a.y!=b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator !=	TypesDef.h	/^inline bool   operator !=(const tuint3& a, const tuint3& b){ return(a.x!=b.x || a.y!=b.y || a.z!=b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tdouble2& a, const tdouble2& b){ return(a.x!=b.x||a.y!=b.y); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tdouble3& a, const tdouble3& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tdouble4& a, const tdouble4& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z||a.w!=b.w); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tfloat2& a, const tfloat2& b){ return(a.x!=b.x||a.y!=b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tfloat3& a, const tfloat3& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tfloat4& a, const tfloat4& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z||a.w!=b.w); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tint4& a, const tint4& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z||a.w!=b.w); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tmatrix3d& a, const tmatrix3d& b){ return(a.a11!=b.a11 || a.a12!=b.a12 || a.a13!=b.a13 || a.a21!=b.a21 || a.a22!=b.a22 || a.a23!=b.a23 || a.a31!=b.a31 || a.a32!=b.a32 || a.a33!=b.a33); }$/;"	f	signature:(const tmatrix3d& a, const tmatrix3d& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tmatrix3f& a, const tmatrix3f& b){ return(a.a11!=b.a11 || a.a12!=b.a12 || a.a13!=b.a13 || a.a21!=b.a21 || a.a22!=b.a22 || a.a23!=b.a23 || a.a31!=b.a31 || a.a32!=b.a32 || a.a33!=b.a33); }$/;"	f	signature:(const tmatrix3f& a, const tmatrix3f& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tmatrix4d& a, const tmatrix4d& b){ return(a.a11!=b.a11 || a.a12!=b.a12 || a.a13!=b.a13 || a.a14!=b.a14 || a.a21!=b.a21 || a.a22!=b.a22 || a.a23!=b.a23 || a.a24!=b.a24 || a.a31!=b.a31 || a.a32!=b.a32 || a.a33!=b.a33 || a.a34!=b.a34 || a.a41!=b.a41 || a.a42!=b.a42 || a.a43!=b.a43 || a.a44!=b.a44); }$/;"	f	signature:(const tmatrix4d& a, const tmatrix4d& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tmatrix4f& a, const tmatrix4f& b){ return(a.a11!=b.a11 || a.a12!=b.a12 || a.a13!=b.a13 || a.a14!=b.a14 || a.a21!=b.a21 || a.a22!=b.a22 || a.a23!=b.a23 || a.a24!=b.a24 || a.a31!=b.a31 || a.a32!=b.a32 || a.a33!=b.a33 || a.a34!=b.a34 || a.a41!=b.a41 || a.a42!=b.a42 || a.a43!=b.a43 || a.a44!=b.a44); }$/;"	f	signature:(const tmatrix4f& a, const tmatrix4f& b)
operator !=	TypesDef.h	/^inline bool operator !=(const tuint4& a, const tuint4& b){ return(a.x!=b.x||a.y!=b.y||a.z!=b.z||a.w!=b.w); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator !=	tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator !=	tinystr.h	/^inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }$/;"	f	signature:(const TiXmlString & a, const char* b)
operator !=	tinystr.h	/^inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }$/;"	f	signature:(const char* a, const TiXmlString & b)
operator *	TypesDef.h	/^inline tdouble2 operator *(const tdouble2& a, const double& b){ return(TDouble2(a.x*b,a.y*b)); }$/;"	f	signature:(const tdouble2& a, const double& b)
operator *	TypesDef.h	/^inline tdouble2 operator *(const tdouble2& a, const tdouble2& b){ return(TDouble2(a.x*b.x,a.y*b.y)); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator *	TypesDef.h	/^inline tdouble3 operator *(const tdouble3& a, const double& b){ return(TDouble3(a.x*b,a.y*b,a.z*b)); }$/;"	f	signature:(const tdouble3& a, const double& b)
operator *	TypesDef.h	/^inline tdouble3 operator *(const tdouble3& a, const tdouble3& b){ return(TDouble3(a.x*b.x,a.y*b.y,a.z*b.z)); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator *	TypesDef.h	/^inline tdouble4 operator *(const tdouble4& a, const tdouble4& b){ return(TDouble4(a.x*b.x,a.y*b.y,a.z*b.z,a.w*b.w)); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator *	TypesDef.h	/^inline tfloat2 operator *(const tfloat2& a, const float& b){ return(TFloat2(a.x*b,a.y*b)); }$/;"	f	signature:(const tfloat2& a, const float& b)
operator *	TypesDef.h	/^inline tfloat2 operator *(const tfloat2& a, const tfloat2& b){ return(TFloat2(a.x*b.x,a.y*b.y)); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator *	TypesDef.h	/^inline tfloat3 operator *(const tfloat3& a, const float& b){ return(TFloat3(a.x*b,a.y*b,a.z*b)); }$/;"	f	signature:(const tfloat3& a, const float& b)
operator *	TypesDef.h	/^inline tfloat3 operator *(const tfloat3& a, const tfloat3& b){ return(TFloat3(a.x*b.x,a.y*b.y,a.z*b.z)); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator *	TypesDef.h	/^inline tfloat4 operator *(const tfloat4& a, const tfloat4& b){ return(TFloat4(a.x*b.x,a.y*b.y,a.z*b.z,a.w*b.w)); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator *	TypesDef.h	/^inline tint2 operator  *(const tint2& a,const int& b){ return(TInt2(a.x*b,a.y*b)); }$/;"	f	signature:(const tint2& a,const int& b)
operator *	TypesDef.h	/^inline tint2 operator  *(const tint2& a,const tint2& b){ return(TInt2(a.x*b.x,a.y*b.y)); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator *	TypesDef.h	/^inline tint3 operator  *(const tint3& a, const int& b){ return(TInt3(a.x*b,a.y*b,a.z*b)); }$/;"	f	signature:(const tint3& a, const int& b)
operator *	TypesDef.h	/^inline tint3 operator  *(const tint3& a, const tint3& b){ return(TInt3(a.x*b.x,a.y*b.y,a.z*b.z)); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator *	TypesDef.h	/^inline tint4 operator *(const tint4& a, const tint4& b){ return(TInt4(a.x*b.x,a.y*b.y,a.z*b.z,a.w*b.w)); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator *	TypesDef.h	/^inline tuint2 operator  *(const tuint2& a,const tuint2& b){ return(TUint2(a.x*b.x,a.y*b.y)); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator *	TypesDef.h	/^inline tuint2 operator  *(const tuint2& a,const unsigned& b){ return(TUint2(a.x*b,a.y*b)); }$/;"	f	signature:(const tuint2& a,const unsigned& b)
operator *	TypesDef.h	/^inline tuint3 operator  *(const tuint3& a, const tuint3& b){ return(TUint3(a.x*b.x,a.y*b.y,a.z*b.z)); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator *	TypesDef.h	/^inline tuint3 operator  *(const tuint3& a, const unsigned& b){ return(TUint3(a.x*b,a.y*b,a.z*b)); }$/;"	f	signature:(const tuint3& a, const unsigned& b)
operator *	TypesDef.h	/^inline tuint4 operator *(const tuint4& a, const tuint4& b){ return(TUint4(a.x*b.x,a.y*b.y,a.z*b.z,a.w*b.w)); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator +	TypesDef.h	/^inline tdouble2 operator +(const tdouble2& a, const double& b){ return(TDouble2(a.x+b,a.y+b)); }$/;"	f	signature:(const tdouble2& a, const double& b)
operator +	TypesDef.h	/^inline tdouble2 operator +(const tdouble2& a, const tdouble2& b){ return(TDouble2(a.x+b.x,a.y+b.y)); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator +	TypesDef.h	/^inline tdouble3 operator +(const tdouble3& a, const double& b){ return(TDouble3(a.x+b,a.y+b,a.z+b)); }$/;"	f	signature:(const tdouble3& a, const double& b)
operator +	TypesDef.h	/^inline tdouble3 operator +(const tdouble3& a, const tdouble3& b){ return(TDouble3(a.x+b.x,a.y+b.y,a.z+b.z)); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator +	TypesDef.h	/^inline tdouble4 operator +(const tdouble4& a, const tdouble4& b){ return(TDouble4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator +	TypesDef.h	/^inline tfloat2 operator +(const tfloat2& a, const float& b){ return(TFloat2(a.x+b,a.y+b)); }$/;"	f	signature:(const tfloat2& a, const float& b)
operator +	TypesDef.h	/^inline tfloat2 operator +(const tfloat2& a, const tfloat2& b){ return(TFloat2(a.x+b.x,a.y+b.y)); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator +	TypesDef.h	/^inline tfloat3 operator +(const tfloat3& a, const float& b){ return(TFloat3(a.x+b,a.y+b,a.z+b)); }$/;"	f	signature:(const tfloat3& a, const float& b)
operator +	TypesDef.h	/^inline tfloat3 operator +(const tfloat3& a, const tfloat3& b){ return(TFloat3(a.x+b.x,a.y+b.y,a.z+b.z)); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator +	TypesDef.h	/^inline tfloat4 operator +(const tfloat4& a, const tfloat4& b){ return(TFloat4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator +	TypesDef.h	/^inline tint2 operator  +(const tint2& a,const int& b){ return(TInt2(a.x+b,a.y+b)); }$/;"	f	signature:(const tint2& a,const int& b)
operator +	TypesDef.h	/^inline tint2 operator  +(const tint2& a,const tint2& b){ return(TInt2(a.x+b.x,a.y+b.y)); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator +	TypesDef.h	/^inline tint3 operator  +(const tint3& a, const int& b){ return(TInt3(a.x+b,a.y+b,a.z+b)); }$/;"	f	signature:(const tint3& a, const int& b)
operator +	TypesDef.h	/^inline tint3 operator  +(const tint3& a, const tint3& b){ return(TInt3(a.x+b.x,a.y+b.y,a.z+b.z)); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator +	TypesDef.h	/^inline tint4 operator +(const tint4& a, const tint4& b){ return(TInt4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator +	TypesDef.h	/^inline tuint2 operator  +(const tuint2& a,const tuint2& b){ return(TUint2(a.x+b.x,a.y+b.y)); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator +	TypesDef.h	/^inline tuint2 operator  +(const tuint2& a,const unsigned& b){ return(TUint2(a.x+b,a.y+b)); }$/;"	f	signature:(const tuint2& a,const unsigned& b)
operator +	TypesDef.h	/^inline tuint3 operator  +(const tuint3& a, const tuint3& b){ return(TUint3(a.x+b.x,a.y+b.y,a.z+b.z)); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator +	TypesDef.h	/^inline tuint3 operator  +(const tuint3& a, const unsigned& b){ return(TUint3(a.x+b,a.y+b,a.z+b)); }$/;"	f	signature:(const tuint3& a, const unsigned& b)
operator +	TypesDef.h	/^inline tuint4 operator +(const tuint4& a, const tuint4& b){ return(TUint4(a.x+b.x,a.y+b.y,a.z+b.z,a.w+b.w)); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator +	tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const char* b)$/;"	f	signature:(const TiXmlString & a, const char* b)
operator +	tinystr.cpp	/^TiXmlString operator + (const char* a, const TiXmlString & b)$/;"	f	signature:(const char* a, const TiXmlString & b)
operator +	tinystr.h	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b);$/;"	p	signature:(const TiXmlString & a, const TiXmlString & b)
operator +	tinystr.h	/^TiXmlString operator + (const TiXmlString & a, const char* b);$/;"	p	signature:(const TiXmlString & a, const char* b)
operator +	tinystr.h	/^TiXmlString operator + (const char* a, const TiXmlString & b);$/;"	p	signature:(const char* a, const TiXmlString & b)
operator +=	tinystr.h	/^    TiXmlString& operator += (char single)$/;"	f	class:TiXmlString	access:public	signature:(char single)
operator +=	tinystr.h	/^    TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & suffix)
operator +=	tinystr.h	/^    TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString	access:public	signature:(const char * suffix)
operator -	TypesDef.h	/^inline tdouble2 operator -(const tdouble2& a, const double& b){ return(TDouble2(a.x-b,a.y-b)); }$/;"	f	signature:(const tdouble2& a, const double& b)
operator -	TypesDef.h	/^inline tdouble2 operator -(const tdouble2& a, const tdouble2& b){ return(TDouble2(a.x-b.x,a.y-b.y)); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator -	TypesDef.h	/^inline tdouble3 operator -(const tdouble3& a, const double& b){ return(TDouble3(a.x-b,a.y-b,a.z-b)); }$/;"	f	signature:(const tdouble3& a, const double& b)
operator -	TypesDef.h	/^inline tdouble3 operator -(const tdouble3& a, const tdouble3& b){ return(TDouble3(a.x-b.x,a.y-b.y,a.z-b.z)); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator -	TypesDef.h	/^inline tdouble4 operator -(const tdouble4& a, const tdouble4& b){ return(TDouble4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator -	TypesDef.h	/^inline tfloat2 operator -(const tfloat2& a, const float& b){ return(TFloat2(a.x-b,a.y-b)); }$/;"	f	signature:(const tfloat2& a, const float& b)
operator -	TypesDef.h	/^inline tfloat2 operator -(const tfloat2& a, const tfloat2& b){ return(TFloat2(a.x-b.x,a.y-b.y)); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator -	TypesDef.h	/^inline tfloat3 operator -(const tfloat3& a, const float& b){ return(TFloat3(a.x-b,a.y-b,a.z-b)); }$/;"	f	signature:(const tfloat3& a, const float& b)
operator -	TypesDef.h	/^inline tfloat3 operator -(const tfloat3& a, const tfloat3& b){ return(TFloat3(a.x-b.x,a.y-b.y,a.z-b.z)); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator -	TypesDef.h	/^inline tfloat4 operator -(const tfloat4& a, const tfloat4& b){ return(TFloat4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator -	TypesDef.h	/^inline tint2 operator  -(const tint2& a,const int& b){ return(TInt2(a.x-b,a.y-b)); }$/;"	f	signature:(const tint2& a,const int& b)
operator -	TypesDef.h	/^inline tint2 operator  -(const tint2& a,const tint2& b){ return(TInt2(a.x-b.x,a.y-b.y)); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator -	TypesDef.h	/^inline tint3 operator  -(const tint3& a, const int& b){ return(TInt3(a.x-b,a.y-b,a.z-b)); }$/;"	f	signature:(const tint3& a, const int& b)
operator -	TypesDef.h	/^inline tint3 operator  -(const tint3& a, const tint3& b){ return(TInt3(a.x-b.x,a.y-b.y,a.z-b.z)); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator -	TypesDef.h	/^inline tint4 operator -(const tint4& a, const tint4& b){ return(TInt4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator -	TypesDef.h	/^inline tuint2 operator  -(const tuint2& a,const tuint2& b){ return(TUint2(a.x-b.x,a.y-b.y)); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator -	TypesDef.h	/^inline tuint2 operator  -(const tuint2& a,const unsigned& b){ return(TUint2(a.x-b,a.y-b)); }$/;"	f	signature:(const tuint2& a,const unsigned& b)
operator -	TypesDef.h	/^inline tuint3 operator  -(const tuint3& a, const tuint3& b){ return(TUint3(a.x-b.x,a.y-b.y,a.z-b.z)); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator -	TypesDef.h	/^inline tuint3 operator  -(const tuint3& a, const unsigned& b){ return(TUint3(a.x-b,a.y-b,a.z-b)); }$/;"	f	signature:(const tuint3& a, const unsigned& b)
operator -	TypesDef.h	/^inline tuint4 operator -(const tuint4& a, const tuint4& b){ return(TUint4(a.x-b.x,a.y-b.y,a.z-b.z,a.w-b.w)); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator /	TypesDef.h	/^inline tdouble2 operator \/(const tdouble2& a, const double& b){ return(TDouble2(a.x\/b,a.y\/b)); }$/;"	f	signature:(const tdouble2& a, const double& b)
operator /	TypesDef.h	/^inline tdouble2 operator \/(const tdouble2& a, const tdouble2& b){ return(TDouble2(a.x\/b.x,a.y\/b.y)); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator /	TypesDef.h	/^inline tdouble3 operator \/(const tdouble3& a, const double& b){ return(TDouble3(a.x\/b,a.y\/b,a.z\/b)); }$/;"	f	signature:(const tdouble3& a, const double& b)
operator /	TypesDef.h	/^inline tdouble3 operator \/(const tdouble3& a, const tdouble3& b){ return(TDouble3(a.x\/b.x,a.y\/b.y,a.z\/b.z)); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator /	TypesDef.h	/^inline tdouble4 operator \/(const tdouble4& a, const tdouble4& b){ return(TDouble4(a.x\/b.x,a.y\/b.y,a.z\/b.z,a.w\/b.w)); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator /	TypesDef.h	/^inline tfloat2 operator \/(const tfloat2& a, const float& b){ return(TFloat2(a.x\/b,a.y\/b)); }$/;"	f	signature:(const tfloat2& a, const float& b)
operator /	TypesDef.h	/^inline tfloat2 operator \/(const tfloat2& a, const tfloat2& b){ return(TFloat2(a.x\/b.x,a.y\/b.y)); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator /	TypesDef.h	/^inline tfloat3 operator \/(const tfloat3& a, const float& b){ return(TFloat3(a.x\/b,a.y\/b,a.z\/b)); }$/;"	f	signature:(const tfloat3& a, const float& b)
operator /	TypesDef.h	/^inline tfloat3 operator \/(const tfloat3& a, const tfloat3& b){ return(TFloat3(a.x\/b.x,a.y\/b.y,a.z\/b.z)); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator /	TypesDef.h	/^inline tfloat4 operator \/(const tfloat4& a, const tfloat4& b){ return(TFloat4(a.x\/b.x,a.y\/b.y,a.z\/b.z,a.w\/b.w)); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator /	TypesDef.h	/^inline tint2 operator  \/(const tint2& a,const int& b){ return(TInt2(a.x\/b,a.y\/b)); }$/;"	f	signature:(const tint2& a,const int& b)
operator /	TypesDef.h	/^inline tint2 operator  \/(const tint2& a,const tint2& b){ return(TInt2(a.x\/b.x,a.y\/b.y)); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator /	TypesDef.h	/^inline tint3 operator  \/(const tint3& a, const int& b){ return(TInt3(a.x\/b,a.y\/b,a.z\/b)); }$/;"	f	signature:(const tint3& a, const int& b)
operator /	TypesDef.h	/^inline tint3 operator  \/(const tint3& a, const tint3& b){ return(TInt3(a.x\/b.x,a.y\/b.y,a.z\/b.z)); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator /	TypesDef.h	/^inline tint4 operator \/(const tint4& a, const tint4& b){ return(TInt4(a.x\/b.x,a.y\/b.y,a.z\/b.z,a.w\/b.w)); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator /	TypesDef.h	/^inline tuint2 operator  \/(const tuint2& a,const tuint2& b){ return(TUint2(a.x\/b.x,a.y\/b.y)); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator /	TypesDef.h	/^inline tuint2 operator  \/(const tuint2& a,const unsigned& b){ return(TUint2(a.x\/b,a.y\/b)); }$/;"	f	signature:(const tuint2& a,const unsigned& b)
operator /	TypesDef.h	/^inline tuint3 operator  \/(const tuint3& a, const tuint3& b){ return(TUint3(a.x\/b.x,a.y\/b.y,a.z\/b.z)); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator /	TypesDef.h	/^inline tuint3 operator  \/(const tuint3& a, const unsigned& b){ return(TUint3(a.x\/b,a.y\/b,a.z\/b)); }$/;"	f	signature:(const tuint3& a, const unsigned& b)
operator /	TypesDef.h	/^inline tuint4 operator \/(const tuint4& a, const tuint4& b){ return(TUint4(a.x\/b.x,a.y\/b.y,a.z\/b.z,a.w\/b.w)); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator <	TypesDef.h	/^inline bool   operator  <(const tint2& a,const tint2& b){ return(a.x<b.x && a.y<b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator <	TypesDef.h	/^inline bool   operator  <(const tint3& a, const tint3& b){ return(a.x <b.x && a.y <b.y && a.z <b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator <	TypesDef.h	/^inline bool   operator  <(const tuint2& a,const tuint2& b){ return(a.x<b.x && a.y<b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator <	TypesDef.h	/^inline bool   operator  <(const tuint3& a, const tuint3& b){ return(a.x <b.x && a.y <b.y && a.z <b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator <	TypesDef.h	/^inline bool operator <(const tdouble3& a, const tdouble3& b){ return(a.x<b.x&&a.y<b.y&&a.z<b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator <	TypesDef.h	/^inline bool operator <(const tfloat2& a, const tfloat2& b){ return(a.x<b.x&&a.y<b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator <	TypesDef.h	/^inline bool operator <(const tfloat3& a, const tfloat3& b){ return(a.x<b.x&&a.y<b.y&&a.z<b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator <	tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator <	tinyxml.h	/^    bool operator<( const TiXmlAttribute& rhs )  const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const AutoSepOff &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const AutoSepOff &obj)
operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const AutoSepOn &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const AutoSepOn &obj)
operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Endl &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Endl &obj)
operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Fmt &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Fmt &obj)
operator <<	JSaveCsv2.cpp	/^JSaveCsv2& JSaveCsv2::operator <<(const Sep &obj){$/;"	f	class:jcsv::JSaveCsv2	signature:(const Sep &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(byte     v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(byte v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(char     v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(char v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const AutoSepOff &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const AutoSepOff &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const AutoSepOn &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const AutoSepOn &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Endl &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Endl &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Fmt &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Fmt &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const Sep &obj);$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:(const Sep &obj)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const std::string &v){ AddStr(v); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const std::string &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble2 &v){ AddStr(ToStr(FmtCurrent[TpDouble2 ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble2 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble3 &v){ AddStr(ToStr(FmtCurrent[TpDouble3 ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble3 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tdouble4 &v){ AddStr(ToStr(FmtCurrent[TpDouble4 ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tdouble4 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat2  &v){ AddStr(ToStr(FmtCurrent[TpFloat2  ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat2 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat3  &v){ AddStr(ToStr(FmtCurrent[TpFloat3  ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat3 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tfloat4  &v){ AddStr(ToStr(FmtCurrent[TpFloat4  ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tfloat4 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint2   &v){ AddStr(ToStr(FmtCurrent[TpSigned2  ].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint2 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint3   &v){ AddStr(ToStr(FmtCurrent[TpSigned3  ].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint3 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tint4   &v){ AddStr(ToStr(FmtCurrent[TpSigned4  ].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tint4 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint2  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned2].c_str(),v.x,v.y));         return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint2 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint3  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned3].c_str(),v.x,v.y,v.z));     return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint3 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(const tuint4  &v){ AddStr(ToStr(FmtCurrent[TpUnsigned4].c_str(),v.x,v.y,v.z,v.w)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(const tuint4 &v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(double   v){ AddStr(ToStr(FmtCurrent[TpDouble1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(double v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(float    v){ AddStr(ToStr(FmtCurrent[TpFloat1   ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(float v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(int      v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(int v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(llong    v){ AddStr(ToStr(FmtCurrent[TpLlong1   ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(llong v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(short    v){ AddStr(ToStr(FmtCurrent[TpSigned1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(short v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(ullong   v){ AddStr(ToStr(FmtCurrent[TpUllong1  ].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(ullong v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(unsigned v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(unsigned v)
operator <<	JSaveCsv2.h	/^  JSaveCsv2& operator <<(word     v){ AddStr(ToStr(FmtCurrent[TpUnsigned1].c_str(),v)); return(*this); }$/;"	f	class:jcsv::JSaveCsv2	access:public	signature:(word v)
operator <<	tinystr.h	/^    TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const TiXmlString & in)
operator <<	tinystr.h	/^    TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream	access:public	signature:(const char * in)
operator <<	tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	signature:(std::ostream & out, const TiXmlNode & base)
operator <<	tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	signature:(std::string& out, const TiXmlNode& base )
operator <<	tinyxml.h	/^        friend std::ostream& operator<< (std::ostream& out, const TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::ostream& out, const TiXmlNode& base)
operator <<	tinyxml.h	/^        friend std::string& operator<< (std::string& out, const TiXmlNode& base );$/;"	p	class:TiXmlNode	access:friend	signature:(std::string& out, const TiXmlNode& base )
operator <=	TypesDef.h	/^inline bool   operator <=(const tint2& a,const tint2& b){ return(a.x<=b.x && a.y<=b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator <=	TypesDef.h	/^inline bool   operator <=(const tint3& a, const tint3& b){ return(a.x<=b.x && a.y<=b.y && a.z<=b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator <=	TypesDef.h	/^inline bool   operator <=(const tuint2& a,const tuint2& b){ return(a.x<=b.x && a.y<=b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator <=	TypesDef.h	/^inline bool   operator <=(const tuint3& a, const tuint3& b){ return(a.x<=b.x && a.y<=b.y && a.z<=b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator <=	TypesDef.h	/^inline bool operator <=(const tdouble3& a, const tdouble3& b){ return(a.x<=b.x&&a.y<=b.y&&a.z<=b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator <=	TypesDef.h	/^inline bool operator <=(const tfloat2& a, const tfloat2& b){ return(a.x<=b.x&&a.y<=b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator <=	TypesDef.h	/^inline bool operator <=(const tfloat3& a, const tfloat3& b){ return(a.x<=b.x&&a.y<=b.y&&a.z<=b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator <=	tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator =	JBinaryData.cpp	/^JBinaryData& JBinaryData::operator=(const JBinaryData &src){$/;"	f	class:JBinaryData	signature:(const JBinaryData &src)
operator =	JBinaryData.h	/^  JBinaryData& operator=(const JBinaryData &src);$/;"	p	class:JBinaryData	access:public	signature:(const JBinaryData &src)
operator =	tinystr.h	/^    TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString	access:public	signature:(const TiXmlString & copy)
operator =	tinystr.h	/^    TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString	access:public	signature:(const char * copy)
operator =	tinyxml.cpp	/^void TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
operator =	tinyxml.cpp	/^void TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
operator =	tinyxml.cpp	/^void TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
operator =	tinyxml.cpp	/^void TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
operator =	tinyxml.h	/^    TiXmlHandle operator=( const TiXmlHandle& ref ) { this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
operator =	tinyxml.h	/^    void operator=( const TiXmlAttribute& base );   \/\/ not allowed.$/;"	p	class:TiXmlAttribute	access:private	signature:( const TiXmlAttribute& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlAttributeSet& ); \/\/ not allowed (as TiXmlAttribute)$/;"	p	class:TiXmlAttributeSet	access:private	signature:( const TiXmlAttributeSet& )
operator =	tinyxml.h	/^    void operator=( const TiXmlBase& base );    \/\/ not allowed.$/;"	p	class:TiXmlBase	access:private	signature:( const TiXmlBase& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlComment& base );$/;"	p	class:TiXmlComment	access:public	signature:( const TiXmlComment& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlDeclaration& copy );$/;"	p	class:TiXmlDeclaration	access:public	signature:( const TiXmlDeclaration& copy )
operator =	tinyxml.h	/^    void operator=( const TiXmlDocument& copy );$/;"	p	class:TiXmlDocument	access:public	signature:( const TiXmlDocument& copy )
operator =	tinyxml.h	/^    void operator=( const TiXmlElement& base );$/;"	p	class:TiXmlElement	access:public	signature:( const TiXmlElement& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlNode& base );    \/\/ not allowed.$/;"	p	class:TiXmlNode	access:private	signature:( const TiXmlNode& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlText& base )                             { base.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
operator =	tinyxml.h	/^    void operator=( const TiXmlUnknown& copy )                                      { copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
operator ==	TypesDef.h	/^inline bool   operator ==(const tint2& a,const tint2& b){ return(a.x==b.x && a.y==b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator ==	TypesDef.h	/^inline bool   operator ==(const tint3& a, const tint3& b){ return(a.x==b.x && a.y==b.y && a.z==b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator ==	TypesDef.h	/^inline bool   operator ==(const tuint2& a,const tuint2& b){ return(a.x==b.x && a.y==b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator ==	TypesDef.h	/^inline bool   operator ==(const tuint3& a, const tuint3& b){ return(a.x==b.x && a.y==b.y && a.z==b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tdouble2& a, const tdouble2& b){ return(a.x==b.x&&a.y==b.y); }$/;"	f	signature:(const tdouble2& a, const tdouble2& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tdouble3& a, const tdouble3& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tdouble4& a, const tdouble4& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z&&a.w==b.w); }$/;"	f	signature:(const tdouble4& a, const tdouble4& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tfloat2& a, const tfloat2& b){ return(a.x==b.x&&a.y==b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tfloat3& a, const tfloat3& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tfloat4& a, const tfloat4& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z&&a.w==b.w); }$/;"	f	signature:(const tfloat4& a, const tfloat4& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tint4& a, const tint4& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z&&a.w==b.w); }$/;"	f	signature:(const tint4& a, const tint4& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tmatrix3d& a, const tmatrix3d& b){ return(a.a11==b.a11 && a.a12==b.a12 && a.a13==b.a13 && a.a21==b.a21 && a.a22==b.a22 && a.a23==b.a23 && a.a31==b.a31 && a.a32==b.a32 && a.a33==b.a33); }$/;"	f	signature:(const tmatrix3d& a, const tmatrix3d& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tmatrix3f& a, const tmatrix3f& b){ return(a.a11==b.a11 && a.a12==b.a12 && a.a13==b.a13 && a.a21==b.a21 && a.a22==b.a22 && a.a23==b.a23 && a.a31==b.a31 && a.a32==b.a32 && a.a33==b.a33); }$/;"	f	signature:(const tmatrix3f& a, const tmatrix3f& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tmatrix4d& a, const tmatrix4d& b){ return(a.a11==b.a11 && a.a12==b.a12 && a.a13==b.a13 && a.a14==b.a14 && a.a21==b.a21 && a.a22==b.a22 && a.a23==b.a23 && a.a24==b.a24 && a.a31==b.a31 && a.a32==b.a32 && a.a33==b.a33 && a.a34==b.a34 && a.a41==b.a41 && a.a42==b.a42 && a.a43==b.a43 && a.a44==b.a44); }$/;"	f	signature:(const tmatrix4d& a, const tmatrix4d& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tmatrix4f& a, const tmatrix4f& b){ return(a.a11==b.a11 && a.a12==b.a12 && a.a13==b.a13 && a.a14==b.a14 && a.a21==b.a21 && a.a22==b.a22 && a.a23==b.a23 && a.a24==b.a24 && a.a31==b.a31 && a.a32==b.a32 && a.a33==b.a33 && a.a34==b.a34 && a.a41==b.a41 && a.a42==b.a42 && a.a43==b.a43 && a.a44==b.a44); }$/;"	f	signature:(const tmatrix4f& a, const tmatrix4f& b)
operator ==	TypesDef.h	/^inline bool operator ==(const tuint4& a, const tuint4& b){ return(a.x==b.x&&a.y==b.y&&a.z==b.z&&a.w==b.w); }$/;"	f	signature:(const tuint4& a, const tuint4& b)
operator ==	tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b)$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator ==	tinystr.h	/^inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == 0; }$/;"	f	signature:(const TiXmlString & a, const char* b)
operator ==	tinystr.h	/^inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }$/;"	f	signature:(const char* a, const TiXmlString & b)
operator ==	tinyxml.h	/^    bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >	TypesDef.h	/^inline bool   operator  >(const tint2& a,const tint2& b){ return(a.x>b.x && a.y>b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator >	TypesDef.h	/^inline bool   operator  >(const tint3& a, const tint3& b){ return(a.x >b.x && a.y >b.y && a.z >b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator >	TypesDef.h	/^inline bool   operator  >(const tuint2& a,const tuint2& b){ return(a.x>b.x && a.y>b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator >	TypesDef.h	/^inline bool   operator  >(const tuint3& a, const tuint3& b){ return(a.x >b.x && a.y >b.y && a.z >b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator >	TypesDef.h	/^inline bool operator >(const tdouble3& a, const tdouble3& b){ return(a.x>b.x&&a.y>b.y&&a.z>b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator >	TypesDef.h	/^inline bool operator >(const tfloat2& a, const tfloat2& b){ return(a.x>b.x&&a.y>b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator >	TypesDef.h	/^inline bool operator >(const tfloat3& a, const tfloat3& b){ return(a.x>b.x&&a.y>b.y&&a.z>b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator >	tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) { return b < a; }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator >	tinyxml.h	/^    bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >=	TypesDef.h	/^inline bool   operator >=(const tint2& a,const tint2& b){ return(a.x>=b.x && a.y>=b.y); }$/;"	f	signature:(const tint2& a,const tint2& b)
operator >=	TypesDef.h	/^inline bool   operator >=(const tint3& a, const tint3& b){ return(a.x>=b.x && a.y>=b.y && a.z>=b.z); }$/;"	f	signature:(const tint3& a, const tint3& b)
operator >=	TypesDef.h	/^inline bool   operator >=(const tuint2& a,const tuint2& b){ return(a.x>=b.x && a.y>=b.y); }$/;"	f	signature:(const tuint2& a,const tuint2& b)
operator >=	TypesDef.h	/^inline bool   operator >=(const tuint3& a, const tuint3& b){ return(a.x>=b.x && a.y>=b.y && a.z>=b.z); }$/;"	f	signature:(const tuint3& a, const tuint3& b)
operator >=	TypesDef.h	/^inline bool operator >=(const tdouble3& a, const tdouble3& b){ return(a.x>=b.x&&a.y>=b.y&&a.z>=b.z); }$/;"	f	signature:(const tdouble3& a, const tdouble3& b)
operator >=	TypesDef.h	/^inline bool operator >=(const tfloat2& a, const tfloat2& b){ return(a.x>=b.x&&a.y>=b.y); }$/;"	f	signature:(const tfloat2& a, const tfloat2& b)
operator >=	TypesDef.h	/^inline bool operator >=(const tfloat3& a, const tfloat3& b){ return(a.x>=b.x&&a.y>=b.y&&a.z>=b.z); }$/;"	f	signature:(const tfloat3& a, const tfloat3& b)
operator >=	tinystr.h	/^inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }$/;"	f	signature:(const TiXmlString & a, const TiXmlString & b)
operator >>	tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f	signature:(std::istream & in, TiXmlNode & base)
operator >>	tinyxml.h	/^        friend std::istream& operator >> (std::istream& in, TiXmlNode& base);$/;"	p	class:TiXmlNode	access:friend	signature:(std::istream& in, TiXmlNode& base)
operator []	tinystr.h	/^    char& operator [] (size_type index) const$/;"	f	class:TiXmlString	access:public	signature:(size_type index) const
output	JGaugeItem.h	/^    bool output;$/;"	m	struct:JGaugeItem::__anon16	access:public
outputdt	JGaugeItem.h	/^    double outputdt;$/;"	m	struct:JGaugeItem::__anon16	access:public
outputend	JGaugeItem.h	/^    double outputend;$/;"	m	struct:JGaugeItem::__anon16	access:public
outputstart	JGaugeItem.h	/^    double outputstart;$/;"	m	struct:JGaugeItem::__anon16	access:public
overlap	FunctionsCuda.h	/^  int overlap;         \/\/\/<Concurrent copy and kernel execution.$/;"	m	struct:fcuda::StrGpuInfo	access:public
overlapcount	FunctionsCuda.h	/^  int overlapcount;    \/\/\/<Number of concurrent copy and kernel execution.$/;"	m	struct:fcuda::StrGpuInfo	access:public
overlimit	JDamping.h	/^    float overlimit;    \/\/\/<Distance after limit with maximum reduction. | Distancia despues de limite con reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
ovrhopzero	JSphGpu_ker.h	/^  float ovrhopzero;         \/\/\/<ovrhopzero=1\/RhopZero$/;"	m	struct:__anon32	access:public
p	FunctionsMath.h	/^  tdouble3 p; \/\/\/<Point of rect.$/;"	m	struct:fmath::__anon2	access:public
p1	FunctionsMath.h	/^  tdouble3 p1; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
p2	FunctionsMath.h	/^  tdouble3 p2; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
p2pto	FunctionsCuda.h	/^  int p2pto[sizep2pto];         \/\/\/<GPU list with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
parent	tinyxml.h	/^    TiXmlNode*      parent;$/;"	m	class:TiXmlNode	access:protected
path	JSpaceProperties.h	/^    std::string path;$/;"	m	struct:JSpaceProperties::__anon28	access:public
pcibus	FunctionsCuda.h	/^  int pcibus;          \/\/\/<PCI Bus ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
pcidevice	FunctionsCuda.h	/^  int pcidevice;       \/\/\/<PCI location ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
pcidomain	FunctionsCuda.h	/^  int pcidomain;       \/\/\/<PCI Domain ID.$/;"	m	struct:fcuda::StrGpuInfo	access:public
periactive	JSphGpu_ker.h	/^  unsigned periactive;$/;"	m	struct:__anon32	access:public
plane	JDamping.h	/^    tdouble4 plane;     \/\/\/<Plane at the limitmin point. | Plano en el punto limitmin.$/;"	m	struct:JDamping::__anon9	access:public
point	JGaugeItem.h	/^    tfloat3 point;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
point0	JGaugeItem.h	/^    tfloat3 point0;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
point0	JGaugeItem.h	/^    tfloat3 point0;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
point2	JGaugeItem.h	/^    tfloat3 point2;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
pointer	JFormatFiles2.h	/^    const void *pointer;$/;"	m	struct:JFormatFiles2::__anon12	access:public
pointer	JFormatFiles2.h	/^    const void *pointer;$/;"	m	struct:JFormatFiles2::__anon13	access:public
poisson	Types.h	/^  float poisson;      \/\/\/<Poisson coefficient of the floating object (units:-).$/;"	m	struct:__anon45	access:public
posswl	JGaugeItem.h	/^    tfloat3 posswl;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
prev	tinyxml.h	/^    TiXmlAttribute* prev;$/;"	m	class:TiXmlAttribute	access:private
prev	tinyxml.h	/^    TiXmlNode*      prev;$/;"	m	class:TiXmlNode	access:protected
quit	tinystr.h	/^    void quit()$/;"	f	class:TiXmlString	access:private	signature:()
radius	JFormatFiles2.h	/^    float radius;     \/\/-Spring radius.$/;"	m	struct:JFormatFiles2::StrShapeSpring	access:public
radius	Types.h	/^  float radius;     \/\/\/<Maximum distance between particles and center (units:m).$/;"	m	struct:__anon42	access:public
rdma	FunctionsCuda.h	/^  bool rdma;           \/\/\/<Device supports P2P and RDMA.$/;"	m	struct:fcuda::StrGpuInfo	access:public
redumax	JDamping.h	/^    float redumax;      \/\/\/<Percentage of maximum reduction. | Porcentaje de reduccion maxima.$/;"	m	struct:JDamping::__anon9	access:public
regsblock	FunctionsCuda.h	/^  int regsblock;       \/\/\/<Registers per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
rep_	tinystr.h	/^    Rep * rep_;$/;"	m	class:TiXmlString	access:private
reserve	tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString	signature:(size_type cap)
reserve	tinystr.h	/^    void reserve (size_type cap);$/;"	p	class:TiXmlString	access:public	signature:(size_type cap)
reset	JFormatFiles2.h	/^    void reset(){ $/;"	f	struct:JFormatFiles2::StrShapeData	access:public	signature:()
reset	JFormatFiles2.h	/^    void reset(){ $/;"	f	struct:JFormatFiles2::StrShapeSpring	access:public	signature:()
restitu	Types.h	/^  float restitu;      \/\/\/<Restitution Coefficient (units:-).$/;"	m	struct:__anon45	access:public
rhop0	JSpaceCtes.h	/^    double gamma,rhop0;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
rhopzero	JSphGpu_ker.h	/^  float rhopzero;           \/\/\/<rhopzero=RhopZero$/;"	m	struct:__anon32	access:public
row	tinyxml.h	/^    int row;    \/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
savevtkpart	JGaugeItem.h	/^    bool savevtkpart;$/;"	m	struct:JGaugeItem::__anon16	access:public
scell	JSphGpu_ker.h	/^  float scell,dosh,dp;$/;"	m	struct:__anon32	access:public
sec	FunctionsMath.h	/^inline double sec(double z){ return(1.0 \/ cos(z)); }$/;"	f	namespace:fmath	signature:(double z)
selcomponent	JFormatFiles2.h	/^    bool seltotal,selcomponent;$/;"	m	struct:JFormatFiles2::__anon13	access:public
selmax	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
selmean	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
selmin	JFormatFiles2.h	/^    bool selmin,selmax,selmean;$/;"	m	struct:JFormatFiles2::__anon13	access:public
seltotal	JFormatFiles2.h	/^    bool seltotal,selcomponent;$/;"	m	struct:JFormatFiles2::__anon13	access:public
sentinel	tinyxml.h	/^    TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
set_size	tinystr.h	/^    void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString	access:private	signature:(size_type sz)
sharedmem	FunctionsCuda.h	/^  ullong sharedmem;    \/\/\/<Shared memory per block.$/;"	m	struct:fcuda::StrGpuInfo	access:public
simpleTextPrint	tinyxml.h	/^    bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
size	tinystr.h	/^        size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	access:public
size	tinystr.h	/^    size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString	access:public	signature:() const
size_type	tinystr.h	/^    typedef size_t size_type;$/;"	t	class:TiXmlString	access:public
sizep2pto	FunctionsCuda.h	/^  static const int sizep2pto=8; \/\/\/<Maximum number of GPUs with peer access to\/from.$/;"	m	struct:fcuda::StrGpuInfo	access:public
speedsound	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
speedsystem	JSpaceCtes.h	/^    double hswl,speedsystem,coefsound,speedsound;$/;"	m	struct:JSpaceCtes::StrConstants	access:public
stamp	tinyxmlparser.cpp	/^    const char*     stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
standalone	tinyxml.h	/^    TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
start	tinystr.h	/^    char* start() const { return rep_->str; }$/;"	f	class:TiXmlString	access:private	signature:() const
str	tinystr.h	/^        char str[1];$/;"	m	struct:TiXmlString::Rep	access:public
str	tinyxml.h	/^        const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
strLength	tinyxml.h	/^        unsigned int    strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
swap	tinystr.h	/^    void swap (TiXmlString& other)$/;"	f	class:TiXmlString	access:public	signature:(TiXmlString& other)
tabsize	tinyxml.h	/^    int tabsize;$/;"	m	class:TiXmlDocument	access:private
tabsize	tinyxmlparser.cpp	/^    int             tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
tau	Types.h	/^  float tau;          \/\/\/<Value of (1-poisson^2)\/young (units:-).$/;"	m	struct:__anon45	access:public
tccdriver	FunctionsCuda.h	/^  int tccdriver;       \/\/\/<CUDA Device Driver Mode (TCC or WDDM).$/;"	m	struct:fcuda::StrGpuInfo	access:public
tdouble2	TypesDef.h	/^}tdouble2;$/;"	t	typeref:struct:__anon63
tdouble3	TypesDef.h	/^}tdouble3;$/;"	t	typeref:struct:__anon64
tdouble4	TypesDef.h	/^}tdouble4;$/;"	t	typeref:struct:__anon68
tfloat2	TypesDef.h	/^}tfloat2;$/;"	t	typeref:struct:__anon61
tfloat3	TypesDef.h	/^}tfloat3;$/;"	t	typeref:struct:__anon62
tfloat4	TypesDef.h	/^}tfloat4;$/;"	t	typeref:struct:__anon67
time	JSphTimersCpu.h	/^  double time;$/;"	m	struct:__anon37	access:public
time	JSphTimersGpu.h	/^  double time;$/;"	m	struct:__anon39	access:public
time	JTimeOut.h	/^    double time;$/;"	m	struct:JTimeOut::__anon41	access:public
timer	JSphTimersCpu.h	/^  JTimer timer; \/\/JTimerClock timer;$/;"	m	struct:__anon37	access:public
timer	JSphTimersGpu.h	/^  JTimerCuda timer;$/;"	m	struct:__anon39	access:public
timesim	JSph.h	/^    double timesim;      \/\/\/<Seconds from the start of the simulation (after loading the initial data).                    | Segundos desde el inicio de la simulacion (despues de cargar los datos iniciales).$/;"	m	struct:JSph::__anon30	access:public
timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeForce::StrGaugeForceRes	access:public
timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeSwl::StrGaugeSwlRes	access:public
timestep	JGaugeItem.h	/^    double timestep;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
tini	JSaveDt.h	/^    double tini;$/;"	m	struct:JSaveDt::__anon24	access:public
tint2	TypesDef.h	/^}tint2;$/;"	t	typeref:struct:__anon57
tint3	TypesDef.h	/^}tint3;$/;"	t	typeref:struct:__anon59
tint4	TypesDef.h	/^}tint4;$/;"	t	typeref:struct:__anon65
titu	JBinaryData.h	/^    char titu[60];               \/\/\/<Title of the file eg: "#File JBinaryData".$/;"	m	struct:JBinaryData::__anon6	access:public
tmatrix3d	TypesDef.h	/^}tmatrix3d;$/;"	t	typeref:struct:__anon70
tmatrix3f	TypesDef.h	/^}tmatrix3f;$/;"	t	typeref:struct:__anon69
tmatrix4d	TypesDef.h	/^}tmatrix4d;$/;"	t	typeref:struct:__anon72
tmatrix4f	TypesDef.h	/^}tmatrix4f;$/;"	t	typeref:struct:__anon71
tout	JTimeOut.h	/^    double tout;$/;"	m	struct:JTimeOut::__anon41	access:public
tshape	JFormatFiles2.h	/^    TpShape tshape;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
tsymatrix3f	TypesDef.h	/^}tsymatrix3f;$/;"	t	typeref:struct:__anon73
tuint2	TypesDef.h	/^}tuint2;$/;"	t	typeref:struct:__anon58
tuint3	TypesDef.h	/^}tuint3;$/;"	t	typeref:struct:__anon60
tuint4	TypesDef.h	/^}tuint4;$/;"	t	typeref:struct:__anon66
type	JBinaryData.h	/^    JBinaryDataDef::TpData type;$/;"	m	struct:JBinaryData::__anon7	access:public
type	JFormatFiles2.h	/^    TpData type;$/;"	m	struct:JFormatFiles2::__anon12	access:public
type	JFormatFiles2.h	/^    TpData type;$/;"	m	struct:JFormatFiles2::__anon13	access:public
type	tinyxml.h	/^    NodeType        type;$/;"	m	class:TiXmlNode	access:protected
typecode	Types.h	/^  typedef unsigned typecode;           \/\/-Type of the variable code using 4 bytes.$/;"	t
typecode	Types.h	/^  typedef word typecode;            \/\/-Type of the variable code using 2 bytes.$/;"	t
uint32_t	randomc.h	/^  typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	randomc.h	/^  typedef unsigned int       uint32_t;$/;"	t
uint32_t	randomc.h	/^  typedef unsigned long int uint32_t;$/;"	t
uint64_t	randomc.h	/^  typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	randomc.h	/^  typedef unsigned long long uint64_t;$/;"	t
ullong	TypesDef.h	/^typedef unsigned long long ullong;$/;"	t
units	JFormatFiles2.h	/^    std::string units;$/;"	m	struct:JFormatFiles2::__anon12	access:public
unitscomment	JSpaceEParms.h	/^    std::string unitscomment;$/;"	m	struct:JSpaceEParms::__anon25	access:public
useMicrosoftBOM	tinyxml.h	/^    bool useMicrosoftBOM;       \/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
usedomain	JDamping.h	/^    bool usedomain;     \/\/\/<Indicates use of domain planes. | Indica uso de planos del dominio.$/;"	m	struct:JDamping::__anon9	access:public
userData	tinyxml.h	/^    void*           userData;$/;"	m	class:TiXmlBase	access:protected
utf8ByteTable	tinyxml.h	/^    static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
utf8ByteTable	tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
uva	FunctionsCuda.h	/^  int uva;             \/\/\/<Device supports Unified Addressing (UVA).$/;"	m	struct:fcuda::StrGpuInfo	access:public
v	FunctionsMath.h	/^  tdouble3 v; \/\/\/<Vector of rect.$/;"	m	struct:fmath::__anon2	access:public
value	JFormatFiles2.h	/^    int value;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
value	JSpaceEParms.h	/^    std::string value;$/;"	m	struct:JSpaceEParms::__anon25	access:public
value	tinyxml.h	/^    TIXML_STRING    value;$/;"	m	class:TiXmlNode	access:protected
value	tinyxml.h	/^    TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
valuef	JFormatFiles2.h	/^    float valuef;$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
vchar	JBinaryData.h	/^      char vchar;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vdouble	JBinaryData.h	/^      double vdouble;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vdouble3	JBinaryData.h	/^      tdouble3 vdouble3;   \/\/- Elemento de mayor tamaño utilizado para poner a Zero. Large item used to zero elements.$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vel	JGaugeItem.h	/^    tfloat3 vel;$/;"	m	struct:JGaugeVelocity::StrGaugeVelRes	access:public
version	tinyxml.h	/^    TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
vfloat	JBinaryData.h	/^      float vfloat;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vfloat3	JBinaryData.h	/^      tfloat3 vfloat3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vint	JBinaryData.h	/^      int vint;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vint3	JBinaryData.h	/^      tint3 vint3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vllong	JBinaryData.h	/^      llong vllong;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vmax	JSaveDt.h	/^    double vmax;$/;"	m	struct:JSaveDt::__anon24	access:public
vmean	JSaveDt.h	/^    double vmean;$/;"	m	struct:JSaveDt::__anon24	access:public
vmin	JSaveDt.h	/^    double vmin;$/;"	m	struct:JSaveDt::__anon24	access:public
void1	JBinaryData.h	/^    byte void1;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
void2	JBinaryData.h	/^    byte void2;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
void3	JBinaryData.h	/^    byte void3;                  \/\/\/<Not used.$/;"	m	struct:JBinaryData::__anon6	access:public
vpt	JFormatFiles2.h	/^    tfloat3 vpt[8];$/;"	m	struct:JFormatFiles2::StrShapeData	access:public
vshort	JBinaryData.h	/^      short vshort;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vtext	JBinaryData.h	/^    std::string vtext;$/;"	m	struct:JBinaryData::__anon7	access:public
vuchar	JBinaryData.h	/^      unsigned char vuchar;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vuint	JBinaryData.h	/^      unsigned vuint;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vuint3	JBinaryData.h	/^      tuint3 vuint3;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vullong	JBinaryData.h	/^      ullong vullong;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
vushort	JBinaryData.h	/^      unsigned vushort;$/;"	m	union:JBinaryData::__anon7::__anon8	access:public
w	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
w	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
w	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
w	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
what	JException.h	/^  virtual const char* what() const throw(){ $/;"	f	class:JException	access:public	signature:() const
word	TypesDef.h	/^typedef unsigned short word;$/;"	t
x	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
x	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
x	TypesDef.h	/^  double x,y;$/;"	m	struct:__anon63	access:public
x	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
x	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
x	TypesDef.h	/^  float x,y;$/;"	m	struct:__anon61	access:public
x	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
x	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
x	TypesDef.h	/^  int x,y;$/;"	m	struct:__anon57	access:public
x	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
x	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
x	TypesDef.h	/^  unsigned x,y;$/;"	m	struct:__anon58	access:public
x	randomc.h	/^   uint32_t x[5];                      \/\/ History buffer$/;"	m	class:CRandomMother	access:protected
xperincx	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
xperincy	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
xperincz	JSphGpu_ker.h	/^  double xperincx,xperincy,xperincz;$/;"	m	struct:__anon32	access:public
xx	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
xy	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
xz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
y	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
y	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
y	TypesDef.h	/^  double x,y;$/;"	m	struct:__anon63	access:public
y	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
y	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
y	TypesDef.h	/^  float x,y;$/;"	m	struct:__anon61	access:public
y	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
y	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
y	TypesDef.h	/^  int x,y;$/;"	m	struct:__anon57	access:public
y	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
y	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
y	TypesDef.h	/^  unsigned x,y;$/;"	m	struct:__anon58	access:public
young	Types.h	/^  float young;        \/\/\/<Young Modulus of the floating object (units:N\/m2).$/;"	m	struct:__anon45	access:public
yperincx	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
yperincy	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
yperincz	JSphGpu_ker.h	/^  double yperincx,yperincy,yperincz;$/;"	m	struct:__anon32	access:public
yy	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
yz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
z	TypesDef.h	/^  double x,y,z,w;$/;"	m	struct:__anon68	access:public
z	TypesDef.h	/^  double x,y,z;$/;"	m	struct:__anon64	access:public
z	TypesDef.h	/^  float x,y,z,w;$/;"	m	struct:__anon67	access:public
z	TypesDef.h	/^  float x,y,z;$/;"	m	struct:__anon62	access:public
z	TypesDef.h	/^  int x,y,z,w;$/;"	m	struct:__anon65	access:public
z	TypesDef.h	/^  int x,y,z;$/;"	m	struct:__anon59	access:public
z	TypesDef.h	/^  unsigned x,y,z,w;$/;"	m	struct:__anon66	access:public
z	TypesDef.h	/^  unsigned x,y,z;$/;"	m	struct:__anon60	access:public
zmax	JGaugeItem.h	/^    float zmax;$/;"	m	struct:JGaugeMaxZ::StrGaugeMaxzRes	access:public
zperincx	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
zperincy	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
zperincz	JSphGpu_ker.h	/^  double zperincx,zperincy,zperincz;$/;"	m	struct:__anon32	access:public
zz	TypesDef.h	/^  float xx,xy,xz,yy,yz,zz;$/;"	m	struct:__anon73	access:public
~JAppInfo	JAppInfo.cpp	/^JAppInfo::~JAppInfo(){$/;"	f	class:JAppInfo	signature:()
~JAppInfo	JAppInfo.h	/^  ~JAppInfo();$/;"	p	class:JAppInfo	access:public	signature:()
~JArraysCpu	JArraysCpu.cpp	/^JArraysCpu::~JArraysCpu(){$/;"	f	class:JArraysCpu	signature:()
~JArraysCpu	JArraysCpu.h	/^  ~JArraysCpu();$/;"	p	class:JArraysCpu	access:public	signature:()
~JArraysCpuSize	JArraysCpu.cpp	/^JArraysCpuSize::~JArraysCpuSize(){$/;"	f	class:JArraysCpuSize	signature:()
~JArraysCpuSize	JArraysCpu.h	/^  ~JArraysCpuSize();$/;"	p	class:JArraysCpuSize	access:public	signature:()
~JArraysGpu	JArraysGpu.cpp	/^JArraysGpu::~JArraysGpu(){$/;"	f	class:JArraysGpu	signature:()
~JArraysGpu	JArraysGpu.h	/^  ~JArraysGpu();$/;"	p	class:JArraysGpu	access:public	signature:()
~JArraysGpuSize	JArraysGpu.cpp	/^JArraysGpuSize::~JArraysGpuSize(){$/;"	f	class:JArraysGpuSize	signature:()
~JArraysGpuSize	JArraysGpu.h	/^  ~JArraysGpuSize();$/;"	p	class:JArraysGpuSize	access:public	signature:()
~JBinaryData	JBinaryData.cpp	/^JBinaryData::~JBinaryData(){$/;"	f	class:JBinaryData	signature:()
~JBinaryData	JBinaryData.h	/^  ~JBinaryData();$/;"	p	class:JBinaryData	access:public	signature:()
~JBinaryDataArray	JBinaryData.cpp	/^JBinaryDataArray::~JBinaryDataArray(){$/;"	f	class:JBinaryDataArray	signature:()
~JBinaryDataArray	JBinaryData.h	/^  ~JBinaryDataArray();$/;"	p	class:JBinaryDataArray	access:public	signature:()
~JBlockSizeAuto	JBlockSizeAuto.cpp	/^JBlockSizeAuto::~JBlockSizeAuto(){$/;"	f	class:JBlockSizeAuto	signature:()
~JBlockSizeAuto	JBlockSizeAuto.h	/^  ~JBlockSizeAuto();$/;"	p	class:JBlockSizeAuto	access:public	signature:()
~JBlockSizeAutoKer	JBlockSizeAuto.cpp	/^JBlockSizeAutoKer::~JBlockSizeAutoKer(){$/;"	f	class:JBlockSizeAutoKer	signature:()
~JBlockSizeAutoKer	JBlockSizeAuto.h	/^  ~JBlockSizeAutoKer();$/;"	p	class:JBlockSizeAutoKer	access:public	signature:()
~JCellDivCpu	JCellDivCpu.cpp	/^JCellDivCpu::~JCellDivCpu(){$/;"	f	class:JCellDivCpu	signature:()
~JCellDivCpu	JCellDivCpu.h	/^  ~JCellDivCpu();$/;"	p	class:JCellDivCpu	access:public	signature:()
~JCellDivGpu	JCellDivGpu.cpp	/^JCellDivGpu::~JCellDivGpu(){$/;"	f	class:JCellDivGpu	signature:()
~JCellDivGpu	JCellDivGpu.h	/^  ~JCellDivGpu();$/;"	p	class:JCellDivGpu	access:public	signature:()
~JDamping	JDamping.cpp	/^JDamping::~JDamping(){$/;"	f	class:JDamping	signature:()
~JDamping	JDamping.h	/^  ~JDamping();$/;"	p	class:JDamping	access:public	signature:()
~JDsphConfig	JDsphConfig.cpp	/^JDsphConfig::~JDsphConfig(){$/;"	f	class:JDsphConfig	signature:()
~JDsphConfig	JDsphConfig.h	/^  ~JDsphConfig();$/;"	p	class:JDsphConfig	access:public	signature:()
~JException	JException.h	/^  ~JException() throw(){}  \/\/\/<Destructor of objects.$/;"	f	class:JException	access:public	signature:()
~JGaugeForce	JGaugeItem.cpp	/^JGaugeForce::~JGaugeForce(){$/;"	f	class:JGaugeForce	signature:()
~JGaugeForce	JGaugeItem.h	/^  ~JGaugeForce();$/;"	p	class:JGaugeForce	access:public	signature:()
~JGaugeMaxZ	JGaugeItem.cpp	/^JGaugeMaxZ::~JGaugeMaxZ(){$/;"	f	class:JGaugeMaxZ	signature:()
~JGaugeMaxZ	JGaugeItem.h	/^  ~JGaugeMaxZ();$/;"	p	class:JGaugeMaxZ	access:public	signature:()
~JGaugeSwl	JGaugeItem.cpp	/^JGaugeSwl::~JGaugeSwl(){$/;"	f	class:JGaugeSwl	signature:()
~JGaugeSwl	JGaugeItem.h	/^  ~JGaugeSwl();$/;"	p	class:JGaugeSwl	access:public	signature:()
~JGaugeSystem	JGaugeSystem.cpp	/^JGaugeSystem::~JGaugeSystem(){$/;"	f	class:JGaugeSystem	signature:()
~JGaugeSystem	JGaugeSystem.h	/^  ~JGaugeSystem();$/;"	p	class:JGaugeSystem	access:public	signature:()
~JGaugeVelocity	JGaugeItem.cpp	/^JGaugeVelocity::~JGaugeVelocity(){$/;"	f	class:JGaugeVelocity	signature:()
~JGaugeVelocity	JGaugeItem.h	/^  ~JGaugeVelocity();$/;"	p	class:JGaugeVelocity	access:public	signature:()
~JLinearValue	JLinearValue.cpp	/^JLinearValue::~JLinearValue(){$/;"	f	class:JLinearValue	signature:()
~JLinearValue	JLinearValue.h	/^  ~JLinearValue();$/;"	p	class:JLinearValue	access:public	signature:()
~JLog2	JLog2.cpp	/^JLog2::~JLog2(){$/;"	f	class:JLog2	signature:()
~JLog2	JLog2.h	/^  ~JLog2();$/;"	p	class:JLog2	access:public	signature:()
~JMeanMoving	JMeanValues.cpp	/^JMeanMoving::~JMeanMoving(){$/;"	f	class:JMeanMoving	signature:()
~JMeanMoving	JMeanValues.h	/^  ~JMeanMoving();$/;"	p	class:JMeanMoving	access:public	signature:()
~JMotion	JMotion.cpp	/^JMotion::~JMotion(){$/;"	f	class:JMotion	signature:()
~JMotion	JMotion.h	/^  ~JMotion();$/;"	p	class:JMotion	access:public	signature:()
~JMotionDataFile	JMotionMov.cpp	/^JMotionDataFile::~JMotionDataFile(){$/;"	f	class:JMotionDataFile	signature:()
~JMotionDataFile	JMotionMov.h	/^  ~JMotionDataFile();$/;"	p	class:JMotionDataFile	access:public	signature:()
~JMotionList	JMotionList.cpp	/^JMotionList::~JMotionList(){$/;"	f	class:JMotionList	signature:()
~JMotionList	JMotionList.h	/^  ~JMotionList();$/;"	p	class:JMotionList	access:public	signature:()
~JMotionMov	JMotionMov.h	/^  virtual ~JMotionMov(){ DestructorActive=true; \/*printf("del JMotionMov\\n");*\/  }$/;"	f	class:JMotionMov	access:public	signature:()
~JMotionMovActive	JMotionObj.cpp	/^JMotionMovActive::~JMotionMovActive(){$/;"	f	class:JMotionMovActive	signature:()
~JMotionMovActive	JMotionObj.h	/^  ~JMotionMovActive();$/;"	p	class:JMotionMovActive	access:public	signature:()
~JMotionMovRectFile	JMotionMov.h	/^  ~JMotionMovRectFile(){ DestructorActive=true; delete DataFile; DataFile=NULL;  }$/;"	f	class:JMotionMovRectFile	access:public	signature:()
~JMotionMovRotFile	JMotionMov.h	/^  ~JMotionMovRotFile(){ DestructorActive=true; delete DataFile; DataFile=NULL;  }$/;"	f	class:JMotionMovRotFile	access:public	signature:()
~JMotionObj	JMotionObj.cpp	/^JMotionObj::~JMotionObj(){$/;"	f	class:JMotionObj	signature:()
~JMotionObj	JMotionObj.h	/^  ~JMotionObj();$/;"	p	class:JMotionObj	access:public	signature:()
~JPartDataBi4	JPartDataBi4.cpp	/^JPartDataBi4::~JPartDataBi4(){$/;"	f	class:JPartDataBi4	signature:()
~JPartDataBi4	JPartDataBi4.h	/^  ~JPartDataBi4();$/;"	p	class:JPartDataBi4	access:public	signature:()
~JPartDataHead	JPartDataHead.cpp	/^JPartDataHead::~JPartDataHead(){$/;"	f	class:JPartDataHead	signature:()
~JPartDataHead	JPartDataHead.h	/^  ~JPartDataHead();$/;"	p	class:JPartDataHead	access:public	signature:()
~JPartFloatBi4Load	JPartFloatBi4.cpp	/^JPartFloatBi4Load::~JPartFloatBi4Load(){$/;"	f	class:JPartFloatBi4Load	signature:()
~JPartFloatBi4Load	JPartFloatBi4.h	/^  ~JPartFloatBi4Load();$/;"	p	class:JPartFloatBi4Load	access:public	signature:()
~JPartFloatBi4Save	JPartFloatBi4.cpp	/^JPartFloatBi4Save::~JPartFloatBi4Save(){$/;"	f	class:JPartFloatBi4Save	signature:()
~JPartFloatBi4Save	JPartFloatBi4.h	/^  ~JPartFloatBi4Save();$/;"	p	class:JPartFloatBi4Save	access:public	signature:()
~JPartOutBi4Save	JPartOutBi4Save.cpp	/^JPartOutBi4Save::~JPartOutBi4Save(){$/;"	f	class:JPartOutBi4Save	signature:()
~JPartOutBi4Save	JPartOutBi4Save.h	/^  ~JPartOutBi4Save();$/;"	p	class:JPartOutBi4Save	access:public	signature:()
~JPartsLoad4	JPartsLoad4.cpp	/^JPartsLoad4::~JPartsLoad4(){$/;"	f	class:JPartsLoad4	signature:()
~JPartsLoad4	JPartsLoad4.h	/^  ~JPartsLoad4();$/;"	p	class:JPartsLoad4	access:public	signature:()
~JPartsOut	JPartsOut.cpp	/^JPartsOut::~JPartsOut(){$/;"	f	class:JPartsOut	signature:()
~JPartsOut	JPartsOut.h	/^  ~JPartsOut();$/;"	p	class:JPartsOut	access:public	signature:()
~JRadixSort	JRadixSort.cpp	/^JRadixSort::~JRadixSort(){$/;"	f	class:JRadixSort	signature:()
~JRadixSort	JRadixSort.h	/^  ~JRadixSort();$/;"	p	class:JRadixSort	access:public	signature:()
~JRangeFilter	JRangeFilter.h	/^  ~JRangeFilter(){ DestructorActive=true; Reset(); }$/;"	f	class:JRangeFilter	access:public	signature:()
~JReadDatafile	JReadDatafile.cpp	/^JReadDatafile::~JReadDatafile(){$/;"	f	class:JReadDatafile	signature:()
~JReadDatafile	JReadDatafile.h	/^  ~JReadDatafile();$/;"	p	class:JReadDatafile	access:public	signature:()
~JSaveCsv2	JSaveCsv2.cpp	/^JSaveCsv2::~JSaveCsv2(){ $/;"	f	class:jcsv::JSaveCsv2	signature:()
~JSaveCsv2	JSaveCsv2.h	/^  ~JSaveCsv2();$/;"	p	class:jcsv::JSaveCsv2	access:public	signature:()
~JSaveDt	JSaveDt.cpp	/^JSaveDt::~JSaveDt(){$/;"	f	class:JSaveDt	signature:()
~JSaveDt	JSaveDt.h	/^  ~JSaveDt();$/;"	p	class:JSaveDt	access:public	signature:()
~JSpaceEParms	JSpaceEParms.cpp	/^JSpaceEParms::~JSpaceEParms(){$/;"	f	class:JSpaceEParms	signature:()
~JSpaceEParms	JSpaceEParms.h	/^  ~JSpaceEParms();$/;"	p	class:JSpaceEParms	access:public	signature:()
~JSpacePartBlock	JSpaceParts.h	/^  virtual ~JSpacePartBlock(){ DestructorActive=true; }$/;"	f	class:JSpacePartBlock	access:public	signature:()
~JSpaceParts	JSpaceParts.cpp	/^JSpaceParts::~JSpaceParts(){$/;"	f	class:JSpaceParts	signature:()
~JSpaceParts	JSpaceParts.h	/^  ~JSpaceParts();$/;"	p	class:JSpaceParts	access:public	signature:()
~JSpacePartsGetMk	JSpaceParts.cpp	/^JSpacePartsGetMk::~JSpacePartsGetMk(){$/;"	f	class:JSpacePartsGetMk	signature:()
~JSpacePartsGetMk	JSpaceParts.h	/^  ~JSpacePartsGetMk();$/;"	p	class:JSpacePartsGetMk	access:public	signature:()
~JSpacePropLinks	JSpaceProperties.cpp	/^JSpacePropLinks::~JSpacePropLinks(){$/;"	f	class:JSpacePropLinks	signature:()
~JSpacePropLinks	JSpaceProperties.h	/^  ~JSpacePropLinks();$/;"	p	class:JSpacePropLinks	access:public	signature:()
~JSpacePropProperty	JSpaceProperties.cpp	/^JSpacePropProperty::~JSpacePropProperty(){$/;"	f	class:JSpacePropProperty	signature:()
~JSpacePropProperty	JSpaceProperties.h	/^  ~JSpacePropProperty();$/;"	p	class:JSpacePropProperty	access:public	signature:()
~JSpacePropValue	JSpaceProperties.cpp	/^JSpacePropValue::~JSpacePropValue(){$/;"	f	class:JSpacePropValue	signature:()
~JSpacePropValue	JSpaceProperties.h	/^  ~JSpacePropValue();$/;"	p	class:JSpacePropValue	access:public	signature:()
~JSpaceProperties	JSpaceProperties.cpp	/^JSpaceProperties::~JSpaceProperties(){$/;"	f	class:JSpaceProperties	signature:()
~JSpaceProperties	JSpaceProperties.h	/^  ~JSpaceProperties();$/;"	p	class:JSpaceProperties	access:public	signature:()
~JSpaceVtkOut	JSpaceVtkOut.cpp	/^JSpaceVtkOut::~JSpaceVtkOut(){$/;"	f	class:JSpaceVtkOut	signature:()
~JSpaceVtkOut	JSpaceVtkOut.h	/^  ~JSpaceVtkOut();$/;"	p	class:JSpaceVtkOut	access:public	signature:()
~JSpaceVtkOutFile	JSpaceVtkOut.cpp	/^JSpaceVtkOutFile::~JSpaceVtkOutFile(){$/;"	f	class:JSpaceVtkOutFile	signature:()
~JSpaceVtkOutFile	JSpaceVtkOut.h	/^  ~JSpaceVtkOutFile();$/;"	p	class:JSpaceVtkOutFile	access:public	signature:()
~JSph	JSph.cpp	/^JSph::~JSph(){$/;"	f	class:JSph	signature:()
~JSph	JSph.h	/^  ~JSph();$/;"	p	class:JSph	access:public	signature:()
~JSphAccInput	JSphAccInput.cpp	/^JSphAccInput::~JSphAccInput(){$/;"	f	class:JSphAccInput	signature:()
~JSphAccInput	JSphAccInput.h	/^  ~JSphAccInput();$/;"	p	class:JSphAccInput	access:public	signature:()
~JSphAccInputMk	JSphAccInput.cpp	/^JSphAccInputMk::~JSphAccInputMk(){$/;"	f	class:JSphAccInputMk	signature:()
~JSphAccInputMk	JSphAccInput.h	/^  ~JSphAccInputMk();$/;"	p	class:JSphAccInputMk	access:public	signature:()
~JSphCpu	JSphCpu.cpp	/^JSphCpu::~JSphCpu(){$/;"	f	class:JSphCpu	signature:()
~JSphCpu	JSphCpu.h	/^  ~JSphCpu();$/;"	p	class:JSphCpu	access:public	signature:()
~JSphCpuSingle	JSphCpuSingle.cpp	/^JSphCpuSingle::~JSphCpuSingle(){$/;"	f	class:JSphCpuSingle	signature:()
~JSphCpuSingle	JSphCpuSingle.h	/^  ~JSphCpuSingle();$/;"	p	class:JSphCpuSingle	access:public	signature:()
~JSphDtFixed	JSphDtFixed.cpp	/^JSphDtFixed::~JSphDtFixed(){$/;"	f	class:JSphDtFixed	signature:()
~JSphDtFixed	JSphDtFixed.h	/^  ~JSphDtFixed();$/;"	p	class:JSphDtFixed	access:public	signature:()
~JSphGpu	JSphGpu.cpp	/^JSphGpu::~JSphGpu(){$/;"	f	class:JSphGpu	signature:()
~JSphGpu	JSphGpu.h	/^  ~JSphGpu();$/;"	p	class:JSphGpu	access:public	signature:()
~JSphGpuSingle	JSphGpuSingle.cpp	/^JSphGpuSingle::~JSphGpuSingle(){$/;"	f	class:JSphGpuSingle	signature:()
~JSphGpuSingle	JSphGpuSingle.h	/^  ~JSphGpuSingle();$/;"	p	class:JSphGpuSingle	access:public	signature:()
~JSphInitialize	JSphInitialize.cpp	/^JSphInitialize::~JSphInitialize(){$/;"	f	class:JSphInitialize	signature:()
~JSphInitialize	JSphInitialize.h	/^  ~JSphInitialize();$/;"	p	class:JSphInitialize	access:public	signature:()
~JSphInitializeOp	JSphInitialize.h	/^  virtual ~JSphInitializeOp(){ DestructorActive=true; }$/;"	f	class:JSphInitializeOp	access:public	signature:()
~JSphMk	JSphMk.cpp	/^JSphMk::~JSphMk(){$/;"	f	class:JSphMk	signature:()
~JSphMk	JSphMk.h	/^  ~JSphMk();$/;"	p	class:JSphMk	access:public	signature:()
~JSphMotion	JSphMotion.cpp	/^JSphMotion::~JSphMotion(){$/;"	f	class:JSphMotion	signature:()
~JSphMotion	JSphMotion.h	/^  ~JSphMotion();$/;"	p	class:JSphMotion	access:public	signature:()
~JSphPartsInit	JSphPartsInit.cpp	/^JSphPartsInit::~JSphPartsInit(){$/;"	f	class:JSphPartsInit	signature:()
~JSphPartsInit	JSphPartsInit.h	/^  ~JSphPartsInit();$/;"	p	class:JSphPartsInit	access:public	signature:()
~JSphVisco	JSphVisco.cpp	/^JSphVisco::~JSphVisco(){$/;"	f	class:JSphVisco	signature:()
~JSphVisco	JSphVisco.h	/^  ~JSphVisco();$/;"	p	class:JSphVisco	access:public	signature:()
~JTimeOut	JTimeOut.cpp	/^JTimeOut::~JTimeOut(){$/;"	f	class:JTimeOut	signature:()
~JTimeOut	JTimeOut.h	/^  ~JTimeOut();$/;"	p	class:JTimeOut	access:public	signature:()
~JTimerCuda	JTimerCuda.h	/^  ~JTimerCuda(){ Reset(); }$/;"	f	class:JTimerCuda	access:public	signature:()
~JWaveGen	JWaveGen.h	/^  ~JWaveGen();$/;"	p	class:JWaveGen	access:public	signature:()
~JWaveSpectrumGpu	JWaveSpectrumGpu.h	/^  ~JWaveSpectrumGpu(){ DestructorActive=true; FreeMemoryGpu(); }$/;"	f	class:JWaveSpectrumGpu	access:public	signature:()
~JXml	JXml.cpp	/^JXml::~JXml(){$/;"	f	class:JXml	signature:()
~JXml	JXml.h	/^  ~JXml();$/;"	p	class:JXml	access:public	signature:()
~TiXmlAttributeSet	tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
~TiXmlAttributeSet	tinyxml.h	/^    ~TiXmlAttributeSet();$/;"	p	class:TiXmlAttributeSet	access:public	signature:()
~TiXmlBase	tinyxml.h	/^    virtual ~TiXmlBase()            {}$/;"	f	class:TiXmlBase	access:public	signature:()
~TiXmlComment	tinyxml.h	/^    virtual ~TiXmlComment() {}$/;"	f	class:TiXmlComment	access:public	signature:()
~TiXmlDeclaration	tinyxml.h	/^    virtual ~TiXmlDeclaration() {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
~TiXmlDocument	tinyxml.h	/^    virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
~TiXmlElement	tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
~TiXmlElement	tinyxml.h	/^    virtual ~TiXmlElement();$/;"	p	class:TiXmlElement	access:public	signature:()
~TiXmlNode	tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
~TiXmlNode	tinyxml.h	/^    virtual ~TiXmlNode();$/;"	p	class:TiXmlNode	access:public	signature:()
~TiXmlString	tinystr.h	/^    ~TiXmlString ()$/;"	f	class:TiXmlString	access:public	signature:()
~TiXmlText	tinyxml.h	/^    virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
~TiXmlUnknown	tinyxml.h	/^    virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
~TiXmlVisitor	tinyxml.h	/^    virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
